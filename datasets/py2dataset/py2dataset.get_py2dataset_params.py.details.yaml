file_info:
  file_code: "\"\"\"\nObtain data parameter and model from the py2dataset functions.\n\
    Requirements:\n[req01] The `get_default_questions` function shall:\n        a.\
    \ Return a list of default questions.\n        b. Ensure each question in the\
    \ list is a dictionary.\n        c. Ensure each dictionary has the keys: id, text,\
    \ and type.\n[req02] The `get_default_model_config` function shall:\n        a.\
    \ Return a dictionary representing the default model configuration.\n[req03] The\
    \ `get_output_dir` function shall:\n        a. Accept an optional output_dir argument.\n\
    \        b. Return the absolute path of the provided output_dir if it exists or\
    \ can be created.\n        c. Return the default OUTPUT_DIR if the provided output_dir\
    \ argument is not provided or invalid.\n[req04] The `get_questions` function shall:\n\
    \        a. Accept an optional questions_pathname argument.\n        b. Validate\
    \ the question file provided by the questions_pathname.\n        c. Return the\
    \ questions from the provided questions_pathname if valid.\n        d. Return\
    \ default questions if the questions_pathname is not provided or invalid.\n[req05]\
    \ The `instantiate_model` function shall:\n        a. Accept a model_config dictionary\
    \ as an argument.\n        b. Import the specified module and class from the model_config.\n\
    \        c. Instantiate and return the model using the provided configuration.\n\
    [req06] The `get_model` function shall:\n        a. Accept an optional model_config_pathname\
    \ argument.\n        b. Validate the model config file provided by the model_config_pathname.\n\
    \        c. Return an instantiated model and a prompt template based on the provided\
    \ configuration.\n        d. Return an instantiated model and a prompt template\
    \ based on the default model configuration if the model_config_pathname is not\
    \ provided or invalid.\n[req07] The `write_questions_file` function shall:\n \
    \       a. Accept an optional output_dir argument.\n        b. Write the default\
    \ questions to the QUESTIONS_FILE in the specified directory.\n        c. Write\
    \ the default questions to the QUESTIONS_FILE in the current working directory\
    \ if the output_dir argument is not provided or invalid.\n[req08] The `write_model_config_file`\
    \ function shall:\n        a. Accept an optional output_dir argument.\n      \
    \  b. Write the default model configuration to the MODEL_CONFIG_FILE in the specified\
    \ directory.\n        c. Write the default model configuration to the MODEL_CONFIG_FILE\
    \ in the current working directory if the output_dir argument is not provided\
    \ or invalid.\n\"\"\"\nimport os\nimport json\nimport logging\nimport yaml\nimport\
    \ importlib\nfrom typing import Dict, List \nfrom pathlib import Path\n\n# Setting\
    \ up a basic logger\nlogging.basicConfig(level=logging.INFO)\n\nQUESTIONS_FILE\
    \ = 'py2dataset_questions.json'\nMODEL_CONFIG_FILE = 'py2dataset_model_config.yaml'\n\
    OUTPUT_DIR = 'datasets'\n\ndef get_default_questions() -> List[Dict]:\n    \"\"\
    \"Return default question list\n    Args:\n        None\n    Returns:\n      \
    \  List[Dict]: The default question list\n    \"\"\"\n    questions = [\n    \
    \    {\n            \"id\": \"file_dependencies\",\n            \"text\": \"What\
    \ are the dependencies of the Python file: '{filename}'?\",\n            \"type\"\
    : \"file\"\n        },\n        {\n            \"id\": \"internal_code_graph\"\
    ,\n            \"text\": \"What is the call code graph of the Python file: '{filename}'?\"\
    ,\n            \"type\": \"file\"\n        },\n        {\n            \"id\":\
    \ \"entire_code_graph\",\n            \"text\": \"What are the structural relationships\
    \ between the functions and classes defined and used in the Python file: '{filename}'?\"\
    ,\n            \"type\": \"file\"\n        },\n        {\n            \"id\":\
    \ \"file_functions\",\n            \"text\": \"What functions are defined in the\
    \ Python file: '{filename}'?\",\n            \"type\": \"file\"\n        },  \
    \    \n        {\n            \"id\": \"file_classes\",\n            \"text\"\
    : \"What classes are defined in the Python file: '{filename}'?\",\n          \
    \  \"type\": \"file\"\n        },\n        {\n            \"id\": \"function_inputs\"\
    ,\n            \"text\": \"What are the inputs to the function: '{function_name}'\
    \ in the Python file: '{filename}'?\",\n            \"type\": \"function\"\n \
    \       },\n        {\n            \"id\": \"function_docstring\",\n         \
    \   \"text\": \"What is the docstring of the function: '{function_name}' in the\
    \ Python file: '{filename}'?\",\n            \"type\": \"function\"\n        },\n\
    \        {\n            \"id\": \"function_calls\",\n            \"text\": \"\
    What calls are made in the function: '{function_name}' in the Python file: '{filename}'?\"\
    ,\n            \"type\": \"function\"\n        },\n        {\n            \"id\"\
    : \"function_variables\",\n            \"text\": \"What variables are defined\
    \ in the function: '{function_name}' in the Python file: '{filename}'?\",\n  \
    \          \"type\": \"function\"\n        }, \n        {\n            \"id\"\
    : \"function_returns\",\n            \"text\": \"What are the returned items from\
    \ the function: '{function_name}' in the Python file: '{filename}'?\",\n     \
    \       \"type\": \"function\"\n        },\n        {\n            \"id\": \"\
    class_methods\",\n            \"text\": \"What are the methods defined within\
    \ the class: '{class_name}' in the Python file: '{filename}'?\",\n           \
    \ \"type\": \"class\"\n        },\n        {\n            \"id\": \"class_docstring\"\
    ,\n            \"text\": \"What is the docstring of the class: '{class_name}'\
    \ in the Python file: '{filename}'?\",\n            \"type\": \"class\"\n    \
    \    },\n        {\n            \"id\": \"class_attributes\",\n            \"\
    text\": \"What are the attributes of the class: '{class_name}' in the Python file:\
    \ '{filename}'?\",\n            \"type\": \"class\"\n        },\n        {\n \
    \           \"id\": \"class_variables\",\n            \"text\": \"What variables\
    \ are defined in the class: '{class_name}' in the Python file: '{filename}'?\"\
    ,\n            \"type\": \"class\"\n        },\n        {\n            \"id\"\
    : \"class_inheritance\",\n            \"text\": \"What is the Inheritance of the\
    \ class: '{class_name}' in the Python file: '{filename}'?\",\n            \"type\"\
    : \"class\"\n        },\n        {\n            \"id\": \"method_inputs\",\n \
    \           \"text\": \"What are the inputs to method: '{method_name}' in the\
    \ class: '{class_name}' in the Python file: '{filename}'?\",\n            \"type\"\
    : \"method\"\n        },\n        {\n            \"id\": \"method_docstring\"\
    ,\n            \"text\": \"What is the docstring of the method: '{method_name}'\
    \ in the class: '{class_name}' in the Python file: '{filename}'?\",\n        \
    \    \"type\": \"method\"\n        },\n        {\n            \"id\": \"method_calls\"\
    ,\n            \"text\": \"What calls are made in the method: '{method_name}'\
    \ in the class: '{class_name}' in the Python file: '{filename}'?\",\n        \
    \    \"type\": \"method\"\n        },\n        {\n            \"id\": \"method_returns\"\
    ,\n            \"text\": \"What are the returns from the method: '{method_name}'\
    \ in the class: '{class_name}' in the Python file: '{filename}'?\",\n        \
    \    \"type\": \"method\"\n        },\n        {   \n            \"id\": \"file_purpose\"\
    ,\n            \"text\": \"1) Describe the purpose and processing summary of the\
    \ Python file: '{filename}; 2) Provide an itemized detailed description of each\
    \ applicable function, class, and method; 3) Explain what each of input, output,\
    \ and variable do within the file.\",\n            \"type\": \"file\"\n      \
    \  }\n    ]\n    return questions\n\n\ndef get_default_model_config() -> Dict:\n\
    \    \"\"\"Return default model config dict\n    Args:\n        None\n    Returns:\n\
    \        Dict: The default model config dictionary\n    \"\"\"\n    model_config\
    \ = {\n        \"prompt_template\": \"\\n### Instruction:\\nGiven this context:\\\
    n'{context}'\\nPlease analyze this code you created provide a comprehensive response\
    \ without duplicating the input code, include enough detail for me to implement\
    \ the same logic, and include your reasoning step by step: {query}\\n### Response:\"\
    ,\n        \"inference_model\": {\n            \"model_import_path\": \"ctransformers.AutoModelForCausalLM\"\
    ,\n            \"model_inference_function\": \"from_pretrained\",\n          \
    \  \"model_params\": {\n                \"model_path\": \"TheBloke/WizardCoder-Python-13B-V1.0-GGUF\"\
    ,  \n                \"model_type\": \"llama\",\n                \"local_files_only\"\
    : False,\n                ## MODEL CONFIGURATION PARAMETERS (GPU 4090 - 24GB VRAM,\
    \ CPU 5950x - 32 threads, 64GB RAM)\n                #avx2 and gpu_layers are\
    \ not compatible \n                #\"lib\": \"avx2\",\n                \"threads\"\
    : 28,\n                \"batch_size\": 128,\n                \"context_length\"\
    : 8400,\n                \"max_new_tokens\": 8092,\n                \"gpu_layers\"\
    : 100,\n                \"reset\": True\n                }\n            }\n  \
    \      }\n    return model_config\n\n\ndef get_output_dir(output_dir: str='')\
    \ -> str:\n    \"\"\"Returns the appropriate output directory.\n    Args:\n  \
    \      output_dir (str): The directory to write the output to.\n    Returns:\n\
    \        str: The absolute path of the provided output_dir if it exists or can\
    \ be created.\n    \"\"\"\n    output_dir = os.path.abspath(output_dir or OUTPUT_DIR)\n\
    \    os.makedirs(output_dir, exist_ok=True)\n    logging.info(f'Using output directory:\
    \ {output_dir}')\n    return output_dir\n\n\ndef get_questions(questions_pathname:\
    \ str) -> List[Dict]:\n    \"\"\"\n    Get questions from file or default\n  \
    \  Args:\n        questions_pathname (str): The pathname of the questions file\n\
    \    Returns:\n        List[Dict]: The list of questions\n    \"\"\"\n    try:\
    \ # get questions from provided or default configuration file\n        if not\
    \ questions_pathname:\n            questions_pathname = os.path.join(os.getcwd(),\
    \ QUESTIONS_FILE)\n        with open(questions_pathname, 'r') as f:\n        \
    \    questions = json.load(f)\n        logging.info(f'Using questions from file:\
    \ {questions_pathname}')\n    except: # get default questions if can't read questions_pathname\
    \ file \n        logging.info(f'Questions file not valid: {questions_pathname}\
    \ Using default questions')\n        questions = get_default_questions()\n   \
    \ return questions\n\n\ndef instantiate_model(model_config: Dict) -> object:\n\
    \    \"\"\"\n    Imports and instantiates a model based on the provided configuration.\n\
    \    Args:\n        model_config (dict): model configuration dictionary.\n   \
    \ Returns:\n        object: An instance of the specified model class, or None\
    \ if error.\n    \"\"\"\n    try:\n        module_name, class_name = model_config['model_import_path'].rsplit('.',\
    \ 1)\n        ModelClass = getattr(importlib.import_module(module_name), class_name)\n\
    \        model_params = model_config['model_params']\n        inference_function_name\
    \ = model_config['model_inference_function']\n        if inference_function_name\
    \ != \"\": \n            inference_function = getattr(ModelClass, inference_function_name)\n\
    \            model = inference_function(model_params.pop('model_path'), **model_params)\n\
    \        else: \n            model = ModelClass(model_params.pop('model_path'),\
    \ **model_params)\n        return model\n    except ImportError or AttributeError\
    \ or Exception as e:\n        logging.info(f\"Failed to instantiate the model.\
    \ Error: {e}\")    \n        return None\n\n\ndef get_model(model_config_pathname:\
    \ str) -> tuple[object, str]:\n    \"\"\"\n    Returns an instantiated model and\
    \ prompt template based on the model configuration.\n    Agrs:\n        model_config_pathname\
    \ (str): The pathname of the model config file\n    Returns:\n        Tuple[object,\
    \ str]: The instantiated model and prompt template \n    \"\"\"\n    try:\n  \
    \      if not model_config_pathname:\n            model_config_pathname = os.path.join(os.getcwd(),\
    \ MODEL_CONFIG_FILE)\n        with open(model_config_pathname, 'r') as config_file:\n\
    \            model_config = yaml.safe_load(config_file)\n        logging.info(f'Using\
    \ model config from file: {model_config_pathname}')\n    except:\n        logging.info(f'Model\
    \ config file not valid: {model_config_pathname} Using default model config')\n\
    \        model_config = get_default_model_config()\n    return instantiate_model(model_config['inference_model']),\
    \ model_config['prompt_template']\n\n\ndef write_questions_file(output_dir: str='')\
    \ -> None:\n    \"\"\"\n    Writes the default questions to a file in JSON format.\n\
    \    Args:\n        output_dir (str): The directory to write the questions file\
    \ to.\n    Returns:\n        None\n    \"\"\"\n    questions = get_default_questions()\n\
    \    output_dir = output_dir if output_dir and Path(output_dir).is_dir() else\
    \ os.getcwd()\n    with open(os.path.join(output_dir, QUESTIONS_FILE), 'w') as\
    \ file:\n        json.dump(questions, file, indent=4)\n\n\ndef write_model_config_file(output_dir:\
    \ str='') -> None:\n    \"\"\"\n    Writes the default model config to a file\
    \ in YAML format.\n    Args:\n        output_dir (str): The directory to write\
    \ the model config file to.\n    Returns:\n        None\n    \"\"\"\n    model_config\
    \ = get_default_model_config()\n    output_dir = output_dir if output_dir and\
    \ Path(output_dir).is_dir() else os.getcwd()\n    with open(os.path.join(output_dir,\
    \ MODEL_CONFIG_FILE), 'w') as file:\n        yaml.dump(model_config, file)\n"
  file_ast: 'Module(body=[Expr(value=Constant(value=''\nObtain data parameter and
    model from the py2dataset functions.\nRequirements:\n[req01] The `get_default_questions`
    function shall:\n        a. Return a list of default questions.\n        b. Ensure
    each question in the list is a dictionary.\n        c. Ensure each dictionary
    has the keys: id, text, and type.\n[req02] The `get_default_model_config` function
    shall:\n        a. Return a dictionary representing the default model configuration.\n[req03]
    The `get_output_dir` function shall:\n        a. Accept an optional output_dir
    argument.\n        b. Return the absolute path of the provided output_dir if it
    exists or can be created.\n        c. Return the default OUTPUT_DIR if the provided
    output_dir argument is not provided or invalid.\n[req04] The `get_questions` function
    shall:\n        a. Accept an optional questions_pathname argument.\n        b.
    Validate the question file provided by the questions_pathname.\n        c. Return
    the questions from the provided questions_pathname if valid.\n        d. Return
    default questions if the questions_pathname is not provided or invalid.\n[req05]
    The `instantiate_model` function shall:\n        a. Accept a model_config dictionary
    as an argument.\n        b. Import the specified module and class from the model_config.\n        c.
    Instantiate and return the model using the provided configuration.\n[req06] The
    `get_model` function shall:\n        a. Accept an optional model_config_pathname
    argument.\n        b. Validate the model config file provided by the model_config_pathname.\n        c.
    Return an instantiated model and a prompt template based on the provided configuration.\n        d.
    Return an instantiated model and a prompt template based on the default model
    configuration if the model_config_pathname is not provided or invalid.\n[req07]
    The `write_questions_file` function shall:\n        a. Accept an optional output_dir
    argument.\n        b. Write the default questions to the QUESTIONS_FILE in the
    specified directory.\n        c. Write the default questions to the QUESTIONS_FILE
    in the current working directory if the output_dir argument is not provided or
    invalid.\n[req08] The `write_model_config_file` function shall:\n        a. Accept
    an optional output_dir argument.\n        b. Write the default model configuration
    to the MODEL_CONFIG_FILE in the specified directory.\n        c. Write the default
    model configuration to the MODEL_CONFIG_FILE in the current working directory
    if the output_dir argument is not provided or invalid.\n'')), Import(names=[alias(name=''os'')]),
    Import(names=[alias(name=''json'')]), Import(names=[alias(name=''logging'')]),
    Import(names=[alias(name=''yaml'')]), Import(names=[alias(name=''importlib'')]),
    ImportFrom(module=''typing'', names=[alias(name=''Dict''), alias(name=''List'')],
    level=0), ImportFrom(module=''pathlib'', names=[alias(name=''Path'')], level=0),
    Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''basicConfig'',
    ctx=Load()), args=[], keywords=[keyword(arg=''level'', value=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''INFO'', ctx=Load()))])), Assign(targets=[Name(id=''QUESTIONS_FILE'',
    ctx=Store())], value=Constant(value=''py2dataset_questions.json'')), Assign(targets=[Name(id=''MODEL_CONFIG_FILE'',
    ctx=Store())], value=Constant(value=''py2dataset_model_config.yaml'')), Assign(targets=[Name(id=''OUTPUT_DIR'',
    ctx=Store())], value=Constant(value=''datasets'')), FunctionDef(name=''get_default_questions'',
    args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''Return default question list\n    Args:\n        None\n    Returns:\n        List[Dict]:
    The default question list\n    '')), Assign(targets=[Name(id=''questions'', ctx=Store())],
    value=List(elts=[Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''file_dependencies''), Constant(value="What
    are the dependencies of the Python file: ''{filename}''?"), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''internal_code_graph''), Constant(value="What is the call
    code graph of the Python file: ''{filename}''?"), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''entire_code_graph''), Constant(value="What are the structural
    relationships between the functions and classes defined and used in the Python
    file: ''{filename}''?"), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''file_functions''),
    Constant(value="What functions are defined in the Python file: ''{filename}''?"),
    Constant(value=''file'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''file_classes''), Constant(value="What
    classes are defined in the Python file: ''{filename}''?"), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_inputs''), Constant(value="What are the inputs
    to the function: ''{function_name}'' in the Python file: ''{filename}''?"), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_docstring''), Constant(value="What is the docstring
    of the function: ''{function_name}'' in the Python file: ''{filename}''?"), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_calls''), Constant(value="What calls are made
    in the function: ''{function_name}'' in the Python file: ''{filename}''?"), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_variables''), Constant(value="What variables
    are defined in the function: ''{function_name}'' in the Python file: ''{filename}''?"),
    Constant(value=''function'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''function_returns''), Constant(value="What
    are the returned items from the function: ''{function_name}'' in the Python file:
    ''{filename}''?"), Constant(value=''function'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_methods''),
    Constant(value="What are the methods defined within the class: ''{class_name}''
    in the Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_docstring''),
    Constant(value="What is the docstring of the class: ''{class_name}'' in the Python
    file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_attributes''),
    Constant(value="What are the attributes of the class: ''{class_name}'' in the
    Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_variables''),
    Constant(value="What variables are defined in the class: ''{class_name}'' in the
    Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_inheritance''),
    Constant(value="What is the Inheritance of the class: ''{class_name}'' in the
    Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''method_inputs''),
    Constant(value="What are the inputs to method: ''{method_name}'' in the class:
    ''{class_name}'' in the Python file: ''{filename}''?"), Constant(value=''method'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''method_docstring''), Constant(value="What is the docstring
    of the method: ''{method_name}'' in the class: ''{class_name}'' in the Python
    file: ''{filename}''?"), Constant(value=''method'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''method_calls''),
    Constant(value="What calls are made in the method: ''{method_name}'' in the class:
    ''{class_name}'' in the Python file: ''{filename}''?"), Constant(value=''method'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''method_returns''), Constant(value="What are the returns
    from the method: ''{method_name}'' in the class: ''{class_name}'' in the Python
    file: ''{filename}''?"), Constant(value=''method'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''file_purpose''),
    Constant(value="1) Describe the purpose and processing summary of the Python file:
    ''{filename}; 2) Provide an itemized detailed description of each applicable function,
    class, and method; 3) Explain what each of input, output, and variable do within
    the file."), Constant(value=''file'')])], ctx=Load())), Return(value=Name(id=''questions'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''get_default_model_config'',
    args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''Return default model config dict\n    Args:\n        None\n    Returns:\n        Dict:
    The default model config dictionary\n    '')), Assign(targets=[Name(id=''model_config'',
    ctx=Store())], value=Dict(keys=[Constant(value=''prompt_template''), Constant(value=''inference_model'')],
    values=[Constant(value="\n### Instruction:\nGiven this context:\n''{context}''\nPlease
    analyze this code you created provide a comprehensive response without duplicating
    the input code, include enough detail for me to implement the same logic, and
    include your reasoning step by step: {query}\n### Response:"), Dict(keys=[Constant(value=''model_import_path''),
    Constant(value=''model_inference_function''), Constant(value=''model_params'')],
    values=[Constant(value=''ctransformers.AutoModelForCausalLM''), Constant(value=''from_pretrained''),
    Dict(keys=[Constant(value=''model_path''), Constant(value=''model_type''), Constant(value=''local_files_only''),
    Constant(value=''threads''), Constant(value=''batch_size''), Constant(value=''context_length''),
    Constant(value=''max_new_tokens''), Constant(value=''gpu_layers''), Constant(value=''reset'')],
    values=[Constant(value=''TheBloke/WizardCoder-Python-13B-V1.0-GGUF''), Constant(value=''llama''),
    Constant(value=False), Constant(value=28), Constant(value=128), Constant(value=8400),
    Constant(value=8092), Constant(value=100), Constant(value=True)])])])), Return(value=Name(id=''model_config'',
    ctx=Load()))], decorator_list=[], returns=Name(id=''Dict'', ctx=Load())), FunctionDef(name=''get_output_dir'',
    args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''Returns the appropriate output directory.\n    Args:\n        output_dir
    (str): The directory to write the output to.\n    Returns:\n        str: The absolute
    path of the provided output_dir if it exists or can be created.\n    '')), Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''abspath'', ctx=Load()), args=[BoolOp(op=Or(),
    values=[Name(id=''output_dir'', ctx=Load()), Name(id=''OUTPUT_DIR'', ctx=Load())])],
    keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''makedirs'', ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[keyword(arg=''exist_ok'',
    value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using
    output directory: ''), FormattedValue(value=Name(id=''output_dir'', ctx=Load()),
    conversion=-1)])], keywords=[])), Return(value=Name(id=''output_dir'', ctx=Load()))],
    decorator_list=[], returns=Name(id=''str'', ctx=Load())), FunctionDef(name=''get_questions'',
    args=arguments(posonlyargs=[], args=[arg(arg=''questions_pathname'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Get
    questions from file or default\n    Args:\n        questions_pathname (str): The
    pathname of the questions file\n    Returns:\n        List[Dict]: The list of
    questions\n    '')), Try(body=[If(test=UnaryOp(op=Not(), operand=Name(id=''questions_pathname'',
    ctx=Load())), body=[Assign(targets=[Name(id=''questions_pathname'', ctx=Store())],
    value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()), attr=''path'',
    ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''QUESTIONS_FILE'',
    ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Name(id=''questions_pathname'', ctx=Load()), Constant(value=''r'')],
    keywords=[]), optional_vars=Name(id=''f'', ctx=Store()))], body=[Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''json'', ctx=Load()),
    attr=''load'', ctx=Load()), args=[Name(id=''f'', ctx=Load())], keywords=[]))]),
    Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''info'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using questions from file:
    ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()), conversion=-1)])],
    keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Questions
    file not valid: ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()),
    conversion=-1), Constant(value='' Using default questions'')])], keywords=[])),
    Assign(targets=[Name(id=''questions'', ctx=Store())], value=Call(func=Name(id=''get_default_questions'',
    ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id=''questions'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''instantiate_model'',
    args=arguments(posonlyargs=[], args=[arg(arg=''model_config'', annotation=Name(id=''Dict'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Imports
    and instantiates a model based on the provided configuration.\n    Args:\n        model_config
    (dict): model configuration dictionary.\n    Returns:\n        object: An instance
    of the specified model class, or None if error.\n    '')), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
    ctx=Store()), Name(id=''class_name'', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_import_path''), ctx=Load()), attr=''rsplit'',
    ctx=Load()), args=[Constant(value=''.''), Constant(value=1)], keywords=[])), Assign(targets=[Name(id=''ModelClass'',
    ctx=Store())], value=Call(func=Name(id=''getattr'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''importlib'',
    ctx=Load()), attr=''import_module'', ctx=Load()), args=[Name(id=''module_name'',
    ctx=Load())], keywords=[]), Name(id=''class_name'', ctx=Load())], keywords=[])),
    Assign(targets=[Name(id=''model_params'', ctx=Store())], value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_params''), ctx=Load())), Assign(targets=[Name(id=''inference_function_name'',
    ctx=Store())], value=Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''model_inference_function''),
    ctx=Load())), If(test=Compare(left=Name(id=''inference_function_name'', ctx=Load()),
    ops=[NotEq()], comparators=[Constant(value='''')]), body=[Assign(targets=[Name(id=''inference_function'',
    ctx=Store())], value=Call(func=Name(id=''getattr'', ctx=Load()), args=[Name(id=''ModelClass'',
    ctx=Load()), Name(id=''inference_function_name'', ctx=Load())], keywords=[])),
    Assign(targets=[Name(id=''model'', ctx=Store())], value=Call(func=Name(id=''inference_function'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''model_params'', ctx=Load()),
    attr=''pop'', ctx=Load()), args=[Constant(value=''model_path'')], keywords=[])],
    keywords=[keyword(value=Name(id=''model_params'', ctx=Load()))]))], orelse=[Assign(targets=[Name(id=''model'',
    ctx=Store())], value=Call(func=Name(id=''ModelClass'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''model_params'',
    ctx=Load()), attr=''pop'', ctx=Load()), args=[Constant(value=''model_path'')],
    keywords=[])], keywords=[keyword(value=Name(id=''model_params'', ctx=Load()))]))]),
    Return(value=Name(id=''model'', ctx=Load()))], handlers=[ExceptHandler(type=BoolOp(op=Or(),
    values=[Name(id=''ImportError'', ctx=Load()), Name(id=''AttributeError'', ctx=Load()),
    Name(id=''Exception'', ctx=Load())]), name=''e'', body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed
    to instantiate the model. Error: ''), FormattedValue(value=Name(id=''e'', ctx=Load()),
    conversion=-1)])], keywords=[])), Return(value=Constant(value=None))])], orelse=[],
    finalbody=[])], decorator_list=[], returns=Name(id=''object'', ctx=Load())), FunctionDef(name=''get_model'',
    args=arguments(posonlyargs=[], args=[arg(arg=''model_config_pathname'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Returns
    an instantiated model and prompt template based on the model configuration.\n    Agrs:\n        model_config_pathname
    (str): The pathname of the model config file\n    Returns:\n        Tuple[object,
    str]: The instantiated model and prompt template \n    '')), Try(body=[If(test=UnaryOp(op=Not(),
    operand=Name(id=''model_config_pathname'', ctx=Load())), body=[Assign(targets=[Name(id=''model_config_pathname'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''MODEL_CONFIG_FILE'',
    ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Name(id=''model_config_pathname'', ctx=Load()), Constant(value=''r'')],
    keywords=[]), optional_vars=Name(id=''config_file'', ctx=Store()))], body=[Assign(targets=[Name(id=''model_config'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load()),
    attr=''safe_load'', ctx=Load()), args=[Name(id=''config_file'', ctx=Load())],
    keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using model
    config from file: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1)])], keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Model
    config file not valid: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1), Constant(value='' Using default model config'')])],
    keywords=[])), Assign(targets=[Name(id=''model_config'', ctx=Store())], value=Call(func=Name(id=''get_default_model_config'',
    ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
    ctx=Load()), args=[Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''inference_model''),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''model_config'', ctx=Load()),
    slice=Constant(value=''prompt_template''), ctx=Load())], ctx=Load()))], decorator_list=[],
    returns=Subscript(value=Name(id=''tuple'', ctx=Load()), slice=Tuple(elts=[Name(id=''object'',
    ctx=Load()), Name(id=''str'', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name=''write_questions_file'',
    args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''\n    Writes the default questions to a file
    in JSON format.\n    Args:\n        output_dir (str): The directory to write the
    questions file to.\n    Returns:\n        None\n    '')), Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=Call(func=Name(id=''get_default_questions'', ctx=Load()),
    args=[], keywords=[])), Assign(targets=[Name(id=''output_dir'', ctx=Store())],
    value=IfExp(test=BoolOp(op=And(), values=[Name(id=''output_dir'', ctx=Load()),
    Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[]), attr=''is_dir'', ctx=Load()), args=[], keywords=[])]),
    body=Name(id=''output_dir'', ctx=Load()), orelse=Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]))), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load()), Name(id=''QUESTIONS_FILE'', ctx=Load())], keywords=[]), Constant(value=''w'')],
    keywords=[]), optional_vars=Name(id=''file'', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''questions'', ctx=Load()),
    Name(id=''file'', ctx=Load())], keywords=[keyword(arg=''indent'', value=Constant(value=4))]))])],
    decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''write_model_config_file'',
    args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''\n    Writes the default model config to a file
    in YAML format.\n    Args:\n        output_dir (str): The directory to write the
    model config file to.\n    Returns:\n        None\n    '')), Assign(targets=[Name(id=''model_config'',
    ctx=Store())], value=Call(func=Name(id=''get_default_model_config'', ctx=Load()),
    args=[], keywords=[])), Assign(targets=[Name(id=''output_dir'', ctx=Store())],
    value=IfExp(test=BoolOp(op=And(), values=[Name(id=''output_dir'', ctx=Load()),
    Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[]), attr=''is_dir'', ctx=Load()), args=[], keywords=[])]),
    body=Name(id=''output_dir'', ctx=Load()), orelse=Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]))), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load()), Name(id=''MODEL_CONFIG_FILE'', ctx=Load())], keywords=[]), Constant(value=''w'')],
    keywords=[]), optional_vars=Name(id=''file'', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id=''yaml'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''model_config'', ctx=Load()),
    Name(id=''file'', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))],
    type_ignores=[])'
  file_dependencies:
  - pathlib
  - logging
  - typing
  - json
  - yaml
  - importlib
  - os
  file_functions:
  - get_default_questions
  - get_default_model_config
  - get_output_dir
  - get_questions
  - instantiate_model
  - get_model
  - write_questions_file
  - write_model_config_file
  file_classes: []
  file_summary: '{dependencies: [pathlib, logging, typing, json, yaml, importlib,
    os], function_defs: [{get_default_questions: {inputs: [], calls: [], call_inputs:
    {}, returns: [questions]}}, {get_default_model_config: {inputs: [], calls: [],
    call_inputs: {}, returns: [model_config]}}, {get_output_dir: {inputs: [output_dir],
    calls: [os.path.abspath, os.makedirs, logging.info], call_inputs: {os.path.abspath:
    [output_dir or OUTPUT_DIR], os.makedirs: [output_dir], logging.info: [f''Using
    output directory: {output_dir}'']}, returns: [output_dir]}}, {get_questions: {inputs:
    [questions_pathname], calls: [os.path.join, os.getcwd, open, json.load, logging.info,
    get_default_questions], call_inputs: {os.path.join: [os.getcwd(), QUESTIONS_FILE],
    os.getcwd: [], open: [questions_pathname, ''r''], json.load: [f], logging.info:
    [f''Questions file not valid: {questions_pathname} Using default questions''],
    get_default_questions: []}, returns: [questions]}}, {instantiate_model: {inputs:
    [model_config], calls: [model_config[''model_import_path''].rsplit, getattr, importlib.import_module,
    inference_function, model_params.pop, ModelClass, logging.info], call_inputs:
    {model_config[''model_import_path''].rsplit: [''.'', 1], getattr: [ModelClass,
    inference_function_name], importlib.import_module: [module_name], inference_function:
    [model_params.pop(''model_path'')], model_params.pop: [''model_path''], ModelClass:
    [model_params.pop(''model_path'')], logging.info: [f''Failed to instantiate the
    model. Error: {e}'']}, returns: [model, None]}}, {get_model: {inputs: [model_config_pathname],
    calls: [os.path.join, os.getcwd, open, yaml.safe_load, logging.info, get_default_model_config,
    instantiate_model], call_inputs: {os.path.join: [os.getcwd(), MODEL_CONFIG_FILE],
    os.getcwd: [], open: [model_config_pathname, ''r''], yaml.safe_load: [config_file],
    logging.info: [f''Model config file not valid: {model_config_pathname} Using default
    model config''], get_default_model_config: [], instantiate_model: [model_config[''inference_model'']]},
    returns: [(instantiate_model(model_config[''inference_model'']), model_config[''prompt_template''])]}},
    {write_questions_file: {inputs: [output_dir], calls: [get_default_questions, Path(output_dir).is_dir,
    Path, os.getcwd, open, os.path.join, json.dump], call_inputs: {get_default_questions:
    [], Path(output_dir).is_dir: [], Path: [output_dir], os.getcwd: [], open: [os.path.join(output_dir,
    QUESTIONS_FILE), ''w''], os.path.join: [output_dir, QUESTIONS_FILE], json.dump:
    [questions, file]}, returns: []}}, {write_model_config_file: {inputs: [output_dir],
    calls: [get_default_model_config, Path(output_dir).is_dir, Path, os.getcwd, open,
    os.path.join, yaml.dump], call_inputs: {get_default_model_config: [], Path(output_dir).is_dir:
    [], Path: [output_dir], os.getcwd: [], open: [os.path.join(output_dir, MODEL_CONFIG_FILE),
    ''w''], os.path.join: [output_dir, MODEL_CONFIG_FILE], yaml.dump: [model_config,
    file]}, returns: []}}], class_defs: []}'
  entire_code_graph:
    nodes:
    - get_default_questions
    - get_default_model_config
    - get_output_dir
    - get_questions
    - instantiate_model
    - get_model
    - write_questions_file
    - write_model_config_file
    - os.path.abspath
    - os.makedirs
    - logging.info
    - os.path.join
    - os.getcwd
    - open
    - json.load
    - model_config['model_import_path'].rsplit
    - getattr
    - importlib.import_module
    - inference_function
    - model_params.pop
    - ModelClass
    - yaml.safe_load
    - Path(output_dir).is_dir
    - Path
    - json.dump
    - yaml.dump
    edges:
    - source: get_output_dir
      target: os.path.abspath
      target_inputs:
      - output_dir or OUTPUT_DIR
    - source: get_output_dir
      target: os.makedirs
      target_inputs:
      - output_dir
    - source: get_output_dir
      target: logging.info
      target_inputs:
      - 'f''Using output directory: {output_dir}'''
    - source: get_questions
      target: os.path.join
      target_inputs:
      - os.getcwd()
      - QUESTIONS_FILE
    - source: get_questions
      target: os.getcwd
      target_inputs: []
    - source: get_questions
      target: open
      target_inputs:
      - questions_pathname
      - '''r'''
    - source: get_questions
      target: json.load
      target_inputs:
      - f
    - source: get_questions
      target: logging.info
      target_inputs:
      - 'f''Questions file not valid: {questions_pathname} Using default questions'''
    - source: get_questions
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: instantiate_model
      target: model_config['model_import_path'].rsplit
      target_inputs:
      - '''.'''
      - '1'
    - source: instantiate_model
      target: getattr
      target_inputs:
      - ModelClass
      - inference_function_name
    - source: instantiate_model
      target: importlib.import_module
      target_inputs:
      - module_name
    - source: instantiate_model
      target: inference_function
      target_inputs:
      - model_params.pop('model_path')
    - source: instantiate_model
      target: model_params.pop
      target_inputs:
      - '''model_path'''
    - source: instantiate_model
      target: ModelClass
      target_inputs:
      - model_params.pop('model_path')
    - source: instantiate_model
      target: logging.info
      target_inputs:
      - 'f''Failed to instantiate the model. Error: {e}'''
    - source: get_model
      target: os.path.join
      target_inputs:
      - os.getcwd()
      - MODEL_CONFIG_FILE
    - source: get_model
      target: os.getcwd
      target_inputs: []
    - source: get_model
      target: open
      target_inputs:
      - model_config_pathname
      - '''r'''
    - source: get_model
      target: yaml.safe_load
      target_inputs:
      - config_file
    - source: get_model
      target: logging.info
      target_inputs:
      - 'f''Model config file not valid: {model_config_pathname} Using default model
        config'''
    - source: get_model
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: get_model
      target: instantiate_model
      target_inputs:
      - model_config['inference_model']
      target_returns:
      - model
      - None
    - source: write_questions_file
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: write_questions_file
      target: Path(output_dir).is_dir
      target_inputs: []
    - source: write_questions_file
      target: Path
      target_inputs:
      - output_dir
    - source: write_questions_file
      target: os.getcwd
      target_inputs: []
    - source: write_questions_file
      target: open
      target_inputs:
      - os.path.join(output_dir, QUESTIONS_FILE)
      - '''w'''
    - source: write_questions_file
      target: os.path.join
      target_inputs:
      - output_dir
      - QUESTIONS_FILE
    - source: write_questions_file
      target: json.dump
      target_inputs:
      - questions
      - file
    - source: write_model_config_file
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: write_model_config_file
      target: Path(output_dir).is_dir
      target_inputs: []
    - source: write_model_config_file
      target: Path
      target_inputs:
      - output_dir
    - source: write_model_config_file
      target: os.getcwd
      target_inputs: []
    - source: write_model_config_file
      target: open
      target_inputs:
      - os.path.join(output_dir, MODEL_CONFIG_FILE)
      - '''w'''
    - source: write_model_config_file
      target: os.path.join
      target_inputs:
      - output_dir
      - MODEL_CONFIG_FILE
    - source: write_model_config_file
      target: yaml.dump
      target_inputs:
      - model_config
      - file
functions:
  get_default_questions:
    function_name: get_default_questions
    function_code: "def get_default_questions() -> List[Dict]:\n    \"\"\"Return default\
      \ question list\n    Args:\n        None\n    Returns:\n        List[Dict]:\
      \ The default question list\n    \"\"\"\n    questions = [{'id': 'file_dependencies',\
      \ 'text': \"What are the dependencies of the Python file: '{filename}'?\", 'type':\
      \ 'file'}, {'id': 'internal_code_graph', 'text': \"What is the call code graph\
      \ of the Python file: '{filename}'?\", 'type': 'file'}, {'id': 'entire_code_graph',\
      \ 'text': \"What are the structural relationships between the functions and\
      \ classes defined and used in the Python file: '{filename}'?\", 'type': 'file'},\
      \ {'id': 'file_functions', 'text': \"What functions are defined in the Python\
      \ file: '{filename}'?\", 'type': 'file'}, {'id': 'file_classes', 'text': \"\
      What classes are defined in the Python file: '{filename}'?\", 'type': 'file'},\
      \ {'id': 'function_inputs', 'text': \"What are the inputs to the function: '{function_name}'\
      \ in the Python file: '{filename}'?\", 'type': 'function'}, {'id': 'function_docstring',\
      \ 'text': \"What is the docstring of the function: '{function_name}' in the\
      \ Python file: '{filename}'?\", 'type': 'function'}, {'id': 'function_calls',\
      \ 'text': \"What calls are made in the function: '{function_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'function'}, {'id': 'function_variables', 'text':\
      \ \"What variables are defined in the function: '{function_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'function'}, {'id': 'function_returns', 'text':\
      \ \"What are the returned items from the function: '{function_name}' in the\
      \ Python file: '{filename}'?\", 'type': 'function'}, {'id': 'class_methods',\
      \ 'text': \"What are the methods defined within the class: '{class_name}' in\
      \ the Python file: '{filename}'?\", 'type': 'class'}, {'id': 'class_docstring',\
      \ 'text': \"What is the docstring of the class: '{class_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'class'}, {'id': 'class_attributes', 'text':\
      \ \"What are the attributes of the class: '{class_name}' in the Python file:\
      \ '{filename}'?\", 'type': 'class'}, {'id': 'class_variables', 'text': \"What\
      \ variables are defined in the class: '{class_name}' in the Python file: '{filename}'?\"\
      , 'type': 'class'}, {'id': 'class_inheritance', 'text': \"What is the Inheritance\
      \ of the class: '{class_name}' in the Python file: '{filename}'?\", 'type':\
      \ 'class'}, {'id': 'method_inputs', 'text': \"What are the inputs to method:\
      \ '{method_name}' in the class: '{class_name}' in the Python file: '{filename}'?\"\
      , 'type': 'method'}, {'id': 'method_docstring', 'text': \"What is the docstring\
      \ of the method: '{method_name}' in the class: '{class_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'method'}, {'id': 'method_calls', 'text': \"\
      What calls are made in the method: '{method_name}' in the class: '{class_name}'\
      \ in the Python file: '{filename}'?\", 'type': 'method'}, {'id': 'method_returns',\
      \ 'text': \"What are the returns from the method: '{method_name}' in the class:\
      \ '{class_name}' in the Python file: '{filename}'?\", 'type': 'method'}, {'id':\
      \ 'file_purpose', 'text': \"1) Describe the purpose and processing summary of\
      \ the Python file: '{filename}; 2) Provide an itemized detailed description\
      \ of each applicable function, class, and method; 3) Explain what each of input,\
      \ output, and variable do within the file.\", 'type': 'file'}]\n    return questions"
    function_ast: 'FunctionDef(name=''get_default_questions'', args=arguments(posonlyargs=[],
      args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''Return
      default question list\n    Args:\n        None\n    Returns:\n        List[Dict]:
      The default question list\n    '', lineno=53, col_offset=4, end_lineno=58, end_col_offset=7),
      lineno=53, col_offset=4, end_lineno=58, end_col_offset=7), Assign(targets=[Name(id=''questions'',
      ctx=Store(), lineno=59, col_offset=4, end_lineno=59, end_col_offset=13)], value=List(elts=[Dict(keys=[Constant(value=''id'',
      lineno=61, col_offset=12, end_lineno=61, end_col_offset=16), Constant(value=''text'',
      lineno=62, col_offset=12, end_lineno=62, end_col_offset=18), Constant(value=''type'',
      lineno=63, col_offset=12, end_lineno=63, end_col_offset=18)], values=[Constant(value=''file_dependencies'',
      lineno=61, col_offset=18, end_lineno=61, end_col_offset=37), Constant(value="What
      are the dependencies of the Python file: ''{filename}''?", lineno=62, col_offset=20,
      end_lineno=62, end_col_offset=81), Constant(value=''file'', lineno=63, col_offset=20,
      end_lineno=63, end_col_offset=26)], lineno=60, col_offset=8, end_lineno=64,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=66, col_offset=12,
      end_lineno=66, end_col_offset=16), Constant(value=''text'', lineno=67, col_offset=12,
      end_lineno=67, end_col_offset=18), Constant(value=''type'', lineno=68, col_offset=12,
      end_lineno=68, end_col_offset=18)], values=[Constant(value=''internal_code_graph'',
      lineno=66, col_offset=18, end_lineno=66, end_col_offset=39), Constant(value="What
      is the call code graph of the Python file: ''{filename}''?", lineno=67, col_offset=20,
      end_lineno=67, end_col_offset=83), Constant(value=''file'', lineno=68, col_offset=20,
      end_lineno=68, end_col_offset=26)], lineno=65, col_offset=8, end_lineno=69,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=71, col_offset=12,
      end_lineno=71, end_col_offset=16), Constant(value=''text'', lineno=72, col_offset=12,
      end_lineno=72, end_col_offset=18), Constant(value=''type'', lineno=73, col_offset=12,
      end_lineno=73, end_col_offset=18)], values=[Constant(value=''entire_code_graph'',
      lineno=71, col_offset=18, end_lineno=71, end_col_offset=37), Constant(value="What
      are the structural relationships between the functions and classes defined and
      used in the Python file: ''{filename}''?", lineno=72, col_offset=20, end_lineno=72,
      end_col_offset=144), Constant(value=''file'', lineno=73, col_offset=20, end_lineno=73,
      end_col_offset=26)], lineno=70, col_offset=8, end_lineno=74, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=76, col_offset=12, end_lineno=76, end_col_offset=16),
      Constant(value=''text'', lineno=77, col_offset=12, end_lineno=77, end_col_offset=18),
      Constant(value=''type'', lineno=78, col_offset=12, end_lineno=78, end_col_offset=18)],
      values=[Constant(value=''file_functions'', lineno=76, col_offset=18, end_lineno=76,
      end_col_offset=34), Constant(value="What functions are defined in the Python
      file: ''{filename}''?", lineno=77, col_offset=20, end_lineno=77, end_col_offset=82),
      Constant(value=''file'', lineno=78, col_offset=20, end_lineno=78, end_col_offset=26)],
      lineno=75, col_offset=8, end_lineno=79, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=81, col_offset=12, end_lineno=81, end_col_offset=16), Constant(value=''text'',
      lineno=82, col_offset=12, end_lineno=82, end_col_offset=18), Constant(value=''type'',
      lineno=83, col_offset=12, end_lineno=83, end_col_offset=18)], values=[Constant(value=''file_classes'',
      lineno=81, col_offset=18, end_lineno=81, end_col_offset=32), Constant(value="What
      classes are defined in the Python file: ''{filename}''?", lineno=82, col_offset=20,
      end_lineno=82, end_col_offset=80), Constant(value=''file'', lineno=83, col_offset=20,
      end_lineno=83, end_col_offset=26)], lineno=80, col_offset=8, end_lineno=84,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=86, col_offset=12,
      end_lineno=86, end_col_offset=16), Constant(value=''text'', lineno=87, col_offset=12,
      end_lineno=87, end_col_offset=18), Constant(value=''type'', lineno=88, col_offset=12,
      end_lineno=88, end_col_offset=18)], values=[Constant(value=''function_inputs'',
      lineno=86, col_offset=18, end_lineno=86, end_col_offset=35), Constant(value="What
      are the inputs to the function: ''{function_name}'' in the Python file: ''{filename}''?",
      lineno=87, col_offset=20, end_lineno=87, end_col_offset=110), Constant(value=''function'',
      lineno=88, col_offset=20, end_lineno=88, end_col_offset=30)], lineno=85, col_offset=8,
      end_lineno=89, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=91,
      col_offset=12, end_lineno=91, end_col_offset=16), Constant(value=''text'', lineno=92,
      col_offset=12, end_lineno=92, end_col_offset=18), Constant(value=''type'', lineno=93,
      col_offset=12, end_lineno=93, end_col_offset=18)], values=[Constant(value=''function_docstring'',
      lineno=91, col_offset=18, end_lineno=91, end_col_offset=38), Constant(value="What
      is the docstring of the function: ''{function_name}'' in the Python file: ''{filename}''?",
      lineno=92, col_offset=20, end_lineno=92, end_col_offset=112), Constant(value=''function'',
      lineno=93, col_offset=20, end_lineno=93, end_col_offset=30)], lineno=90, col_offset=8,
      end_lineno=94, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=96,
      col_offset=12, end_lineno=96, end_col_offset=16), Constant(value=''text'', lineno=97,
      col_offset=12, end_lineno=97, end_col_offset=18), Constant(value=''type'', lineno=98,
      col_offset=12, end_lineno=98, end_col_offset=18)], values=[Constant(value=''function_calls'',
      lineno=96, col_offset=18, end_lineno=96, end_col_offset=34), Constant(value="What
      calls are made in the function: ''{function_name}'' in the Python file: ''{filename}''?",
      lineno=97, col_offset=20, end_lineno=97, end_col_offset=110), Constant(value=''function'',
      lineno=98, col_offset=20, end_lineno=98, end_col_offset=30)], lineno=95, col_offset=8,
      end_lineno=99, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=101,
      col_offset=12, end_lineno=101, end_col_offset=16), Constant(value=''text'',
      lineno=102, col_offset=12, end_lineno=102, end_col_offset=18), Constant(value=''type'',
      lineno=103, col_offset=12, end_lineno=103, end_col_offset=18)], values=[Constant(value=''function_variables'',
      lineno=101, col_offset=18, end_lineno=101, end_col_offset=38), Constant(value="What
      variables are defined in the function: ''{function_name}'' in the Python file:
      ''{filename}''?", lineno=102, col_offset=20, end_lineno=102, end_col_offset=117),
      Constant(value=''function'', lineno=103, col_offset=20, end_lineno=103, end_col_offset=30)],
      lineno=100, col_offset=8, end_lineno=104, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=106, col_offset=12, end_lineno=106, end_col_offset=16), Constant(value=''text'',
      lineno=107, col_offset=12, end_lineno=107, end_col_offset=18), Constant(value=''type'',
      lineno=108, col_offset=12, end_lineno=108, end_col_offset=18)], values=[Constant(value=''function_returns'',
      lineno=106, col_offset=18, end_lineno=106, end_col_offset=36), Constant(value="What
      are the returned items from the function: ''{function_name}'' in the Python
      file: ''{filename}''?", lineno=107, col_offset=20, end_lineno=107, end_col_offset=120),
      Constant(value=''function'', lineno=108, col_offset=20, end_lineno=108, end_col_offset=30)],
      lineno=105, col_offset=8, end_lineno=109, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=111, col_offset=12, end_lineno=111, end_col_offset=16), Constant(value=''text'',
      lineno=112, col_offset=12, end_lineno=112, end_col_offset=18), Constant(value=''type'',
      lineno=113, col_offset=12, end_lineno=113, end_col_offset=18)], values=[Constant(value=''class_methods'',
      lineno=111, col_offset=18, end_lineno=111, end_col_offset=33), Constant(value="What
      are the methods defined within the class: ''{class_name}'' in the Python file:
      ''{filename}''?", lineno=112, col_offset=20, end_lineno=112, end_col_offset=117),
      Constant(value=''class'', lineno=113, col_offset=20, end_lineno=113, end_col_offset=27)],
      lineno=110, col_offset=8, end_lineno=114, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=116, col_offset=12, end_lineno=116, end_col_offset=16), Constant(value=''text'',
      lineno=117, col_offset=12, end_lineno=117, end_col_offset=18), Constant(value=''type'',
      lineno=118, col_offset=12, end_lineno=118, end_col_offset=18)], values=[Constant(value=''class_docstring'',
      lineno=116, col_offset=18, end_lineno=116, end_col_offset=35), Constant(value="What
      is the docstring of the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=117, col_offset=20, end_lineno=117, end_col_offset=106), Constant(value=''class'',
      lineno=118, col_offset=20, end_lineno=118, end_col_offset=27)], lineno=115,
      col_offset=8, end_lineno=119, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=121, col_offset=12, end_lineno=121, end_col_offset=16), Constant(value=''text'',
      lineno=122, col_offset=12, end_lineno=122, end_col_offset=18), Constant(value=''type'',
      lineno=123, col_offset=12, end_lineno=123, end_col_offset=18)], values=[Constant(value=''class_attributes'',
      lineno=121, col_offset=18, end_lineno=121, end_col_offset=36), Constant(value="What
      are the attributes of the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=122, col_offset=20, end_lineno=122, end_col_offset=108), Constant(value=''class'',
      lineno=123, col_offset=20, end_lineno=123, end_col_offset=27)], lineno=120,
      col_offset=8, end_lineno=124, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=126, col_offset=12, end_lineno=126, end_col_offset=16), Constant(value=''text'',
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=18), Constant(value=''type'',
      lineno=128, col_offset=12, end_lineno=128, end_col_offset=18)], values=[Constant(value=''class_variables'',
      lineno=126, col_offset=18, end_lineno=126, end_col_offset=35), Constant(value="What
      variables are defined in the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=127, col_offset=20, end_lineno=127, end_col_offset=111), Constant(value=''class'',
      lineno=128, col_offset=20, end_lineno=128, end_col_offset=27)], lineno=125,
      col_offset=8, end_lineno=129, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=131, col_offset=12, end_lineno=131, end_col_offset=16), Constant(value=''text'',
      lineno=132, col_offset=12, end_lineno=132, end_col_offset=18), Constant(value=''type'',
      lineno=133, col_offset=12, end_lineno=133, end_col_offset=18)], values=[Constant(value=''class_inheritance'',
      lineno=131, col_offset=18, end_lineno=131, end_col_offset=37), Constant(value="What
      is the Inheritance of the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=132, col_offset=20, end_lineno=132, end_col_offset=108), Constant(value=''class'',
      lineno=133, col_offset=20, end_lineno=133, end_col_offset=27)], lineno=130,
      col_offset=8, end_lineno=134, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=136, col_offset=12, end_lineno=136, end_col_offset=16), Constant(value=''text'',
      lineno=137, col_offset=12, end_lineno=137, end_col_offset=18), Constant(value=''type'',
      lineno=138, col_offset=12, end_lineno=138, end_col_offset=18)], values=[Constant(value=''method_inputs'',
      lineno=136, col_offset=18, end_lineno=136, end_col_offset=33), Constant(value="What
      are the inputs to method: ''{method_name}'' in the class: ''{class_name}'' in
      the Python file: ''{filename}''?", lineno=137, col_offset=20, end_lineno=137,
      end_col_offset=131), Constant(value=''method'', lineno=138, col_offset=20, end_lineno=138,
      end_col_offset=28)], lineno=135, col_offset=8, end_lineno=139, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=141, col_offset=12, end_lineno=141,
      end_col_offset=16), Constant(value=''text'', lineno=142, col_offset=12, end_lineno=142,
      end_col_offset=18), Constant(value=''type'', lineno=143, col_offset=12, end_lineno=143,
      end_col_offset=18)], values=[Constant(value=''method_docstring'', lineno=141,
      col_offset=18, end_lineno=141, end_col_offset=36), Constant(value="What is the
      docstring of the method: ''{method_name}'' in the class: ''{class_name}'' in
      the Python file: ''{filename}''?", lineno=142, col_offset=20, end_lineno=142,
      end_col_offset=137), Constant(value=''method'', lineno=143, col_offset=20, end_lineno=143,
      end_col_offset=28)], lineno=140, col_offset=8, end_lineno=144, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=146, col_offset=12, end_lineno=146,
      end_col_offset=16), Constant(value=''text'', lineno=147, col_offset=12, end_lineno=147,
      end_col_offset=18), Constant(value=''type'', lineno=148, col_offset=12, end_lineno=148,
      end_col_offset=18)], values=[Constant(value=''method_calls'', lineno=146, col_offset=18,
      end_lineno=146, end_col_offset=32), Constant(value="What calls are made in the
      method: ''{method_name}'' in the class: ''{class_name}'' in the Python file:
      ''{filename}''?", lineno=147, col_offset=20, end_lineno=147, end_col_offset=135),
      Constant(value=''method'', lineno=148, col_offset=20, end_lineno=148, end_col_offset=28)],
      lineno=145, col_offset=8, end_lineno=149, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=151, col_offset=12, end_lineno=151, end_col_offset=16), Constant(value=''text'',
      lineno=152, col_offset=12, end_lineno=152, end_col_offset=18), Constant(value=''type'',
      lineno=153, col_offset=12, end_lineno=153, end_col_offset=18)], values=[Constant(value=''method_returns'',
      lineno=151, col_offset=18, end_lineno=151, end_col_offset=34), Constant(value="What
      are the returns from the method: ''{method_name}'' in the class: ''{class_name}''
      in the Python file: ''{filename}''?", lineno=152, col_offset=20, end_lineno=152,
      end_col_offset=138), Constant(value=''method'', lineno=153, col_offset=20, end_lineno=153,
      end_col_offset=28)], lineno=150, col_offset=8, end_lineno=154, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=156, col_offset=12, end_lineno=156,
      end_col_offset=16), Constant(value=''text'', lineno=157, col_offset=12, end_lineno=157,
      end_col_offset=18), Constant(value=''type'', lineno=158, col_offset=12, end_lineno=158,
      end_col_offset=18)], values=[Constant(value=''file_purpose'', lineno=156, col_offset=18,
      end_lineno=156, end_col_offset=32), Constant(value="1) Describe the purpose
      and processing summary of the Python file: ''{filename}; 2) Provide an itemized
      detailed description of each applicable function, class, and method; 3) Explain
      what each of input, output, and variable do within the file.", lineno=157, col_offset=20,
      end_lineno=157, end_col_offset=265), Constant(value=''file'', lineno=158, col_offset=20,
      end_lineno=158, end_col_offset=26)], lineno=155, col_offset=8, end_lineno=159,
      end_col_offset=9)], ctx=Load(), lineno=59, col_offset=16, end_lineno=160, end_col_offset=5),
      lineno=59, col_offset=4, end_lineno=160, end_col_offset=5), Return(value=Name(id=''questions'',
      ctx=Load(), lineno=161, col_offset=11, end_lineno=161, end_col_offset=20), lineno=161,
      col_offset=4, end_lineno=161, end_col_offset=20)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=52, col_offset=31, end_lineno=52, end_col_offset=35), slice=Name(id=''Dict'',
      ctx=Load(), lineno=52, col_offset=36, end_lineno=52, end_col_offset=40), ctx=Load(),
      lineno=52, col_offset=31, end_lineno=52, end_col_offset=41), lineno=52, col_offset=0,
      end_lineno=161, end_col_offset=20)'
    function_docstring: "Return default question list\nArgs:\n    None\nReturns:\n\
      \    List[Dict]: The default question list"
    function_inputs: []
    function_defaults: []
    function_returns:
    - questions
    function_calls: []
    function_call_inputs: {}
    function_variables:
    - questions
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_default_model_config:
    function_name: get_default_model_config
    function_code: "def get_default_model_config() -> Dict:\n    \"\"\"Return default\
      \ model config dict\n    Args:\n        None\n    Returns:\n        Dict: The\
      \ default model config dictionary\n    \"\"\"\n    model_config = {'prompt_template':\
      \ \"\\n### Instruction:\\nGiven this context:\\n'{context}'\\nPlease analyze\
      \ this code you created provide a comprehensive response without duplicating\
      \ the input code, include enough detail for me to implement the same logic,\
      \ and include your reasoning step by step: {query}\\n### Response:\", 'inference_model':\
      \ {'model_import_path': 'ctransformers.AutoModelForCausalLM', 'model_inference_function':\
      \ 'from_pretrained', 'model_params': {'model_path': 'TheBloke/WizardCoder-Python-13B-V1.0-GGUF',\
      \ 'model_type': 'llama', 'local_files_only': False, 'threads': 28, 'batch_size':\
      \ 128, 'context_length': 8400, 'max_new_tokens': 8092, 'gpu_layers': 100, 'reset':\
      \ True}}}\n    return model_config"
    function_ast: 'FunctionDef(name=''get_default_model_config'', args=arguments(posonlyargs=[],
      args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''Return
      default model config dict\n    Args:\n        None\n    Returns:\n        Dict:
      The default model config dictionary\n    '', lineno=165, col_offset=4, end_lineno=170,
      end_col_offset=7), lineno=165, col_offset=4, end_lineno=170, end_col_offset=7),
      Assign(targets=[Name(id=''model_config'', ctx=Store(), lineno=171, col_offset=4,
      end_lineno=171, end_col_offset=16)], value=Dict(keys=[Constant(value=''prompt_template'',
      lineno=172, col_offset=8, end_lineno=172, end_col_offset=25), Constant(value=''inference_model'',
      lineno=173, col_offset=8, end_lineno=173, end_col_offset=25)], values=[Constant(value="\n###
      Instruction:\nGiven this context:\n''{context}''\nPlease analyze this code you
      created provide a comprehensive response without duplicating the input code,
      include enough detail for me to implement the same logic, and include your reasoning
      step by step: {query}\n### Response:", lineno=172, col_offset=27, end_lineno=172,
      end_col_offset=310), Dict(keys=[Constant(value=''model_import_path'', lineno=174,
      col_offset=12, end_lineno=174, end_col_offset=31), Constant(value=''model_inference_function'',
      lineno=175, col_offset=12, end_lineno=175, end_col_offset=38), Constant(value=''model_params'',
      lineno=176, col_offset=12, end_lineno=176, end_col_offset=26)], values=[Constant(value=''ctransformers.AutoModelForCausalLM'',
      lineno=174, col_offset=33, end_lineno=174, end_col_offset=69), Constant(value=''from_pretrained'',
      lineno=175, col_offset=40, end_lineno=175, end_col_offset=57), Dict(keys=[Constant(value=''model_path'',
      lineno=177, col_offset=16, end_lineno=177, end_col_offset=28), Constant(value=''model_type'',
      lineno=178, col_offset=16, end_lineno=178, end_col_offset=28), Constant(value=''local_files_only'',
      lineno=179, col_offset=16, end_lineno=179, end_col_offset=34), Constant(value=''threads'',
      lineno=183, col_offset=16, end_lineno=183, end_col_offset=25), Constant(value=''batch_size'',
      lineno=184, col_offset=16, end_lineno=184, end_col_offset=28), Constant(value=''context_length'',
      lineno=185, col_offset=16, end_lineno=185, end_col_offset=32), Constant(value=''max_new_tokens'',
      lineno=186, col_offset=16, end_lineno=186, end_col_offset=32), Constant(value=''gpu_layers'',
      lineno=187, col_offset=16, end_lineno=187, end_col_offset=28), Constant(value=''reset'',
      lineno=188, col_offset=16, end_lineno=188, end_col_offset=23)], values=[Constant(value=''TheBloke/WizardCoder-Python-13B-V1.0-GGUF'',
      lineno=177, col_offset=30, end_lineno=177, end_col_offset=73), Constant(value=''llama'',
      lineno=178, col_offset=30, end_lineno=178, end_col_offset=37), Constant(value=False,
      lineno=179, col_offset=36, end_lineno=179, end_col_offset=41), Constant(value=28,
      lineno=183, col_offset=27, end_lineno=183, end_col_offset=29), Constant(value=128,
      lineno=184, col_offset=30, end_lineno=184, end_col_offset=33), Constant(value=8400,
      lineno=185, col_offset=34, end_lineno=185, end_col_offset=38), Constant(value=8092,
      lineno=186, col_offset=34, end_lineno=186, end_col_offset=38), Constant(value=100,
      lineno=187, col_offset=30, end_lineno=187, end_col_offset=33), Constant(value=True,
      lineno=188, col_offset=25, end_lineno=188, end_col_offset=29)], lineno=176,
      col_offset=28, end_lineno=189, end_col_offset=17)], lineno=173, col_offset=27,
      end_lineno=190, end_col_offset=13)], lineno=171, col_offset=19, end_lineno=191,
      end_col_offset=9), lineno=171, col_offset=4, end_lineno=191, end_col_offset=9),
      Return(value=Name(id=''model_config'', ctx=Load(), lineno=192, col_offset=11,
      end_lineno=192, end_col_offset=23), lineno=192, col_offset=4, end_lineno=192,
      end_col_offset=23)], decorator_list=[], returns=Name(id=''Dict'', ctx=Load(),
      lineno=164, col_offset=34, end_lineno=164, end_col_offset=38), lineno=164, col_offset=0,
      end_lineno=192, end_col_offset=23)'
    function_docstring: "Return default model config dict\nArgs:\n    None\nReturns:\n\
      \    Dict: The default model config dictionary"
    function_inputs: []
    function_defaults: []
    function_returns:
    - model_config
    function_calls: []
    function_call_inputs: {}
    function_variables:
    - model_config
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_output_dir:
    function_name: get_output_dir
    function_code: "def get_output_dir(output_dir: str='') -> str:\n    \"\"\"Returns\
      \ the appropriate output directory.\n    Args:\n        output_dir (str): The\
      \ directory to write the output to.\n    Returns:\n        str: The absolute\
      \ path of the provided output_dir if it exists or can be created.\n    \"\"\"\
      \n    output_dir = os.path.abspath(output_dir or OUTPUT_DIR)\n    os.makedirs(output_dir,\
      \ exist_ok=True)\n    logging.info(f'Using output directory: {output_dir}')\n\
      \    return output_dir"
    function_ast: 'FunctionDef(name=''get_output_dir'', args=arguments(posonlyargs=[],
      args=[arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load(), lineno=195,
      col_offset=31, end_lineno=195, end_col_offset=34), lineno=195, col_offset=19,
      end_lineno=195, end_col_offset=34)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''',
      lineno=195, col_offset=35, end_lineno=195, end_col_offset=37)]), body=[Expr(value=Constant(value=''Returns
      the appropriate output directory.\n    Args:\n        output_dir (str): The
      directory to write the output to.\n    Returns:\n        str: The absolute path
      of the provided output_dir if it exists or can be created.\n    '', lineno=196,
      col_offset=4, end_lineno=201, end_col_offset=7), lineno=196, col_offset=4, end_lineno=201,
      end_col_offset=7), Assign(targets=[Name(id=''output_dir'', ctx=Store(), lineno=202,
      col_offset=4, end_lineno=202, end_col_offset=14)], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=202, col_offset=17, end_lineno=202, end_col_offset=19), attr=''path'',
      ctx=Load(), lineno=202, col_offset=17, end_lineno=202, end_col_offset=24), attr=''abspath'',
      ctx=Load(), lineno=202, col_offset=17, end_lineno=202, end_col_offset=32), args=[BoolOp(op=Or(),
      values=[Name(id=''output_dir'', ctx=Load(), lineno=202, col_offset=33, end_lineno=202,
      end_col_offset=43), Name(id=''OUTPUT_DIR'', ctx=Load(), lineno=202, col_offset=47,
      end_lineno=202, end_col_offset=57)], lineno=202, col_offset=33, end_lineno=202,
      end_col_offset=57)], keywords=[], lineno=202, col_offset=17, end_lineno=202,
      end_col_offset=58), lineno=202, col_offset=4, end_lineno=202, end_col_offset=58),
      Expr(value=Call(func=Attribute(value=Name(id=''os'', ctx=Load(), lineno=203,
      col_offset=4, end_lineno=203, end_col_offset=6), attr=''makedirs'', ctx=Load(),
      lineno=203, col_offset=4, end_lineno=203, end_col_offset=15), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=203, col_offset=16, end_lineno=203, end_col_offset=26)],
      keywords=[keyword(arg=''exist_ok'', value=Constant(value=True, lineno=203, col_offset=37,
      end_lineno=203, end_col_offset=41), lineno=203, col_offset=28, end_lineno=203,
      end_col_offset=41)], lineno=203, col_offset=4, end_lineno=203, end_col_offset=42),
      lineno=203, col_offset=4, end_lineno=203, end_col_offset=42), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=204, col_offset=4, end_lineno=204, end_col_offset=11), attr=''info'',
      ctx=Load(), lineno=204, col_offset=4, end_lineno=204, end_col_offset=16), args=[JoinedStr(values=[Constant(value=''Using
      output directory: '', lineno=204, col_offset=17, end_lineno=204, end_col_offset=56),
      FormattedValue(value=Name(id=''output_dir'', ctx=Load(), lineno=204, col_offset=44,
      end_lineno=204, end_col_offset=54), conversion=-1, lineno=204, col_offset=17,
      end_lineno=204, end_col_offset=56)], lineno=204, col_offset=17, end_lineno=204,
      end_col_offset=56)], keywords=[], lineno=204, col_offset=4, end_lineno=204,
      end_col_offset=57), lineno=204, col_offset=4, end_lineno=204, end_col_offset=57),
      Return(value=Name(id=''output_dir'', ctx=Load(), lineno=205, col_offset=11,
      end_lineno=205, end_col_offset=21), lineno=205, col_offset=4, end_lineno=205,
      end_col_offset=21)], decorator_list=[], returns=Name(id=''str'', ctx=Load(),
      lineno=195, col_offset=42, end_lineno=195, end_col_offset=45), lineno=195, col_offset=0,
      end_lineno=205, end_col_offset=21)'
    function_docstring: "Returns the appropriate output directory.\nArgs:\n    output_dir\
      \ (str): The directory to write the output to.\nReturns:\n    str: The absolute\
      \ path of the provided output_dir if it exists or can be created."
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns:
    - output_dir
    function_calls:
    - os.path.abspath
    - os.makedirs
    - logging.info
    function_call_inputs:
      os.path.abspath:
      - output_dir or OUTPUT_DIR
      os.makedirs:
      - output_dir
      logging.info:
      - 'f''Using output directory: {output_dir}'''
    function_variables:
    - output_dir
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_questions:
    function_name: get_questions
    function_code: "def get_questions(questions_pathname: str) -> List[Dict]:\n  \
      \  \"\"\"\n    Get questions from file or default\n    Args:\n        questions_pathname\
      \ (str): The pathname of the questions file\n    Returns:\n        List[Dict]:\
      \ The list of questions\n    \"\"\"\n    try:\n        if not questions_pathname:\n\
      \            questions_pathname = os.path.join(os.getcwd(), QUESTIONS_FILE)\n\
      \        with open(questions_pathname, 'r') as f:\n            questions = json.load(f)\n\
      \        logging.info(f'Using questions from file: {questions_pathname}')\n\
      \    except:\n        logging.info(f'Questions file not valid: {questions_pathname}\
      \ Using default questions')\n        questions = get_default_questions()\n \
      \   return questions"
    function_ast: 'FunctionDef(name=''get_questions'', args=arguments(posonlyargs=[],
      args=[arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load(),
      lineno=208, col_offset=38, end_lineno=208, end_col_offset=41), lineno=208, col_offset=18,
      end_lineno=208, end_col_offset=41)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Get questions from file or default\n    Args:\n        questions_pathname
      (str): The pathname of the questions file\n    Returns:\n        List[Dict]:
      The list of questions\n    '', lineno=209, col_offset=4, end_lineno=215, end_col_offset=7),
      lineno=209, col_offset=4, end_lineno=215, end_col_offset=7), Try(body=[If(test=UnaryOp(op=Not(),
      operand=Name(id=''questions_pathname'', ctx=Load(), lineno=217, col_offset=15,
      end_lineno=217, end_col_offset=33), lineno=217, col_offset=11, end_lineno=217,
      end_col_offset=33), body=[Assign(targets=[Name(id=''questions_pathname'', ctx=Store(),
      lineno=218, col_offset=12, end_lineno=218, end_col_offset=30)], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=218, col_offset=33, end_lineno=218, end_col_offset=35), attr=''path'',
      ctx=Load(), lineno=218, col_offset=33, end_lineno=218, end_col_offset=40), attr=''join'',
      ctx=Load(), lineno=218, col_offset=33, end_lineno=218, end_col_offset=45), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=218, col_offset=46, end_lineno=218, end_col_offset=48), attr=''getcwd'',
      ctx=Load(), lineno=218, col_offset=46, end_lineno=218, end_col_offset=55), args=[],
      keywords=[], lineno=218, col_offset=46, end_lineno=218, end_col_offset=57),
      Name(id=''QUESTIONS_FILE'', ctx=Load(), lineno=218, col_offset=59, end_lineno=218,
      end_col_offset=73)], keywords=[], lineno=218, col_offset=33, end_lineno=218,
      end_col_offset=74), lineno=218, col_offset=12, end_lineno=218, end_col_offset=74)],
      orelse=[], lineno=217, col_offset=8, end_lineno=218, end_col_offset=74), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=219, col_offset=13, end_lineno=219, end_col_offset=17), args=[Name(id=''questions_pathname'',
      ctx=Load(), lineno=219, col_offset=18, end_lineno=219, end_col_offset=36), Constant(value=''r'',
      lineno=219, col_offset=38, end_lineno=219, end_col_offset=41)], keywords=[],
      lineno=219, col_offset=13, end_lineno=219, end_col_offset=42), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=219, col_offset=46, end_lineno=219, end_col_offset=47))],
      body=[Assign(targets=[Name(id=''questions'', ctx=Store(), lineno=220, col_offset=12,
      end_lineno=220, end_col_offset=21)], value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=220, col_offset=24, end_lineno=220, end_col_offset=28), attr=''load'',
      ctx=Load(), lineno=220, col_offset=24, end_lineno=220, end_col_offset=33), args=[Name(id=''f'',
      ctx=Load(), lineno=220, col_offset=34, end_lineno=220, end_col_offset=35)],
      keywords=[], lineno=220, col_offset=24, end_lineno=220, end_col_offset=36),
      lineno=220, col_offset=12, end_lineno=220, end_col_offset=36)], lineno=219,
      col_offset=8, end_lineno=220, end_col_offset=36), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=221, col_offset=8, end_lineno=221, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=221, col_offset=8, end_lineno=221, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Using
      questions from file: '', lineno=221, col_offset=21, end_lineno=221, end_col_offset=71),
      FormattedValue(value=Name(id=''questions_pathname'', ctx=Load(), lineno=221,
      col_offset=51, end_lineno=221, end_col_offset=69), conversion=-1, lineno=221,
      col_offset=21, end_lineno=221, end_col_offset=71)], lineno=221, col_offset=21,
      end_lineno=221, end_col_offset=71)], keywords=[], lineno=221, col_offset=8,
      end_lineno=221, end_col_offset=72), lineno=221, col_offset=8, end_lineno=221,
      end_col_offset=72)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=223, col_offset=8, end_lineno=223, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=223, col_offset=8, end_lineno=223, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Questions
      file not valid: '', lineno=223, col_offset=21, end_lineno=223, end_col_offset=94),
      FormattedValue(value=Name(id=''questions_pathname'', ctx=Load(), lineno=223,
      col_offset=50, end_lineno=223, end_col_offset=68), conversion=-1, lineno=223,
      col_offset=21, end_lineno=223, end_col_offset=94), Constant(value='' Using default
      questions'', lineno=223, col_offset=21, end_lineno=223, end_col_offset=94)],
      lineno=223, col_offset=21, end_lineno=223, end_col_offset=94)], keywords=[],
      lineno=223, col_offset=8, end_lineno=223, end_col_offset=95), lineno=223, col_offset=8,
      end_lineno=223, end_col_offset=95), Assign(targets=[Name(id=''questions'', ctx=Store(),
      lineno=224, col_offset=8, end_lineno=224, end_col_offset=17)], value=Call(func=Name(id=''get_default_questions'',
      ctx=Load(), lineno=224, col_offset=20, end_lineno=224, end_col_offset=41), args=[],
      keywords=[], lineno=224, col_offset=20, end_lineno=224, end_col_offset=43),
      lineno=224, col_offset=8, end_lineno=224, end_col_offset=43)], lineno=222, col_offset=4,
      end_lineno=224, end_col_offset=43)], orelse=[], finalbody=[], lineno=216, col_offset=4,
      end_lineno=224, end_col_offset=43), Return(value=Name(id=''questions'', ctx=Load(),
      lineno=225, col_offset=11, end_lineno=225, end_col_offset=20), lineno=225, col_offset=4,
      end_lineno=225, end_col_offset=20)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=208, col_offset=46, end_lineno=208, end_col_offset=50), slice=Name(id=''Dict'',
      ctx=Load(), lineno=208, col_offset=51, end_lineno=208, end_col_offset=55), ctx=Load(),
      lineno=208, col_offset=46, end_lineno=208, end_col_offset=56), lineno=208, col_offset=0,
      end_lineno=225, end_col_offset=20)'
    function_docstring: "Get questions from file or default\nArgs:\n    questions_pathname\
      \ (str): The pathname of the questions file\nReturns:\n    List[Dict]: The list\
      \ of questions"
    function_inputs:
    - questions_pathname
    function_defaults: []
    function_returns:
    - questions
    function_calls:
    - os.path.join
    - os.getcwd
    - open
    - json.load
    - logging.info
    - get_default_questions
    function_call_inputs:
      os.path.join:
      - os.getcwd()
      - QUESTIONS_FILE
      os.getcwd: []
      open:
      - questions_pathname
      - '''r'''
      json.load:
      - f
      logging.info:
      - 'f''Questions file not valid: {questions_pathname} Using default questions'''
      get_default_questions: []
    function_variables:
    - questions
    - questions_pathname
    function_decorators: []
    function_annotations: []
    function_properties: []
  instantiate_model:
    function_name: instantiate_model
    function_code: "def instantiate_model(model_config: Dict) -> object:\n    \"\"\
      \"\n    Imports and instantiates a model based on the provided configuration.\n\
      \    Args:\n        model_config (dict): model configuration dictionary.\n \
      \   Returns:\n        object: An instance of the specified model class, or None\
      \ if error.\n    \"\"\"\n    try:\n        module_name, class_name = model_config['model_import_path'].rsplit('.',\
      \ 1)\n        ModelClass = getattr(importlib.import_module(module_name), class_name)\n\
      \        model_params = model_config['model_params']\n        inference_function_name\
      \ = model_config['model_inference_function']\n        if inference_function_name\
      \ != '':\n            inference_function = getattr(ModelClass, inference_function_name)\n\
      \            model = inference_function(model_params.pop('model_path'), **model_params)\n\
      \        else:\n            model = ModelClass(model_params.pop('model_path'),\
      \ **model_params)\n        return model\n    except ImportError or AttributeError\
      \ or Exception as e:\n        logging.info(f'Failed to instantiate the model.\
      \ Error: {e}')\n        return None"
    function_ast: 'FunctionDef(name=''instantiate_model'', args=arguments(posonlyargs=[],
      args=[arg(arg=''model_config'', annotation=Name(id=''Dict'', ctx=Load(), lineno=228,
      col_offset=36, end_lineno=228, end_col_offset=40), lineno=228, col_offset=22,
      end_lineno=228, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Imports and instantiates a model based
      on the provided configuration.\n    Args:\n        model_config (dict): model
      configuration dictionary.\n    Returns:\n        object: An instance of the
      specified model class, or None if error.\n    '', lineno=229, col_offset=4,
      end_lineno=235, end_col_offset=7), lineno=229, col_offset=4, end_lineno=235,
      end_col_offset=7), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
      ctx=Store(), lineno=237, col_offset=8, end_lineno=237, end_col_offset=19), Name(id=''class_name'',
      ctx=Store(), lineno=237, col_offset=21, end_lineno=237, end_col_offset=31)],
      ctx=Store(), lineno=237, col_offset=8, end_lineno=237, end_col_offset=31)],
      value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'', ctx=Load(),
      lineno=237, col_offset=34, end_lineno=237, end_col_offset=46), slice=Constant(value=''model_import_path'',
      lineno=237, col_offset=47, end_lineno=237, end_col_offset=66), ctx=Load(), lineno=237,
      col_offset=34, end_lineno=237, end_col_offset=67), attr=''rsplit'', ctx=Load(),
      lineno=237, col_offset=34, end_lineno=237, end_col_offset=74), args=[Constant(value=''.'',
      lineno=237, col_offset=75, end_lineno=237, end_col_offset=78), Constant(value=1,
      lineno=237, col_offset=80, end_lineno=237, end_col_offset=81)], keywords=[],
      lineno=237, col_offset=34, end_lineno=237, end_col_offset=82), lineno=237, col_offset=8,
      end_lineno=237, end_col_offset=82), Assign(targets=[Name(id=''ModelClass'',
      ctx=Store(), lineno=238, col_offset=8, end_lineno=238, end_col_offset=18)],
      value=Call(func=Name(id=''getattr'', ctx=Load(), lineno=238, col_offset=21,
      end_lineno=238, end_col_offset=28), args=[Call(func=Attribute(value=Name(id=''importlib'',
      ctx=Load(), lineno=238, col_offset=29, end_lineno=238, end_col_offset=38), attr=''import_module'',
      ctx=Load(), lineno=238, col_offset=29, end_lineno=238, end_col_offset=52), args=[Name(id=''module_name'',
      ctx=Load(), lineno=238, col_offset=53, end_lineno=238, end_col_offset=64)],
      keywords=[], lineno=238, col_offset=29, end_lineno=238, end_col_offset=65),
      Name(id=''class_name'', ctx=Load(), lineno=238, col_offset=67, end_lineno=238,
      end_col_offset=77)], keywords=[], lineno=238, col_offset=21, end_lineno=238,
      end_col_offset=78), lineno=238, col_offset=8, end_lineno=238, end_col_offset=78),
      Assign(targets=[Name(id=''model_params'', ctx=Store(), lineno=239, col_offset=8,
      end_lineno=239, end_col_offset=20)], value=Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=239, col_offset=23, end_lineno=239, end_col_offset=35), slice=Constant(value=''model_params'',
      lineno=239, col_offset=36, end_lineno=239, end_col_offset=50), ctx=Load(), lineno=239,
      col_offset=23, end_lineno=239, end_col_offset=51), lineno=239, col_offset=8,
      end_lineno=239, end_col_offset=51), Assign(targets=[Name(id=''inference_function_name'',
      ctx=Store(), lineno=240, col_offset=8, end_lineno=240, end_col_offset=31)],
      value=Subscript(value=Name(id=''model_config'', ctx=Load(), lineno=240, col_offset=34,
      end_lineno=240, end_col_offset=46), slice=Constant(value=''model_inference_function'',
      lineno=240, col_offset=47, end_lineno=240, end_col_offset=73), ctx=Load(), lineno=240,
      col_offset=34, end_lineno=240, end_col_offset=74), lineno=240, col_offset=8,
      end_lineno=240, end_col_offset=74), If(test=Compare(left=Name(id=''inference_function_name'',
      ctx=Load(), lineno=241, col_offset=11, end_lineno=241, end_col_offset=34), ops=[NotEq()],
      comparators=[Constant(value='''', lineno=241, col_offset=38, end_lineno=241,
      end_col_offset=40)], lineno=241, col_offset=11, end_lineno=241, end_col_offset=40),
      body=[Assign(targets=[Name(id=''inference_function'', ctx=Store(), lineno=242,
      col_offset=12, end_lineno=242, end_col_offset=30)], value=Call(func=Name(id=''getattr'',
      ctx=Load(), lineno=242, col_offset=33, end_lineno=242, end_col_offset=40), args=[Name(id=''ModelClass'',
      ctx=Load(), lineno=242, col_offset=41, end_lineno=242, end_col_offset=51), Name(id=''inference_function_name'',
      ctx=Load(), lineno=242, col_offset=53, end_lineno=242, end_col_offset=76)],
      keywords=[], lineno=242, col_offset=33, end_lineno=242, end_col_offset=77),
      lineno=242, col_offset=12, end_lineno=242, end_col_offset=77), Assign(targets=[Name(id=''model'',
      ctx=Store(), lineno=243, col_offset=12, end_lineno=243, end_col_offset=17)],
      value=Call(func=Name(id=''inference_function'', ctx=Load(), lineno=243, col_offset=20,
      end_lineno=243, end_col_offset=38), args=[Call(func=Attribute(value=Name(id=''model_params'',
      ctx=Load(), lineno=243, col_offset=39, end_lineno=243, end_col_offset=51), attr=''pop'',
      ctx=Load(), lineno=243, col_offset=39, end_lineno=243, end_col_offset=55), args=[Constant(value=''model_path'',
      lineno=243, col_offset=56, end_lineno=243, end_col_offset=68)], keywords=[],
      lineno=243, col_offset=39, end_lineno=243, end_col_offset=69)], keywords=[keyword(value=Name(id=''model_params'',
      ctx=Load(), lineno=243, col_offset=73, end_lineno=243, end_col_offset=85), lineno=243,
      col_offset=71, end_lineno=243, end_col_offset=85)], lineno=243, col_offset=20,
      end_lineno=243, end_col_offset=86), lineno=243, col_offset=12, end_lineno=243,
      end_col_offset=86)], orelse=[Assign(targets=[Name(id=''model'', ctx=Store(),
      lineno=245, col_offset=12, end_lineno=245, end_col_offset=17)], value=Call(func=Name(id=''ModelClass'',
      ctx=Load(), lineno=245, col_offset=20, end_lineno=245, end_col_offset=30), args=[Call(func=Attribute(value=Name(id=''model_params'',
      ctx=Load(), lineno=245, col_offset=31, end_lineno=245, end_col_offset=43), attr=''pop'',
      ctx=Load(), lineno=245, col_offset=31, end_lineno=245, end_col_offset=47), args=[Constant(value=''model_path'',
      lineno=245, col_offset=48, end_lineno=245, end_col_offset=60)], keywords=[],
      lineno=245, col_offset=31, end_lineno=245, end_col_offset=61)], keywords=[keyword(value=Name(id=''model_params'',
      ctx=Load(), lineno=245, col_offset=65, end_lineno=245, end_col_offset=77), lineno=245,
      col_offset=63, end_lineno=245, end_col_offset=77)], lineno=245, col_offset=20,
      end_lineno=245, end_col_offset=78), lineno=245, col_offset=12, end_lineno=245,
      end_col_offset=78)], lineno=241, col_offset=8, end_lineno=245, end_col_offset=78),
      Return(value=Name(id=''model'', ctx=Load(), lineno=246, col_offset=15, end_lineno=246,
      end_col_offset=20), lineno=246, col_offset=8, end_lineno=246, end_col_offset=20)],
      handlers=[ExceptHandler(type=BoolOp(op=Or(), values=[Name(id=''ImportError'',
      ctx=Load(), lineno=247, col_offset=11, end_lineno=247, end_col_offset=22), Name(id=''AttributeError'',
      ctx=Load(), lineno=247, col_offset=26, end_lineno=247, end_col_offset=40), Name(id=''Exception'',
      ctx=Load(), lineno=247, col_offset=44, end_lineno=247, end_col_offset=53)],
      lineno=247, col_offset=11, end_lineno=247, end_col_offset=53), name=''e'', body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=248, col_offset=8, end_lineno=248, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=248, col_offset=8, end_lineno=248, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Failed
      to instantiate the model. Error: '', lineno=248, col_offset=21, end_lineno=248,
      end_col_offset=67), FormattedValue(value=Name(id=''e'', ctx=Load(), lineno=248,
      col_offset=64, end_lineno=248, end_col_offset=65), conversion=-1, lineno=248,
      col_offset=21, end_lineno=248, end_col_offset=67)], lineno=248, col_offset=21,
      end_lineno=248, end_col_offset=67)], keywords=[], lineno=248, col_offset=8,
      end_lineno=248, end_col_offset=68), lineno=248, col_offset=8, end_lineno=248,
      end_col_offset=68), Return(value=Constant(value=None, lineno=249, col_offset=15,
      end_lineno=249, end_col_offset=19), lineno=249, col_offset=8, end_lineno=249,
      end_col_offset=19)], lineno=247, col_offset=4, end_lineno=249, end_col_offset=19)],
      orelse=[], finalbody=[], lineno=236, col_offset=4, end_lineno=249, end_col_offset=19)],
      decorator_list=[], returns=Name(id=''object'', ctx=Load(), lineno=228, col_offset=45,
      end_lineno=228, end_col_offset=51), lineno=228, col_offset=0, end_lineno=249,
      end_col_offset=19)'
    function_docstring: "Imports and instantiates a model based on the provided configuration.\n\
      Args:\n    model_config (dict): model configuration dictionary.\nReturns:\n\
      \    object: An instance of the specified model class, or None if error."
    function_inputs:
    - model_config
    function_defaults: []
    function_returns:
    - model
    - None
    function_calls:
    - model_config['model_import_path'].rsplit
    - getattr
    - importlib.import_module
    - inference_function
    - model_params.pop
    - ModelClass
    - logging.info
    function_call_inputs:
      model_config['model_import_path'].rsplit:
      - '''.'''
      - '1'
      getattr:
      - ModelClass
      - inference_function_name
      importlib.import_module:
      - module_name
      inference_function:
      - model_params.pop('model_path')
      model_params.pop:
      - '''model_path'''
      ModelClass:
      - model_params.pop('model_path')
      logging.info:
      - 'f''Failed to instantiate the model. Error: {e}'''
    function_variables:
    - model_params
    - inference_function
    - ModelClass
    - model
    - inference_function_name
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_model:
    function_name: get_model
    function_code: "def get_model(model_config_pathname: str) -> tuple[object, str]:\n\
      \    \"\"\"\n    Returns an instantiated model and prompt template based on\
      \ the model configuration.\n    Agrs:\n        model_config_pathname (str):\
      \ The pathname of the model config file\n    Returns:\n        Tuple[object,\
      \ str]: The instantiated model and prompt template \n    \"\"\"\n    try:\n\
      \        if not model_config_pathname:\n            model_config_pathname =\
      \ os.path.join(os.getcwd(), MODEL_CONFIG_FILE)\n        with open(model_config_pathname,\
      \ 'r') as config_file:\n            model_config = yaml.safe_load(config_file)\n\
      \        logging.info(f'Using model config from file: {model_config_pathname}')\n\
      \    except:\n        logging.info(f'Model config file not valid: {model_config_pathname}\
      \ Using default model config')\n        model_config = get_default_model_config()\n\
      \    return (instantiate_model(model_config['inference_model']), model_config['prompt_template'])"
    function_ast: 'FunctionDef(name=''get_model'', args=arguments(posonlyargs=[],
      args=[arg(arg=''model_config_pathname'', annotation=Name(id=''str'', ctx=Load(),
      lineno=252, col_offset=37, end_lineno=252, end_col_offset=40), lineno=252, col_offset=14,
      end_lineno=252, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Returns an instantiated model and prompt
      template based on the model configuration.\n    Agrs:\n        model_config_pathname
      (str): The pathname of the model config file\n    Returns:\n        Tuple[object,
      str]: The instantiated model and prompt template \n    '', lineno=253, col_offset=4,
      end_lineno=259, end_col_offset=7), lineno=253, col_offset=4, end_lineno=259,
      end_col_offset=7), Try(body=[If(test=UnaryOp(op=Not(), operand=Name(id=''model_config_pathname'',
      ctx=Load(), lineno=261, col_offset=15, end_lineno=261, end_col_offset=36), lineno=261,
      col_offset=11, end_lineno=261, end_col_offset=36), body=[Assign(targets=[Name(id=''model_config_pathname'',
      ctx=Store(), lineno=262, col_offset=12, end_lineno=262, end_col_offset=33)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=262, col_offset=36, end_lineno=262, end_col_offset=38), attr=''path'',
      ctx=Load(), lineno=262, col_offset=36, end_lineno=262, end_col_offset=43), attr=''join'',
      ctx=Load(), lineno=262, col_offset=36, end_lineno=262, end_col_offset=48), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=262, col_offset=49, end_lineno=262, end_col_offset=51), attr=''getcwd'',
      ctx=Load(), lineno=262, col_offset=49, end_lineno=262, end_col_offset=58), args=[],
      keywords=[], lineno=262, col_offset=49, end_lineno=262, end_col_offset=60),
      Name(id=''MODEL_CONFIG_FILE'', ctx=Load(), lineno=262, col_offset=62, end_lineno=262,
      end_col_offset=79)], keywords=[], lineno=262, col_offset=36, end_lineno=262,
      end_col_offset=80), lineno=262, col_offset=12, end_lineno=262, end_col_offset=80)],
      orelse=[], lineno=261, col_offset=8, end_lineno=262, end_col_offset=80), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=263, col_offset=13, end_lineno=263, end_col_offset=17), args=[Name(id=''model_config_pathname'',
      ctx=Load(), lineno=263, col_offset=18, end_lineno=263, end_col_offset=39), Constant(value=''r'',
      lineno=263, col_offset=41, end_lineno=263, end_col_offset=44)], keywords=[],
      lineno=263, col_offset=13, end_lineno=263, end_col_offset=45), optional_vars=Name(id=''config_file'',
      ctx=Store(), lineno=263, col_offset=49, end_lineno=263, end_col_offset=60))],
      body=[Assign(targets=[Name(id=''model_config'', ctx=Store(), lineno=264, col_offset=12,
      end_lineno=264, end_col_offset=24)], value=Call(func=Attribute(value=Name(id=''yaml'',
      ctx=Load(), lineno=264, col_offset=27, end_lineno=264, end_col_offset=31), attr=''safe_load'',
      ctx=Load(), lineno=264, col_offset=27, end_lineno=264, end_col_offset=41), args=[Name(id=''config_file'',
      ctx=Load(), lineno=264, col_offset=42, end_lineno=264, end_col_offset=53)],
      keywords=[], lineno=264, col_offset=27, end_lineno=264, end_col_offset=54),
      lineno=264, col_offset=12, end_lineno=264, end_col_offset=54)], lineno=263,
      col_offset=8, end_lineno=264, end_col_offset=54), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=265, col_offset=8, end_lineno=265, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=265, col_offset=8, end_lineno=265, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Using
      model config from file: '', lineno=265, col_offset=21, end_lineno=265, end_col_offset=77),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=265,
      col_offset=54, end_lineno=265, end_col_offset=75), conversion=-1, lineno=265,
      col_offset=21, end_lineno=265, end_col_offset=77)], lineno=265, col_offset=21,
      end_lineno=265, end_col_offset=77)], keywords=[], lineno=265, col_offset=8,
      end_lineno=265, end_col_offset=78), lineno=265, col_offset=8, end_lineno=265,
      end_col_offset=78)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=267, col_offset=8, end_lineno=267, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=267, col_offset=8, end_lineno=267, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Model
      config file not valid: '', lineno=267, col_offset=21, end_lineno=267, end_col_offset=103),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=267,
      col_offset=53, end_lineno=267, end_col_offset=74), conversion=-1, lineno=267,
      col_offset=21, end_lineno=267, end_col_offset=103), Constant(value='' Using
      default model config'', lineno=267, col_offset=21, end_lineno=267, end_col_offset=103)],
      lineno=267, col_offset=21, end_lineno=267, end_col_offset=103)], keywords=[],
      lineno=267, col_offset=8, end_lineno=267, end_col_offset=104), lineno=267, col_offset=8,
      end_lineno=267, end_col_offset=104), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=268, col_offset=8, end_lineno=268, end_col_offset=20)],
      value=Call(func=Name(id=''get_default_model_config'', ctx=Load(), lineno=268,
      col_offset=23, end_lineno=268, end_col_offset=47), args=[], keywords=[], lineno=268,
      col_offset=23, end_lineno=268, end_col_offset=49), lineno=268, col_offset=8,
      end_lineno=268, end_col_offset=49)], lineno=266, col_offset=4, end_lineno=268,
      end_col_offset=49)], orelse=[], finalbody=[], lineno=260, col_offset=4, end_lineno=268,
      end_col_offset=49), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
      ctx=Load(), lineno=269, col_offset=11, end_lineno=269, end_col_offset=28), args=[Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=269, col_offset=29, end_lineno=269, end_col_offset=41), slice=Constant(value=''inference_model'',
      lineno=269, col_offset=42, end_lineno=269, end_col_offset=59), ctx=Load(), lineno=269,
      col_offset=29, end_lineno=269, end_col_offset=60)], keywords=[], lineno=269,
      col_offset=11, end_lineno=269, end_col_offset=61), Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=269, col_offset=63, end_lineno=269, end_col_offset=75), slice=Constant(value=''prompt_template'',
      lineno=269, col_offset=76, end_lineno=269, end_col_offset=93), ctx=Load(), lineno=269,
      col_offset=63, end_lineno=269, end_col_offset=94)], ctx=Load(), lineno=269,
      col_offset=11, end_lineno=269, end_col_offset=94), lineno=269, col_offset=4,
      end_lineno=269, end_col_offset=94)], decorator_list=[], returns=Subscript(value=Name(id=''tuple'',
      ctx=Load(), lineno=252, col_offset=45, end_lineno=252, end_col_offset=50), slice=Tuple(elts=[Name(id=''object'',
      ctx=Load(), lineno=252, col_offset=51, end_lineno=252, end_col_offset=57), Name(id=''str'',
      ctx=Load(), lineno=252, col_offset=59, end_lineno=252, end_col_offset=62)],
      ctx=Load(), lineno=252, col_offset=51, end_lineno=252, end_col_offset=62), ctx=Load(),
      lineno=252, col_offset=45, end_lineno=252, end_col_offset=63), lineno=252, col_offset=0,
      end_lineno=269, end_col_offset=94)'
    function_docstring: "Returns an instantiated model and prompt template based on\
      \ the model configuration.\nAgrs:\n    model_config_pathname (str): The pathname\
      \ of the model config file\nReturns:\n    Tuple[object, str]: The instantiated\
      \ model and prompt template "
    function_inputs:
    - model_config_pathname
    function_defaults: []
    function_returns:
    - (instantiate_model(model_config['inference_model']), model_config['prompt_template'])
    function_calls:
    - os.path.join
    - os.getcwd
    - open
    - yaml.safe_load
    - logging.info
    - get_default_model_config
    - instantiate_model
    function_call_inputs:
      os.path.join:
      - os.getcwd()
      - MODEL_CONFIG_FILE
      os.getcwd: []
      open:
      - model_config_pathname
      - '''r'''
      yaml.safe_load:
      - config_file
      logging.info:
      - 'f''Model config file not valid: {model_config_pathname} Using default model
        config'''
      get_default_model_config: []
      instantiate_model:
      - model_config['inference_model']
    function_variables:
    - model_config_pathname
    - model_config
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_questions_file:
    function_name: write_questions_file
    function_code: "def write_questions_file(output_dir: str='') -> None:\n    \"\"\
      \"\n    Writes the default questions to a file in JSON format.\n    Args:\n\
      \        output_dir (str): The directory to write the questions file to.\n \
      \   Returns:\n        None\n    \"\"\"\n    questions = get_default_questions()\n\
      \    output_dir = output_dir if output_dir and Path(output_dir).is_dir() else\
      \ os.getcwd()\n    with open(os.path.join(output_dir, QUESTIONS_FILE), 'w')\
      \ as file:\n        json.dump(questions, file, indent=4)"
    function_ast: 'FunctionDef(name=''write_questions_file'', args=arguments(posonlyargs=[],
      args=[arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load(), lineno=272,
      col_offset=37, end_lineno=272, end_col_offset=40), lineno=272, col_offset=25,
      end_lineno=272, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''',
      lineno=272, col_offset=41, end_lineno=272, end_col_offset=43)]), body=[Expr(value=Constant(value=''\n    Writes
      the default questions to a file in JSON format.\n    Args:\n        output_dir
      (str): The directory to write the questions file to.\n    Returns:\n        None\n    '',
      lineno=273, col_offset=4, end_lineno=279, end_col_offset=7), lineno=273, col_offset=4,
      end_lineno=279, end_col_offset=7), Assign(targets=[Name(id=''questions'', ctx=Store(),
      lineno=280, col_offset=4, end_lineno=280, end_col_offset=13)], value=Call(func=Name(id=''get_default_questions'',
      ctx=Load(), lineno=280, col_offset=16, end_lineno=280, end_col_offset=37), args=[],
      keywords=[], lineno=280, col_offset=16, end_lineno=280, end_col_offset=39),
      lineno=280, col_offset=4, end_lineno=280, end_col_offset=39), Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=281, col_offset=4, end_lineno=281, end_col_offset=14)],
      value=IfExp(test=BoolOp(op=And(), values=[Name(id=''output_dir'', ctx=Load(),
      lineno=281, col_offset=31, end_lineno=281, end_col_offset=41), Call(func=Attribute(value=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=281, col_offset=46, end_lineno=281, end_col_offset=50), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=281, col_offset=51, end_lineno=281, end_col_offset=61)],
      keywords=[], lineno=281, col_offset=46, end_lineno=281, end_col_offset=62),
      attr=''is_dir'', ctx=Load(), lineno=281, col_offset=46, end_lineno=281, end_col_offset=69),
      args=[], keywords=[], lineno=281, col_offset=46, end_lineno=281, end_col_offset=71)],
      lineno=281, col_offset=31, end_lineno=281, end_col_offset=71), body=Name(id=''output_dir'',
      ctx=Load(), lineno=281, col_offset=17, end_lineno=281, end_col_offset=27), orelse=Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=281, col_offset=77, end_lineno=281, end_col_offset=79), attr=''getcwd'',
      ctx=Load(), lineno=281, col_offset=77, end_lineno=281, end_col_offset=86), args=[],
      keywords=[], lineno=281, col_offset=77, end_lineno=281, end_col_offset=88),
      lineno=281, col_offset=17, end_lineno=281, end_col_offset=88), lineno=281, col_offset=4,
      end_lineno=281, end_col_offset=88), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=282, col_offset=9, end_lineno=282, end_col_offset=13), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=282, col_offset=14, end_lineno=282, end_col_offset=16), attr=''path'',
      ctx=Load(), lineno=282, col_offset=14, end_lineno=282, end_col_offset=21), attr=''join'',
      ctx=Load(), lineno=282, col_offset=14, end_lineno=282, end_col_offset=26), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=282, col_offset=27, end_lineno=282, end_col_offset=37), Name(id=''QUESTIONS_FILE'',
      ctx=Load(), lineno=282, col_offset=39, end_lineno=282, end_col_offset=53)],
      keywords=[], lineno=282, col_offset=14, end_lineno=282, end_col_offset=54),
      Constant(value=''w'', lineno=282, col_offset=56, end_lineno=282, end_col_offset=59)],
      keywords=[], lineno=282, col_offset=9, end_lineno=282, end_col_offset=60), optional_vars=Name(id=''file'',
      ctx=Store(), lineno=282, col_offset=64, end_lineno=282, end_col_offset=68))],
      body=[Expr(value=Call(func=Attribute(value=Name(id=''json'', ctx=Load(), lineno=283,
      col_offset=8, end_lineno=283, end_col_offset=12), attr=''dump'', ctx=Load(),
      lineno=283, col_offset=8, end_lineno=283, end_col_offset=17), args=[Name(id=''questions'',
      ctx=Load(), lineno=283, col_offset=18, end_lineno=283, end_col_offset=27), Name(id=''file'',
      ctx=Load(), lineno=283, col_offset=29, end_lineno=283, end_col_offset=33)],
      keywords=[keyword(arg=''indent'', value=Constant(value=4, lineno=283, col_offset=42,
      end_lineno=283, end_col_offset=43), lineno=283, col_offset=35, end_lineno=283,
      end_col_offset=43)], lineno=283, col_offset=8, end_lineno=283, end_col_offset=44),
      lineno=283, col_offset=8, end_lineno=283, end_col_offset=44)], lineno=282, col_offset=4,
      end_lineno=283, end_col_offset=44)], decorator_list=[], returns=Constant(value=None,
      lineno=272, col_offset=48, end_lineno=272, end_col_offset=52), lineno=272, col_offset=0,
      end_lineno=283, end_col_offset=44)'
    function_docstring: "Writes the default questions to a file in JSON format.\n\
      Args:\n    output_dir (str): The directory to write the questions file to.\n\
      Returns:\n    None"
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns: []
    function_calls:
    - get_default_questions
    - Path(output_dir).is_dir
    - Path
    - os.getcwd
    - open
    - os.path.join
    - json.dump
    function_call_inputs:
      get_default_questions: []
      Path(output_dir).is_dir: []
      Path:
      - output_dir
      os.getcwd: []
      open:
      - os.path.join(output_dir, QUESTIONS_FILE)
      - '''w'''
      os.path.join:
      - output_dir
      - QUESTIONS_FILE
      json.dump:
      - questions
      - file
    function_variables:
    - questions
    - output_dir
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_model_config_file:
    function_name: write_model_config_file
    function_code: "def write_model_config_file(output_dir: str='') -> None:\n   \
      \ \"\"\"\n    Writes the default model config to a file in YAML format.\n  \
      \  Args:\n        output_dir (str): The directory to write the model config\
      \ file to.\n    Returns:\n        None\n    \"\"\"\n    model_config = get_default_model_config()\n\
      \    output_dir = output_dir if output_dir and Path(output_dir).is_dir() else\
      \ os.getcwd()\n    with open(os.path.join(output_dir, MODEL_CONFIG_FILE), 'w')\
      \ as file:\n        yaml.dump(model_config, file)"
    function_ast: 'FunctionDef(name=''write_model_config_file'', args=arguments(posonlyargs=[],
      args=[arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load(), lineno=286,
      col_offset=40, end_lineno=286, end_col_offset=43), lineno=286, col_offset=28,
      end_lineno=286, end_col_offset=43)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''',
      lineno=286, col_offset=44, end_lineno=286, end_col_offset=46)]), body=[Expr(value=Constant(value=''\n    Writes
      the default model config to a file in YAML format.\n    Args:\n        output_dir
      (str): The directory to write the model config file to.\n    Returns:\n        None\n    '',
      lineno=287, col_offset=4, end_lineno=293, end_col_offset=7), lineno=287, col_offset=4,
      end_lineno=293, end_col_offset=7), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=294, col_offset=4, end_lineno=294, end_col_offset=16)],
      value=Call(func=Name(id=''get_default_model_config'', ctx=Load(), lineno=294,
      col_offset=19, end_lineno=294, end_col_offset=43), args=[], keywords=[], lineno=294,
      col_offset=19, end_lineno=294, end_col_offset=45), lineno=294, col_offset=4,
      end_lineno=294, end_col_offset=45), Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=295, col_offset=4, end_lineno=295, end_col_offset=14)],
      value=IfExp(test=BoolOp(op=And(), values=[Name(id=''output_dir'', ctx=Load(),
      lineno=295, col_offset=31, end_lineno=295, end_col_offset=41), Call(func=Attribute(value=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=295, col_offset=46, end_lineno=295, end_col_offset=50), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=295, col_offset=51, end_lineno=295, end_col_offset=61)],
      keywords=[], lineno=295, col_offset=46, end_lineno=295, end_col_offset=62),
      attr=''is_dir'', ctx=Load(), lineno=295, col_offset=46, end_lineno=295, end_col_offset=69),
      args=[], keywords=[], lineno=295, col_offset=46, end_lineno=295, end_col_offset=71)],
      lineno=295, col_offset=31, end_lineno=295, end_col_offset=71), body=Name(id=''output_dir'',
      ctx=Load(), lineno=295, col_offset=17, end_lineno=295, end_col_offset=27), orelse=Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=295, col_offset=77, end_lineno=295, end_col_offset=79), attr=''getcwd'',
      ctx=Load(), lineno=295, col_offset=77, end_lineno=295, end_col_offset=86), args=[],
      keywords=[], lineno=295, col_offset=77, end_lineno=295, end_col_offset=88),
      lineno=295, col_offset=17, end_lineno=295, end_col_offset=88), lineno=295, col_offset=4,
      end_lineno=295, end_col_offset=88), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=296, col_offset=9, end_lineno=296, end_col_offset=13), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=296, col_offset=14, end_lineno=296, end_col_offset=16), attr=''path'',
      ctx=Load(), lineno=296, col_offset=14, end_lineno=296, end_col_offset=21), attr=''join'',
      ctx=Load(), lineno=296, col_offset=14, end_lineno=296, end_col_offset=26), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=296, col_offset=27, end_lineno=296, end_col_offset=37), Name(id=''MODEL_CONFIG_FILE'',
      ctx=Load(), lineno=296, col_offset=39, end_lineno=296, end_col_offset=56)],
      keywords=[], lineno=296, col_offset=14, end_lineno=296, end_col_offset=57),
      Constant(value=''w'', lineno=296, col_offset=59, end_lineno=296, end_col_offset=62)],
      keywords=[], lineno=296, col_offset=9, end_lineno=296, end_col_offset=63), optional_vars=Name(id=''file'',
      ctx=Store(), lineno=296, col_offset=67, end_lineno=296, end_col_offset=71))],
      body=[Expr(value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load(), lineno=297,
      col_offset=8, end_lineno=297, end_col_offset=12), attr=''dump'', ctx=Load(),
      lineno=297, col_offset=8, end_lineno=297, end_col_offset=17), args=[Name(id=''model_config'',
      ctx=Load(), lineno=297, col_offset=18, end_lineno=297, end_col_offset=30), Name(id=''file'',
      ctx=Load(), lineno=297, col_offset=32, end_lineno=297, end_col_offset=36)],
      keywords=[], lineno=297, col_offset=8, end_lineno=297, end_col_offset=37), lineno=297,
      col_offset=8, end_lineno=297, end_col_offset=37)], lineno=296, col_offset=4,
      end_lineno=297, end_col_offset=37)], decorator_list=[], returns=Constant(value=None,
      lineno=286, col_offset=51, end_lineno=286, end_col_offset=55), lineno=286, col_offset=0,
      end_lineno=297, end_col_offset=37)'
    function_docstring: "Writes the default model config to a file in YAML format.\n\
      Args:\n    output_dir (str): The directory to write the model config file to.\n\
      Returns:\n    None"
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns: []
    function_calls:
    - get_default_model_config
    - Path(output_dir).is_dir
    - Path
    - os.getcwd
    - open
    - os.path.join
    - yaml.dump
    function_call_inputs:
      get_default_model_config: []
      Path(output_dir).is_dir: []
      Path:
      - output_dir
      os.getcwd: []
      open:
      - os.path.join(output_dir, MODEL_CONFIG_FILE)
      - '''w'''
      os.path.join:
      - output_dir
      - MODEL_CONFIG_FILE
      yaml.dump:
      - model_config
      - file
    function_variables:
    - output_dir
    - model_config
    function_decorators: []
    function_annotations: []
    function_properties: []
classes: {}
