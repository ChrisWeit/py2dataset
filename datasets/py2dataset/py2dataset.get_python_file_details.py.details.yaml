file_info:
  file_code: "\"\"\"\nUse AST to extract details from a Python file, determine the\
    \ code call graph and return it as a dictionary.\nRequirements:\n[req01] The get_all_calls\
    \ function shall:\n        a. Accept a node as an argument.\n        b. Recursively\
    \ find all function calls in the subtree rooted at the node.\n        c. Return\
    \ a list of all function calls in the subtree rooted at the node.\n[req02] The\
    \ `CodeVisitor` class shall:\n        a. Accept the source code as input\n   \
    \     b. Use the AST to extract details about the code.\n        c. Inherit from\
    \ `ast.NodeVisitor`.\n        d. Implement the `visit_FunctionDef` method to gather\
    \ details about functions.\n        e. Implement the `visit_ClassDef` method to\
    \ gather details about classes.\n        f. Implement the `extract_details` method\
    \ to parse information about a given node.\n        g. Implement the `analyze`\
    \ method to traverse the AST, list all nodes within the current file, and populate\
    \ the 'file_info' attribute with comprehensive file details.\n[req03] The `code_graph`\
    \ function shall:\n        a. Accept the file summary and file details as input.\n\
    \        b. Construct a dictionary with nodes and edges that illustrate code relationships.\n\
    \        c. Define elements such as function nodes, class nodes, and method nodes.\n\
    \        d. Specify edges to represent relationships like function calls, method\
    \ calls, and class inheritance.\n        e. Return a dictionary representation\
    \ of the code graph, aiding in understanding the code's structure and inter-relationships.\n\
    [req04] The `get_python_file_details` function shall:\n        a. Accept a file\
    \ path as an argument.\n        b. Extract detailed information from the specified\
    \ Python file using the AST and the `CodeVisitor` class.\n        c. Include the\
    \ entire file graph in the returned details.\n        d. Return a dictionary encompassing\
    \ the extracted file details.\n\"\"\"\nimport ast\nimport re\nimport json\nimport\
    \ logging\nimport networkx as nx\nfrom typing import Dict, List, Optional, Union\n\
    \ndef get_all_calls(node):\n    \"\"\"\n    Recursively find all function calls\
    \ in the subtree rooted at `node`.\n    Args:\n        node: ast.AST: The node\
    \ to start the search from.\n    Returns:\n        list: A list of all function\
    \ calls in the subtree rooted at `node`.\n    \"\"\"\n    calls = {}\n    for\
    \ child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n\
    \            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n\
    \        calls.update(get_all_calls(child))\n    return calls\n\nclass CodeVisitor(ast.NodeVisitor):\n\
    \    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and\
    \ extracting details about the code.\n    Attributes:\n        code (str): The\
    \ source code.\n        functions(Dict): details about functions in the code.\n\
    \        classes (Dict): details about classes in the code.\n        file_info\
    \ (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node:\
    \ ast.FunctionDef) -> None: \n            Extract details about a function.\n\
    \        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details\
    \ about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str,\
    \ Union[str, List[str]]]: \n            Extract details about a node.\n      \
    \  analyze(node: ast.AST) -> None: \n            Populate file_info with details\
    \ about the file.\n    \"\"\"\n    def __init__(self, code: str):\n        \"\"\
    \"\n        Initialize a new instance of the class.\n        Args:\n         \
    \   code: str: The source code.\n        Returns:\n            None\n        \"\
    \"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str,\
    \ Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str,\
    \ List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]]\
    \ = {}\n        self.current_class: str = None\n    \n    def visit_FunctionDef(self,\
    \ node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about\
    \ a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n\
    \        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node,\
    \ 'method' if self.current_class else 'function')\n        if self.current_class:\n\
    \            self.classes[self.current_class][f'class_method_{node.name}'] = details\n\
    \        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\
    \n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n\
    \        Extract details about a class.\n        Args:\n            node: ast.ClassDef:\
    \ The node to visit.\n        Returns:\n            None\n        \"\"\"\n   \
    \     self.classes[node.name] = self.extract_details(node, 'class') # populate\
    \ class dictionary when class definition found in AST\n        self.current_class\
    \ = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node)\
    \ # continue AST traversal to the next node\n        self.current_class = None\
    \  # reset current_class when finished with this class\n    \n    def extract_details(self,\
    \ node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n      \
    \  \"\"\"\n        Extract details about a node.\n        Args:\n            node:\
    \ ast.AST: The node to extract details from.\n            node_type: str: The\
    \ type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]:\
    \ The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n\
    \        call_data = get_all_calls(node)\n        details = {\n            f\"\
    {node_type}_name\": node.name, \n            f\"{node_type}_code\": ast.unparse(node),\n\
    \            f\"{node_type}_ast\": ast.dump(node, include_attributes=True), \n\
    \            f\"{node_type}_docstring\": ast.get_docstring(node),\n          \
    \  f\"{node_type}_inputs\": [arg.arg for arg in node.args.args] if node_type in\
    \ ['function', 'method'] else None,\n            f\"{node_type}_defaults\": [ast.unparse(d)\
    \ for d in node.args.defaults] if node_type in ['function', 'method'] else None,\n\
    \            f\"{node_type}_returns\": [ast.unparse(subnode.value) if subnode.value\
    \ is not None else \"None\" for subnode in node_walk if isinstance(subnode, ast.Return)],\n\
    \            f\"{node_type}_calls\": list(call_data.keys()),\n            f\"\
    {node_type}_call_inputs\": call_data, \n            f\"{node_type}_variables\"\
    : list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign)\
    \ for target in subnode.targets if isinstance(target, ast.Name)}),\n         \
    \   f\"{node_type}_decorators\": list({ast.unparse(decorator) for decorator in\
    \ node.decorator_list} if node.decorator_list else set()),\n            f\"{node_type}_annotations\"\
    : list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode,\
    \ ast.AnnAssign) and subnode.annotation is not None}),\n            f\"{node_type}_properties\"\
    : list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute)\
    \ and isinstance(subnode.ctx, ast.Store)}),\n        }  \n        if node_type\
    \ in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\
    \ # find attributes defined as self.attribute\n                attributes = [target.attr\
    \ for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets\
    \ if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name)\
    \ and target.value.id == 'self']\n                if attributes: # if this class\
    \ already has some attributes, add to them\n                    if \"class_attributes\"\
    \ in self.classes[self.current_class]:\n                        self.classes[self.current_class][\"\
    class_attributes\"].extend(attributes)\n                    else: # otherwise,\
    \ start a new list of attributes for this class\n                        self.classes[self.current_class][\"\
    class_attributes\"] = attributes\n            if node_type == 'class':\n     \
    \           details.update({\n                    \"class_attributes\": [target.attr\
    \ for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets\
    \ if isinstance(target, ast.Attribute)],\n                    \"class_methods\"\
    : [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)\
    \ and subnode.name != \"__init__\"],\n                    \"class_inheritance\"\
    : [ast.unparse(base) for base in node.bases] if node.bases else [],\n        \
    \            \"class_static_methods\": [subnode.name for subnode in node.body\
    \ if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\" and\
    \ any(isinstance(decorator, ast.Name) and decorator.id == \"staticmethod\" for\
    \ decorator in subnode.decorator_list)],\n                    })\n        return\
    \ details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n \
    \       Traverse the AST rooted at 'node', create a list of all nodes within the\
    \ current file, and populate 'file_info' with file details\n        Args:\n  \
    \          node: ast.AST: The node to analyze.\n        Returns:\n           \
    \ None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n\
    \        self.file_info = {\n            \"file_code\": self.code,\n         \
    \   \"file_ast\" : ast.dump(node),\n            \"file_dependencies\": list({alias.name\
    \ for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names}\
    \ | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}),\n\
    \            \"file_functions\": list(self.functions.keys()),\n            \"\
    file_classes\": list(self.classes.keys()),\n        }\n        \n        # add\
    \ file_summary to file_info\n        function_defs = [{func_name: {\"inputs\"\
    : details[\"function_inputs\"], \"calls\": details[\"function_calls\"], \"call_inputs\"\
    : details[\"function_call_inputs\"], \"returns\": details[\"function_returns\"\
    ]}} for func_name, details in self.functions.items()]\n        class_defs = []\n\
    \        for class_name, class_details in self.classes.items():\n            method_defs\
    \ = {}\n            for method_name, details in class_details.items():\n     \
    \           if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]]\
    \ = {\"inputs\": details[\"method_inputs\"], \"calls\": details[\"method_calls\"\
    ], \"call_inputs\": details[\"method_call_inputs\"], \"returns\": details[\"method_returns\"\
    ]}\n            class_defs.append({class_name: {\"method_defs\": method_defs}})\n\
    \        self.file_info[\"file_summary\"] = { 'dependencies': self.file_info[\"\
    file_dependencies\"], 'function_defs' : function_defs, 'class_defs' : class_defs}\n\
    \ndef code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str],\
    \ Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation\
    \ of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]:\
    \ The details extracted from the file.\n    Returns:\n        dict: A dictionary\
    \ with nodes and edges representing the relationships in the code.\n    \"\"\"\
    \n    G = nx.DiGraph()\n\n    # Create lookup dictionaries for function and class\
    \ method details\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n\
    \        function_details_lookup.update(function_def)\n    class_method_details_lookup\
    \ = {}\n    for class_def in file_summary['class_defs']:\n        for class_name,\
    \ class_details in class_def.items(): # Extract class name and details\n     \
    \       G.add_node(class_name) # Add class as a graph node\n            for method_name,\
    \ method_details in class_details['method_defs'].items():\n                qualified_method_name\
    \ = f'{class_name}.{method_name}' # Create method fully qualified name\n     \
    \           G.add_node(qualified_method_name) # Add method as a graph node\n \
    \               class_method_details_lookup[qualified_method_name] = method_details\
    \  # Store method details \n                G.add_edge(class_name, qualified_method_name)\
    \ # Add edge from class to method\n\n    # Helper function to extract edge data\
    \ from target details\n    def get_edge_data_from_details(target_details: dict,\
    \ source_details: dict, target: str) -> dict:\n        edge_data = {}\n      \
    \  if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n\
    \            edge_data['target_returns'] = list(set(target_details.get('returns',\
    \ [])))\n        if source_details and 'call_inputs' in source_details and target\
    \ in source_details['call_inputs']:\n            edge_data['target_inputs'] =\
    \ source_details['call_inputs'][target]     \n        return edge_data\n\n   \
    \ # Helper function to add edge with data\n    def add_edge_with_data(source:\
    \ str, target: str, init_method: Optional[str] = None) -> None:\n        target_details\
    \ = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n\
    \        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n\
    \        G.add_edge(source, target, **get_edge_data_from_details(target_details,\
    \ source_details, target))\n\n    # Helper function to add edges for function\
    \ or class method calls\n    def add_edges_for_calls(source_name, calls):\n  \
    \      class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n\
    \        for called in calls:\n            called_class_name = called.split('.')[0]\n\
    \            if called.startswith(\"self.\"):\n                method_name = called.replace(\"\
    self.\", \"\")\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\
    \n                if fully_qualified_name in class_method_details_lookup:\n  \
    \                  add_edge_with_data(source_name, fully_qualified_name)\n   \
    \                 continue\n            if (\n                called in function_details_lookup\
    \ or \n                called in class_method_details_lookup or \n           \
    \     f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup\n\
    \            ):\n                add_edge_with_data(source_name, called)\n   \
    \         elif called_class_name in class_names:\n                init_method\
    \ = None\n                init_method_name = f\"{called}.__init__\"\n        \
    \        if init_method_name in class_method_details_lookup:\n               \
    \     init_method = init_method_name\n                add_edge_with_data(source_name,\
    \ called, init_method)\n            else:\n                G.add_node(called)\n\
    \                add_edge_with_data(source_name, called)\n\n    # Add function\
    \ nodes to graph and edges for function calls\n    for function_name in function_details_lookup.keys():\n\
    \        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n\
    \        add_edges_for_calls(func_name, details['calls'])\n\n    # Add edges for\
    \ method calls\n    for qualified_method_name, details in class_method_details_lookup.items():\n\
    \        add_edges_for_calls(qualified_method_name, details['calls'])\n\n    #\
    \ Add edge data to edges and create node and edges to return\n    for edge in\
    \ G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target)\
    \ or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source)\
    \ or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details,\
    \ source_details, target)\n        G[source][target].update(edge_data)\n    nodes\
    \ = list(G.nodes)\n    edges = [{\"source\": edge[0], \"target\": edge[1], **edge[2]}\
    \ for edge in G.edges.data()]\n    return {\"nodes\": nodes, \"edges\": edges}\n\
    \n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n\
    \    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path:\
    \ str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict,\
    \ str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with\
    \ open(file_path, \"r\", encoding=\"utf-8\", errors='ignore') as f:\n        \
    \    code = f.read()\n            tree = ast.parse(code)\n    except:\n      \
    \  logging.warning(f\"Permission denied or syntax error in file: {file_path}\"\
    )\n        return None \n\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n\
    \    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions,\
    \ 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph']\
    \ = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary']\
    \ = json.dumps(file_details['file_info']['file_summary']).replace('\\\"','')\n\
    \    return file_details"
  file_ast: 'Module(body=[Expr(value=Constant(value="\nUse AST to extract details
    from a Python file, determine the code call graph and return it as a dictionary.\nRequirements:\n[req01]
    The get_all_calls function shall:\n        a. Accept a node as an argument.\n        b.
    Recursively find all function calls in the subtree rooted at the node.\n        c.
    Return a list of all function calls in the subtree rooted at the node.\n[req02]
    The `CodeVisitor` class shall:\n        a. Accept the source code as input\n        b.
    Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d.
    Implement the `visit_FunctionDef` method to gather details about functions.\n        e.
    Implement the `visit_ClassDef` method to gather details about classes.\n        f.
    Implement the `extract_details` method to parse information about a given node.\n        g.
    Implement the `analyze` method to traverse the AST, list all nodes within the
    current file, and populate the ''file_info'' attribute with comprehensive file
    details.\n[req03] The `code_graph` function shall:\n        a. Accept the file
    summary and file details as input.\n        b. Construct a dictionary with nodes
    and edges that illustrate code relationships.\n        c. Define elements such
    as function nodes, class nodes, and method nodes.\n        d. Specify edges to
    represent relationships like function calls, method calls, and class inheritance.\n        e.
    Return a dictionary representation of the code graph, aiding in understanding
    the code''s structure and inter-relationships.\n[req04] The `get_python_file_details`
    function shall:\n        a. Accept a file path as an argument.\n        b. Extract
    detailed information from the specified Python file using the AST and the `CodeVisitor`
    class.\n        c. Include the entire file graph in the returned details.\n        d.
    Return a dictionary encompassing the extracted file details.\n")), Import(names=[alias(name=''ast'')]),
    Import(names=[alias(name=''re'')]), Import(names=[alias(name=''json'')]), Import(names=[alias(name=''logging'')]),
    Import(names=[alias(name=''networkx'', asname=''nx'')]), ImportFrom(module=''typing'',
    names=[alias(name=''Dict''), alias(name=''List''), alias(name=''Optional''), alias(name=''Union'')],
    level=0), FunctionDef(name=''get_all_calls'', args=arguments(posonlyargs=[], args=[arg(arg=''node'')],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Recursively
    find all function calls in the subtree rooted at `node`.\n    Args:\n        node:
    ast.AST: The node to start the search from.\n    Returns:\n        list: A list
    of all function calls in the subtree rooted at `node`.\n    '')), Assign(targets=[Name(id=''calls'',
    ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id=''child'',
    ctx=Store()), iter=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''iter_child_nodes'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''child'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Call'', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id=''calls'',
    ctx=Load()), slice=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''unparse'',
    ctx=Load()), args=[Attribute(value=Name(id=''child'', ctx=Load()), attr=''func'',
    ctx=Load())], keywords=[]), ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Name(id=''arg'', ctx=Load())],
    keywords=[]), generators=[comprehension(target=Name(id=''arg'', ctx=Store()),
    iter=Attribute(value=Name(id=''child'', ctx=Load()), attr=''args'', ctx=Load()),
    ifs=[], is_async=0)]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''calls'',
    ctx=Load()), attr=''update'', ctx=Load()), args=[Call(func=Name(id=''get_all_calls'',
    ctx=Load()), args=[Name(id=''child'', ctx=Load())], keywords=[])], keywords=[]))],
    orelse=[]), Return(value=Name(id=''calls'', ctx=Load()))], decorator_list=[]),
    ClassDef(name=''CodeVisitor'', bases=[Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''NodeVisitor'', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=''\n    Visitor
    class for traversing an AST (Abstract Syntax Tree) and extracting details about
    the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict):
    details about functions in the code.\n        classes (Dict): details about classes
    in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node:
    ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node:
    ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node:
    ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract
    details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate
    file_info with details about the file.\n    '')), FunctionDef(name=''__init__'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''code'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Initialize
    a new instance of the class.\n        Args:\n            code: str: The source
    code.\n        Returns:\n            None\n        '')), AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''code'', ctx=Store()), annotation=Name(id=''str'', ctx=Load()),
    value=Name(id=''code'', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''functions'', ctx=Store()), annotation=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]),
    simple=0), AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load()), attr=''classes'',
    ctx=Store()), annotation=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Union'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''str'',
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Store()), annotation=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Store()), annotation=Name(id=''str'',
    ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name=''visit_FunctionDef'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''FunctionDef'', ctx=Load()))], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Expr(value=Constant(value=''\n        Extract details about
    a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        '')),
    Assign(targets=[Name(id=''details'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''extract_details'', ctx=Load()), args=[Name(id=''node'', ctx=Load()),
    IfExp(test=Attribute(value=Name(id=''self'', ctx=Load()), attr=''current_class'',
    ctx=Load()), body=Constant(value=''method''), orelse=Constant(value=''function''))],
    keywords=[])), If(test=Attribute(value=Name(id=''self'', ctx=Load()), attr=''current_class'',
    ctx=Load()), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load()), ctx=Load()), slice=JoinedStr(values=[Constant(value=''class_method_''),
    FormattedValue(value=Attribute(value=Name(id=''node'', ctx=Load()), attr=''name'',
    ctx=Load()), conversion=-1)]), ctx=Store())], value=Name(id=''details'', ctx=Load()))],
    orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''functions'', ctx=Load()), slice=Attribute(value=Name(id=''node'', ctx=Load()),
    attr=''name'', ctx=Load()), ctx=Store())], value=Name(id=''details'', ctx=Load()))]),
    Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''generic_visit'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[]))], decorator_list=[],
    returns=Constant(value=None)), FunctionDef(name=''visit_ClassDef'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''ClassDef'', ctx=Load()))], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Expr(value=Constant(value=''\n        Extract details about
    a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        '')),
    Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''node'', ctx=Load()),
    attr=''name'', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''extract_details'', ctx=Load()), args=[Name(id=''node'', ctx=Load()),
    Constant(value=''class'')], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Store())], value=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''name'', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''generic_visit'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''current_class'', ctx=Store())], value=Constant(value=None))], decorator_list=[],
    returns=Constant(value=None)), FunctionDef(name=''extract_details'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''AST'', ctx=Load())), arg(arg=''node_type'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Extract
    details about a node.\n        Args:\n            node: ast.AST: The node to extract
    details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str,
    Union[str, List[str]]]: The details extracted from the node.\n        '')), Assign(targets=[Name(id=''node_walk'',
    ctx=Store())], value=Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''walk'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[])], keywords=[])), Assign(targets=[Name(id=''call_data'', ctx=Store())],
    value=Call(func=Name(id=''get_all_calls'', ctx=Load()), args=[Name(id=''node'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''details'', ctx=Store())],
    value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_name'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_code'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_ast'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_docstring'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_inputs'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_defaults'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_returns'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_calls'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_call_inputs'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variables'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_decorators'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_annotations'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_properties'')])], values=[Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''name'', ctx=Load()), Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[]), Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''dump'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[keyword(arg=''include_attributes'',
    value=Constant(value=True))]), Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''get_docstring'', ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[]),
    IfExp(test=Compare(left=Name(id=''node_type'', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=''function''),
    Constant(value=''method'')], ctx=Load())]), body=ListComp(elt=Attribute(value=Name(id=''arg'',
    ctx=Load()), attr=''arg'', ctx=Load()), generators=[comprehension(target=Name(id=''arg'',
    ctx=Store()), iter=Attribute(value=Attribute(value=Name(id=''node'', ctx=Load()),
    attr=''args'', ctx=Load()), attr=''args'', ctx=Load()), ifs=[], is_async=0)]),
    orelse=Constant(value=None)), IfExp(test=Compare(left=Name(id=''node_type'', ctx=Load()),
    ops=[In()], comparators=[List(elts=[Constant(value=''function''), Constant(value=''method'')],
    ctx=Load())]), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''unparse'', ctx=Load()), args=[Name(id=''d'', ctx=Load())], keywords=[]),
    generators=[comprehension(target=Name(id=''d'', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''args'', ctx=Load()), attr=''defaults'', ctx=Load()), ifs=[],
    is_async=0)]), orelse=Constant(value=None)), ListComp(elt=IfExp(test=Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''value'', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]),
    body=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''unparse'',
    ctx=Load()), args=[Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''value'',
    ctx=Load())], keywords=[]), orelse=Constant(value=''None'')), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Return'', ctx=Load())], keywords=[])], is_async=0)]), Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''call_data'', ctx=Load()),
    attr=''keys'', ctx=Load()), args=[], keywords=[])], keywords=[]), Name(id=''call_data'',
    ctx=Load()), Call(func=Name(id=''list'', ctx=Load()), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Name(id=''target'', ctx=Load())],
    keywords=[]), generators=[comprehension(target=Name(id=''subnode'', ctx=Store()),
    iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Assign'', ctx=Load())], keywords=[])], is_async=0), comprehension(target=Name(id=''target'',
    ctx=Store()), iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''targets'',
    ctx=Load()), ifs=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''target'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Name'', ctx=Load())],
    keywords=[])], is_async=0)])], keywords=[]), Call(func=Name(id=''list'', ctx=Load()),
    args=[IfExp(test=Attribute(value=Name(id=''node'', ctx=Load()), attr=''decorator_list'',
    ctx=Load()), body=SetComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''unparse'', ctx=Load()), args=[Name(id=''decorator'', ctx=Load())], keywords=[]),
    generators=[comprehension(target=Name(id=''decorator'', ctx=Store()), iter=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''decorator_list'', ctx=Load()), ifs=[], is_async=0)]), orelse=Call(func=Name(id=''set'',
    ctx=Load()), args=[], keywords=[]))], keywords=[]), Call(func=Name(id=''list'',
    ctx=Load()), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''unparse'', ctx=Load()), args=[Attribute(value=Name(id=''subnode'', ctx=Load()),
    attr=''annotation'', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''AnnAssign'', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''annotation'', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])])],
    is_async=0)])], keywords=[]), Call(func=Name(id=''list'', ctx=Load()), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Name(id=''subnode'', ctx=Load())],
    keywords=[]), generators=[comprehension(target=Name(id=''subnode'', ctx=Store()),
    iter=Name(id=''node_walk'', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Attribute'', ctx=Load())], keywords=[]), Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''ctx'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Store'', ctx=Load())],
    keywords=[])])], is_async=0)])], keywords=[])])), If(test=Compare(left=Name(id=''node_type'',
    ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=''class''), Constant(value=''method'')],
    ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''node_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''method'')]), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load())]), body=[Assign(targets=[Name(id=''attributes'',
    ctx=Store())], value=ListComp(elt=Attribute(value=Name(id=''target'', ctx=Load()),
    attr=''attr'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Assign'', ctx=Load())], keywords=[])], is_async=0), comprehension(target=Name(id=''target'',
    ctx=Store()), iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''targets'',
    ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load()),
    args=[Name(id=''target'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''Attribute'', ctx=Load())], keywords=[]), Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Attribute(value=Name(id=''target'', ctx=Load()), attr=''value'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Name'', ctx=Load())],
    keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id=''target'',
    ctx=Load()), attr=''value'', ctx=Load()), attr=''id'', ctx=Load()), ops=[Eq()],
    comparators=[Constant(value=''self'')])])], is_async=0)])), If(test=Name(id=''attributes'',
    ctx=Load()), body=[If(test=Compare(left=Constant(value=''class_attributes''),
    ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''current_class'', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load()), ctx=Load()), slice=Constant(value=''class_attributes''),
    ctx=Load()), attr=''extend'', ctx=Load()), args=[Name(id=''attributes'', ctx=Load())],
    keywords=[]))], orelse=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load()), ctx=Load()), slice=Constant(value=''class_attributes''),
    ctx=Store())], value=Name(id=''attributes'', ctx=Load()))])], orelse=[])], orelse=[]),
    If(test=Compare(left=Name(id=''node_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''class'')]),
    body=[Expr(value=Call(func=Attribute(value=Name(id=''details'', ctx=Load()), attr=''update'',
    ctx=Load()), args=[Dict(keys=[Constant(value=''class_attributes''), Constant(value=''class_methods''),
    Constant(value=''class_inheritance''), Constant(value=''class_static_methods'')],
    values=[ListComp(elt=Attribute(value=Name(id=''target'', ctx=Load()), attr=''attr'',
    ctx=Load()), generators=[comprehension(target=Name(id=''subnode'', ctx=Store()),
    iter=Attribute(value=Name(id=''node'', ctx=Load()), attr=''body'', ctx=Load()),
    ifs=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''subnode'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Assign'', ctx=Load())],
    keywords=[])], is_async=0), comprehension(target=Name(id=''target'', ctx=Store()),
    iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''targets'', ctx=Load()),
    ifs=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''target'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Attribute'',
    ctx=Load())], keywords=[])], is_async=0)]), ListComp(elt=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''name'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Attribute(value=Name(id=''node'', ctx=Load()), attr=''body'',
    ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load()),
    args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''FunctionDef'', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''name'', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''__init__'')])])],
    is_async=0)]), IfExp(test=Attribute(value=Name(id=''node'', ctx=Load()), attr=''bases'',
    ctx=Load()), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''unparse'', ctx=Load()), args=[Name(id=''base'', ctx=Load())], keywords=[]),
    generators=[comprehension(target=Name(id=''base'', ctx=Store()), iter=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''bases'', ctx=Load()), ifs=[], is_async=0)]), orelse=List(elts=[],
    ctx=Load())), ListComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''name'',
    ctx=Load()), generators=[comprehension(target=Name(id=''subnode'', ctx=Store()),
    iter=Attribute(value=Name(id=''node'', ctx=Load()), attr=''body'', ctx=Load()),
    ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''subnode'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''FunctionDef'',
    ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''name'', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''__init__'')]),
    Call(func=Name(id=''any'', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(),
    values=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''decorator'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Name'', ctx=Load())],
    keywords=[]), Compare(left=Attribute(value=Name(id=''decorator'', ctx=Load()),
    attr=''id'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''staticmethod'')])]),
    generators=[comprehension(target=Name(id=''decorator'', ctx=Store()), iter=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''decorator_list'', ctx=Load()), ifs=[], is_async=0)])], keywords=[])])],
    is_async=0)])])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id=''details'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''Dict'', ctx=Load()),
    slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load())), FunctionDef(name=''analyze'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''AST'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value="\n        Traverse the AST rooted at ''node'',
    create a list of all nodes within the current file, and populate ''file_info''
    with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        ")),
    Assign(targets=[Name(id=''node_walk'', ctx=Store())], value=Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''walk'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[])], keywords=[])),
    Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''visit'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Store())], value=Dict(keys=[Constant(value=''file_code''),
    Constant(value=''file_ast''), Constant(value=''file_dependencies''), Constant(value=''file_functions''),
    Constant(value=''file_classes'')], values=[Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''code'', ctx=Load()), Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''dump'', ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[]),
    Call(func=Name(id=''list'', ctx=Load()), args=[BinOp(left=SetComp(elt=Attribute(value=Name(id=''alias'',
    ctx=Load()), attr=''name'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Import'', ctx=Load())], keywords=[])], is_async=0), comprehension(target=Name(id=''alias'',
    ctx=Store()), iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''names'',
    ctx=Load()), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''module'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''ImportFrom'', ctx=Load())], keywords=[])], is_async=0)]))],
    keywords=[]), Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''functions'', ctx=Load()), attr=''keys'', ctx=Load()), args=[],
    keywords=[])], keywords=[]), Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), attr=''keys'', ctx=Load()), args=[],
    keywords=[])], keywords=[])])), Assign(targets=[Name(id=''function_defs'', ctx=Store())],
    value=ListComp(elt=Dict(keys=[Name(id=''func_name'', ctx=Load())], values=[Dict(keys=[Constant(value=''inputs''),
    Constant(value=''calls''), Constant(value=''call_inputs''), Constant(value=''returns'')],
    values=[Subscript(value=Name(id=''details'', ctx=Load()), slice=Constant(value=''function_inputs''),
    ctx=Load()), Subscript(value=Name(id=''details'', ctx=Load()), slice=Constant(value=''function_calls''),
    ctx=Load()), Subscript(value=Name(id=''details'', ctx=Load()), slice=Constant(value=''function_call_inputs''),
    ctx=Load()), Subscript(value=Name(id=''details'', ctx=Load()), slice=Constant(value=''function_returns''),
    ctx=Load())])]), generators=[comprehension(target=Tuple(elts=[Name(id=''func_name'',
    ctx=Store()), Name(id=''details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''functions'', ctx=Load()), attr=''items'', ctx=Load()), args=[],
    keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id=''class_defs'',
    ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id=''class_name'',
    ctx=Store()), Name(id=''class_details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), attr=''items'', ctx=Load()), args=[],
    keywords=[]), body=[Assign(targets=[Name(id=''method_defs'', ctx=Store())], value=Dict(keys=[],
    values=[])), For(target=Tuple(elts=[Name(id=''method_name'', ctx=Store()), Name(id=''details'',
    ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_details'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id=''method_name'',
    ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[]), body=[Assign(targets=[Subscript(value=Name(id=''method_defs'', ctx=Load()),
    slice=Subscript(value=Name(id=''method_name'', ctx=Load()), slice=Slice(lower=Call(func=Name(id=''len'',
    ctx=Load()), args=[Constant(value=''class_method_'')], keywords=[])), ctx=Load()),
    ctx=Store())], value=Dict(keys=[Constant(value=''inputs''), Constant(value=''calls''),
    Constant(value=''call_inputs''), Constant(value=''returns'')], values=[Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''method_inputs''), ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''method_calls''), ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''method_call_inputs''), ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''method_returns''), ctx=Load())]))], orelse=[])],
    orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''class_defs'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[Dict(keys=[Name(id=''class_name'', ctx=Load())],
    values=[Dict(keys=[Constant(value=''method_defs'')], values=[Name(id=''method_defs'',
    ctx=Load())])])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Store())], value=Dict(keys=[Constant(value=''dependencies''), Constant(value=''function_defs''),
    Constant(value=''class_defs'')], values=[Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Load()), slice=Constant(value=''file_dependencies''),
    ctx=Load()), Name(id=''function_defs'', ctx=Load()), Name(id=''class_defs'', ctx=Load())]))],
    decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name=''code_graph'',
    args=arguments(posonlyargs=[], args=[arg(arg=''file_summary'', annotation=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''Dict'', ctx=Load()), Name(id=''str'',
    ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Create a
    dictionary representation of file details.\n    Args:\n        file_summary: Dict[str,
    Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict:
    A dictionary with nodes and edges representing the relationships in the code.\n    '')),
    Assign(targets=[Name(id=''G'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''nx'',
    ctx=Load()), attr=''DiGraph'', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id=''function_details_lookup'',
    ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id=''function_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''function_defs''),
    ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''function_details_lookup'',
    ctx=Load()), attr=''update'', ctx=Load()), args=[Name(id=''function_def'', ctx=Load())],
    keywords=[]))], orelse=[]), Assign(targets=[Name(id=''class_method_details_lookup'',
    ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id=''class_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''class_defs''),
    ctx=Load()), body=[For(target=Tuple(elts=[Name(id=''class_name'', ctx=Store()),
    Name(id=''class_details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_def'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''class_name'', ctx=Load())],
    keywords=[])), For(target=Tuple(elts=[Name(id=''method_name'', ctx=Store()), Name(id=''method_details'',
    ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id=''class_details'',
    ctx=Load()), slice=Constant(value=''method_defs''), ctx=Load()), attr=''items'',
    ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id=''qualified_method_name'',
    ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id=''class_name'',
    ctx=Load()), conversion=-1), Constant(value=''.''), FormattedValue(value=Name(id=''method_name'',
    ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''qualified_method_name'',
    ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id=''class_method_details_lookup'',
    ctx=Load()), slice=Name(id=''qualified_method_name'', ctx=Load()), ctx=Store())],
    value=Name(id=''method_details'', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_edge'', ctx=Load()), args=[Name(id=''class_name'', ctx=Load()),
    Name(id=''qualified_method_name'', ctx=Load())], keywords=[]))], orelse=[])],
    orelse=[])], orelse=[]), FunctionDef(name=''get_edge_data_from_details'', args=arguments(posonlyargs=[],
    args=[arg(arg=''target_details'', annotation=Name(id=''dict'', ctx=Load())), arg(arg=''source_details'',
    annotation=Name(id=''dict'', ctx=Load())), arg(arg=''target'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''edge_data'',
    ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id=''target_details'',
    ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'', ctx=Load()),
    slice=Constant(value=''target_inputs''), ctx=Store())], value=Call(func=Attribute(value=Name(id=''target_details'',
    ctx=Load()), attr=''get'', ctx=Load()), args=[Constant(value=''inputs'')], keywords=[])),
    Assign(targets=[Subscript(value=Name(id=''edge_data'', ctx=Load()), slice=Constant(value=''target_returns''),
    ctx=Store())], value=Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Name(id=''set'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''target_details'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Constant(value=''returns''), List(elts=[], ctx=Load())],
    keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(),
    values=[Name(id=''source_details'', ctx=Load()), Compare(left=Constant(value=''call_inputs''),
    ops=[In()], comparators=[Name(id=''source_details'', ctx=Load())]), Compare(left=Name(id=''target'',
    ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id=''source_details'',
    ctx=Load()), slice=Constant(value=''call_inputs''), ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
    ctx=Load()), slice=Constant(value=''target_inputs''), ctx=Store())], value=Subscript(value=Subscript(value=Name(id=''source_details'',
    ctx=Load()), slice=Constant(value=''call_inputs''), ctx=Load()), slice=Name(id=''target'',
    ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id=''edge_data'', ctx=Load()))],
    decorator_list=[], returns=Name(id=''dict'', ctx=Load())), FunctionDef(name=''add_edge_with_data'',
    args=arguments(posonlyargs=[], args=[arg(arg=''source'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''target'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''init_method'',
    annotation=Subscript(value=Name(id=''Optional'', ctx=Load()), slice=Name(id=''str'',
    ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]),
    body=[Assign(targets=[Name(id=''target_details'', ctx=Store())], value=BoolOp(op=Or(),
    values=[Call(func=Attribute(value=Name(id=''class_method_details_lookup'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id=''init_method'',
    ctx=Load()), Name(id=''target'', ctx=Load())])], keywords=[]), Call(func=Attribute(value=Name(id=''function_details_lookup'',
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''target'', ctx=Load())],
    keywords=[])])), Assign(targets=[Name(id=''source_details'', ctx=Store())], value=BoolOp(op=Or(),
    values=[Call(func=Attribute(value=Name(id=''function_details_lookup'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''source'', ctx=Load())], keywords=[]),
    Call(func=Attribute(value=Name(id=''class_method_details_lookup'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''source'', ctx=Load())], keywords=[])])),
    Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load()), attr=''add_edge'',
    ctx=Load()), args=[Name(id=''source'', ctx=Load()), Name(id=''target'', ctx=Load())],
    keywords=[keyword(value=Call(func=Name(id=''get_edge_data_from_details'', ctx=Load()),
    args=[Name(id=''target_details'', ctx=Load()), Name(id=''source_details'', ctx=Load()),
    Name(id=''target'', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Constant(value=None)),
    FunctionDef(name=''add_edges_for_calls'', args=arguments(posonlyargs=[], args=[arg(arg=''source_name''),
    arg(arg=''calls'')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''class_names'',
    ctx=Store())], value=ListComp(elt=Subscript(value=Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''class_def'', ctx=Load()),
    attr=''keys'', ctx=Load()), args=[], keywords=[])], keywords=[]), slice=Constant(value=0),
    ctx=Load()), generators=[comprehension(target=Name(id=''class_def'', ctx=Store()),
    iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''class_defs''),
    ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id=''called'', ctx=Store()),
    iter=Name(id=''calls'', ctx=Load()), body=[Assign(targets=[Name(id=''called_class_name'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id=''called'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''.'')], keywords=[]),
    slice=Constant(value=0), ctx=Load())), If(test=Call(func=Attribute(value=Name(id=''called'',
    ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''self.'')],
    keywords=[]), body=[Assign(targets=[Name(id=''method_name'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''called'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[Constant(value=''self.''), Constant(value='''')],
    keywords=[])), Assign(targets=[Name(id=''fully_qualified_name'', ctx=Store())],
    value=JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''source_name'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''.'')], keywords=[]),
    slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=''.''), FormattedValue(value=Name(id=''method_name'',
    ctx=Load()), conversion=-1)])), If(test=Compare(left=Name(id=''fully_qualified_name'',
    ctx=Load()), ops=[In()], comparators=[Name(id=''class_method_details_lookup'',
    ctx=Load())]), body=[Expr(value=Call(func=Name(id=''add_edge_with_data'', ctx=Load()),
    args=[Name(id=''source_name'', ctx=Load()), Name(id=''fully_qualified_name'',
    ctx=Load())], keywords=[])), Continue()], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(),
    values=[Compare(left=Name(id=''called'', ctx=Load()), ops=[In()], comparators=[Name(id=''function_details_lookup'',
    ctx=Load())]), Compare(left=Name(id=''called'', ctx=Load()), ops=[In()], comparators=[Name(id=''class_method_details_lookup'',
    ctx=Load())]), Compare(left=JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''source_name'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''.'')], keywords=[]),
    slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=''.''), FormattedValue(value=Name(id=''called'',
    ctx=Load()), conversion=-1)]), ops=[In()], comparators=[Name(id=''class_method_details_lookup'',
    ctx=Load())])]), body=[Expr(value=Call(func=Name(id=''add_edge_with_data'', ctx=Load()),
    args=[Name(id=''source_name'', ctx=Load()), Name(id=''called'', ctx=Load())],
    keywords=[]))], orelse=[If(test=Compare(left=Name(id=''called_class_name'', ctx=Load()),
    ops=[In()], comparators=[Name(id=''class_names'', ctx=Load())]), body=[Assign(targets=[Name(id=''init_method'',
    ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id=''init_method_name'',
    ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id=''called'',
    ctx=Load()), conversion=-1), Constant(value=''.__init__'')])), If(test=Compare(left=Name(id=''init_method_name'',
    ctx=Load()), ops=[In()], comparators=[Name(id=''class_method_details_lookup'',
    ctx=Load())]), body=[Assign(targets=[Name(id=''init_method'', ctx=Store())], value=Name(id=''init_method_name'',
    ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id=''add_edge_with_data'',
    ctx=Load()), args=[Name(id=''source_name'', ctx=Load()), Name(id=''called'', ctx=Load()),
    Name(id=''init_method'', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''called'', ctx=Load())],
    keywords=[])), Expr(value=Call(func=Name(id=''add_edge_with_data'', ctx=Load()),
    args=[Name(id=''source_name'', ctx=Load()), Name(id=''called'', ctx=Load())],
    keywords=[]))])])], orelse=[])], decorator_list=[]), For(target=Name(id=''function_name'',
    ctx=Store()), iter=Call(func=Attribute(value=Name(id=''function_details_lookup'',
    ctx=Load()), attr=''keys'', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''function_name'',
    ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id=''func_name'',
    ctx=Store()), Name(id=''details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''function_details_lookup'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id=''add_edges_for_calls'',
    ctx=Load()), args=[Name(id=''func_name'', ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''calls''), ctx=Load())], keywords=[]))], orelse=[]),
    For(target=Tuple(elts=[Name(id=''qualified_method_name'', ctx=Store()), Name(id=''details'',
    ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_method_details_lookup'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id=''add_edges_for_calls'',
    ctx=Load()), args=[Name(id=''qualified_method_name'', ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''calls''), ctx=Load())], keywords=[]))], orelse=[]),
    For(target=Name(id=''edge'', ctx=Store()), iter=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''edges'', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id=''source'',
    ctx=Store()), Name(id=''target'', ctx=Store())], ctx=Store())], value=Name(id=''edge'',
    ctx=Load())), Assign(targets=[Name(id=''target_details'', ctx=Store())], value=BoolOp(op=Or(),
    values=[Call(func=Attribute(value=Name(id=''function_details_lookup'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''target'', ctx=Load())], keywords=[]),
    Call(func=Attribute(value=Name(id=''class_method_details_lookup'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''target'', ctx=Load())], keywords=[])])),
    Assign(targets=[Name(id=''source_details'', ctx=Store())], value=BoolOp(op=Or(),
    values=[Call(func=Attribute(value=Name(id=''function_details_lookup'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''source'', ctx=Load())], keywords=[]),
    Call(func=Attribute(value=Name(id=''class_method_details_lookup'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''source'', ctx=Load())], keywords=[])])),
    Assign(targets=[Name(id=''edge_data'', ctx=Store())], value=Call(func=Name(id=''get_edge_data_from_details'',
    ctx=Load()), args=[Name(id=''target_details'', ctx=Load()), Name(id=''source_details'',
    ctx=Load()), Name(id=''target'', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''G'',
    ctx=Load()), slice=Name(id=''source'', ctx=Load()), ctx=Load()), slice=Name(id=''target'',
    ctx=Load()), ctx=Load()), attr=''update'', ctx=Load()), args=[Name(id=''edge_data'',
    ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id=''nodes'', ctx=Store())],
    value=Call(func=Name(id=''list'', ctx=Load()), args=[Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''nodes'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''edges'',
    ctx=Store())], value=ListComp(elt=Dict(keys=[Constant(value=''source''), Constant(value=''target''),
    None], values=[Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=0),
    ctx=Load()), Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=1),
    ctx=Load()), Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=2),
    ctx=Load())]), generators=[comprehension(target=Name(id=''edge'', ctx=Store()),
    iter=Call(func=Attribute(value=Attribute(value=Name(id=''G'', ctx=Load()), attr=''edges'',
    ctx=Load()), attr=''data'', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])),
    Return(value=Dict(keys=[Constant(value=''nodes''), Constant(value=''edges'')],
    values=[Name(id=''nodes'', ctx=Load()), Name(id=''edges'', ctx=Load())]))], decorator_list=[],
    returns=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Union'', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load()), Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name=''get_python_file_details'',
    args=arguments(posonlyargs=[], args=[arg(arg=''file_path'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Extract
    details from a Python file.\n    Args:\n        file_path: str: The path to the
    Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted
    from the file.\n    '')), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Name(id=''file_path'', ctx=Load()), Constant(value=''r'')],
    keywords=[keyword(arg=''encoding'', value=Constant(value=''utf-8'')), keyword(arg=''errors'',
    value=Constant(value=''ignore''))]), optional_vars=Name(id=''f'', ctx=Store()))],
    body=[Assign(targets=[Name(id=''code'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''f'',
    ctx=Load()), attr=''read'', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id=''tree'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''parse'',
    ctx=Load()), args=[Name(id=''code'', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''warning'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Permission
    denied or syntax error in file: ''), FormattedValue(value=Name(id=''file_path'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Constant(value=None))])],
    orelse=[], finalbody=[]), Assign(targets=[Name(id=''visitor'', ctx=Store())],
    value=Call(func=Name(id=''CodeVisitor'', ctx=Load()), args=[Name(id=''code'',
    ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''analyze'', ctx=Load()), args=[Name(id=''tree'', ctx=Load())],
    keywords=[])), Assign(targets=[Name(id=''file_details'', ctx=Store())], value=Dict(keys=[Constant(value=''file_info''),
    Constant(value=''functions''), Constant(value=''classes'')], values=[Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''file_info'', ctx=Load()), Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''functions'', ctx=Load()), Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''classes'', ctx=Load())])), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''entire_code_graph''),
    ctx=Store())], value=Call(func=Name(id=''code_graph'', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dumps'', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Load())], keywords=[]), attr=''replace'', ctx=Load()), args=[Constant(value=''"''),
    Constant(value='''')], keywords=[])), Return(value=Name(id=''file_details'', ctx=Load()))],
    decorator_list=[], returns=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Union'', ctx=Load()), slice=Tuple(elts=[Name(id=''Dict'',
    ctx=Load()), Name(id=''str'', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()),
    ctx=Load()))], type_ignores=[])'
  file_dependencies:
  - networkx
  - re
  - ast
  - json
  - typing
  - logging
  file_functions:
  - get_all_calls
  - code_graph
  - get_edge_data_from_details
  - add_edge_with_data
  - add_edges_for_calls
  - get_python_file_details
  file_classes:
  - CodeVisitor
  file_summary: '{dependencies: [networkx, re, ast, json, typing, logging], function_defs:
    [{get_all_calls: {inputs: [node], calls: [ast.iter_child_nodes, isinstance, ast.unparse,
    calls.update, get_all_calls], call_inputs: {ast.iter_child_nodes: [node], isinstance:
    [child, ast.Call], ast.unparse: [arg], calls.update: [get_all_calls(child)], get_all_calls:
    [child]}, returns: [calls]}}, {code_graph: {inputs: [file_summary], calls: [nx.DiGraph,
    function_details_lookup.update, class_def.items, G.add_node, class_details[''method_defs''].items,
    G.add_edge, target_details.get, list, set, class_method_details_lookup.get, function_details_lookup.get,
    get_edge_data_from_details, class_def.keys, called.split, called.startswith, called.replace,
    source_name.split, add_edge_with_data, function_details_lookup.keys, function_details_lookup.items,
    add_edges_for_calls, class_method_details_lookup.items, G[source][target].update,
    G.edges.data], call_inputs: {nx.DiGraph: [], function_details_lookup.update: [function_def],
    class_def.items: [], G.add_node: [function_name], class_details[''method_defs''].items:
    [], G.add_edge: [source, target], target_details.get: [''returns'', []], list:
    [G.nodes], set: [target_details.get(''returns'', [])], class_method_details_lookup.get:
    [source], function_details_lookup.get: [source], get_edge_data_from_details: [target_details,
    source_details, target], class_def.keys: [], called.split: [''.''], called.startswith:
    [''self.''], called.replace: [''self.'', ''''], source_name.split: [''.''], add_edge_with_data:
    [source_name, called], function_details_lookup.keys: [], function_details_lookup.items:
    [], add_edges_for_calls: [qualified_method_name, details[''calls'']], class_method_details_lookup.items:
    [], G[source][target].update: [edge_data], G.edges.data: []}, returns: [{''nodes'':
    nodes, ''edges'': edges}, edge_data]}}, {get_edge_data_from_details: {inputs:
    [target_details, source_details, target], calls: [target_details.get, list, set],
    call_inputs: {target_details.get: [''returns'', []], list: [set(target_details.get(''returns'',
    []))], set: [target_details.get(''returns'', [])]}, returns: [edge_data]}}, {add_edge_with_data:
    {inputs: [source, target, init_method], calls: [class_method_details_lookup.get,
    function_details_lookup.get, G.add_edge, get_edge_data_from_details], call_inputs:
    {class_method_details_lookup.get: [source], function_details_lookup.get: [source],
    G.add_edge: [source, target], get_edge_data_from_details: [target_details, source_details,
    target]}, returns: []}}, {add_edges_for_calls: {inputs: [source_name, calls],
    calls: [list, class_def.keys, called.split, called.startswith, called.replace,
    source_name.split, add_edge_with_data, G.add_node], call_inputs: {list: [class_def.keys()],
    class_def.keys: [], called.split: [''.''], called.startswith: [''self.''], called.replace:
    [''self.'', ''''], source_name.split: [''.''], add_edge_with_data: [source_name,
    called], G.add_node: [called]}, returns: []}}, {get_python_file_details: {inputs:
    [file_path], calls: [open, f.read, ast.parse, logging.warning, CodeVisitor, visitor.analyze,
    code_graph, json.dumps(file_details[''file_info''][''file_summary'']).replace,
    json.dumps], call_inputs: {open: [file_path, ''r''], f.read: [], ast.parse: [code],
    logging.warning: [f''Permission denied or syntax error in file: {file_path}''],
    CodeVisitor: [code], visitor.analyze: [tree], code_graph: [file_details[''file_info''][''file_summary'']],
    json.dumps(file_details[''file_info''][''file_summary'']).replace: [''\'', ''''],
    json.dumps: [file_details[''file_info''][''file_summary'']]}, returns: [file_details,
    None]}}], class_defs: [{CodeVisitor: {method_defs: {__init__: {inputs: [self,
    code], calls: [], call_inputs: {}, returns: []}, visit_FunctionDef: {inputs: [self,
    node], calls: [self.extract_details, self.generic_visit], call_inputs: {self.extract_details:
    [node, ''method'' if self.current_class else ''function''], self.generic_visit:
    [node]}, returns: []}, visit_ClassDef: {inputs: [self, node], calls: [self.extract_details,
    self.generic_visit], call_inputs: {self.extract_details: [node, ''class''], self.generic_visit:
    [node]}, returns: []}, extract_details: {inputs: [self, node, node_type], calls:
    [list, ast.walk, get_all_calls, ast.unparse, ast.dump, ast.get_docstring, isinstance,
    call_data.keys, set, self.classes[self.current_class][''class_attributes''].extend,
    details.update, any], call_inputs: {list: [{ast.unparse(subnode) for subnode in
    node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}],
    ast.walk: [node], get_all_calls: [node], ast.unparse: [base], ast.dump: [node],
    ast.get_docstring: [node], isinstance: [decorator, ast.Name], call_data.keys:
    [], set: [], self.classes[self.current_class][''class_attributes''].extend: [attributes],
    details.update: [{''class_attributes'': [target.attr for subnode in node.body
    if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target,
    ast.Attribute)], ''class_methods'': [subnode.name for subnode in node.body if
    isinstance(subnode, ast.FunctionDef) and subnode.name != ''__init__''], ''class_inheritance'':
    [ast.unparse(base) for base in node.bases] if node.bases else [], ''class_static_methods'':
    [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)
    and subnode.name != ''__init__'' and any((isinstance(decorator, ast.Name) and
    decorator.id == ''staticmethod'' for decorator in subnode.decorator_list))]}],
    any: [(isinstance(decorator, ast.Name) and decorator.id == ''staticmethod'' for
    decorator in subnode.decorator_list)]}, returns: [details]}, analyze: {inputs:
    [self, node], calls: [list, ast.walk, self.visit, ast.dump, isinstance, self.functions.keys,
    self.classes.keys, self.functions.items, self.classes.items, class_details.items,
    method_name.startswith, len, class_defs.append], call_inputs: {list: [self.classes.keys()],
    ast.walk: [node], self.visit: [node], ast.dump: [node], isinstance: [subnode,
    ast.ImportFrom], self.functions.keys: [], self.classes.keys: [], self.functions.items:
    [], self.classes.items: [], class_details.items: [], method_name.startswith: [''class_method_''],
    len: [''class_method_''], class_defs.append: [{class_name: {''method_defs'': method_defs}}]},
    returns: []}}}}]}'
  entire_code_graph:
    nodes:
    - CodeVisitor
    - CodeVisitor.__init__
    - CodeVisitor.visit_FunctionDef
    - CodeVisitor.visit_ClassDef
    - CodeVisitor.extract_details
    - CodeVisitor.analyze
    - get_all_calls
    - code_graph
    - get_edge_data_from_details
    - add_edge_with_data
    - add_edges_for_calls
    - get_python_file_details
    - ast.iter_child_nodes
    - isinstance
    - ast.unparse
    - calls.update
    - nx.DiGraph
    - function_details_lookup.update
    - class_def.items
    - G.add_node
    - class_details['method_defs'].items
    - G.add_edge
    - target_details.get
    - list
    - set
    - class_method_details_lookup.get
    - function_details_lookup.get
    - class_def.keys
    - called.split
    - called.startswith
    - called.replace
    - source_name.split
    - function_details_lookup.keys
    - function_details_lookup.items
    - class_method_details_lookup.items
    - G[source][target].update
    - G.edges.data
    - open
    - f.read
    - ast.parse
    - logging.warning
    - visitor.analyze
    - json.dumps(file_details['file_info']['file_summary']).replace
    - json.dumps
    - self.generic_visit
    - ast.walk
    - ast.dump
    - ast.get_docstring
    - call_data.keys
    - self.classes[self.current_class]['class_attributes'].extend
    - details.update
    - any
    - self.visit
    - self.functions.keys
    - self.classes.keys
    - self.functions.items
    - self.classes.items
    - class_details.items
    - method_name.startswith
    - len
    - class_defs.append
    edges:
    - source: CodeVisitor
      target: CodeVisitor.__init__
      target_inputs:
      - self
      - code
      target_returns: []
    - source: CodeVisitor
      target: CodeVisitor.visit_FunctionDef
      target_inputs:
      - self
      - node
      target_returns: []
    - source: CodeVisitor
      target: CodeVisitor.visit_ClassDef
      target_inputs:
      - self
      - node
      target_returns: []
    - source: CodeVisitor
      target: CodeVisitor.extract_details
      target_inputs:
      - self
      - node
      - node_type
      target_returns:
      - details
    - source: CodeVisitor
      target: CodeVisitor.analyze
      target_inputs:
      - self
      - node
      target_returns: []
    - source: CodeVisitor.visit_FunctionDef
      target: CodeVisitor.extract_details
      target_inputs:
      - self
      - node
      - node_type
      target_returns:
      - details
    - source: CodeVisitor.visit_FunctionDef
      target: self.generic_visit
      target_inputs:
      - node
    - source: CodeVisitor.visit_ClassDef
      target: CodeVisitor.extract_details
      target_inputs:
      - self
      - node
      - node_type
      target_returns:
      - details
    - source: CodeVisitor.visit_ClassDef
      target: self.generic_visit
      target_inputs:
      - node
    - source: CodeVisitor.extract_details
      target: list
      target_inputs:
      - '{ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute)
        and isinstance(subnode.ctx, ast.Store)}'
    - source: CodeVisitor.extract_details
      target: ast.walk
      target_inputs:
      - node
    - source: CodeVisitor.extract_details
      target: get_all_calls
      target_inputs:
      - node
      target_returns:
      - calls
    - source: CodeVisitor.extract_details
      target: ast.unparse
      target_inputs:
      - base
    - source: CodeVisitor.extract_details
      target: ast.dump
      target_inputs:
      - node
    - source: CodeVisitor.extract_details
      target: ast.get_docstring
      target_inputs:
      - node
    - source: CodeVisitor.extract_details
      target: isinstance
      target_inputs:
      - decorator
      - ast.Name
    - source: CodeVisitor.extract_details
      target: call_data.keys
      target_inputs: []
    - source: CodeVisitor.extract_details
      target: set
      target_inputs: []
    - source: CodeVisitor.extract_details
      target: self.classes[self.current_class]['class_attributes'].extend
      target_inputs:
      - attributes
    - source: CodeVisitor.extract_details
      target: details.update
      target_inputs:
      - '{''class_attributes'': [target.attr for subnode in node.body if isinstance(subnode,
        ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],
        ''class_methods'': [subnode.name for subnode in node.body if isinstance(subnode,
        ast.FunctionDef) and subnode.name != ''__init__''], ''class_inheritance'':
        [ast.unparse(base) for base in node.bases] if node.bases else [], ''class_static_methods'':
        [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)
        and subnode.name != ''__init__'' and any((isinstance(decorator, ast.Name)
        and decorator.id == ''staticmethod'' for decorator in subnode.decorator_list))]}'
    - source: CodeVisitor.extract_details
      target: any
      target_inputs:
      - (isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator
        in subnode.decorator_list)
    - source: CodeVisitor.analyze
      target: list
      target_inputs:
      - self.classes.keys()
    - source: CodeVisitor.analyze
      target: ast.walk
      target_inputs:
      - node
    - source: CodeVisitor.analyze
      target: self.visit
      target_inputs:
      - node
    - source: CodeVisitor.analyze
      target: ast.dump
      target_inputs:
      - node
    - source: CodeVisitor.analyze
      target: isinstance
      target_inputs:
      - subnode
      - ast.ImportFrom
    - source: CodeVisitor.analyze
      target: self.functions.keys
      target_inputs: []
    - source: CodeVisitor.analyze
      target: self.classes.keys
      target_inputs: []
    - source: CodeVisitor.analyze
      target: self.functions.items
      target_inputs: []
    - source: CodeVisitor.analyze
      target: self.classes.items
      target_inputs: []
    - source: CodeVisitor.analyze
      target: class_details.items
      target_inputs: []
    - source: CodeVisitor.analyze
      target: method_name.startswith
      target_inputs:
      - '''class_method_'''
    - source: CodeVisitor.analyze
      target: len
      target_inputs:
      - '''class_method_'''
    - source: CodeVisitor.analyze
      target: class_defs.append
      target_inputs:
      - '{class_name: {''method_defs'': method_defs}}'
    - source: get_all_calls
      target: ast.iter_child_nodes
      target_inputs:
      - node
    - source: get_all_calls
      target: isinstance
      target_inputs:
      - child
      - ast.Call
    - source: get_all_calls
      target: ast.unparse
      target_inputs:
      - arg
    - source: get_all_calls
      target: calls.update
      target_inputs:
      - get_all_calls(child)
    - source: get_all_calls
      target: get_all_calls
      target_inputs:
      - child
      target_returns:
      - calls
    - source: code_graph
      target: nx.DiGraph
      target_inputs: []
    - source: code_graph
      target: function_details_lookup.update
      target_inputs:
      - function_def
    - source: code_graph
      target: class_def.items
      target_inputs: []
    - source: code_graph
      target: G.add_node
      target_inputs:
      - function_name
    - source: code_graph
      target: class_details['method_defs'].items
      target_inputs: []
    - source: code_graph
      target: G.add_edge
      target_inputs:
      - source
      - target
    - source: code_graph
      target: target_details.get
      target_inputs:
      - '''returns'''
      - '[]'
    - source: code_graph
      target: list
      target_inputs:
      - G.nodes
    - source: code_graph
      target: set
      target_inputs:
      - target_details.get('returns', [])
    - source: code_graph
      target: class_method_details_lookup.get
      target_inputs:
      - source
    - source: code_graph
      target: function_details_lookup.get
      target_inputs:
      - source
    - source: code_graph
      target: get_edge_data_from_details
      target_inputs:
      - target_details
      - source_details
      - target
      target_returns:
      - edge_data
    - source: code_graph
      target: class_def.keys
      target_inputs: []
    - source: code_graph
      target: called.split
      target_inputs:
      - '''.'''
    - source: code_graph
      target: called.startswith
      target_inputs:
      - '''self.'''
    - source: code_graph
      target: called.replace
      target_inputs:
      - '''self.'''
      - ''''''
    - source: code_graph
      target: source_name.split
      target_inputs:
      - '''.'''
    - source: code_graph
      target: add_edge_with_data
      target_inputs:
      - source_name
      - called
      target_returns: []
    - source: code_graph
      target: function_details_lookup.keys
      target_inputs: []
    - source: code_graph
      target: function_details_lookup.items
      target_inputs: []
    - source: code_graph
      target: add_edges_for_calls
      target_inputs:
      - qualified_method_name
      - details['calls']
      target_returns: []
    - source: code_graph
      target: class_method_details_lookup.items
      target_inputs: []
    - source: code_graph
      target: G[source][target].update
      target_inputs:
      - edge_data
    - source: code_graph
      target: G.edges.data
      target_inputs: []
    - source: get_edge_data_from_details
      target: target_details.get
      target_inputs:
      - '''returns'''
      - '[]'
    - source: get_edge_data_from_details
      target: list
      target_inputs:
      - set(target_details.get('returns', []))
    - source: get_edge_data_from_details
      target: set
      target_inputs:
      - target_details.get('returns', [])
    - source: add_edge_with_data
      target: class_method_details_lookup.get
      target_inputs:
      - source
    - source: add_edge_with_data
      target: function_details_lookup.get
      target_inputs:
      - source
    - source: add_edge_with_data
      target: G.add_edge
      target_inputs:
      - source
      - target
    - source: add_edge_with_data
      target: get_edge_data_from_details
      target_inputs:
      - target_details
      - source_details
      - target
      target_returns:
      - edge_data
    - source: add_edges_for_calls
      target: list
      target_inputs:
      - class_def.keys()
    - source: add_edges_for_calls
      target: class_def.keys
      target_inputs: []
    - source: add_edges_for_calls
      target: called.split
      target_inputs:
      - '''.'''
    - source: add_edges_for_calls
      target: called.startswith
      target_inputs:
      - '''self.'''
    - source: add_edges_for_calls
      target: called.replace
      target_inputs:
      - '''self.'''
      - ''''''
    - source: add_edges_for_calls
      target: source_name.split
      target_inputs:
      - '''.'''
    - source: add_edges_for_calls
      target: add_edge_with_data
      target_inputs:
      - source_name
      - called
      target_returns: []
    - source: add_edges_for_calls
      target: G.add_node
      target_inputs:
      - called
    - source: get_python_file_details
      target: open
      target_inputs:
      - file_path
      - '''r'''
    - source: get_python_file_details
      target: f.read
      target_inputs: []
    - source: get_python_file_details
      target: ast.parse
      target_inputs:
      - code
    - source: get_python_file_details
      target: logging.warning
      target_inputs:
      - 'f''Permission denied or syntax error in file: {file_path}'''
    - source: get_python_file_details
      target: CodeVisitor
      target_inputs:
      - code
      target_returns: []
    - source: get_python_file_details
      target: visitor.analyze
      target_inputs:
      - tree
    - source: get_python_file_details
      target: code_graph
      target_inputs:
      - file_details['file_info']['file_summary']
      target_returns:
      - '{''nodes'': nodes, ''edges'': edges}'
      - edge_data
    - source: get_python_file_details
      target: json.dumps(file_details['file_info']['file_summary']).replace
      target_inputs:
      - '''"'''
      - ''''''
    - source: get_python_file_details
      target: json.dumps
      target_inputs:
      - file_details['file_info']['file_summary']
functions:
  get_all_calls:
    function_name: get_all_calls
    function_code: "def get_all_calls(node):\n    \"\"\"\n    Recursively find all\
      \ function calls in the subtree rooted at `node`.\n    Args:\n        node:\
      \ ast.AST: The node to start the search from.\n    Returns:\n        list: A\
      \ list of all function calls in the subtree rooted at `node`.\n    \"\"\"\n\
      \    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child,\
      \ ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg)\
      \ for arg in child.args]\n        calls.update(get_all_calls(child))\n    return\
      \ calls"
    function_ast: 'FunctionDef(name=''get_all_calls'', args=arguments(posonlyargs=[],
      args=[arg(arg=''node'', lineno=35, col_offset=18, end_lineno=35, end_col_offset=22)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Recursively
      find all function calls in the subtree rooted at `node`.\n    Args:\n        node:
      ast.AST: The node to start the search from.\n    Returns:\n        list: A list
      of all function calls in the subtree rooted at `node`.\n    '', lineno=36, col_offset=4,
      end_lineno=42, end_col_offset=7), lineno=36, col_offset=4, end_lineno=42, end_col_offset=7),
      Assign(targets=[Name(id=''calls'', ctx=Store(), lineno=43, col_offset=4, end_lineno=43,
      end_col_offset=9)], value=Dict(keys=[], values=[], lineno=43, col_offset=12,
      end_lineno=43, end_col_offset=14), lineno=43, col_offset=4, end_lineno=43, end_col_offset=14),
      For(target=Name(id=''child'', ctx=Store(), lineno=44, col_offset=8, end_lineno=44,
      end_col_offset=13), iter=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(),
      lineno=44, col_offset=17, end_lineno=44, end_col_offset=20), attr=''iter_child_nodes'',
      ctx=Load(), lineno=44, col_offset=17, end_lineno=44, end_col_offset=37), args=[Name(id=''node'',
      ctx=Load(), lineno=44, col_offset=38, end_lineno=44, end_col_offset=42)], keywords=[],
      lineno=44, col_offset=17, end_lineno=44, end_col_offset=43), body=[If(test=Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=45, col_offset=11, end_lineno=45, end_col_offset=21), args=[Name(id=''child'',
      ctx=Load(), lineno=45, col_offset=22, end_lineno=45, end_col_offset=27), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=45, col_offset=29, end_lineno=45, end_col_offset=32), attr=''Call'',
      ctx=Load(), lineno=45, col_offset=29, end_lineno=45, end_col_offset=37)], keywords=[],
      lineno=45, col_offset=11, end_lineno=45, end_col_offset=38), body=[Assign(targets=[Subscript(value=Name(id=''calls'',
      ctx=Load(), lineno=46, col_offset=12, end_lineno=46, end_col_offset=17), slice=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=46, col_offset=18, end_lineno=46, end_col_offset=21), attr=''unparse'',
      ctx=Load(), lineno=46, col_offset=18, end_lineno=46, end_col_offset=29), args=[Attribute(value=Name(id=''child'',
      ctx=Load(), lineno=46, col_offset=30, end_lineno=46, end_col_offset=35), attr=''func'',
      ctx=Load(), lineno=46, col_offset=30, end_lineno=46, end_col_offset=40)], keywords=[],
      lineno=46, col_offset=18, end_lineno=46, end_col_offset=41), ctx=Store(), lineno=46,
      col_offset=12, end_lineno=46, end_col_offset=42)], value=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=46, col_offset=46, end_lineno=46, end_col_offset=49), attr=''unparse'',
      ctx=Load(), lineno=46, col_offset=46, end_lineno=46, end_col_offset=57), args=[Name(id=''arg'',
      ctx=Load(), lineno=46, col_offset=58, end_lineno=46, end_col_offset=61)], keywords=[],
      lineno=46, col_offset=46, end_lineno=46, end_col_offset=62), generators=[comprehension(target=Name(id=''arg'',
      ctx=Store(), lineno=46, col_offset=67, end_lineno=46, end_col_offset=70), iter=Attribute(value=Name(id=''child'',
      ctx=Load(), lineno=46, col_offset=74, end_lineno=46, end_col_offset=79), attr=''args'',
      ctx=Load(), lineno=46, col_offset=74, end_lineno=46, end_col_offset=84), ifs=[],
      is_async=0)], lineno=46, col_offset=45, end_lineno=46, end_col_offset=85), lineno=46,
      col_offset=12, end_lineno=46, end_col_offset=85)], orelse=[], lineno=45, col_offset=8,
      end_lineno=46, end_col_offset=85), Expr(value=Call(func=Attribute(value=Name(id=''calls'',
      ctx=Load(), lineno=47, col_offset=8, end_lineno=47, end_col_offset=13), attr=''update'',
      ctx=Load(), lineno=47, col_offset=8, end_lineno=47, end_col_offset=20), args=[Call(func=Name(id=''get_all_calls'',
      ctx=Load(), lineno=47, col_offset=21, end_lineno=47, end_col_offset=34), args=[Name(id=''child'',
      ctx=Load(), lineno=47, col_offset=35, end_lineno=47, end_col_offset=40)], keywords=[],
      lineno=47, col_offset=21, end_lineno=47, end_col_offset=41)], keywords=[], lineno=47,
      col_offset=8, end_lineno=47, end_col_offset=42), lineno=47, col_offset=8, end_lineno=47,
      end_col_offset=42)], orelse=[], lineno=44, col_offset=4, end_lineno=47, end_col_offset=42),
      Return(value=Name(id=''calls'', ctx=Load(), lineno=48, col_offset=11, end_lineno=48,
      end_col_offset=16), lineno=48, col_offset=4, end_lineno=48, end_col_offset=16)],
      decorator_list=[], lineno=35, col_offset=0, end_lineno=48, end_col_offset=16)'
    function_docstring: "Recursively find all function calls in the subtree rooted\
      \ at `node`.\nArgs:\n    node: ast.AST: The node to start the search from.\n\
      Returns:\n    list: A list of all function calls in the subtree rooted at `node`."
    function_inputs:
    - node
    function_defaults: []
    function_returns:
    - calls
    function_calls:
    - ast.iter_child_nodes
    - isinstance
    - ast.unparse
    - calls.update
    - get_all_calls
    function_call_inputs:
      ast.iter_child_nodes:
      - node
      isinstance:
      - child
      - ast.Call
      ast.unparse:
      - arg
      calls.update:
      - get_all_calls(child)
      get_all_calls:
      - child
    function_variables:
    - calls
    function_decorators: []
    function_annotations: []
    function_properties: []
  code_graph:
    function_name: code_graph
    function_code: "def code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str,\
      \ Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary\
      \ representation of file details.\n    Args:\n        file_summary: Dict[str,\
      \ Union[Dict, str]]: The details extracted from the file.\n    Returns:\n  \
      \      dict: A dictionary with nodes and edges representing the relationships\
      \ in the code.\n    \"\"\"\n    G = nx.DiGraph()\n    function_details_lookup\
      \ = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n\
      \    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n\
      \        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n\
      \            for method_name, method_details in class_details['method_defs'].items():\n\
      \                qualified_method_name = f'{class_name}.{method_name}'\n   \
      \             G.add_node(qualified_method_name)\n                class_method_details_lookup[qualified_method_name]\
      \ = method_details\n                G.add_edge(class_name, qualified_method_name)\n\
      \n    def get_edge_data_from_details(target_details: dict, source_details: dict,\
      \ target: str) -> dict:\n        edge_data = {}\n        if target_details:\n\
      \            edge_data['target_inputs'] = target_details.get('inputs')\n   \
      \         edge_data['target_returns'] = list(set(target_details.get('returns',\
      \ [])))\n        if source_details and 'call_inputs' in source_details and (target\
      \ in source_details['call_inputs']):\n            edge_data['target_inputs']\
      \ = source_details['call_inputs'][target]\n        return edge_data\n\n    def\
      \ add_edge_with_data(source: str, target: str, init_method: Optional[str]=None)\
      \ -> None:\n        target_details = class_method_details_lookup.get(init_method\
      \ or target) or function_details_lookup.get(target)\n        source_details\
      \ = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n\
      \        G.add_edge(source, target, **get_edge_data_from_details(target_details,\
      \ source_details, target))\n\n    def add_edges_for_calls(source_name, calls):\n\
      \        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n\
      \        for called in calls:\n            called_class_name = called.split('.')[0]\n\
      \            if called.startswith('self.'):\n                method_name = called.replace('self.',\
      \ '')\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\
      \n                if fully_qualified_name in class_method_details_lookup:\n\
      \                    add_edge_with_data(source_name, fully_qualified_name)\n\
      \                    continue\n            if called in function_details_lookup\
      \ or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\"\
      \ in class_method_details_lookup:\n                add_edge_with_data(source_name,\
      \ called)\n            elif called_class_name in class_names:\n            \
      \    init_method = None\n                init_method_name = f'{called}.__init__'\n\
      \                if init_method_name in class_method_details_lookup:\n     \
      \               init_method = init_method_name\n                add_edge_with_data(source_name,\
      \ called, init_method)\n            else:\n                G.add_node(called)\n\
      \                add_edge_with_data(source_name, called)\n    for function_name\
      \ in function_details_lookup.keys():\n        G.add_node(function_name)\n  \
      \  for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name,\
      \ details['calls'])\n    for qualified_method_name, details in class_method_details_lookup.items():\n\
      \        add_edges_for_calls(qualified_method_name, details['calls'])\n    for\
      \ edge in G.edges:\n        source, target = edge\n        target_details =\
      \ function_details_lookup.get(target) or class_method_details_lookup.get(target)\n\
      \        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n\
      \        edge_data = get_edge_data_from_details(target_details, source_details,\
      \ target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n\
      \    edges = [{'source': edge[0], 'target': edge[1], **edge[2]} for edge in\
      \ G.edges.data()]\n    return {'nodes': nodes, 'edges': edges}"
    function_ast: 'FunctionDef(name=''code_graph'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_summary'', annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=182, col_offset=29, end_lineno=182, end_col_offset=33), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=182, col_offset=34, end_lineno=182, end_col_offset=37), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=182, col_offset=39, end_lineno=182, end_col_offset=44), slice=Tuple(elts=[Name(id=''Dict'',
      ctx=Load(), lineno=182, col_offset=45, end_lineno=182, end_col_offset=49), Name(id=''str'',
      ctx=Load(), lineno=182, col_offset=51, end_lineno=182, end_col_offset=54)],
      ctx=Load(), lineno=182, col_offset=45, end_lineno=182, end_col_offset=54), ctx=Load(),
      lineno=182, col_offset=39, end_lineno=182, end_col_offset=55)], ctx=Load(),
      lineno=182, col_offset=34, end_lineno=182, end_col_offset=55), ctx=Load(), lineno=182,
      col_offset=29, end_lineno=182, end_col_offset=56), lineno=182, col_offset=15,
      end_lineno=182, end_col_offset=56)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Create a dictionary representation of
      file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]:
      The details extracted from the file.\n    Returns:\n        dict: A dictionary
      with nodes and edges representing the relationships in the code.\n    '', lineno=183,
      col_offset=4, end_lineno=189, end_col_offset=7), lineno=183, col_offset=4, end_lineno=189,
      end_col_offset=7), Assign(targets=[Name(id=''G'', ctx=Store(), lineno=190, col_offset=4,
      end_lineno=190, end_col_offset=5)], value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=190, col_offset=8, end_lineno=190, end_col_offset=10), attr=''DiGraph'',
      ctx=Load(), lineno=190, col_offset=8, end_lineno=190, end_col_offset=18), args=[],
      keywords=[], lineno=190, col_offset=8, end_lineno=190, end_col_offset=20), lineno=190,
      col_offset=4, end_lineno=190, end_col_offset=20), Assign(targets=[Name(id=''function_details_lookup'',
      ctx=Store(), lineno=193, col_offset=4, end_lineno=193, end_col_offset=27)],
      value=Dict(keys=[], values=[], lineno=193, col_offset=30, end_lineno=193, end_col_offset=32),
      lineno=193, col_offset=4, end_lineno=193, end_col_offset=32), For(target=Name(id=''function_def'',
      ctx=Store(), lineno=194, col_offset=8, end_lineno=194, end_col_offset=20), iter=Subscript(value=Name(id=''file_summary'',
      ctx=Load(), lineno=194, col_offset=24, end_lineno=194, end_col_offset=36), slice=Constant(value=''function_defs'',
      lineno=194, col_offset=37, end_lineno=194, end_col_offset=52), ctx=Load(), lineno=194,
      col_offset=24, end_lineno=194, end_col_offset=53), body=[Expr(value=Call(func=Attribute(value=Name(id=''function_details_lookup'',
      ctx=Load(), lineno=195, col_offset=8, end_lineno=195, end_col_offset=31), attr=''update'',
      ctx=Load(), lineno=195, col_offset=8, end_lineno=195, end_col_offset=38), args=[Name(id=''function_def'',
      ctx=Load(), lineno=195, col_offset=39, end_lineno=195, end_col_offset=51)],
      keywords=[], lineno=195, col_offset=8, end_lineno=195, end_col_offset=52), lineno=195,
      col_offset=8, end_lineno=195, end_col_offset=52)], orelse=[], lineno=194, col_offset=4,
      end_lineno=195, end_col_offset=52), Assign(targets=[Name(id=''class_method_details_lookup'',
      ctx=Store(), lineno=196, col_offset=4, end_lineno=196, end_col_offset=31)],
      value=Dict(keys=[], values=[], lineno=196, col_offset=34, end_lineno=196, end_col_offset=36),
      lineno=196, col_offset=4, end_lineno=196, end_col_offset=36), For(target=Name(id=''class_def'',
      ctx=Store(), lineno=197, col_offset=8, end_lineno=197, end_col_offset=17), iter=Subscript(value=Name(id=''file_summary'',
      ctx=Load(), lineno=197, col_offset=21, end_lineno=197, end_col_offset=33), slice=Constant(value=''class_defs'',
      lineno=197, col_offset=34, end_lineno=197, end_col_offset=46), ctx=Load(), lineno=197,
      col_offset=21, end_lineno=197, end_col_offset=47), body=[For(target=Tuple(elts=[Name(id=''class_name'',
      ctx=Store(), lineno=198, col_offset=12, end_lineno=198, end_col_offset=22),
      Name(id=''class_details'', ctx=Store(), lineno=198, col_offset=24, end_lineno=198,
      end_col_offset=37)], ctx=Store(), lineno=198, col_offset=12, end_lineno=198,
      end_col_offset=37), iter=Call(func=Attribute(value=Name(id=''class_def'', ctx=Load(),
      lineno=198, col_offset=41, end_lineno=198, end_col_offset=50), attr=''items'',
      ctx=Load(), lineno=198, col_offset=41, end_lineno=198, end_col_offset=56), args=[],
      keywords=[], lineno=198, col_offset=41, end_lineno=198, end_col_offset=58),
      body=[Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load(), lineno=199,
      col_offset=12, end_lineno=199, end_col_offset=13), attr=''add_node'', ctx=Load(),
      lineno=199, col_offset=12, end_lineno=199, end_col_offset=22), args=[Name(id=''class_name'',
      ctx=Load(), lineno=199, col_offset=23, end_lineno=199, end_col_offset=33)],
      keywords=[], lineno=199, col_offset=12, end_lineno=199, end_col_offset=34),
      lineno=199, col_offset=12, end_lineno=199, end_col_offset=34), For(target=Tuple(elts=[Name(id=''method_name'',
      ctx=Store(), lineno=200, col_offset=16, end_lineno=200, end_col_offset=27),
      Name(id=''method_details'', ctx=Store(), lineno=200, col_offset=29, end_lineno=200,
      end_col_offset=43)], ctx=Store(), lineno=200, col_offset=16, end_lineno=200,
      end_col_offset=43), iter=Call(func=Attribute(value=Subscript(value=Name(id=''class_details'',
      ctx=Load(), lineno=200, col_offset=47, end_lineno=200, end_col_offset=60), slice=Constant(value=''method_defs'',
      lineno=200, col_offset=61, end_lineno=200, end_col_offset=74), ctx=Load(), lineno=200,
      col_offset=47, end_lineno=200, end_col_offset=75), attr=''items'', ctx=Load(),
      lineno=200, col_offset=47, end_lineno=200, end_col_offset=81), args=[], keywords=[],
      lineno=200, col_offset=47, end_lineno=200, end_col_offset=83), body=[Assign(targets=[Name(id=''qualified_method_name'',
      ctx=Store(), lineno=201, col_offset=16, end_lineno=201, end_col_offset=37)],
      value=JoinedStr(values=[FormattedValue(value=Name(id=''class_name'', ctx=Load(),
      lineno=201, col_offset=43, end_lineno=201, end_col_offset=53), conversion=-1,
      lineno=201, col_offset=40, end_lineno=201, end_col_offset=69), Constant(value=''.'',
      lineno=201, col_offset=40, end_lineno=201, end_col_offset=69), FormattedValue(value=Name(id=''method_name'',
      ctx=Load(), lineno=201, col_offset=56, end_lineno=201, end_col_offset=67), conversion=-1,
      lineno=201, col_offset=40, end_lineno=201, end_col_offset=69)], lineno=201,
      col_offset=40, end_lineno=201, end_col_offset=69), lineno=201, col_offset=16,
      end_lineno=201, end_col_offset=69), Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=202, col_offset=16, end_lineno=202, end_col_offset=17), attr=''add_node'',
      ctx=Load(), lineno=202, col_offset=16, end_lineno=202, end_col_offset=26), args=[Name(id=''qualified_method_name'',
      ctx=Load(), lineno=202, col_offset=27, end_lineno=202, end_col_offset=48)],
      keywords=[], lineno=202, col_offset=16, end_lineno=202, end_col_offset=49),
      lineno=202, col_offset=16, end_lineno=202, end_col_offset=49), Assign(targets=[Subscript(value=Name(id=''class_method_details_lookup'',
      ctx=Load(), lineno=203, col_offset=16, end_lineno=203, end_col_offset=43), slice=Name(id=''qualified_method_name'',
      ctx=Load(), lineno=203, col_offset=44, end_lineno=203, end_col_offset=65), ctx=Store(),
      lineno=203, col_offset=16, end_lineno=203, end_col_offset=66)], value=Name(id=''method_details'',
      ctx=Load(), lineno=203, col_offset=69, end_lineno=203, end_col_offset=83), lineno=203,
      col_offset=16, end_lineno=203, end_col_offset=83), Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=204, col_offset=16, end_lineno=204, end_col_offset=17), attr=''add_edge'',
      ctx=Load(), lineno=204, col_offset=16, end_lineno=204, end_col_offset=26), args=[Name(id=''class_name'',
      ctx=Load(), lineno=204, col_offset=27, end_lineno=204, end_col_offset=37), Name(id=''qualified_method_name'',
      ctx=Load(), lineno=204, col_offset=39, end_lineno=204, end_col_offset=60)],
      keywords=[], lineno=204, col_offset=16, end_lineno=204, end_col_offset=61),
      lineno=204, col_offset=16, end_lineno=204, end_col_offset=61)], orelse=[], lineno=200,
      col_offset=12, end_lineno=204, end_col_offset=61)], orelse=[], lineno=198, col_offset=8,
      end_lineno=204, end_col_offset=61)], orelse=[], lineno=197, col_offset=4, end_lineno=204,
      end_col_offset=61), FunctionDef(name=''get_edge_data_from_details'', args=arguments(posonlyargs=[],
      args=[arg(arg=''target_details'', annotation=Name(id=''dict'', ctx=Load(), lineno=207,
      col_offset=51, end_lineno=207, end_col_offset=55), lineno=207, col_offset=35,
      end_lineno=207, end_col_offset=55), arg(arg=''source_details'', annotation=Name(id=''dict'',
      ctx=Load(), lineno=207, col_offset=73, end_lineno=207, end_col_offset=77), lineno=207,
      col_offset=57, end_lineno=207, end_col_offset=77), arg(arg=''target'', annotation=Name(id=''str'',
      ctx=Load(), lineno=207, col_offset=87, end_lineno=207, end_col_offset=90), lineno=207,
      col_offset=79, end_lineno=207, end_col_offset=90)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Assign(targets=[Name(id=''edge_data'', ctx=Store(), lineno=208,
      col_offset=8, end_lineno=208, end_col_offset=17)], value=Dict(keys=[], values=[],
      lineno=208, col_offset=20, end_lineno=208, end_col_offset=22), lineno=208, col_offset=8,
      end_lineno=208, end_col_offset=22), If(test=Name(id=''target_details'', ctx=Load(),
      lineno=209, col_offset=11, end_lineno=209, end_col_offset=25), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=210, col_offset=12, end_lineno=210, end_col_offset=21), slice=Constant(value=''target_inputs'',
      lineno=210, col_offset=22, end_lineno=210, end_col_offset=37), ctx=Store(),
      lineno=210, col_offset=12, end_lineno=210, end_col_offset=38)], value=Call(func=Attribute(value=Name(id=''target_details'',
      ctx=Load(), lineno=210, col_offset=41, end_lineno=210, end_col_offset=55), attr=''get'',
      ctx=Load(), lineno=210, col_offset=41, end_lineno=210, end_col_offset=59), args=[Constant(value=''inputs'',
      lineno=210, col_offset=60, end_lineno=210, end_col_offset=68)], keywords=[],
      lineno=210, col_offset=41, end_lineno=210, end_col_offset=69), lineno=210, col_offset=12,
      end_lineno=210, end_col_offset=69), Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=211, col_offset=12, end_lineno=211, end_col_offset=21), slice=Constant(value=''target_returns'',
      lineno=211, col_offset=22, end_lineno=211, end_col_offset=38), ctx=Store(),
      lineno=211, col_offset=12, end_lineno=211, end_col_offset=39)], value=Call(func=Name(id=''list'',
      ctx=Load(), lineno=211, col_offset=42, end_lineno=211, end_col_offset=46), args=[Call(func=Name(id=''set'',
      ctx=Load(), lineno=211, col_offset=47, end_lineno=211, end_col_offset=50), args=[Call(func=Attribute(value=Name(id=''target_details'',
      ctx=Load(), lineno=211, col_offset=51, end_lineno=211, end_col_offset=65), attr=''get'',
      ctx=Load(), lineno=211, col_offset=51, end_lineno=211, end_col_offset=69), args=[Constant(value=''returns'',
      lineno=211, col_offset=70, end_lineno=211, end_col_offset=79), List(elts=[],
      ctx=Load(), lineno=211, col_offset=81, end_lineno=211, end_col_offset=83)],
      keywords=[], lineno=211, col_offset=51, end_lineno=211, end_col_offset=84)],
      keywords=[], lineno=211, col_offset=47, end_lineno=211, end_col_offset=85)],
      keywords=[], lineno=211, col_offset=42, end_lineno=211, end_col_offset=86),
      lineno=211, col_offset=12, end_lineno=211, end_col_offset=86)], orelse=[], lineno=209,
      col_offset=8, end_lineno=211, end_col_offset=86), If(test=BoolOp(op=And(), values=[Name(id=''source_details'',
      ctx=Load(), lineno=212, col_offset=11, end_lineno=212, end_col_offset=25), Compare(left=Constant(value=''call_inputs'',
      lineno=212, col_offset=30, end_lineno=212, end_col_offset=43), ops=[In()], comparators=[Name(id=''source_details'',
      ctx=Load(), lineno=212, col_offset=47, end_lineno=212, end_col_offset=61)],
      lineno=212, col_offset=30, end_lineno=212, end_col_offset=61), Compare(left=Name(id=''target'',
      ctx=Load(), lineno=212, col_offset=66, end_lineno=212, end_col_offset=72), ops=[In()],
      comparators=[Subscript(value=Name(id=''source_details'', ctx=Load(), lineno=212,
      col_offset=76, end_lineno=212, end_col_offset=90), slice=Constant(value=''call_inputs'',
      lineno=212, col_offset=91, end_lineno=212, end_col_offset=104), ctx=Load(),
      lineno=212, col_offset=76, end_lineno=212, end_col_offset=105)], lineno=212,
      col_offset=66, end_lineno=212, end_col_offset=105)], lineno=212, col_offset=11,
      end_lineno=212, end_col_offset=105), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=213, col_offset=12, end_lineno=213, end_col_offset=21), slice=Constant(value=''target_inputs'',
      lineno=213, col_offset=22, end_lineno=213, end_col_offset=37), ctx=Store(),
      lineno=213, col_offset=12, end_lineno=213, end_col_offset=38)], value=Subscript(value=Subscript(value=Name(id=''source_details'',
      ctx=Load(), lineno=213, col_offset=41, end_lineno=213, end_col_offset=55), slice=Constant(value=''call_inputs'',
      lineno=213, col_offset=56, end_lineno=213, end_col_offset=69), ctx=Load(), lineno=213,
      col_offset=41, end_lineno=213, end_col_offset=70), slice=Name(id=''target'',
      ctx=Load(), lineno=213, col_offset=71, end_lineno=213, end_col_offset=77), ctx=Load(),
      lineno=213, col_offset=41, end_lineno=213, end_col_offset=78), lineno=213, col_offset=12,
      end_lineno=213, end_col_offset=78)], orelse=[], lineno=212, col_offset=8, end_lineno=213,
      end_col_offset=78), Return(value=Name(id=''edge_data'', ctx=Load(), lineno=214,
      col_offset=15, end_lineno=214, end_col_offset=24), lineno=214, col_offset=8,
      end_lineno=214, end_col_offset=24)], decorator_list=[], returns=Name(id=''dict'',
      ctx=Load(), lineno=207, col_offset=95, end_lineno=207, end_col_offset=99), lineno=207,
      col_offset=4, end_lineno=214, end_col_offset=24), FunctionDef(name=''add_edge_with_data'',
      args=arguments(posonlyargs=[], args=[arg(arg=''source'', annotation=Name(id=''str'',
      ctx=Load(), lineno=217, col_offset=35, end_lineno=217, end_col_offset=38), lineno=217,
      col_offset=27, end_lineno=217, end_col_offset=38), arg(arg=''target'', annotation=Name(id=''str'',
      ctx=Load(), lineno=217, col_offset=48, end_lineno=217, end_col_offset=51), lineno=217,
      col_offset=40, end_lineno=217, end_col_offset=51), arg(arg=''init_method'',
      annotation=Subscript(value=Name(id=''Optional'', ctx=Load(), lineno=217, col_offset=66,
      end_lineno=217, end_col_offset=74), slice=Name(id=''str'', ctx=Load(), lineno=217,
      col_offset=75, end_lineno=217, end_col_offset=78), ctx=Load(), lineno=217, col_offset=66,
      end_lineno=217, end_col_offset=79), lineno=217, col_offset=53, end_lineno=217,
      end_col_offset=79)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None,
      lineno=217, col_offset=82, end_lineno=217, end_col_offset=86)]), body=[Assign(targets=[Name(id=''target_details'',
      ctx=Store(), lineno=218, col_offset=8, end_lineno=218, end_col_offset=22)],
      value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id=''class_method_details_lookup'',
      ctx=Load(), lineno=218, col_offset=25, end_lineno=218, end_col_offset=52), attr=''get'',
      ctx=Load(), lineno=218, col_offset=25, end_lineno=218, end_col_offset=56), args=[BoolOp(op=Or(),
      values=[Name(id=''init_method'', ctx=Load(), lineno=218, col_offset=57, end_lineno=218,
      end_col_offset=68), Name(id=''target'', ctx=Load(), lineno=218, col_offset=72,
      end_lineno=218, end_col_offset=78)], lineno=218, col_offset=57, end_lineno=218,
      end_col_offset=78)], keywords=[], lineno=218, col_offset=25, end_lineno=218,
      end_col_offset=79), Call(func=Attribute(value=Name(id=''function_details_lookup'',
      ctx=Load(), lineno=218, col_offset=83, end_lineno=218, end_col_offset=106),
      attr=''get'', ctx=Load(), lineno=218, col_offset=83, end_lineno=218, end_col_offset=110),
      args=[Name(id=''target'', ctx=Load(), lineno=218, col_offset=111, end_lineno=218,
      end_col_offset=117)], keywords=[], lineno=218, col_offset=83, end_lineno=218,
      end_col_offset=118)], lineno=218, col_offset=25, end_lineno=218, end_col_offset=118),
      lineno=218, col_offset=8, end_lineno=218, end_col_offset=118), Assign(targets=[Name(id=''source_details'',
      ctx=Store(), lineno=219, col_offset=8, end_lineno=219, end_col_offset=22)],
      value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id=''function_details_lookup'',
      ctx=Load(), lineno=219, col_offset=25, end_lineno=219, end_col_offset=48), attr=''get'',
      ctx=Load(), lineno=219, col_offset=25, end_lineno=219, end_col_offset=52), args=[Name(id=''source'',
      ctx=Load(), lineno=219, col_offset=53, end_lineno=219, end_col_offset=59)],
      keywords=[], lineno=219, col_offset=25, end_lineno=219, end_col_offset=60),
      Call(func=Attribute(value=Name(id=''class_method_details_lookup'', ctx=Load(),
      lineno=219, col_offset=64, end_lineno=219, end_col_offset=91), attr=''get'',
      ctx=Load(), lineno=219, col_offset=64, end_lineno=219, end_col_offset=95), args=[Name(id=''source'',
      ctx=Load(), lineno=219, col_offset=96, end_lineno=219, end_col_offset=102)],
      keywords=[], lineno=219, col_offset=64, end_lineno=219, end_col_offset=103)],
      lineno=219, col_offset=25, end_lineno=219, end_col_offset=103), lineno=219,
      col_offset=8, end_lineno=219, end_col_offset=103), Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=220, col_offset=8, end_lineno=220, end_col_offset=9), attr=''add_edge'',
      ctx=Load(), lineno=220, col_offset=8, end_lineno=220, end_col_offset=18), args=[Name(id=''source'',
      ctx=Load(), lineno=220, col_offset=19, end_lineno=220, end_col_offset=25), Name(id=''target'',
      ctx=Load(), lineno=220, col_offset=27, end_lineno=220, end_col_offset=33)],
      keywords=[keyword(value=Call(func=Name(id=''get_edge_data_from_details'', ctx=Load(),
      lineno=220, col_offset=37, end_lineno=220, end_col_offset=63), args=[Name(id=''target_details'',
      ctx=Load(), lineno=220, col_offset=64, end_lineno=220, end_col_offset=78), Name(id=''source_details'',
      ctx=Load(), lineno=220, col_offset=80, end_lineno=220, end_col_offset=94), Name(id=''target'',
      ctx=Load(), lineno=220, col_offset=96, end_lineno=220, end_col_offset=102)],
      keywords=[], lineno=220, col_offset=37, end_lineno=220, end_col_offset=103),
      lineno=220, col_offset=35, end_lineno=220, end_col_offset=103)], lineno=220,
      col_offset=8, end_lineno=220, end_col_offset=104), lineno=220, col_offset=8,
      end_lineno=220, end_col_offset=104)], decorator_list=[], returns=Constant(value=None,
      lineno=217, col_offset=91, end_lineno=217, end_col_offset=95), lineno=217, col_offset=4,
      end_lineno=220, end_col_offset=104), FunctionDef(name=''add_edges_for_calls'',
      args=arguments(posonlyargs=[], args=[arg(arg=''source_name'', lineno=223, col_offset=28,
      end_lineno=223, end_col_offset=39), arg(arg=''calls'', lineno=223, col_offset=41,
      end_lineno=223, end_col_offset=46)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Assign(targets=[Name(id=''class_names'', ctx=Store(), lineno=224, col_offset=8,
      end_lineno=224, end_col_offset=19)], value=ListComp(elt=Subscript(value=Call(func=Name(id=''list'',
      ctx=Load(), lineno=224, col_offset=23, end_lineno=224, end_col_offset=27), args=[Call(func=Attribute(value=Name(id=''class_def'',
      ctx=Load(), lineno=224, col_offset=28, end_lineno=224, end_col_offset=37), attr=''keys'',
      ctx=Load(), lineno=224, col_offset=28, end_lineno=224, end_col_offset=42), args=[],
      keywords=[], lineno=224, col_offset=28, end_lineno=224, end_col_offset=44)],
      keywords=[], lineno=224, col_offset=23, end_lineno=224, end_col_offset=45),
      slice=Constant(value=0, lineno=224, col_offset=46, end_lineno=224, end_col_offset=47),
      ctx=Load(), lineno=224, col_offset=23, end_lineno=224, end_col_offset=48), generators=[comprehension(target=Name(id=''class_def'',
      ctx=Store(), lineno=224, col_offset=53, end_lineno=224, end_col_offset=62),
      iter=Subscript(value=Name(id=''file_summary'', ctx=Load(), lineno=224, col_offset=66,
      end_lineno=224, end_col_offset=78), slice=Constant(value=''class_defs'', lineno=224,
      col_offset=79, end_lineno=224, end_col_offset=91), ctx=Load(), lineno=224, col_offset=66,
      end_lineno=224, end_col_offset=92), ifs=[], is_async=0)], lineno=224, col_offset=22,
      end_lineno=224, end_col_offset=93), lineno=224, col_offset=8, end_lineno=224,
      end_col_offset=93), For(target=Name(id=''called'', ctx=Store(), lineno=225,
      col_offset=12, end_lineno=225, end_col_offset=18), iter=Name(id=''calls'', ctx=Load(),
      lineno=225, col_offset=22, end_lineno=225, end_col_offset=27), body=[Assign(targets=[Name(id=''called_class_name'',
      ctx=Store(), lineno=226, col_offset=12, end_lineno=226, end_col_offset=29)],
      value=Subscript(value=Call(func=Attribute(value=Name(id=''called'', ctx=Load(),
      lineno=226, col_offset=32, end_lineno=226, end_col_offset=38), attr=''split'',
      ctx=Load(), lineno=226, col_offset=32, end_lineno=226, end_col_offset=44), args=[Constant(value=''.'',
      lineno=226, col_offset=45, end_lineno=226, end_col_offset=48)], keywords=[],
      lineno=226, col_offset=32, end_lineno=226, end_col_offset=49), slice=Constant(value=0,
      lineno=226, col_offset=50, end_lineno=226, end_col_offset=51), ctx=Load(), lineno=226,
      col_offset=32, end_lineno=226, end_col_offset=52), lineno=226, col_offset=12,
      end_lineno=226, end_col_offset=52), If(test=Call(func=Attribute(value=Name(id=''called'',
      ctx=Load(), lineno=227, col_offset=15, end_lineno=227, end_col_offset=21), attr=''startswith'',
      ctx=Load(), lineno=227, col_offset=15, end_lineno=227, end_col_offset=32), args=[Constant(value=''self.'',
      lineno=227, col_offset=33, end_lineno=227, end_col_offset=40)], keywords=[],
      lineno=227, col_offset=15, end_lineno=227, end_col_offset=41), body=[Assign(targets=[Name(id=''method_name'',
      ctx=Store(), lineno=228, col_offset=16, end_lineno=228, end_col_offset=27)],
      value=Call(func=Attribute(value=Name(id=''called'', ctx=Load(), lineno=228,
      col_offset=30, end_lineno=228, end_col_offset=36), attr=''replace'', ctx=Load(),
      lineno=228, col_offset=30, end_lineno=228, end_col_offset=44), args=[Constant(value=''self.'',
      lineno=228, col_offset=45, end_lineno=228, end_col_offset=52), Constant(value='''',
      lineno=228, col_offset=54, end_lineno=228, end_col_offset=56)], keywords=[],
      lineno=228, col_offset=30, end_lineno=228, end_col_offset=57), lineno=228, col_offset=16,
      end_lineno=228, end_col_offset=57), Assign(targets=[Name(id=''fully_qualified_name'',
      ctx=Store(), lineno=229, col_offset=16, end_lineno=229, end_col_offset=36)],
      value=JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''source_name'',
      ctx=Load(), lineno=229, col_offset=42, end_lineno=229, end_col_offset=53), attr=''split'',
      ctx=Load(), lineno=229, col_offset=42, end_lineno=229, end_col_offset=59), args=[Constant(value=''.'',
      lineno=229, col_offset=60, end_lineno=229, end_col_offset=63)], keywords=[],
      lineno=229, col_offset=42, end_lineno=229, end_col_offset=64), slice=Constant(value=0,
      lineno=229, col_offset=65, end_lineno=229, end_col_offset=66), ctx=Load(), lineno=229,
      col_offset=42, end_lineno=229, end_col_offset=67), conversion=-1, lineno=229,
      col_offset=39, end_lineno=229, end_col_offset=83), Constant(value=''.'', lineno=229,
      col_offset=39, end_lineno=229, end_col_offset=83), FormattedValue(value=Name(id=''method_name'',
      ctx=Load(), lineno=229, col_offset=70, end_lineno=229, end_col_offset=81), conversion=-1,
      lineno=229, col_offset=39, end_lineno=229, end_col_offset=83)], lineno=229,
      col_offset=39, end_lineno=229, end_col_offset=83), lineno=229, col_offset=16,
      end_lineno=229, end_col_offset=83), If(test=Compare(left=Name(id=''fully_qualified_name'',
      ctx=Load(), lineno=230, col_offset=19, end_lineno=230, end_col_offset=39), ops=[In()],
      comparators=[Name(id=''class_method_details_lookup'', ctx=Load(), lineno=230,
      col_offset=43, end_lineno=230, end_col_offset=70)], lineno=230, col_offset=19,
      end_lineno=230, end_col_offset=70), body=[Expr(value=Call(func=Name(id=''add_edge_with_data'',
      ctx=Load(), lineno=231, col_offset=20, end_lineno=231, end_col_offset=38), args=[Name(id=''source_name'',
      ctx=Load(), lineno=231, col_offset=39, end_lineno=231, end_col_offset=50), Name(id=''fully_qualified_name'',
      ctx=Load(), lineno=231, col_offset=52, end_lineno=231, end_col_offset=72)],
      keywords=[], lineno=231, col_offset=20, end_lineno=231, end_col_offset=73),
      lineno=231, col_offset=20, end_lineno=231, end_col_offset=73), Continue(lineno=232,
      col_offset=20, end_lineno=232, end_col_offset=28)], orelse=[], lineno=230, col_offset=16,
      end_lineno=232, end_col_offset=28)], orelse=[], lineno=227, col_offset=12, end_lineno=232,
      end_col_offset=28), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id=''called'',
      ctx=Load(), lineno=234, col_offset=16, end_lineno=234, end_col_offset=22), ops=[In()],
      comparators=[Name(id=''function_details_lookup'', ctx=Load(), lineno=234, col_offset=26,
      end_lineno=234, end_col_offset=49)], lineno=234, col_offset=16, end_lineno=234,
      end_col_offset=49), Compare(left=Name(id=''called'', ctx=Load(), lineno=235,
      col_offset=16, end_lineno=235, end_col_offset=22), ops=[In()], comparators=[Name(id=''class_method_details_lookup'',
      ctx=Load(), lineno=235, col_offset=26, end_lineno=235, end_col_offset=53)],
      lineno=235, col_offset=16, end_lineno=235, end_col_offset=53), Compare(left=JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''source_name'',
      ctx=Load(), lineno=236, col_offset=19, end_lineno=236, end_col_offset=30), attr=''split'',
      ctx=Load(), lineno=236, col_offset=19, end_lineno=236, end_col_offset=36), args=[Constant(value=''.'',
      lineno=236, col_offset=37, end_lineno=236, end_col_offset=40)], keywords=[],
      lineno=236, col_offset=19, end_lineno=236, end_col_offset=41), slice=Constant(value=0,
      lineno=236, col_offset=42, end_lineno=236, end_col_offset=43), ctx=Load(), lineno=236,
      col_offset=19, end_lineno=236, end_col_offset=44), conversion=-1, lineno=236,
      col_offset=16, end_lineno=236, end_col_offset=55), Constant(value=''.'', lineno=236,
      col_offset=16, end_lineno=236, end_col_offset=55), FormattedValue(value=Name(id=''called'',
      ctx=Load(), lineno=236, col_offset=47, end_lineno=236, end_col_offset=53), conversion=-1,
      lineno=236, col_offset=16, end_lineno=236, end_col_offset=55)], lineno=236,
      col_offset=16, end_lineno=236, end_col_offset=55), ops=[In()], comparators=[Name(id=''class_method_details_lookup'',
      ctx=Load(), lineno=236, col_offset=59, end_lineno=236, end_col_offset=86)],
      lineno=236, col_offset=16, end_lineno=236, end_col_offset=86)], lineno=234,
      col_offset=16, end_lineno=236, end_col_offset=86), body=[Expr(value=Call(func=Name(id=''add_edge_with_data'',
      ctx=Load(), lineno=238, col_offset=16, end_lineno=238, end_col_offset=34), args=[Name(id=''source_name'',
      ctx=Load(), lineno=238, col_offset=35, end_lineno=238, end_col_offset=46), Name(id=''called'',
      ctx=Load(), lineno=238, col_offset=48, end_lineno=238, end_col_offset=54)],
      keywords=[], lineno=238, col_offset=16, end_lineno=238, end_col_offset=55),
      lineno=238, col_offset=16, end_lineno=238, end_col_offset=55)], orelse=[If(test=Compare(left=Name(id=''called_class_name'',
      ctx=Load(), lineno=239, col_offset=17, end_lineno=239, end_col_offset=34), ops=[In()],
      comparators=[Name(id=''class_names'', ctx=Load(), lineno=239, col_offset=38,
      end_lineno=239, end_col_offset=49)], lineno=239, col_offset=17, end_lineno=239,
      end_col_offset=49), body=[Assign(targets=[Name(id=''init_method'', ctx=Store(),
      lineno=240, col_offset=16, end_lineno=240, end_col_offset=27)], value=Constant(value=None,
      lineno=240, col_offset=30, end_lineno=240, end_col_offset=34), lineno=240, col_offset=16,
      end_lineno=240, end_col_offset=34), Assign(targets=[Name(id=''init_method_name'',
      ctx=Store(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=32)],
      value=JoinedStr(values=[FormattedValue(value=Name(id=''called'', ctx=Load(),
      lineno=241, col_offset=38, end_lineno=241, end_col_offset=44), conversion=-1,
      lineno=241, col_offset=35, end_lineno=241, end_col_offset=55), Constant(value=''.__init__'',
      lineno=241, col_offset=35, end_lineno=241, end_col_offset=55)], lineno=241,
      col_offset=35, end_lineno=241, end_col_offset=55), lineno=241, col_offset=16,
      end_lineno=241, end_col_offset=55), If(test=Compare(left=Name(id=''init_method_name'',
      ctx=Load(), lineno=242, col_offset=19, end_lineno=242, end_col_offset=35), ops=[In()],
      comparators=[Name(id=''class_method_details_lookup'', ctx=Load(), lineno=242,
      col_offset=39, end_lineno=242, end_col_offset=66)], lineno=242, col_offset=19,
      end_lineno=242, end_col_offset=66), body=[Assign(targets=[Name(id=''init_method'',
      ctx=Store(), lineno=243, col_offset=20, end_lineno=243, end_col_offset=31)],
      value=Name(id=''init_method_name'', ctx=Load(), lineno=243, col_offset=34, end_lineno=243,
      end_col_offset=50), lineno=243, col_offset=20, end_lineno=243, end_col_offset=50)],
      orelse=[], lineno=242, col_offset=16, end_lineno=243, end_col_offset=50), Expr(value=Call(func=Name(id=''add_edge_with_data'',
      ctx=Load(), lineno=244, col_offset=16, end_lineno=244, end_col_offset=34), args=[Name(id=''source_name'',
      ctx=Load(), lineno=244, col_offset=35, end_lineno=244, end_col_offset=46), Name(id=''called'',
      ctx=Load(), lineno=244, col_offset=48, end_lineno=244, end_col_offset=54), Name(id=''init_method'',
      ctx=Load(), lineno=244, col_offset=56, end_lineno=244, end_col_offset=67)],
      keywords=[], lineno=244, col_offset=16, end_lineno=244, end_col_offset=68),
      lineno=244, col_offset=16, end_lineno=244, end_col_offset=68)], orelse=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=246, col_offset=16, end_lineno=246, end_col_offset=17), attr=''add_node'',
      ctx=Load(), lineno=246, col_offset=16, end_lineno=246, end_col_offset=26), args=[Name(id=''called'',
      ctx=Load(), lineno=246, col_offset=27, end_lineno=246, end_col_offset=33)],
      keywords=[], lineno=246, col_offset=16, end_lineno=246, end_col_offset=34),
      lineno=246, col_offset=16, end_lineno=246, end_col_offset=34), Expr(value=Call(func=Name(id=''add_edge_with_data'',
      ctx=Load(), lineno=247, col_offset=16, end_lineno=247, end_col_offset=34), args=[Name(id=''source_name'',
      ctx=Load(), lineno=247, col_offset=35, end_lineno=247, end_col_offset=46), Name(id=''called'',
      ctx=Load(), lineno=247, col_offset=48, end_lineno=247, end_col_offset=54)],
      keywords=[], lineno=247, col_offset=16, end_lineno=247, end_col_offset=55),
      lineno=247, col_offset=16, end_lineno=247, end_col_offset=55)], lineno=239,
      col_offset=12, end_lineno=247, end_col_offset=55)], lineno=233, col_offset=12,
      end_lineno=247, end_col_offset=55)], orelse=[], lineno=225, col_offset=8, end_lineno=247,
      end_col_offset=55)], decorator_list=[], lineno=223, col_offset=4, end_lineno=247,
      end_col_offset=55), For(target=Name(id=''function_name'', ctx=Store(), lineno=250,
      col_offset=8, end_lineno=250, end_col_offset=21), iter=Call(func=Attribute(value=Name(id=''function_details_lookup'',
      ctx=Load(), lineno=250, col_offset=25, end_lineno=250, end_col_offset=48), attr=''keys'',
      ctx=Load(), lineno=250, col_offset=25, end_lineno=250, end_col_offset=53), args=[],
      keywords=[], lineno=250, col_offset=25, end_lineno=250, end_col_offset=55),
      body=[Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load(), lineno=251,
      col_offset=8, end_lineno=251, end_col_offset=9), attr=''add_node'', ctx=Load(),
      lineno=251, col_offset=8, end_lineno=251, end_col_offset=18), args=[Name(id=''function_name'',
      ctx=Load(), lineno=251, col_offset=19, end_lineno=251, end_col_offset=32)],
      keywords=[], lineno=251, col_offset=8, end_lineno=251, end_col_offset=33), lineno=251,
      col_offset=8, end_lineno=251, end_col_offset=33)], orelse=[], lineno=250, col_offset=4,
      end_lineno=251, end_col_offset=33), For(target=Tuple(elts=[Name(id=''func_name'',
      ctx=Store(), lineno=252, col_offset=8, end_lineno=252, end_col_offset=17), Name(id=''details'',
      ctx=Store(), lineno=252, col_offset=19, end_lineno=252, end_col_offset=26)],
      ctx=Store(), lineno=252, col_offset=8, end_lineno=252, end_col_offset=26), iter=Call(func=Attribute(value=Name(id=''function_details_lookup'',
      ctx=Load(), lineno=252, col_offset=30, end_lineno=252, end_col_offset=53), attr=''items'',
      ctx=Load(), lineno=252, col_offset=30, end_lineno=252, end_col_offset=59), args=[],
      keywords=[], lineno=252, col_offset=30, end_lineno=252, end_col_offset=61),
      body=[Expr(value=Call(func=Name(id=''add_edges_for_calls'', ctx=Load(), lineno=253,
      col_offset=8, end_lineno=253, end_col_offset=27), args=[Name(id=''func_name'',
      ctx=Load(), lineno=253, col_offset=28, end_lineno=253, end_col_offset=37), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=253, col_offset=39, end_lineno=253, end_col_offset=46), slice=Constant(value=''calls'',
      lineno=253, col_offset=47, end_lineno=253, end_col_offset=54), ctx=Load(), lineno=253,
      col_offset=39, end_lineno=253, end_col_offset=55)], keywords=[], lineno=253,
      col_offset=8, end_lineno=253, end_col_offset=56), lineno=253, col_offset=8,
      end_lineno=253, end_col_offset=56)], orelse=[], lineno=252, col_offset=4, end_lineno=253,
      end_col_offset=56), For(target=Tuple(elts=[Name(id=''qualified_method_name'',
      ctx=Store(), lineno=256, col_offset=8, end_lineno=256, end_col_offset=29), Name(id=''details'',
      ctx=Store(), lineno=256, col_offset=31, end_lineno=256, end_col_offset=38)],
      ctx=Store(), lineno=256, col_offset=8, end_lineno=256, end_col_offset=38), iter=Call(func=Attribute(value=Name(id=''class_method_details_lookup'',
      ctx=Load(), lineno=256, col_offset=42, end_lineno=256, end_col_offset=69), attr=''items'',
      ctx=Load(), lineno=256, col_offset=42, end_lineno=256, end_col_offset=75), args=[],
      keywords=[], lineno=256, col_offset=42, end_lineno=256, end_col_offset=77),
      body=[Expr(value=Call(func=Name(id=''add_edges_for_calls'', ctx=Load(), lineno=257,
      col_offset=8, end_lineno=257, end_col_offset=27), args=[Name(id=''qualified_method_name'',
      ctx=Load(), lineno=257, col_offset=28, end_lineno=257, end_col_offset=49), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=257, col_offset=51, end_lineno=257, end_col_offset=58), slice=Constant(value=''calls'',
      lineno=257, col_offset=59, end_lineno=257, end_col_offset=66), ctx=Load(), lineno=257,
      col_offset=51, end_lineno=257, end_col_offset=67)], keywords=[], lineno=257,
      col_offset=8, end_lineno=257, end_col_offset=68), lineno=257, col_offset=8,
      end_lineno=257, end_col_offset=68)], orelse=[], lineno=256, col_offset=4, end_lineno=257,
      end_col_offset=68), For(target=Name(id=''edge'', ctx=Store(), lineno=260, col_offset=8,
      end_lineno=260, end_col_offset=12), iter=Attribute(value=Name(id=''G'', ctx=Load(),
      lineno=260, col_offset=16, end_lineno=260, end_col_offset=17), attr=''edges'',
      ctx=Load(), lineno=260, col_offset=16, end_lineno=260, end_col_offset=23), body=[Assign(targets=[Tuple(elts=[Name(id=''source'',
      ctx=Store(), lineno=261, col_offset=8, end_lineno=261, end_col_offset=14), Name(id=''target'',
      ctx=Store(), lineno=261, col_offset=16, end_lineno=261, end_col_offset=22)],
      ctx=Store(), lineno=261, col_offset=8, end_lineno=261, end_col_offset=22)],
      value=Name(id=''edge'', ctx=Load(), lineno=261, col_offset=25, end_lineno=261,
      end_col_offset=29), lineno=261, col_offset=8, end_lineno=261, end_col_offset=29),
      Assign(targets=[Name(id=''target_details'', ctx=Store(), lineno=262, col_offset=8,
      end_lineno=262, end_col_offset=22)], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id=''function_details_lookup'',
      ctx=Load(), lineno=262, col_offset=25, end_lineno=262, end_col_offset=48), attr=''get'',
      ctx=Load(), lineno=262, col_offset=25, end_lineno=262, end_col_offset=52), args=[Name(id=''target'',
      ctx=Load(), lineno=262, col_offset=53, end_lineno=262, end_col_offset=59)],
      keywords=[], lineno=262, col_offset=25, end_lineno=262, end_col_offset=60),
      Call(func=Attribute(value=Name(id=''class_method_details_lookup'', ctx=Load(),
      lineno=262, col_offset=64, end_lineno=262, end_col_offset=91), attr=''get'',
      ctx=Load(), lineno=262, col_offset=64, end_lineno=262, end_col_offset=95), args=[Name(id=''target'',
      ctx=Load(), lineno=262, col_offset=96, end_lineno=262, end_col_offset=102)],
      keywords=[], lineno=262, col_offset=64, end_lineno=262, end_col_offset=103)],
      lineno=262, col_offset=25, end_lineno=262, end_col_offset=103), lineno=262,
      col_offset=8, end_lineno=262, end_col_offset=103), Assign(targets=[Name(id=''source_details'',
      ctx=Store(), lineno=263, col_offset=8, end_lineno=263, end_col_offset=22)],
      value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id=''function_details_lookup'',
      ctx=Load(), lineno=263, col_offset=25, end_lineno=263, end_col_offset=48), attr=''get'',
      ctx=Load(), lineno=263, col_offset=25, end_lineno=263, end_col_offset=52), args=[Name(id=''source'',
      ctx=Load(), lineno=263, col_offset=53, end_lineno=263, end_col_offset=59)],
      keywords=[], lineno=263, col_offset=25, end_lineno=263, end_col_offset=60),
      Call(func=Attribute(value=Name(id=''class_method_details_lookup'', ctx=Load(),
      lineno=263, col_offset=64, end_lineno=263, end_col_offset=91), attr=''get'',
      ctx=Load(), lineno=263, col_offset=64, end_lineno=263, end_col_offset=95), args=[Name(id=''source'',
      ctx=Load(), lineno=263, col_offset=96, end_lineno=263, end_col_offset=102)],
      keywords=[], lineno=263, col_offset=64, end_lineno=263, end_col_offset=103)],
      lineno=263, col_offset=25, end_lineno=263, end_col_offset=103), lineno=263,
      col_offset=8, end_lineno=263, end_col_offset=103), Assign(targets=[Name(id=''edge_data'',
      ctx=Store(), lineno=264, col_offset=8, end_lineno=264, end_col_offset=17)],
      value=Call(func=Name(id=''get_edge_data_from_details'', ctx=Load(), lineno=264,
      col_offset=20, end_lineno=264, end_col_offset=46), args=[Name(id=''target_details'',
      ctx=Load(), lineno=264, col_offset=47, end_lineno=264, end_col_offset=61), Name(id=''source_details'',
      ctx=Load(), lineno=264, col_offset=63, end_lineno=264, end_col_offset=77), Name(id=''target'',
      ctx=Load(), lineno=264, col_offset=79, end_lineno=264, end_col_offset=85)],
      keywords=[], lineno=264, col_offset=20, end_lineno=264, end_col_offset=86),
      lineno=264, col_offset=8, end_lineno=264, end_col_offset=86), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''G'',
      ctx=Load(), lineno=265, col_offset=8, end_lineno=265, end_col_offset=9), slice=Name(id=''source'',
      ctx=Load(), lineno=265, col_offset=10, end_lineno=265, end_col_offset=16), ctx=Load(),
      lineno=265, col_offset=8, end_lineno=265, end_col_offset=17), slice=Name(id=''target'',
      ctx=Load(), lineno=265, col_offset=18, end_lineno=265, end_col_offset=24), ctx=Load(),
      lineno=265, col_offset=8, end_lineno=265, end_col_offset=25), attr=''update'',
      ctx=Load(), lineno=265, col_offset=8, end_lineno=265, end_col_offset=32), args=[Name(id=''edge_data'',
      ctx=Load(), lineno=265, col_offset=33, end_lineno=265, end_col_offset=42)],
      keywords=[], lineno=265, col_offset=8, end_lineno=265, end_col_offset=43), lineno=265,
      col_offset=8, end_lineno=265, end_col_offset=43)], orelse=[], lineno=260, col_offset=4,
      end_lineno=265, end_col_offset=43), Assign(targets=[Name(id=''nodes'', ctx=Store(),
      lineno=266, col_offset=4, end_lineno=266, end_col_offset=9)], value=Call(func=Name(id=''list'',
      ctx=Load(), lineno=266, col_offset=12, end_lineno=266, end_col_offset=16), args=[Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=266, col_offset=17, end_lineno=266, end_col_offset=18), attr=''nodes'',
      ctx=Load(), lineno=266, col_offset=17, end_lineno=266, end_col_offset=24)],
      keywords=[], lineno=266, col_offset=12, end_lineno=266, end_col_offset=25),
      lineno=266, col_offset=4, end_lineno=266, end_col_offset=25), Assign(targets=[Name(id=''edges'',
      ctx=Store(), lineno=267, col_offset=4, end_lineno=267, end_col_offset=9)], value=ListComp(elt=Dict(keys=[Constant(value=''source'',
      lineno=267, col_offset=14, end_lineno=267, end_col_offset=22), Constant(value=''target'',
      lineno=267, col_offset=33, end_lineno=267, end_col_offset=41), None], values=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=267, col_offset=24, end_lineno=267, end_col_offset=28), slice=Constant(value=0,
      lineno=267, col_offset=29, end_lineno=267, end_col_offset=30), ctx=Load(), lineno=267,
      col_offset=24, end_lineno=267, end_col_offset=31), Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=267, col_offset=43, end_lineno=267, end_col_offset=47), slice=Constant(value=1,
      lineno=267, col_offset=48, end_lineno=267, end_col_offset=49), ctx=Load(), lineno=267,
      col_offset=43, end_lineno=267, end_col_offset=50), Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=267, col_offset=54, end_lineno=267, end_col_offset=58), slice=Constant(value=2,
      lineno=267, col_offset=59, end_lineno=267, end_col_offset=60), ctx=Load(), lineno=267,
      col_offset=54, end_lineno=267, end_col_offset=61)], lineno=267, col_offset=13,
      end_lineno=267, end_col_offset=62), generators=[comprehension(target=Name(id=''edge'',
      ctx=Store(), lineno=267, col_offset=67, end_lineno=267, end_col_offset=71),
      iter=Call(func=Attribute(value=Attribute(value=Name(id=''G'', ctx=Load(), lineno=267,
      col_offset=75, end_lineno=267, end_col_offset=76), attr=''edges'', ctx=Load(),
      lineno=267, col_offset=75, end_lineno=267, end_col_offset=82), attr=''data'',
      ctx=Load(), lineno=267, col_offset=75, end_lineno=267, end_col_offset=87), args=[],
      keywords=[], lineno=267, col_offset=75, end_lineno=267, end_col_offset=89),
      ifs=[], is_async=0)], lineno=267, col_offset=12, end_lineno=267, end_col_offset=90),
      lineno=267, col_offset=4, end_lineno=267, end_col_offset=90), Return(value=Dict(keys=[Constant(value=''nodes'',
      lineno=268, col_offset=12, end_lineno=268, end_col_offset=19), Constant(value=''edges'',
      lineno=268, col_offset=28, end_lineno=268, end_col_offset=35)], values=[Name(id=''nodes'',
      ctx=Load(), lineno=268, col_offset=21, end_lineno=268, end_col_offset=26), Name(id=''edges'',
      ctx=Load(), lineno=268, col_offset=37, end_lineno=268, end_col_offset=42)],
      lineno=268, col_offset=11, end_lineno=268, end_col_offset=43), lineno=268, col_offset=4,
      end_lineno=268, end_col_offset=43)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=182, col_offset=61, end_lineno=182, end_col_offset=65), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=182, col_offset=66, end_lineno=182, end_col_offset=69), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=182, col_offset=71, end_lineno=182, end_col_offset=76), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=182, col_offset=77, end_lineno=182, end_col_offset=81), slice=Name(id=''str'',
      ctx=Load(), lineno=182, col_offset=82, end_lineno=182, end_col_offset=85), ctx=Load(),
      lineno=182, col_offset=77, end_lineno=182, end_col_offset=86), Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=182, col_offset=88, end_lineno=182, end_col_offset=92), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=182, col_offset=93, end_lineno=182, end_col_offset=96), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=182, col_offset=98, end_lineno=182, end_col_offset=102),
      slice=Name(id=''str'', ctx=Load(), lineno=182, col_offset=103, end_lineno=182,
      end_col_offset=106), ctx=Load(), lineno=182, col_offset=98, end_lineno=182,
      end_col_offset=107)], ctx=Load(), lineno=182, col_offset=93, end_lineno=182,
      end_col_offset=107), ctx=Load(), lineno=182, col_offset=88, end_lineno=182,
      end_col_offset=108)], ctx=Load(), lineno=182, col_offset=77, end_lineno=182,
      end_col_offset=108), ctx=Load(), lineno=182, col_offset=71, end_lineno=182,
      end_col_offset=109)], ctx=Load(), lineno=182, col_offset=66, end_lineno=182,
      end_col_offset=109), ctx=Load(), lineno=182, col_offset=61, end_lineno=182,
      end_col_offset=110), lineno=182, col_offset=0, end_lineno=268, end_col_offset=43)'
    function_docstring: "Create a dictionary representation of file details.\nArgs:\n\
      \    file_summary: Dict[str, Union[Dict, str]]: The details extracted from the\
      \ file.\nReturns:\n    dict: A dictionary with nodes and edges representing\
      \ the relationships in the code."
    function_inputs:
    - file_summary
    function_defaults: []
    function_returns:
    - '{''nodes'': nodes, ''edges'': edges}'
    - edge_data
    function_calls:
    - nx.DiGraph
    - function_details_lookup.update
    - class_def.items
    - G.add_node
    - class_details['method_defs'].items
    - G.add_edge
    - target_details.get
    - list
    - set
    - class_method_details_lookup.get
    - function_details_lookup.get
    - get_edge_data_from_details
    - class_def.keys
    - called.split
    - called.startswith
    - called.replace
    - source_name.split
    - add_edge_with_data
    - function_details_lookup.keys
    - function_details_lookup.items
    - add_edges_for_calls
    - class_method_details_lookup.items
    - G[source][target].update
    - G.edges.data
    function_call_inputs:
      nx.DiGraph: []
      function_details_lookup.update:
      - function_def
      class_def.items: []
      G.add_node:
      - function_name
      class_details['method_defs'].items: []
      G.add_edge:
      - source
      - target
      target_details.get:
      - '''returns'''
      - '[]'
      list:
      - G.nodes
      set:
      - target_details.get('returns', [])
      class_method_details_lookup.get:
      - source
      function_details_lookup.get:
      - source
      get_edge_data_from_details:
      - target_details
      - source_details
      - target
      class_def.keys: []
      called.split:
      - '''.'''
      called.startswith:
      - '''self.'''
      called.replace:
      - '''self.'''
      - ''''''
      source_name.split:
      - '''.'''
      add_edge_with_data:
      - source_name
      - called
      function_details_lookup.keys: []
      function_details_lookup.items: []
      add_edges_for_calls:
      - qualified_method_name
      - details['calls']
      class_method_details_lookup.items: []
      G[source][target].update:
      - edge_data
      G.edges.data: []
    function_variables:
    - method_name
    - function_details_lookup
    - edge_data
    - class_method_details_lookup
    - target_details
    - qualified_method_name
    - edges
    - nodes
    - fully_qualified_name
    - init_method_name
    - class_names
    - called_class_name
    - init_method
    - source_details
    - G
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_edge_data_from_details:
    function_name: get_edge_data_from_details
    function_code: "def get_edge_data_from_details(target_details: dict, source_details:\
      \ dict, target: str) -> dict:\n    edge_data = {}\n    if target_details:\n\
      \        edge_data['target_inputs'] = target_details.get('inputs')\n       \
      \ edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n\
      \    if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n\
      \        edge_data['target_inputs'] = source_details['call_inputs'][target]\n\
      \    return edge_data"
    function_ast: FunctionDef(name='get_edge_data_from_details', args=arguments(posonlyargs=[],
      args=[arg(arg='target_details', annotation=Name(id='dict', ctx=Load(), lineno=207,
      col_offset=51, end_lineno=207, end_col_offset=55), lineno=207, col_offset=35,
      end_lineno=207, end_col_offset=55), arg(arg='source_details', annotation=Name(id='dict',
      ctx=Load(), lineno=207, col_offset=73, end_lineno=207, end_col_offset=77), lineno=207,
      col_offset=57, end_lineno=207, end_col_offset=77), arg(arg='target', annotation=Name(id='str',
      ctx=Load(), lineno=207, col_offset=87, end_lineno=207, end_col_offset=90), lineno=207,
      col_offset=79, end_lineno=207, end_col_offset=90)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Assign(targets=[Name(id='edge_data', ctx=Store(), lineno=208,
      col_offset=8, end_lineno=208, end_col_offset=17)], value=Dict(keys=[], values=[],
      lineno=208, col_offset=20, end_lineno=208, end_col_offset=22), lineno=208, col_offset=8,
      end_lineno=208, end_col_offset=22), If(test=Name(id='target_details', ctx=Load(),
      lineno=209, col_offset=11, end_lineno=209, end_col_offset=25), body=[Assign(targets=[Subscript(value=Name(id='edge_data',
      ctx=Load(), lineno=210, col_offset=12, end_lineno=210, end_col_offset=21), slice=Constant(value='target_inputs',
      lineno=210, col_offset=22, end_lineno=210, end_col_offset=37), ctx=Store(),
      lineno=210, col_offset=12, end_lineno=210, end_col_offset=38)], value=Call(func=Attribute(value=Name(id='target_details',
      ctx=Load(), lineno=210, col_offset=41, end_lineno=210, end_col_offset=55), attr='get',
      ctx=Load(), lineno=210, col_offset=41, end_lineno=210, end_col_offset=59), args=[Constant(value='inputs',
      lineno=210, col_offset=60, end_lineno=210, end_col_offset=68)], keywords=[],
      lineno=210, col_offset=41, end_lineno=210, end_col_offset=69), lineno=210, col_offset=12,
      end_lineno=210, end_col_offset=69), Assign(targets=[Subscript(value=Name(id='edge_data',
      ctx=Load(), lineno=211, col_offset=12, end_lineno=211, end_col_offset=21), slice=Constant(value='target_returns',
      lineno=211, col_offset=22, end_lineno=211, end_col_offset=38), ctx=Store(),
      lineno=211, col_offset=12, end_lineno=211, end_col_offset=39)], value=Call(func=Name(id='list',
      ctx=Load(), lineno=211, col_offset=42, end_lineno=211, end_col_offset=46), args=[Call(func=Name(id='set',
      ctx=Load(), lineno=211, col_offset=47, end_lineno=211, end_col_offset=50), args=[Call(func=Attribute(value=Name(id='target_details',
      ctx=Load(), lineno=211, col_offset=51, end_lineno=211, end_col_offset=65), attr='get',
      ctx=Load(), lineno=211, col_offset=51, end_lineno=211, end_col_offset=69), args=[Constant(value='returns',
      lineno=211, col_offset=70, end_lineno=211, end_col_offset=79), List(elts=[],
      ctx=Load(), lineno=211, col_offset=81, end_lineno=211, end_col_offset=83)],
      keywords=[], lineno=211, col_offset=51, end_lineno=211, end_col_offset=84)],
      keywords=[], lineno=211, col_offset=47, end_lineno=211, end_col_offset=85)],
      keywords=[], lineno=211, col_offset=42, end_lineno=211, end_col_offset=86),
      lineno=211, col_offset=12, end_lineno=211, end_col_offset=86)], orelse=[], lineno=209,
      col_offset=8, end_lineno=211, end_col_offset=86), If(test=BoolOp(op=And(), values=[Name(id='source_details',
      ctx=Load(), lineno=212, col_offset=11, end_lineno=212, end_col_offset=25), Compare(left=Constant(value='call_inputs',
      lineno=212, col_offset=30, end_lineno=212, end_col_offset=43), ops=[In()], comparators=[Name(id='source_details',
      ctx=Load(), lineno=212, col_offset=47, end_lineno=212, end_col_offset=61)],
      lineno=212, col_offset=30, end_lineno=212, end_col_offset=61), Compare(left=Name(id='target',
      ctx=Load(), lineno=212, col_offset=66, end_lineno=212, end_col_offset=72), ops=[In()],
      comparators=[Subscript(value=Name(id='source_details', ctx=Load(), lineno=212,
      col_offset=76, end_lineno=212, end_col_offset=90), slice=Constant(value='call_inputs',
      lineno=212, col_offset=91, end_lineno=212, end_col_offset=104), ctx=Load(),
      lineno=212, col_offset=76, end_lineno=212, end_col_offset=105)], lineno=212,
      col_offset=66, end_lineno=212, end_col_offset=105)], lineno=212, col_offset=11,
      end_lineno=212, end_col_offset=105), body=[Assign(targets=[Subscript(value=Name(id='edge_data',
      ctx=Load(), lineno=213, col_offset=12, end_lineno=213, end_col_offset=21), slice=Constant(value='target_inputs',
      lineno=213, col_offset=22, end_lineno=213, end_col_offset=37), ctx=Store(),
      lineno=213, col_offset=12, end_lineno=213, end_col_offset=38)], value=Subscript(value=Subscript(value=Name(id='source_details',
      ctx=Load(), lineno=213, col_offset=41, end_lineno=213, end_col_offset=55), slice=Constant(value='call_inputs',
      lineno=213, col_offset=56, end_lineno=213, end_col_offset=69), ctx=Load(), lineno=213,
      col_offset=41, end_lineno=213, end_col_offset=70), slice=Name(id='target', ctx=Load(),
      lineno=213, col_offset=71, end_lineno=213, end_col_offset=77), ctx=Load(), lineno=213,
      col_offset=41, end_lineno=213, end_col_offset=78), lineno=213, col_offset=12,
      end_lineno=213, end_col_offset=78)], orelse=[], lineno=212, col_offset=8, end_lineno=213,
      end_col_offset=78), Return(value=Name(id='edge_data', ctx=Load(), lineno=214,
      col_offset=15, end_lineno=214, end_col_offset=24), lineno=214, col_offset=8,
      end_lineno=214, end_col_offset=24)], decorator_list=[], returns=Name(id='dict',
      ctx=Load(), lineno=207, col_offset=95, end_lineno=207, end_col_offset=99), lineno=207,
      col_offset=4, end_lineno=214, end_col_offset=24)
    function_docstring: null
    function_inputs:
    - target_details
    - source_details
    - target
    function_defaults: []
    function_returns:
    - edge_data
    function_calls:
    - target_details.get
    - list
    - set
    function_call_inputs:
      target_details.get:
      - '''returns'''
      - '[]'
      list:
      - set(target_details.get('returns', []))
      set:
      - target_details.get('returns', [])
    function_variables:
    - edge_data
    function_decorators: []
    function_annotations: []
    function_properties: []
  add_edge_with_data:
    function_name: add_edge_with_data
    function_code: "def add_edge_with_data(source: str, target: str, init_method:\
      \ Optional[str]=None) -> None:\n    target_details = class_method_details_lookup.get(init_method\
      \ or target) or function_details_lookup.get(target)\n    source_details = function_details_lookup.get(source)\
      \ or class_method_details_lookup.get(source)\n    G.add_edge(source, target,\
      \ **get_edge_data_from_details(target_details, source_details, target))"
    function_ast: FunctionDef(name='add_edge_with_data', args=arguments(posonlyargs=[],
      args=[arg(arg='source', annotation=Name(id='str', ctx=Load(), lineno=217, col_offset=35,
      end_lineno=217, end_col_offset=38), lineno=217, col_offset=27, end_lineno=217,
      end_col_offset=38), arg(arg='target', annotation=Name(id='str', ctx=Load(),
      lineno=217, col_offset=48, end_lineno=217, end_col_offset=51), lineno=217, col_offset=40,
      end_lineno=217, end_col_offset=51), arg(arg='init_method', annotation=Subscript(value=Name(id='Optional',
      ctx=Load(), lineno=217, col_offset=66, end_lineno=217, end_col_offset=74), slice=Name(id='str',
      ctx=Load(), lineno=217, col_offset=75, end_lineno=217, end_col_offset=78), ctx=Load(),
      lineno=217, col_offset=66, end_lineno=217, end_col_offset=79), lineno=217, col_offset=53,
      end_lineno=217, end_col_offset=79)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None,
      lineno=217, col_offset=82, end_lineno=217, end_col_offset=86)]), body=[Assign(targets=[Name(id='target_details',
      ctx=Store(), lineno=218, col_offset=8, end_lineno=218, end_col_offset=22)],
      value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='class_method_details_lookup',
      ctx=Load(), lineno=218, col_offset=25, end_lineno=218, end_col_offset=52), attr='get',
      ctx=Load(), lineno=218, col_offset=25, end_lineno=218, end_col_offset=56), args=[BoolOp(op=Or(),
      values=[Name(id='init_method', ctx=Load(), lineno=218, col_offset=57, end_lineno=218,
      end_col_offset=68), Name(id='target', ctx=Load(), lineno=218, col_offset=72,
      end_lineno=218, end_col_offset=78)], lineno=218, col_offset=57, end_lineno=218,
      end_col_offset=78)], keywords=[], lineno=218, col_offset=25, end_lineno=218,
      end_col_offset=79), Call(func=Attribute(value=Name(id='function_details_lookup',
      ctx=Load(), lineno=218, col_offset=83, end_lineno=218, end_col_offset=106),
      attr='get', ctx=Load(), lineno=218, col_offset=83, end_lineno=218, end_col_offset=110),
      args=[Name(id='target', ctx=Load(), lineno=218, col_offset=111, end_lineno=218,
      end_col_offset=117)], keywords=[], lineno=218, col_offset=83, end_lineno=218,
      end_col_offset=118)], lineno=218, col_offset=25, end_lineno=218, end_col_offset=118),
      lineno=218, col_offset=8, end_lineno=218, end_col_offset=118), Assign(targets=[Name(id='source_details',
      ctx=Store(), lineno=219, col_offset=8, end_lineno=219, end_col_offset=22)],
      value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='function_details_lookup',
      ctx=Load(), lineno=219, col_offset=25, end_lineno=219, end_col_offset=48), attr='get',
      ctx=Load(), lineno=219, col_offset=25, end_lineno=219, end_col_offset=52), args=[Name(id='source',
      ctx=Load(), lineno=219, col_offset=53, end_lineno=219, end_col_offset=59)],
      keywords=[], lineno=219, col_offset=25, end_lineno=219, end_col_offset=60),
      Call(func=Attribute(value=Name(id='class_method_details_lookup', ctx=Load(),
      lineno=219, col_offset=64, end_lineno=219, end_col_offset=91), attr='get', ctx=Load(),
      lineno=219, col_offset=64, end_lineno=219, end_col_offset=95), args=[Name(id='source',
      ctx=Load(), lineno=219, col_offset=96, end_lineno=219, end_col_offset=102)],
      keywords=[], lineno=219, col_offset=64, end_lineno=219, end_col_offset=103)],
      lineno=219, col_offset=25, end_lineno=219, end_col_offset=103), lineno=219,
      col_offset=8, end_lineno=219, end_col_offset=103), Expr(value=Call(func=Attribute(value=Name(id='G',
      ctx=Load(), lineno=220, col_offset=8, end_lineno=220, end_col_offset=9), attr='add_edge',
      ctx=Load(), lineno=220, col_offset=8, end_lineno=220, end_col_offset=18), args=[Name(id='source',
      ctx=Load(), lineno=220, col_offset=19, end_lineno=220, end_col_offset=25), Name(id='target',
      ctx=Load(), lineno=220, col_offset=27, end_lineno=220, end_col_offset=33)],
      keywords=[keyword(value=Call(func=Name(id='get_edge_data_from_details', ctx=Load(),
      lineno=220, col_offset=37, end_lineno=220, end_col_offset=63), args=[Name(id='target_details',
      ctx=Load(), lineno=220, col_offset=64, end_lineno=220, end_col_offset=78), Name(id='source_details',
      ctx=Load(), lineno=220, col_offset=80, end_lineno=220, end_col_offset=94), Name(id='target',
      ctx=Load(), lineno=220, col_offset=96, end_lineno=220, end_col_offset=102)],
      keywords=[], lineno=220, col_offset=37, end_lineno=220, end_col_offset=103),
      lineno=220, col_offset=35, end_lineno=220, end_col_offset=103)], lineno=220,
      col_offset=8, end_lineno=220, end_col_offset=104), lineno=220, col_offset=8,
      end_lineno=220, end_col_offset=104)], decorator_list=[], returns=Constant(value=None,
      lineno=217, col_offset=91, end_lineno=217, end_col_offset=95), lineno=217, col_offset=4,
      end_lineno=220, end_col_offset=104)
    function_docstring: null
    function_inputs:
    - source
    - target
    - init_method
    function_defaults:
    - None
    function_returns: []
    function_calls:
    - class_method_details_lookup.get
    - function_details_lookup.get
    - G.add_edge
    - get_edge_data_from_details
    function_call_inputs:
      class_method_details_lookup.get:
      - source
      function_details_lookup.get:
      - source
      G.add_edge:
      - source
      - target
      get_edge_data_from_details:
      - target_details
      - source_details
      - target
    function_variables:
    - target_details
    - source_details
    function_decorators: []
    function_annotations: []
    function_properties: []
  add_edges_for_calls:
    function_name: add_edges_for_calls
    function_code: "def add_edges_for_calls(source_name, calls):\n    class_names\
      \ = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n\
      \    for called in calls:\n        called_class_name = called.split('.')[0]\n\
      \        if called.startswith('self.'):\n            method_name = called.replace('self.',\
      \ '')\n            fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\
      \n            if fully_qualified_name in class_method_details_lookup:\n    \
      \            add_edge_with_data(source_name, fully_qualified_name)\n       \
      \         continue\n        if called in function_details_lookup or called in\
      \ class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in\
      \ class_method_details_lookup:\n            add_edge_with_data(source_name,\
      \ called)\n        elif called_class_name in class_names:\n            init_method\
      \ = None\n            init_method_name = f'{called}.__init__'\n            if\
      \ init_method_name in class_method_details_lookup:\n                init_method\
      \ = init_method_name\n            add_edge_with_data(source_name, called, init_method)\n\
      \        else:\n            G.add_node(called)\n            add_edge_with_data(source_name,\
      \ called)"
    function_ast: FunctionDef(name='add_edges_for_calls', args=arguments(posonlyargs=[],
      args=[arg(arg='source_name', lineno=223, col_offset=28, end_lineno=223, end_col_offset=39),
      arg(arg='calls', lineno=223, col_offset=41, end_lineno=223, end_col_offset=46)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='class_names',
      ctx=Store(), lineno=224, col_offset=8, end_lineno=224, end_col_offset=19)],
      value=ListComp(elt=Subscript(value=Call(func=Name(id='list', ctx=Load(), lineno=224,
      col_offset=23, end_lineno=224, end_col_offset=27), args=[Call(func=Attribute(value=Name(id='class_def',
      ctx=Load(), lineno=224, col_offset=28, end_lineno=224, end_col_offset=37), attr='keys',
      ctx=Load(), lineno=224, col_offset=28, end_lineno=224, end_col_offset=42), args=[],
      keywords=[], lineno=224, col_offset=28, end_lineno=224, end_col_offset=44)],
      keywords=[], lineno=224, col_offset=23, end_lineno=224, end_col_offset=45),
      slice=Constant(value=0, lineno=224, col_offset=46, end_lineno=224, end_col_offset=47),
      ctx=Load(), lineno=224, col_offset=23, end_lineno=224, end_col_offset=48), generators=[comprehension(target=Name(id='class_def',
      ctx=Store(), lineno=224, col_offset=53, end_lineno=224, end_col_offset=62),
      iter=Subscript(value=Name(id='file_summary', ctx=Load(), lineno=224, col_offset=66,
      end_lineno=224, end_col_offset=78), slice=Constant(value='class_defs', lineno=224,
      col_offset=79, end_lineno=224, end_col_offset=91), ctx=Load(), lineno=224, col_offset=66,
      end_lineno=224, end_col_offset=92), ifs=[], is_async=0)], lineno=224, col_offset=22,
      end_lineno=224, end_col_offset=93), lineno=224, col_offset=8, end_lineno=224,
      end_col_offset=93), For(target=Name(id='called', ctx=Store(), lineno=225, col_offset=12,
      end_lineno=225, end_col_offset=18), iter=Name(id='calls', ctx=Load(), lineno=225,
      col_offset=22, end_lineno=225, end_col_offset=27), body=[Assign(targets=[Name(id='called_class_name',
      ctx=Store(), lineno=226, col_offset=12, end_lineno=226, end_col_offset=29)],
      value=Subscript(value=Call(func=Attribute(value=Name(id='called', ctx=Load(),
      lineno=226, col_offset=32, end_lineno=226, end_col_offset=38), attr='split',
      ctx=Load(), lineno=226, col_offset=32, end_lineno=226, end_col_offset=44), args=[Constant(value='.',
      lineno=226, col_offset=45, end_lineno=226, end_col_offset=48)], keywords=[],
      lineno=226, col_offset=32, end_lineno=226, end_col_offset=49), slice=Constant(value=0,
      lineno=226, col_offset=50, end_lineno=226, end_col_offset=51), ctx=Load(), lineno=226,
      col_offset=32, end_lineno=226, end_col_offset=52), lineno=226, col_offset=12,
      end_lineno=226, end_col_offset=52), If(test=Call(func=Attribute(value=Name(id='called',
      ctx=Load(), lineno=227, col_offset=15, end_lineno=227, end_col_offset=21), attr='startswith',
      ctx=Load(), lineno=227, col_offset=15, end_lineno=227, end_col_offset=32), args=[Constant(value='self.',
      lineno=227, col_offset=33, end_lineno=227, end_col_offset=40)], keywords=[],
      lineno=227, col_offset=15, end_lineno=227, end_col_offset=41), body=[Assign(targets=[Name(id='method_name',
      ctx=Store(), lineno=228, col_offset=16, end_lineno=228, end_col_offset=27)],
      value=Call(func=Attribute(value=Name(id='called', ctx=Load(), lineno=228, col_offset=30,
      end_lineno=228, end_col_offset=36), attr='replace', ctx=Load(), lineno=228,
      col_offset=30, end_lineno=228, end_col_offset=44), args=[Constant(value='self.',
      lineno=228, col_offset=45, end_lineno=228, end_col_offset=52), Constant(value='',
      lineno=228, col_offset=54, end_lineno=228, end_col_offset=56)], keywords=[],
      lineno=228, col_offset=30, end_lineno=228, end_col_offset=57), lineno=228, col_offset=16,
      end_lineno=228, end_col_offset=57), Assign(targets=[Name(id='fully_qualified_name',
      ctx=Store(), lineno=229, col_offset=16, end_lineno=229, end_col_offset=36)],
      value=JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id='source_name',
      ctx=Load(), lineno=229, col_offset=42, end_lineno=229, end_col_offset=53), attr='split',
      ctx=Load(), lineno=229, col_offset=42, end_lineno=229, end_col_offset=59), args=[Constant(value='.',
      lineno=229, col_offset=60, end_lineno=229, end_col_offset=63)], keywords=[],
      lineno=229, col_offset=42, end_lineno=229, end_col_offset=64), slice=Constant(value=0,
      lineno=229, col_offset=65, end_lineno=229, end_col_offset=66), ctx=Load(), lineno=229,
      col_offset=42, end_lineno=229, end_col_offset=67), conversion=-1, lineno=229,
      col_offset=39, end_lineno=229, end_col_offset=83), Constant(value='.', lineno=229,
      col_offset=39, end_lineno=229, end_col_offset=83), FormattedValue(value=Name(id='method_name',
      ctx=Load(), lineno=229, col_offset=70, end_lineno=229, end_col_offset=81), conversion=-1,
      lineno=229, col_offset=39, end_lineno=229, end_col_offset=83)], lineno=229,
      col_offset=39, end_lineno=229, end_col_offset=83), lineno=229, col_offset=16,
      end_lineno=229, end_col_offset=83), If(test=Compare(left=Name(id='fully_qualified_name',
      ctx=Load(), lineno=230, col_offset=19, end_lineno=230, end_col_offset=39), ops=[In()],
      comparators=[Name(id='class_method_details_lookup', ctx=Load(), lineno=230,
      col_offset=43, end_lineno=230, end_col_offset=70)], lineno=230, col_offset=19,
      end_lineno=230, end_col_offset=70), body=[Expr(value=Call(func=Name(id='add_edge_with_data',
      ctx=Load(), lineno=231, col_offset=20, end_lineno=231, end_col_offset=38), args=[Name(id='source_name',
      ctx=Load(), lineno=231, col_offset=39, end_lineno=231, end_col_offset=50), Name(id='fully_qualified_name',
      ctx=Load(), lineno=231, col_offset=52, end_lineno=231, end_col_offset=72)],
      keywords=[], lineno=231, col_offset=20, end_lineno=231, end_col_offset=73),
      lineno=231, col_offset=20, end_lineno=231, end_col_offset=73), Continue(lineno=232,
      col_offset=20, end_lineno=232, end_col_offset=28)], orelse=[], lineno=230, col_offset=16,
      end_lineno=232, end_col_offset=28)], orelse=[], lineno=227, col_offset=12, end_lineno=232,
      end_col_offset=28), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='called',
      ctx=Load(), lineno=234, col_offset=16, end_lineno=234, end_col_offset=22), ops=[In()],
      comparators=[Name(id='function_details_lookup', ctx=Load(), lineno=234, col_offset=26,
      end_lineno=234, end_col_offset=49)], lineno=234, col_offset=16, end_lineno=234,
      end_col_offset=49), Compare(left=Name(id='called', ctx=Load(), lineno=235, col_offset=16,
      end_lineno=235, end_col_offset=22), ops=[In()], comparators=[Name(id='class_method_details_lookup',
      ctx=Load(), lineno=235, col_offset=26, end_lineno=235, end_col_offset=53)],
      lineno=235, col_offset=16, end_lineno=235, end_col_offset=53), Compare(left=JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id='source_name',
      ctx=Load(), lineno=236, col_offset=19, end_lineno=236, end_col_offset=30), attr='split',
      ctx=Load(), lineno=236, col_offset=19, end_lineno=236, end_col_offset=36), args=[Constant(value='.',
      lineno=236, col_offset=37, end_lineno=236, end_col_offset=40)], keywords=[],
      lineno=236, col_offset=19, end_lineno=236, end_col_offset=41), slice=Constant(value=0,
      lineno=236, col_offset=42, end_lineno=236, end_col_offset=43), ctx=Load(), lineno=236,
      col_offset=19, end_lineno=236, end_col_offset=44), conversion=-1, lineno=236,
      col_offset=16, end_lineno=236, end_col_offset=55), Constant(value='.', lineno=236,
      col_offset=16, end_lineno=236, end_col_offset=55), FormattedValue(value=Name(id='called',
      ctx=Load(), lineno=236, col_offset=47, end_lineno=236, end_col_offset=53), conversion=-1,
      lineno=236, col_offset=16, end_lineno=236, end_col_offset=55)], lineno=236,
      col_offset=16, end_lineno=236, end_col_offset=55), ops=[In()], comparators=[Name(id='class_method_details_lookup',
      ctx=Load(), lineno=236, col_offset=59, end_lineno=236, end_col_offset=86)],
      lineno=236, col_offset=16, end_lineno=236, end_col_offset=86)], lineno=234,
      col_offset=16, end_lineno=236, end_col_offset=86), body=[Expr(value=Call(func=Name(id='add_edge_with_data',
      ctx=Load(), lineno=238, col_offset=16, end_lineno=238, end_col_offset=34), args=[Name(id='source_name',
      ctx=Load(), lineno=238, col_offset=35, end_lineno=238, end_col_offset=46), Name(id='called',
      ctx=Load(), lineno=238, col_offset=48, end_lineno=238, end_col_offset=54)],
      keywords=[], lineno=238, col_offset=16, end_lineno=238, end_col_offset=55),
      lineno=238, col_offset=16, end_lineno=238, end_col_offset=55)], orelse=[If(test=Compare(left=Name(id='called_class_name',
      ctx=Load(), lineno=239, col_offset=17, end_lineno=239, end_col_offset=34), ops=[In()],
      comparators=[Name(id='class_names', ctx=Load(), lineno=239, col_offset=38, end_lineno=239,
      end_col_offset=49)], lineno=239, col_offset=17, end_lineno=239, end_col_offset=49),
      body=[Assign(targets=[Name(id='init_method', ctx=Store(), lineno=240, col_offset=16,
      end_lineno=240, end_col_offset=27)], value=Constant(value=None, lineno=240,
      col_offset=30, end_lineno=240, end_col_offset=34), lineno=240, col_offset=16,
      end_lineno=240, end_col_offset=34), Assign(targets=[Name(id='init_method_name',
      ctx=Store(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=32)],
      value=JoinedStr(values=[FormattedValue(value=Name(id='called', ctx=Load(), lineno=241,
      col_offset=38, end_lineno=241, end_col_offset=44), conversion=-1, lineno=241,
      col_offset=35, end_lineno=241, end_col_offset=55), Constant(value='.__init__',
      lineno=241, col_offset=35, end_lineno=241, end_col_offset=55)], lineno=241,
      col_offset=35, end_lineno=241, end_col_offset=55), lineno=241, col_offset=16,
      end_lineno=241, end_col_offset=55), If(test=Compare(left=Name(id='init_method_name',
      ctx=Load(), lineno=242, col_offset=19, end_lineno=242, end_col_offset=35), ops=[In()],
      comparators=[Name(id='class_method_details_lookup', ctx=Load(), lineno=242,
      col_offset=39, end_lineno=242, end_col_offset=66)], lineno=242, col_offset=19,
      end_lineno=242, end_col_offset=66), body=[Assign(targets=[Name(id='init_method',
      ctx=Store(), lineno=243, col_offset=20, end_lineno=243, end_col_offset=31)],
      value=Name(id='init_method_name', ctx=Load(), lineno=243, col_offset=34, end_lineno=243,
      end_col_offset=50), lineno=243, col_offset=20, end_lineno=243, end_col_offset=50)],
      orelse=[], lineno=242, col_offset=16, end_lineno=243, end_col_offset=50), Expr(value=Call(func=Name(id='add_edge_with_data',
      ctx=Load(), lineno=244, col_offset=16, end_lineno=244, end_col_offset=34), args=[Name(id='source_name',
      ctx=Load(), lineno=244, col_offset=35, end_lineno=244, end_col_offset=46), Name(id='called',
      ctx=Load(), lineno=244, col_offset=48, end_lineno=244, end_col_offset=54), Name(id='init_method',
      ctx=Load(), lineno=244, col_offset=56, end_lineno=244, end_col_offset=67)],
      keywords=[], lineno=244, col_offset=16, end_lineno=244, end_col_offset=68),
      lineno=244, col_offset=16, end_lineno=244, end_col_offset=68)], orelse=[Expr(value=Call(func=Attribute(value=Name(id='G',
      ctx=Load(), lineno=246, col_offset=16, end_lineno=246, end_col_offset=17), attr='add_node',
      ctx=Load(), lineno=246, col_offset=16, end_lineno=246, end_col_offset=26), args=[Name(id='called',
      ctx=Load(), lineno=246, col_offset=27, end_lineno=246, end_col_offset=33)],
      keywords=[], lineno=246, col_offset=16, end_lineno=246, end_col_offset=34),
      lineno=246, col_offset=16, end_lineno=246, end_col_offset=34), Expr(value=Call(func=Name(id='add_edge_with_data',
      ctx=Load(), lineno=247, col_offset=16, end_lineno=247, end_col_offset=34), args=[Name(id='source_name',
      ctx=Load(), lineno=247, col_offset=35, end_lineno=247, end_col_offset=46), Name(id='called',
      ctx=Load(), lineno=247, col_offset=48, end_lineno=247, end_col_offset=54)],
      keywords=[], lineno=247, col_offset=16, end_lineno=247, end_col_offset=55),
      lineno=247, col_offset=16, end_lineno=247, end_col_offset=55)], lineno=239,
      col_offset=12, end_lineno=247, end_col_offset=55)], lineno=233, col_offset=12,
      end_lineno=247, end_col_offset=55)], orelse=[], lineno=225, col_offset=8, end_lineno=247,
      end_col_offset=55)], decorator_list=[], lineno=223, col_offset=4, end_lineno=247,
      end_col_offset=55)
    function_docstring: null
    function_inputs:
    - source_name
    - calls
    function_defaults: []
    function_returns: []
    function_calls:
    - list
    - class_def.keys
    - called.split
    - called.startswith
    - called.replace
    - source_name.split
    - add_edge_with_data
    - G.add_node
    function_call_inputs:
      list:
      - class_def.keys()
      class_def.keys: []
      called.split:
      - '''.'''
      called.startswith:
      - '''self.'''
      called.replace:
      - '''self.'''
      - ''''''
      source_name.split:
      - '''.'''
      add_edge_with_data:
      - source_name
      - called
      G.add_node:
      - called
    function_variables:
    - method_name
    - init_method_name
    - fully_qualified_name
    - class_names
    - called_class_name
    - init_method
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_python_file_details:
    function_name: get_python_file_details
    function_code: "def get_python_file_details(file_path: str) -> Dict[str, Union[Dict,\
      \ str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n \
      \       file_path: str: The path to the Python file.\n    Returns:\n       \
      \ Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\
      \"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore')\
      \ as f:\n            code = f.read()\n            tree = ast.parse(code)\n \
      \   except:\n        logging.warning(f'Permission denied or syntax error in\
      \ file: {file_path}')\n        return None\n    visitor = CodeVisitor(code)\n\
      \    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info,\
      \ 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph']\
      \ = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary']\
      \ = json.dumps(file_details['file_info']['file_summary']).replace('\"', '')\n\
      \    return file_details"
    function_ast: 'FunctionDef(name=''get_python_file_details'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load(), lineno=271,
      col_offset=39, end_lineno=271, end_col_offset=42), lineno=271, col_offset=28,
      end_lineno=271, end_col_offset=42)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Extract details from a Python file.\n    Args:\n        file_path:
      str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict,
      str]]: The details extracted from the file.\n    '', lineno=272, col_offset=4,
      end_lineno=278, end_col_offset=7), lineno=272, col_offset=4, end_lineno=278,
      end_col_offset=7), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=280, col_offset=13, end_lineno=280, end_col_offset=17), args=[Name(id=''file_path'',
      ctx=Load(), lineno=280, col_offset=18, end_lineno=280, end_col_offset=27), Constant(value=''r'',
      lineno=280, col_offset=29, end_lineno=280, end_col_offset=32)], keywords=[keyword(arg=''encoding'',
      value=Constant(value=''utf-8'', lineno=280, col_offset=43, end_lineno=280, end_col_offset=50),
      lineno=280, col_offset=34, end_lineno=280, end_col_offset=50), keyword(arg=''errors'',
      value=Constant(value=''ignore'', lineno=280, col_offset=59, end_lineno=280,
      end_col_offset=67), lineno=280, col_offset=52, end_lineno=280, end_col_offset=67)],
      lineno=280, col_offset=13, end_lineno=280, end_col_offset=68), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=280, col_offset=72, end_lineno=280, end_col_offset=73))],
      body=[Assign(targets=[Name(id=''code'', ctx=Store(), lineno=281, col_offset=12,
      end_lineno=281, end_col_offset=16)], value=Call(func=Attribute(value=Name(id=''f'',
      ctx=Load(), lineno=281, col_offset=19, end_lineno=281, end_col_offset=20), attr=''read'',
      ctx=Load(), lineno=281, col_offset=19, end_lineno=281, end_col_offset=25), args=[],
      keywords=[], lineno=281, col_offset=19, end_lineno=281, end_col_offset=27),
      lineno=281, col_offset=12, end_lineno=281, end_col_offset=27), Assign(targets=[Name(id=''tree'',
      ctx=Store(), lineno=282, col_offset=12, end_lineno=282, end_col_offset=16)],
      value=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=282, col_offset=19,
      end_lineno=282, end_col_offset=22), attr=''parse'', ctx=Load(), lineno=282,
      col_offset=19, end_lineno=282, end_col_offset=28), args=[Name(id=''code'', ctx=Load(),
      lineno=282, col_offset=29, end_lineno=282, end_col_offset=33)], keywords=[],
      lineno=282, col_offset=19, end_lineno=282, end_col_offset=34), lineno=282, col_offset=12,
      end_lineno=282, end_col_offset=34)], lineno=280, col_offset=8, end_lineno=282,
      end_col_offset=34)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=284, col_offset=8, end_lineno=284, end_col_offset=15), attr=''warning'',
      ctx=Load(), lineno=284, col_offset=8, end_lineno=284, end_col_offset=23), args=[JoinedStr(values=[Constant(value=''Permission
      denied or syntax error in file: '', lineno=284, col_offset=24, end_lineno=284,
      end_col_offset=81), FormattedValue(value=Name(id=''file_path'', ctx=Load(),
      lineno=284, col_offset=70, end_lineno=284, end_col_offset=79), conversion=-1,
      lineno=284, col_offset=24, end_lineno=284, end_col_offset=81)], lineno=284,
      col_offset=24, end_lineno=284, end_col_offset=81)], keywords=[], lineno=284,
      col_offset=8, end_lineno=284, end_col_offset=82), lineno=284, col_offset=8,
      end_lineno=284, end_col_offset=82), Return(value=Constant(value=None, lineno=285,
      col_offset=15, end_lineno=285, end_col_offset=19), lineno=285, col_offset=8,
      end_lineno=285, end_col_offset=19)], lineno=283, col_offset=4, end_lineno=285,
      end_col_offset=19)], orelse=[], finalbody=[], lineno=279, col_offset=4, end_lineno=285,
      end_col_offset=19), Assign(targets=[Name(id=''visitor'', ctx=Store(), lineno=287,
      col_offset=4, end_lineno=287, end_col_offset=11)], value=Call(func=Name(id=''CodeVisitor'',
      ctx=Load(), lineno=287, col_offset=14, end_lineno=287, end_col_offset=25), args=[Name(id=''code'',
      ctx=Load(), lineno=287, col_offset=26, end_lineno=287, end_col_offset=30)],
      keywords=[], lineno=287, col_offset=14, end_lineno=287, end_col_offset=31),
      lineno=287, col_offset=4, end_lineno=287, end_col_offset=31), Expr(value=Call(func=Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=288, col_offset=4, end_lineno=288, end_col_offset=11), attr=''analyze'',
      ctx=Load(), lineno=288, col_offset=4, end_lineno=288, end_col_offset=19), args=[Name(id=''tree'',
      ctx=Load(), lineno=288, col_offset=20, end_lineno=288, end_col_offset=24)],
      keywords=[], lineno=288, col_offset=4, end_lineno=288, end_col_offset=25), lineno=288,
      col_offset=4, end_lineno=288, end_col_offset=25), Assign(targets=[Name(id=''file_details'',
      ctx=Store(), lineno=289, col_offset=4, end_lineno=289, end_col_offset=16)],
      value=Dict(keys=[Constant(value=''file_info'', lineno=289, col_offset=20, end_lineno=289,
      end_col_offset=31), Constant(value=''functions'', lineno=289, col_offset=52,
      end_lineno=289, end_col_offset=63), Constant(value=''classes'', lineno=289,
      col_offset=84, end_lineno=289, end_col_offset=93)], values=[Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=289, col_offset=33, end_lineno=289, end_col_offset=40), attr=''file_info'',
      ctx=Load(), lineno=289, col_offset=33, end_lineno=289, end_col_offset=50), Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=289, col_offset=65, end_lineno=289, end_col_offset=72), attr=''functions'',
      ctx=Load(), lineno=289, col_offset=65, end_lineno=289, end_col_offset=82), Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=289, col_offset=95, end_lineno=289, end_col_offset=102),
      attr=''classes'', ctx=Load(), lineno=289, col_offset=95, end_lineno=289, end_col_offset=110)],
      lineno=289, col_offset=19, end_lineno=289, end_col_offset=111), lineno=289,
      col_offset=4, end_lineno=289, end_col_offset=111), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=290, col_offset=4, end_lineno=290, end_col_offset=16), slice=Constant(value=''file_info'',
      lineno=290, col_offset=17, end_lineno=290, end_col_offset=28), ctx=Load(), lineno=290,
      col_offset=4, end_lineno=290, end_col_offset=29), slice=Constant(value=''entire_code_graph'',
      lineno=290, col_offset=30, end_lineno=290, end_col_offset=49), ctx=Store(),
      lineno=290, col_offset=4, end_lineno=290, end_col_offset=50)], value=Call(func=Name(id=''code_graph'',
      ctx=Load(), lineno=290, col_offset=53, end_lineno=290, end_col_offset=63), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=290, col_offset=64, end_lineno=290, end_col_offset=76), slice=Constant(value=''file_info'',
      lineno=290, col_offset=77, end_lineno=290, end_col_offset=88), ctx=Load(), lineno=290,
      col_offset=64, end_lineno=290, end_col_offset=89), slice=Constant(value=''file_summary'',
      lineno=290, col_offset=90, end_lineno=290, end_col_offset=104), ctx=Load(),
      lineno=290, col_offset=64, end_lineno=290, end_col_offset=105)], keywords=[],
      lineno=290, col_offset=53, end_lineno=290, end_col_offset=106), lineno=290,
      col_offset=4, end_lineno=290, end_col_offset=106), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=291, col_offset=4, end_lineno=291, end_col_offset=16), slice=Constant(value=''file_info'',
      lineno=291, col_offset=17, end_lineno=291, end_col_offset=28), ctx=Load(), lineno=291,
      col_offset=4, end_lineno=291, end_col_offset=29), slice=Constant(value=''file_summary'',
      lineno=291, col_offset=30, end_lineno=291, end_col_offset=44), ctx=Store(),
      lineno=291, col_offset=4, end_lineno=291, end_col_offset=45)], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=291, col_offset=48, end_lineno=291, end_col_offset=52), attr=''dumps'',
      ctx=Load(), lineno=291, col_offset=48, end_lineno=291, end_col_offset=58), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=291, col_offset=59, end_lineno=291, end_col_offset=71), slice=Constant(value=''file_info'',
      lineno=291, col_offset=72, end_lineno=291, end_col_offset=83), ctx=Load(), lineno=291,
      col_offset=59, end_lineno=291, end_col_offset=84), slice=Constant(value=''file_summary'',
      lineno=291, col_offset=85, end_lineno=291, end_col_offset=99), ctx=Load(), lineno=291,
      col_offset=59, end_lineno=291, end_col_offset=100)], keywords=[], lineno=291,
      col_offset=48, end_lineno=291, end_col_offset=101), attr=''replace'', ctx=Load(),
      lineno=291, col_offset=48, end_lineno=291, end_col_offset=109), args=[Constant(value=''"'',
      lineno=291, col_offset=110, end_lineno=291, end_col_offset=114), Constant(value='''',
      lineno=291, col_offset=115, end_lineno=291, end_col_offset=117)], keywords=[],
      lineno=291, col_offset=48, end_lineno=291, end_col_offset=118), lineno=291,
      col_offset=4, end_lineno=291, end_col_offset=118), Return(value=Name(id=''file_details'',
      ctx=Load(), lineno=292, col_offset=11, end_lineno=292, end_col_offset=23), lineno=292,
      col_offset=4, end_lineno=292, end_col_offset=23)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=271, col_offset=47, end_lineno=271, end_col_offset=51), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=271, col_offset=52, end_lineno=271, end_col_offset=55), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=271, col_offset=57, end_lineno=271, end_col_offset=62), slice=Tuple(elts=[Name(id=''Dict'',
      ctx=Load(), lineno=271, col_offset=63, end_lineno=271, end_col_offset=67), Name(id=''str'',
      ctx=Load(), lineno=271, col_offset=69, end_lineno=271, end_col_offset=72)],
      ctx=Load(), lineno=271, col_offset=63, end_lineno=271, end_col_offset=72), ctx=Load(),
      lineno=271, col_offset=57, end_lineno=271, end_col_offset=73)], ctx=Load(),
      lineno=271, col_offset=52, end_lineno=271, end_col_offset=73), ctx=Load(), lineno=271,
      col_offset=47, end_lineno=271, end_col_offset=74), lineno=271, col_offset=0,
      end_lineno=292, end_col_offset=23)'
    function_docstring: "Extract details from a Python file.\nArgs:\n    file_path:\
      \ str: The path to the Python file.\nReturns:\n    Dict[str, Union[Dict, str]]:\
      \ The details extracted from the file."
    function_inputs:
    - file_path
    function_defaults: []
    function_returns:
    - file_details
    - None
    function_calls:
    - open
    - f.read
    - ast.parse
    - logging.warning
    - CodeVisitor
    - visitor.analyze
    - code_graph
    - json.dumps(file_details['file_info']['file_summary']).replace
    - json.dumps
    function_call_inputs:
      open:
      - file_path
      - '''r'''
      f.read: []
      ast.parse:
      - code
      logging.warning:
      - 'f''Permission denied or syntax error in file: {file_path}'''
      CodeVisitor:
      - code
      visitor.analyze:
      - tree
      code_graph:
      - file_details['file_info']['file_summary']
      json.dumps(file_details['file_info']['file_summary']).replace:
      - '''"'''
      - ''''''
      json.dumps:
      - file_details['file_info']['file_summary']
    function_variables:
    - code
    - file_details
    - visitor
    - tree
    function_decorators: []
    function_annotations: []
    function_properties: []
classes:
  CodeVisitor:
    class_name: CodeVisitor
    class_code: "class CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class\
      \ for traversing an AST (Abstract Syntax Tree) and extracting details about\
      \ the code.\n    Attributes:\n        code (str): The source code.\n       \
      \ functions(Dict): details about functions in the code.\n        classes (Dict):\
      \ details about classes in the code.\n        file_info (Dict): details about\
      \ the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef)\
      \ -> None: \n            Extract details about a function.\n        visit_ClassDef(node:\
      \ ast.ClassDef) -> None: \n            Extract details about a class.\n    \
      \    extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str,\
      \ List[str]]]: \n            Extract details about a node.\n        analyze(node:\
      \ ast.AST) -> None: \n            Populate file_info with details about the\
      \ file.\n    \"\"\"\n\n    def __init__(self, code: str):\n        \"\"\"\n\
      \        Initialize a new instance of the class.\n        Args:\n          \
      \  code: str: The source code.\n        Returns:\n            None\n       \
      \ \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str,\
      \ Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str,\
      \ List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]]\
      \ = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self,\
      \ node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about\
      \ a function.\n        Args:\n            node: ast.FunctionDef: The node to\
      \ visit.\n        Returns:\n            None\n        \"\"\"\n        details\
      \ = self.extract_details(node, 'method' if self.current_class else 'function')\n\
      \        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}']\
      \ = details\n        else:\n            self.functions[node.name] = details\n\
      \        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef)\
      \ -> None:\n        \"\"\"\n        Extract details about a class.\n       \
      \ Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n\
      \            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node,\
      \ 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n\
      \        self.current_class = None\n\n    def extract_details(self, node: ast.AST,\
      \ node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n   \
      \     Extract details about a node.\n        Args:\n            node: ast.AST:\
      \ The node to extract details from.\n            node_type: str: The type of\
      \ node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The\
      \ details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n\
      \        call_data = get_all_calls(node)\n        details = {f'{node_type}_name':\
      \ node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node,\
      \ include_attributes=True), f'{node_type}_docstring': ast.get_docstring(node),\
      \ f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in\
      \ ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d)\
      \ for d in node.args.defaults] if node_type in ['function', 'method'] else None,\
      \ f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not\
      \ None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)],\
      \ f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs':\
      \ call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode\
      \ in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets\
      \ if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator)\
      \ for decorator in node.decorator_list} if node.decorator_list else set()),\
      \ f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode\
      \ in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation\
      \ is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode\
      \ in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx,\
      \ ast.Store)})}\n        if node_type in ['class', 'method']:\n            if\
      \ node_type == 'method' and self.current_class:\n                attributes\
      \ = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign)\
      \ for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value,\
      \ ast.Name) and (target.value.id == 'self')]\n                if attributes:\n\
      \                    if 'class_attributes' in self.classes[self.current_class]:\n\
      \                        self.classes[self.current_class]['class_attributes'].extend(attributes)\n\
      \                    else:\n                        self.classes[self.current_class]['class_attributes']\
      \ = attributes\n            if node_type == 'class':\n                details.update({'class_attributes':\
      \ [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for\
      \ target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods':\
      \ [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)\
      \ and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for\
      \ base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name\
      \ for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name\
      \ != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id ==\
      \ 'staticmethod' for decorator in subnode.decorator_list))]})\n        return\
      \ details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n\
      \        Traverse the AST rooted at 'node', create a list of all nodes within\
      \ the current file, and populate 'file_info' with file details\n        Args:\n\
      \            node: ast.AST: The node to analyze.\n        Returns:\n       \
      \     None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n     \
      \   self.visit(node)\n        self.file_info = {'file_code': self.code, 'file_ast':\
      \ ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk\
      \ if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module\
      \ for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions':\
      \ list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n\
      \        function_defs = [{func_name: {'inputs': details['function_inputs'],\
      \ 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'],\
      \ 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n\
      \        class_defs = []\n        for class_name, class_details in self.classes.items():\n\
      \            method_defs = {}\n            for method_name, details in class_details.items():\n\
      \                if method_name.startswith('class_method_'):\n             \
      \       method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'],\
      \ 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'],\
      \ 'returns': details['method_returns']}\n            class_defs.append({class_name:\
      \ {'method_defs': method_defs}})\n        self.file_info['file_summary'] = {'dependencies':\
      \ self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs':\
      \ class_defs}"
    class_ast: 'ClassDef(name=''CodeVisitor'', bases=[Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=50, col_offset=18, end_lineno=50, end_col_offset=21), attr=''NodeVisitor'',
      ctx=Load(), lineno=50, col_offset=18, end_lineno=50, end_col_offset=33)], keywords=[],
      body=[Expr(value=Constant(value=''\n    Visitor class for traversing an AST
      (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code
      (str): The source code.\n        functions(Dict): details about functions in
      the code.\n        classes (Dict): details about classes in the code.\n        file_info
      (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node:
      ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node:
      ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node:
      ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract
      details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate
      file_info with details about the file.\n    '', lineno=51, col_offset=4, end_lineno=67,
      end_col_offset=7), lineno=51, col_offset=4, end_lineno=67, end_col_offset=7),
      FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
      lineno=68, col_offset=17, end_lineno=68, end_col_offset=21), arg(arg=''code'',
      annotation=Name(id=''str'', ctx=Load(), lineno=68, col_offset=29, end_lineno=68,
      end_col_offset=32), lineno=68, col_offset=23, end_lineno=68, end_col_offset=32)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Initialize
      a new instance of the class.\n        Args:\n            code: str: The source
      code.\n        Returns:\n            None\n        '', lineno=69, col_offset=8,
      end_lineno=75, end_col_offset=11), lineno=69, col_offset=8, end_lineno=75, end_col_offset=11),
      AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load(), lineno=76, col_offset=8,
      end_lineno=76, end_col_offset=12), attr=''code'', ctx=Store(), lineno=76, col_offset=8,
      end_lineno=76, end_col_offset=17), annotation=Name(id=''str'', ctx=Load(), lineno=76,
      col_offset=19, end_lineno=76, end_col_offset=22), value=Name(id=''code'', ctx=Load(),
      lineno=76, col_offset=25, end_lineno=76, end_col_offset=29), simple=0, lineno=76,
      col_offset=8, end_lineno=76, end_col_offset=29), AnnAssign(target=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=77, col_offset=8, end_lineno=77, end_col_offset=12), attr=''functions'',
      ctx=Store(), lineno=77, col_offset=8, end_lineno=77, end_col_offset=22), annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=77, col_offset=24, end_lineno=77, end_col_offset=28), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=77, col_offset=29, end_lineno=77, end_col_offset=32), Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=77, col_offset=34, end_lineno=77, end_col_offset=38), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=77, col_offset=39, end_lineno=77, end_col_offset=42), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=77, col_offset=44, end_lineno=77, end_col_offset=49), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=77, col_offset=50, end_lineno=77, end_col_offset=53), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=77, col_offset=55, end_lineno=77, end_col_offset=59), slice=Name(id=''str'',
      ctx=Load(), lineno=77, col_offset=60, end_lineno=77, end_col_offset=63), ctx=Load(),
      lineno=77, col_offset=55, end_lineno=77, end_col_offset=64)], ctx=Load(), lineno=77,
      col_offset=50, end_lineno=77, end_col_offset=64), ctx=Load(), lineno=77, col_offset=44,
      end_lineno=77, end_col_offset=65)], ctx=Load(), lineno=77, col_offset=39, end_lineno=77,
      end_col_offset=65), ctx=Load(), lineno=77, col_offset=34, end_lineno=77, end_col_offset=66)],
      ctx=Load(), lineno=77, col_offset=29, end_lineno=77, end_col_offset=66), ctx=Load(),
      lineno=77, col_offset=24, end_lineno=77, end_col_offset=67), value=Dict(keys=[],
      values=[], lineno=77, col_offset=70, end_lineno=77, end_col_offset=72), simple=0,
      lineno=77, col_offset=8, end_lineno=77, end_col_offset=72), AnnAssign(target=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=78, col_offset=8, end_lineno=78, end_col_offset=12), attr=''classes'',
      ctx=Store(), lineno=78, col_offset=8, end_lineno=78, end_col_offset=20), annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=78, col_offset=22, end_lineno=78, end_col_offset=26), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=78, col_offset=27, end_lineno=78, end_col_offset=30), Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=78, col_offset=32, end_lineno=78, end_col_offset=36), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=78, col_offset=37, end_lineno=78, end_col_offset=40), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=78, col_offset=42, end_lineno=78, end_col_offset=47), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=78, col_offset=48, end_lineno=78, end_col_offset=51), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=78, col_offset=53, end_lineno=78, end_col_offset=57), slice=Name(id=''str'',
      ctx=Load(), lineno=78, col_offset=58, end_lineno=78, end_col_offset=61), ctx=Load(),
      lineno=78, col_offset=53, end_lineno=78, end_col_offset=62)], ctx=Load(), lineno=78,
      col_offset=48, end_lineno=78, end_col_offset=62), ctx=Load(), lineno=78, col_offset=42,
      end_lineno=78, end_col_offset=63)], ctx=Load(), lineno=78, col_offset=37, end_lineno=78,
      end_col_offset=63), ctx=Load(), lineno=78, col_offset=32, end_lineno=78, end_col_offset=64)],
      ctx=Load(), lineno=78, col_offset=27, end_lineno=78, end_col_offset=64), ctx=Load(),
      lineno=78, col_offset=22, end_lineno=78, end_col_offset=65), value=Dict(keys=[],
      values=[], lineno=78, col_offset=68, end_lineno=78, end_col_offset=70), simple=0,
      lineno=78, col_offset=8, end_lineno=78, end_col_offset=70), AnnAssign(target=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=79, col_offset=8, end_lineno=79, end_col_offset=12), attr=''file_info'',
      ctx=Store(), lineno=79, col_offset=8, end_lineno=79, end_col_offset=22), annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=79, col_offset=24, end_lineno=79, end_col_offset=28), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=79, col_offset=29, end_lineno=79, end_col_offset=32), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=79, col_offset=34, end_lineno=79, end_col_offset=39), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=79, col_offset=40, end_lineno=79, end_col_offset=43), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=79, col_offset=45, end_lineno=79, end_col_offset=49), slice=Name(id=''str'',
      ctx=Load(), lineno=79, col_offset=50, end_lineno=79, end_col_offset=53), ctx=Load(),
      lineno=79, col_offset=45, end_lineno=79, end_col_offset=54)], ctx=Load(), lineno=79,
      col_offset=40, end_lineno=79, end_col_offset=54), ctx=Load(), lineno=79, col_offset=34,
      end_lineno=79, end_col_offset=55)], ctx=Load(), lineno=79, col_offset=29, end_lineno=79,
      end_col_offset=55), ctx=Load(), lineno=79, col_offset=24, end_lineno=79, end_col_offset=56),
      value=Dict(keys=[], values=[], lineno=79, col_offset=59, end_lineno=79, end_col_offset=61),
      simple=0, lineno=79, col_offset=8, end_lineno=79, end_col_offset=61), AnnAssign(target=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=80, col_offset=8, end_lineno=80, end_col_offset=12), attr=''current_class'',
      ctx=Store(), lineno=80, col_offset=8, end_lineno=80, end_col_offset=26), annotation=Name(id=''str'',
      ctx=Load(), lineno=80, col_offset=28, end_lineno=80, end_col_offset=31), value=Constant(value=None,
      lineno=80, col_offset=34, end_lineno=80, end_col_offset=38), simple=0, lineno=80,
      col_offset=8, end_lineno=80, end_col_offset=38)], decorator_list=[], lineno=68,
      col_offset=4, end_lineno=80, end_col_offset=38), FunctionDef(name=''visit_FunctionDef'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=82, col_offset=26,
      end_lineno=82, end_col_offset=30), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=82, col_offset=38, end_lineno=82, end_col_offset=41), attr=''FunctionDef'',
      ctx=Load(), lineno=82, col_offset=38, end_lineno=82, end_col_offset=53), lineno=82,
      col_offset=32, end_lineno=82, end_col_offset=53)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value=''\n        Extract details about
      a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        '',
      lineno=83, col_offset=8, end_lineno=89, end_col_offset=11), lineno=83, col_offset=8,
      end_lineno=89, end_col_offset=11), Assign(targets=[Name(id=''details'', ctx=Store(),
      lineno=90, col_offset=8, end_lineno=90, end_col_offset=15)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=90, col_offset=18, end_lineno=90, end_col_offset=22), attr=''extract_details'',
      ctx=Load(), lineno=90, col_offset=18, end_lineno=90, end_col_offset=38), args=[Name(id=''node'',
      ctx=Load(), lineno=90, col_offset=39, end_lineno=90, end_col_offset=43), IfExp(test=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=90, col_offset=57, end_lineno=90, end_col_offset=61), attr=''current_class'',
      ctx=Load(), lineno=90, col_offset=57, end_lineno=90, end_col_offset=75), body=Constant(value=''method'',
      lineno=90, col_offset=45, end_lineno=90, end_col_offset=53), orelse=Constant(value=''function'',
      lineno=90, col_offset=81, end_lineno=90, end_col_offset=91), lineno=90, col_offset=45,
      end_lineno=90, end_col_offset=91)], keywords=[], lineno=90, col_offset=18, end_lineno=90,
      end_col_offset=92), lineno=90, col_offset=8, end_lineno=90, end_col_offset=92),
      If(test=Attribute(value=Name(id=''self'', ctx=Load(), lineno=91, col_offset=11,
      end_lineno=91, end_col_offset=15), attr=''current_class'', ctx=Load(), lineno=91,
      col_offset=11, end_lineno=91, end_col_offset=29), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=92, col_offset=12, end_lineno=92, end_col_offset=16), attr=''classes'',
      ctx=Load(), lineno=92, col_offset=12, end_lineno=92, end_col_offset=24), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=92, col_offset=25, end_lineno=92, end_col_offset=29), attr=''current_class'',
      ctx=Load(), lineno=92, col_offset=25, end_lineno=92, end_col_offset=43), ctx=Load(),
      lineno=92, col_offset=12, end_lineno=92, end_col_offset=44), slice=JoinedStr(values=[Constant(value=''class_method_'',
      lineno=92, col_offset=45, end_lineno=92, end_col_offset=72), FormattedValue(value=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=92, col_offset=61, end_lineno=92, end_col_offset=65), attr=''name'',
      ctx=Load(), lineno=92, col_offset=61, end_lineno=92, end_col_offset=70), conversion=-1,
      lineno=92, col_offset=45, end_lineno=92, end_col_offset=72)], lineno=92, col_offset=45,
      end_lineno=92, end_col_offset=72), ctx=Store(), lineno=92, col_offset=12, end_lineno=92,
      end_col_offset=73)], value=Name(id=''details'', ctx=Load(), lineno=92, col_offset=76,
      end_lineno=92, end_col_offset=83), lineno=92, col_offset=12, end_lineno=92,
      end_col_offset=83)], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=94, col_offset=12, end_lineno=94, end_col_offset=16), attr=''functions'',
      ctx=Load(), lineno=94, col_offset=12, end_lineno=94, end_col_offset=26), slice=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=94, col_offset=27, end_lineno=94, end_col_offset=31), attr=''name'',
      ctx=Load(), lineno=94, col_offset=27, end_lineno=94, end_col_offset=36), ctx=Store(),
      lineno=94, col_offset=12, end_lineno=94, end_col_offset=37)], value=Name(id=''details'',
      ctx=Load(), lineno=94, col_offset=40, end_lineno=94, end_col_offset=47), lineno=94,
      col_offset=12, end_lineno=94, end_col_offset=47)], lineno=91, col_offset=8,
      end_lineno=94, end_col_offset=47), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=95, col_offset=8, end_lineno=95, end_col_offset=12), attr=''generic_visit'',
      ctx=Load(), lineno=95, col_offset=8, end_lineno=95, end_col_offset=26), args=[Name(id=''node'',
      ctx=Load(), lineno=95, col_offset=27, end_lineno=95, end_col_offset=31)], keywords=[],
      lineno=95, col_offset=8, end_lineno=95, end_col_offset=32), lineno=95, col_offset=8,
      end_lineno=95, end_col_offset=32)], decorator_list=[], returns=Constant(value=None,
      lineno=82, col_offset=58, end_lineno=82, end_col_offset=62), lineno=82, col_offset=4,
      end_lineno=95, end_col_offset=32), FunctionDef(name=''visit_ClassDef'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=97, col_offset=23, end_lineno=97, end_col_offset=27),
      arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=97,
      col_offset=35, end_lineno=97, end_col_offset=38), attr=''ClassDef'', ctx=Load(),
      lineno=97, col_offset=35, end_lineno=97, end_col_offset=47), lineno=97, col_offset=29,
      end_lineno=97, end_col_offset=47)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n        Extract details about a class.\n        Args:\n            node:
      ast.ClassDef: The node to visit.\n        Returns:\n            None\n        '',
      lineno=98, col_offset=8, end_lineno=104, end_col_offset=11), lineno=98, col_offset=8,
      end_lineno=104, end_col_offset=11), Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=12), attr=''classes'',
      ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=20), slice=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=105, col_offset=21, end_lineno=105, end_col_offset=25), attr=''name'',
      ctx=Load(), lineno=105, col_offset=21, end_lineno=105, end_col_offset=30), ctx=Store(),
      lineno=105, col_offset=8, end_lineno=105, end_col_offset=31)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=105, col_offset=34, end_lineno=105, end_col_offset=38), attr=''extract_details'',
      ctx=Load(), lineno=105, col_offset=34, end_lineno=105, end_col_offset=54), args=[Name(id=''node'',
      ctx=Load(), lineno=105, col_offset=55, end_lineno=105, end_col_offset=59), Constant(value=''class'',
      lineno=105, col_offset=61, end_lineno=105, end_col_offset=68)], keywords=[],
      lineno=105, col_offset=34, end_lineno=105, end_col_offset=69), lineno=105, col_offset=8,
      end_lineno=105, end_col_offset=69), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=106, col_offset=8, end_lineno=106, end_col_offset=12), attr=''current_class'',
      ctx=Store(), lineno=106, col_offset=8, end_lineno=106, end_col_offset=26)],
      value=Attribute(value=Name(id=''node'', ctx=Load(), lineno=106, col_offset=29,
      end_lineno=106, end_col_offset=33), attr=''name'', ctx=Load(), lineno=106, col_offset=29,
      end_lineno=106, end_col_offset=38), lineno=106, col_offset=8, end_lineno=106,
      end_col_offset=38), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=107, col_offset=8, end_lineno=107, end_col_offset=12), attr=''generic_visit'',
      ctx=Load(), lineno=107, col_offset=8, end_lineno=107, end_col_offset=26), args=[Name(id=''node'',
      ctx=Load(), lineno=107, col_offset=27, end_lineno=107, end_col_offset=31)],
      keywords=[], lineno=107, col_offset=8, end_lineno=107, end_col_offset=32), lineno=107,
      col_offset=8, end_lineno=107, end_col_offset=32), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=108, col_offset=8, end_lineno=108, end_col_offset=12), attr=''current_class'',
      ctx=Store(), lineno=108, col_offset=8, end_lineno=108, end_col_offset=26)],
      value=Constant(value=None, lineno=108, col_offset=29, end_lineno=108, end_col_offset=33),
      lineno=108, col_offset=8, end_lineno=108, end_col_offset=33)], decorator_list=[],
      returns=Constant(value=None, lineno=97, col_offset=52, end_lineno=97, end_col_offset=56),
      lineno=97, col_offset=4, end_lineno=108, end_col_offset=33), FunctionDef(name=''extract_details'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=110, col_offset=24,
      end_lineno=110, end_col_offset=28), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=110, col_offset=36, end_lineno=110, end_col_offset=39), attr=''AST'',
      ctx=Load(), lineno=110, col_offset=36, end_lineno=110, end_col_offset=43), lineno=110,
      col_offset=30, end_lineno=110, end_col_offset=43), arg(arg=''node_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=110, col_offset=56, end_lineno=110, end_col_offset=59), lineno=110,
      col_offset=45, end_lineno=110, end_col_offset=59)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value=''\n        Extract details about
      a node.\n        Args:\n            node: ast.AST: The node to extract details
      from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str,
      Union[str, List[str]]]: The details extracted from the node.\n        '', lineno=111,
      col_offset=8, end_lineno=118, end_col_offset=11), lineno=111, col_offset=8,
      end_lineno=118, end_col_offset=11), Assign(targets=[Name(id=''node_walk'', ctx=Store(),
      lineno=119, col_offset=8, end_lineno=119, end_col_offset=17)], value=Call(func=Name(id=''list'',
      ctx=Load(), lineno=119, col_offset=20, end_lineno=119, end_col_offset=24), args=[Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=119, col_offset=25, end_lineno=119, end_col_offset=28), attr=''walk'',
      ctx=Load(), lineno=119, col_offset=25, end_lineno=119, end_col_offset=33), args=[Name(id=''node'',
      ctx=Load(), lineno=119, col_offset=34, end_lineno=119, end_col_offset=38)],
      keywords=[], lineno=119, col_offset=25, end_lineno=119, end_col_offset=39)],
      keywords=[], lineno=119, col_offset=20, end_lineno=119, end_col_offset=40),
      lineno=119, col_offset=8, end_lineno=119, end_col_offset=40), Assign(targets=[Name(id=''call_data'',
      ctx=Store(), lineno=120, col_offset=8, end_lineno=120, end_col_offset=17)],
      value=Call(func=Name(id=''get_all_calls'', ctx=Load(), lineno=120, col_offset=20,
      end_lineno=120, end_col_offset=33), args=[Name(id=''node'', ctx=Load(), lineno=120,
      col_offset=34, end_lineno=120, end_col_offset=38)], keywords=[], lineno=120,
      col_offset=20, end_lineno=120, end_col_offset=39), lineno=120, col_offset=8,
      end_lineno=120, end_col_offset=39), Assign(targets=[Name(id=''details'', ctx=Store(),
      lineno=121, col_offset=8, end_lineno=121, end_col_offset=15)], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=122, col_offset=15, end_lineno=122, end_col_offset=24), conversion=-1,
      lineno=122, col_offset=12, end_lineno=122, end_col_offset=31), Constant(value=''_name'',
      lineno=122, col_offset=12, end_lineno=122, end_col_offset=31)], lineno=122,
      col_offset=12, end_lineno=122, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=123, col_offset=15, end_lineno=123, end_col_offset=24), conversion=-1,
      lineno=123, col_offset=12, end_lineno=123, end_col_offset=31), Constant(value=''_code'',
      lineno=123, col_offset=12, end_lineno=123, end_col_offset=31)], lineno=123,
      col_offset=12, end_lineno=123, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=124, col_offset=15, end_lineno=124, end_col_offset=24), conversion=-1,
      lineno=124, col_offset=12, end_lineno=124, end_col_offset=30), Constant(value=''_ast'',
      lineno=124, col_offset=12, end_lineno=124, end_col_offset=30)], lineno=124,
      col_offset=12, end_lineno=124, end_col_offset=30), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=125, col_offset=15, end_lineno=125, end_col_offset=24), conversion=-1,
      lineno=125, col_offset=12, end_lineno=125, end_col_offset=36), Constant(value=''_docstring'',
      lineno=125, col_offset=12, end_lineno=125, end_col_offset=36)], lineno=125,
      col_offset=12, end_lineno=125, end_col_offset=36), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=126, col_offset=15, end_lineno=126, end_col_offset=24), conversion=-1,
      lineno=126, col_offset=12, end_lineno=126, end_col_offset=33), Constant(value=''_inputs'',
      lineno=126, col_offset=12, end_lineno=126, end_col_offset=33)], lineno=126,
      col_offset=12, end_lineno=126, end_col_offset=33), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=127, col_offset=15, end_lineno=127, end_col_offset=24), conversion=-1,
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=35), Constant(value=''_defaults'',
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=35)], lineno=127,
      col_offset=12, end_lineno=127, end_col_offset=35), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=128, col_offset=15, end_lineno=128, end_col_offset=24), conversion=-1,
      lineno=128, col_offset=12, end_lineno=128, end_col_offset=34), Constant(value=''_returns'',
      lineno=128, col_offset=12, end_lineno=128, end_col_offset=34)], lineno=128,
      col_offset=12, end_lineno=128, end_col_offset=34), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=129, col_offset=15, end_lineno=129, end_col_offset=24), conversion=-1,
      lineno=129, col_offset=12, end_lineno=129, end_col_offset=32), Constant(value=''_calls'',
      lineno=129, col_offset=12, end_lineno=129, end_col_offset=32)], lineno=129,
      col_offset=12, end_lineno=129, end_col_offset=32), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=130, col_offset=15, end_lineno=130, end_col_offset=24), conversion=-1,
      lineno=130, col_offset=12, end_lineno=130, end_col_offset=38), Constant(value=''_call_inputs'',
      lineno=130, col_offset=12, end_lineno=130, end_col_offset=38)], lineno=130,
      col_offset=12, end_lineno=130, end_col_offset=38), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=131, col_offset=15, end_lineno=131, end_col_offset=24), conversion=-1,
      lineno=131, col_offset=12, end_lineno=131, end_col_offset=36), Constant(value=''_variables'',
      lineno=131, col_offset=12, end_lineno=131, end_col_offset=36)], lineno=131,
      col_offset=12, end_lineno=131, end_col_offset=36), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=132, col_offset=15, end_lineno=132, end_col_offset=24), conversion=-1,
      lineno=132, col_offset=12, end_lineno=132, end_col_offset=37), Constant(value=''_decorators'',
      lineno=132, col_offset=12, end_lineno=132, end_col_offset=37)], lineno=132,
      col_offset=12, end_lineno=132, end_col_offset=37), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=133, col_offset=15, end_lineno=133, end_col_offset=24), conversion=-1,
      lineno=133, col_offset=12, end_lineno=133, end_col_offset=38), Constant(value=''_annotations'',
      lineno=133, col_offset=12, end_lineno=133, end_col_offset=38)], lineno=133,
      col_offset=12, end_lineno=133, end_col_offset=38), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=134, col_offset=15, end_lineno=134, end_col_offset=24), conversion=-1,
      lineno=134, col_offset=12, end_lineno=134, end_col_offset=37), Constant(value=''_properties'',
      lineno=134, col_offset=12, end_lineno=134, end_col_offset=37)], lineno=134,
      col_offset=12, end_lineno=134, end_col_offset=37)], values=[Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=122, col_offset=33, end_lineno=122, end_col_offset=37), attr=''name'',
      ctx=Load(), lineno=122, col_offset=33, end_lineno=122, end_col_offset=42), Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=123, col_offset=33, end_lineno=123, end_col_offset=36), attr=''unparse'',
      ctx=Load(), lineno=123, col_offset=33, end_lineno=123, end_col_offset=44), args=[Name(id=''node'',
      ctx=Load(), lineno=123, col_offset=45, end_lineno=123, end_col_offset=49)],
      keywords=[], lineno=123, col_offset=33, end_lineno=123, end_col_offset=50),
      Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=124, col_offset=32,
      end_lineno=124, end_col_offset=35), attr=''dump'', ctx=Load(), lineno=124, col_offset=32,
      end_lineno=124, end_col_offset=40), args=[Name(id=''node'', ctx=Load(), lineno=124,
      col_offset=41, end_lineno=124, end_col_offset=45)], keywords=[keyword(arg=''include_attributes'',
      value=Constant(value=True, lineno=124, col_offset=66, end_lineno=124, end_col_offset=70),
      lineno=124, col_offset=47, end_lineno=124, end_col_offset=70)], lineno=124,
      col_offset=32, end_lineno=124, end_col_offset=71), Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=125, col_offset=38, end_lineno=125, end_col_offset=41), attr=''get_docstring'',
      ctx=Load(), lineno=125, col_offset=38, end_lineno=125, end_col_offset=55), args=[Name(id=''node'',
      ctx=Load(), lineno=125, col_offset=56, end_lineno=125, end_col_offset=60)],
      keywords=[], lineno=125, col_offset=38, end_lineno=125, end_col_offset=61),
      IfExp(test=Compare(left=Name(id=''node_type'', ctx=Load(), lineno=126, col_offset=74,
      end_lineno=126, end_col_offset=83), ops=[In()], comparators=[List(elts=[Constant(value=''function'',
      lineno=126, col_offset=88, end_lineno=126, end_col_offset=98), Constant(value=''method'',
      lineno=126, col_offset=100, end_lineno=126, end_col_offset=108)], ctx=Load(),
      lineno=126, col_offset=87, end_lineno=126, end_col_offset=109)], lineno=126,
      col_offset=74, end_lineno=126, end_col_offset=109), body=ListComp(elt=Attribute(value=Name(id=''arg'',
      ctx=Load(), lineno=126, col_offset=36, end_lineno=126, end_col_offset=39), attr=''arg'',
      ctx=Load(), lineno=126, col_offset=36, end_lineno=126, end_col_offset=43), generators=[comprehension(target=Name(id=''arg'',
      ctx=Store(), lineno=126, col_offset=48, end_lineno=126, end_col_offset=51),
      iter=Attribute(value=Attribute(value=Name(id=''node'', ctx=Load(), lineno=126,
      col_offset=55, end_lineno=126, end_col_offset=59), attr=''args'', ctx=Load(),
      lineno=126, col_offset=55, end_lineno=126, end_col_offset=64), attr=''args'',
      ctx=Load(), lineno=126, col_offset=55, end_lineno=126, end_col_offset=69), ifs=[],
      is_async=0)], lineno=126, col_offset=35, end_lineno=126, end_col_offset=70),
      orelse=Constant(value=None, lineno=126, col_offset=115, end_lineno=126, end_col_offset=119),
      lineno=126, col_offset=35, end_lineno=126, end_col_offset=119), IfExp(test=Compare(left=Name(id=''node_type'',
      ctx=Load(), lineno=127, col_offset=85, end_lineno=127, end_col_offset=94), ops=[In()],
      comparators=[List(elts=[Constant(value=''function'', lineno=127, col_offset=99,
      end_lineno=127, end_col_offset=109), Constant(value=''method'', lineno=127,
      col_offset=111, end_lineno=127, end_col_offset=119)], ctx=Load(), lineno=127,
      col_offset=98, end_lineno=127, end_col_offset=120)], lineno=127, col_offset=85,
      end_lineno=127, end_col_offset=120), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=127, col_offset=38, end_lineno=127, end_col_offset=41), attr=''unparse'',
      ctx=Load(), lineno=127, col_offset=38, end_lineno=127, end_col_offset=49), args=[Name(id=''d'',
      ctx=Load(), lineno=127, col_offset=50, end_lineno=127, end_col_offset=51)],
      keywords=[], lineno=127, col_offset=38, end_lineno=127, end_col_offset=52),
      generators=[comprehension(target=Name(id=''d'', ctx=Store(), lineno=127, col_offset=57,
      end_lineno=127, end_col_offset=58), iter=Attribute(value=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=127, col_offset=62, end_lineno=127, end_col_offset=66), attr=''args'',
      ctx=Load(), lineno=127, col_offset=62, end_lineno=127, end_col_offset=71), attr=''defaults'',
      ctx=Load(), lineno=127, col_offset=62, end_lineno=127, end_col_offset=80), ifs=[],
      is_async=0)], lineno=127, col_offset=37, end_lineno=127, end_col_offset=81),
      orelse=Constant(value=None, lineno=127, col_offset=126, end_lineno=127, end_col_offset=130),
      lineno=127, col_offset=37, end_lineno=127, end_col_offset=130), ListComp(elt=IfExp(test=Compare(left=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=128, col_offset=67, end_lineno=128, end_col_offset=74), attr=''value'',
      ctx=Load(), lineno=128, col_offset=67, end_lineno=128, end_col_offset=80), ops=[IsNot()],
      comparators=[Constant(value=None, lineno=128, col_offset=88, end_lineno=128,
      end_col_offset=92)], lineno=128, col_offset=67, end_lineno=128, end_col_offset=92),
      body=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=128, col_offset=37,
      end_lineno=128, end_col_offset=40), attr=''unparse'', ctx=Load(), lineno=128,
      col_offset=37, end_lineno=128, end_col_offset=48), args=[Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=128, col_offset=49, end_lineno=128, end_col_offset=56), attr=''value'',
      ctx=Load(), lineno=128, col_offset=49, end_lineno=128, end_col_offset=62)],
      keywords=[], lineno=128, col_offset=37, end_lineno=128, end_col_offset=63),
      orelse=Constant(value=''None'', lineno=128, col_offset=98, end_lineno=128, end_col_offset=104),
      lineno=128, col_offset=37, end_lineno=128, end_col_offset=104), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=128, col_offset=109, end_lineno=128, end_col_offset=116),
      iter=Name(id=''node_walk'', ctx=Load(), lineno=128, col_offset=120, end_lineno=128,
      end_col_offset=129), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=128,
      col_offset=133, end_lineno=128, end_col_offset=143), args=[Name(id=''subnode'',
      ctx=Load(), lineno=128, col_offset=144, end_lineno=128, end_col_offset=151),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=128, col_offset=153, end_lineno=128,
      end_col_offset=156), attr=''Return'', ctx=Load(), lineno=128, col_offset=153,
      end_lineno=128, end_col_offset=163)], keywords=[], lineno=128, col_offset=133,
      end_lineno=128, end_col_offset=164)], is_async=0)], lineno=128, col_offset=36,
      end_lineno=128, end_col_offset=165), Call(func=Name(id=''list'', ctx=Load(),
      lineno=129, col_offset=34, end_lineno=129, end_col_offset=38), args=[Call(func=Attribute(value=Name(id=''call_data'',
      ctx=Load(), lineno=129, col_offset=39, end_lineno=129, end_col_offset=48), attr=''keys'',
      ctx=Load(), lineno=129, col_offset=39, end_lineno=129, end_col_offset=53), args=[],
      keywords=[], lineno=129, col_offset=39, end_lineno=129, end_col_offset=55)],
      keywords=[], lineno=129, col_offset=34, end_lineno=129, end_col_offset=56),
      Name(id=''call_data'', ctx=Load(), lineno=130, col_offset=40, end_lineno=130,
      end_col_offset=49), Call(func=Name(id=''list'', ctx=Load(), lineno=131, col_offset=38,
      end_lineno=131, end_col_offset=42), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=131, col_offset=44, end_lineno=131, end_col_offset=47), attr=''unparse'',
      ctx=Load(), lineno=131, col_offset=44, end_lineno=131, end_col_offset=55), args=[Name(id=''target'',
      ctx=Load(), lineno=131, col_offset=56, end_lineno=131, end_col_offset=62)],
      keywords=[], lineno=131, col_offset=44, end_lineno=131, end_col_offset=63),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=131,
      col_offset=68, end_lineno=131, end_col_offset=75), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=131, col_offset=79, end_lineno=131, end_col_offset=88), ifs=[Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=131, col_offset=92, end_lineno=131, end_col_offset=102),
      args=[Name(id=''subnode'', ctx=Load(), lineno=131, col_offset=103, end_lineno=131,
      end_col_offset=110), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=131,
      col_offset=112, end_lineno=131, end_col_offset=115), attr=''Assign'', ctx=Load(),
      lineno=131, col_offset=112, end_lineno=131, end_col_offset=122)], keywords=[],
      lineno=131, col_offset=92, end_lineno=131, end_col_offset=123)], is_async=0),
      comprehension(target=Name(id=''target'', ctx=Store(), lineno=131, col_offset=128,
      end_lineno=131, end_col_offset=134), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=131, col_offset=138, end_lineno=131, end_col_offset=145),
      attr=''targets'', ctx=Load(), lineno=131, col_offset=138, end_lineno=131, end_col_offset=153),
      ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=131, col_offset=157,
      end_lineno=131, end_col_offset=167), args=[Name(id=''target'', ctx=Load(), lineno=131,
      col_offset=168, end_lineno=131, end_col_offset=174), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=131, col_offset=176, end_lineno=131, end_col_offset=179),
      attr=''Name'', ctx=Load(), lineno=131, col_offset=176, end_lineno=131, end_col_offset=184)],
      keywords=[], lineno=131, col_offset=157, end_lineno=131, end_col_offset=185)],
      is_async=0)], lineno=131, col_offset=43, end_lineno=131, end_col_offset=186)],
      keywords=[], lineno=131, col_offset=38, end_lineno=131, end_col_offset=187),
      Call(func=Name(id=''list'', ctx=Load(), lineno=132, col_offset=39, end_lineno=132,
      end_col_offset=43), args=[IfExp(test=Attribute(value=Name(id=''node'', ctx=Load(),
      lineno=132, col_offset=109, end_lineno=132, end_col_offset=113), attr=''decorator_list'',
      ctx=Load(), lineno=132, col_offset=109, end_lineno=132, end_col_offset=128),
      body=SetComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=132,
      col_offset=45, end_lineno=132, end_col_offset=48), attr=''unparse'', ctx=Load(),
      lineno=132, col_offset=45, end_lineno=132, end_col_offset=56), args=[Name(id=''decorator'',
      ctx=Load(), lineno=132, col_offset=57, end_lineno=132, end_col_offset=66)],
      keywords=[], lineno=132, col_offset=45, end_lineno=132, end_col_offset=67),
      generators=[comprehension(target=Name(id=''decorator'', ctx=Store(), lineno=132,
      col_offset=72, end_lineno=132, end_col_offset=81), iter=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=132, col_offset=85, end_lineno=132, end_col_offset=89), attr=''decorator_list'',
      ctx=Load(), lineno=132, col_offset=85, end_lineno=132, end_col_offset=104),
      ifs=[], is_async=0)], lineno=132, col_offset=44, end_lineno=132, end_col_offset=105),
      orelse=Call(func=Name(id=''set'', ctx=Load(), lineno=132, col_offset=134, end_lineno=132,
      end_col_offset=137), args=[], keywords=[], lineno=132, col_offset=134, end_lineno=132,
      end_col_offset=139), lineno=132, col_offset=44, end_lineno=132, end_col_offset=139)],
      keywords=[], lineno=132, col_offset=39, end_lineno=132, end_col_offset=140),
      Call(func=Name(id=''list'', ctx=Load(), lineno=133, col_offset=40, end_lineno=133,
      end_col_offset=44), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=133, col_offset=46, end_lineno=133, end_col_offset=49), attr=''unparse'',
      ctx=Load(), lineno=133, col_offset=46, end_lineno=133, end_col_offset=57), args=[Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=133, col_offset=58, end_lineno=133, end_col_offset=65), attr=''annotation'',
      ctx=Load(), lineno=133, col_offset=58, end_lineno=133, end_col_offset=76)],
      keywords=[], lineno=133, col_offset=46, end_lineno=133, end_col_offset=77),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=133,
      col_offset=82, end_lineno=133, end_col_offset=89), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=133, col_offset=93, end_lineno=133, end_col_offset=102),
      ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=133, col_offset=106, end_lineno=133, end_col_offset=116), args=[Name(id=''subnode'',
      ctx=Load(), lineno=133, col_offset=117, end_lineno=133, end_col_offset=124),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=133, col_offset=126, end_lineno=133,
      end_col_offset=129), attr=''AnnAssign'', ctx=Load(), lineno=133, col_offset=126,
      end_lineno=133, end_col_offset=139)], keywords=[], lineno=133, col_offset=106,
      end_lineno=133, end_col_offset=140), Compare(left=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=133, col_offset=145, end_lineno=133, end_col_offset=152),
      attr=''annotation'', ctx=Load(), lineno=133, col_offset=145, end_lineno=133,
      end_col_offset=163), ops=[IsNot()], comparators=[Constant(value=None, lineno=133,
      col_offset=171, end_lineno=133, end_col_offset=175)], lineno=133, col_offset=145,
      end_lineno=133, end_col_offset=175)], lineno=133, col_offset=106, end_lineno=133,
      end_col_offset=175)], is_async=0)], lineno=133, col_offset=45, end_lineno=133,
      end_col_offset=176)], keywords=[], lineno=133, col_offset=40, end_lineno=133,
      end_col_offset=177), Call(func=Name(id=''list'', ctx=Load(), lineno=134, col_offset=39,
      end_lineno=134, end_col_offset=43), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=134, col_offset=45, end_lineno=134, end_col_offset=48), attr=''unparse'',
      ctx=Load(), lineno=134, col_offset=45, end_lineno=134, end_col_offset=56), args=[Name(id=''subnode'',
      ctx=Load(), lineno=134, col_offset=57, end_lineno=134, end_col_offset=64)],
      keywords=[], lineno=134, col_offset=45, end_lineno=134, end_col_offset=65),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=134,
      col_offset=70, end_lineno=134, end_col_offset=77), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=134, col_offset=81, end_lineno=134, end_col_offset=90), ifs=[BoolOp(op=And(),
      values=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=134, col_offset=94,
      end_lineno=134, end_col_offset=104), args=[Name(id=''subnode'', ctx=Load(),
      lineno=134, col_offset=105, end_lineno=134, end_col_offset=112), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=134, col_offset=114, end_lineno=134, end_col_offset=117),
      attr=''Attribute'', ctx=Load(), lineno=134, col_offset=114, end_lineno=134,
      end_col_offset=127)], keywords=[], lineno=134, col_offset=94, end_lineno=134,
      end_col_offset=128), Call(func=Name(id=''isinstance'', ctx=Load(), lineno=134,
      col_offset=133, end_lineno=134, end_col_offset=143), args=[Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=134, col_offset=144, end_lineno=134, end_col_offset=151),
      attr=''ctx'', ctx=Load(), lineno=134, col_offset=144, end_lineno=134, end_col_offset=155),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=134, col_offset=157, end_lineno=134,
      end_col_offset=160), attr=''Store'', ctx=Load(), lineno=134, col_offset=157,
      end_lineno=134, end_col_offset=166)], keywords=[], lineno=134, col_offset=133,
      end_lineno=134, end_col_offset=167)], lineno=134, col_offset=94, end_lineno=134,
      end_col_offset=167)], is_async=0)], lineno=134, col_offset=44, end_lineno=134,
      end_col_offset=168)], keywords=[], lineno=134, col_offset=39, end_lineno=134,
      end_col_offset=169)], lineno=121, col_offset=18, end_lineno=135, end_col_offset=9),
      lineno=121, col_offset=8, end_lineno=135, end_col_offset=9), If(test=Compare(left=Name(id=''node_type'',
      ctx=Load(), lineno=136, col_offset=11, end_lineno=136, end_col_offset=20), ops=[In()],
      comparators=[List(elts=[Constant(value=''class'', lineno=136, col_offset=25,
      end_lineno=136, end_col_offset=32), Constant(value=''method'', lineno=136, col_offset=34,
      end_lineno=136, end_col_offset=42)], ctx=Load(), lineno=136, col_offset=24,
      end_lineno=136, end_col_offset=43)], lineno=136, col_offset=11, end_lineno=136,
      end_col_offset=43), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''node_type'',
      ctx=Load(), lineno=137, col_offset=15, end_lineno=137, end_col_offset=24), ops=[Eq()],
      comparators=[Constant(value=''method'', lineno=137, col_offset=28, end_lineno=137,
      end_col_offset=36)], lineno=137, col_offset=15, end_lineno=137, end_col_offset=36),
      Attribute(value=Name(id=''self'', ctx=Load(), lineno=137, col_offset=41, end_lineno=137,
      end_col_offset=45), attr=''current_class'', ctx=Load(), lineno=137, col_offset=41,
      end_lineno=137, end_col_offset=59)], lineno=137, col_offset=15, end_lineno=137,
      end_col_offset=59), body=[Assign(targets=[Name(id=''attributes'', ctx=Store(),
      lineno=138, col_offset=16, end_lineno=138, end_col_offset=26)], value=ListComp(elt=Attribute(value=Name(id=''target'',
      ctx=Load(), lineno=138, col_offset=30, end_lineno=138, end_col_offset=36), attr=''attr'',
      ctx=Load(), lineno=138, col_offset=30, end_lineno=138, end_col_offset=41), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=138, col_offset=46, end_lineno=138, end_col_offset=53),
      iter=Name(id=''node_walk'', ctx=Load(), lineno=138, col_offset=57, end_lineno=138,
      end_col_offset=66), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=138,
      col_offset=70, end_lineno=138, end_col_offset=80), args=[Name(id=''subnode'',
      ctx=Load(), lineno=138, col_offset=81, end_lineno=138, end_col_offset=88), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=138, col_offset=90, end_lineno=138, end_col_offset=93), attr=''Assign'',
      ctx=Load(), lineno=138, col_offset=90, end_lineno=138, end_col_offset=100)],
      keywords=[], lineno=138, col_offset=70, end_lineno=138, end_col_offset=101)],
      is_async=0), comprehension(target=Name(id=''target'', ctx=Store(), lineno=138,
      col_offset=106, end_lineno=138, end_col_offset=112), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=138, col_offset=116, end_lineno=138, end_col_offset=123),
      attr=''targets'', ctx=Load(), lineno=138, col_offset=116, end_lineno=138, end_col_offset=131),
      ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=138, col_offset=135, end_lineno=138, end_col_offset=145), args=[Name(id=''target'',
      ctx=Load(), lineno=138, col_offset=146, end_lineno=138, end_col_offset=152),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=138, col_offset=154, end_lineno=138,
      end_col_offset=157), attr=''Attribute'', ctx=Load(), lineno=138, col_offset=154,
      end_lineno=138, end_col_offset=167)], keywords=[], lineno=138, col_offset=135,
      end_lineno=138, end_col_offset=168), Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=138, col_offset=173, end_lineno=138, end_col_offset=183), args=[Attribute(value=Name(id=''target'',
      ctx=Load(), lineno=138, col_offset=184, end_lineno=138, end_col_offset=190),
      attr=''value'', ctx=Load(), lineno=138, col_offset=184, end_lineno=138, end_col_offset=196),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=138, col_offset=198, end_lineno=138,
      end_col_offset=201), attr=''Name'', ctx=Load(), lineno=138, col_offset=198,
      end_lineno=138, end_col_offset=206)], keywords=[], lineno=138, col_offset=173,
      end_lineno=138, end_col_offset=207), Compare(left=Attribute(value=Attribute(value=Name(id=''target'',
      ctx=Load(), lineno=138, col_offset=212, end_lineno=138, end_col_offset=218),
      attr=''value'', ctx=Load(), lineno=138, col_offset=212, end_lineno=138, end_col_offset=224),
      attr=''id'', ctx=Load(), lineno=138, col_offset=212, end_lineno=138, end_col_offset=227),
      ops=[Eq()], comparators=[Constant(value=''self'', lineno=138, col_offset=231,
      end_lineno=138, end_col_offset=237)], lineno=138, col_offset=212, end_lineno=138,
      end_col_offset=237)], lineno=138, col_offset=135, end_lineno=138, end_col_offset=237)],
      is_async=0)], lineno=138, col_offset=29, end_lineno=138, end_col_offset=238),
      lineno=138, col_offset=16, end_lineno=138, end_col_offset=238), If(test=Name(id=''attributes'',
      ctx=Load(), lineno=139, col_offset=19, end_lineno=139, end_col_offset=29), body=[If(test=Compare(left=Constant(value=''class_attributes'',
      lineno=140, col_offset=23, end_lineno=140, end_col_offset=41), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=140, col_offset=45, end_lineno=140, end_col_offset=49), attr=''classes'',
      ctx=Load(), lineno=140, col_offset=45, end_lineno=140, end_col_offset=57), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=140, col_offset=58, end_lineno=140, end_col_offset=62), attr=''current_class'',
      ctx=Load(), lineno=140, col_offset=58, end_lineno=140, end_col_offset=76), ctx=Load(),
      lineno=140, col_offset=45, end_lineno=140, end_col_offset=77)], lineno=140,
      col_offset=23, end_lineno=140, end_col_offset=77), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=141, col_offset=24, end_lineno=141, end_col_offset=28), attr=''classes'',
      ctx=Load(), lineno=141, col_offset=24, end_lineno=141, end_col_offset=36), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=141, col_offset=37, end_lineno=141, end_col_offset=41), attr=''current_class'',
      ctx=Load(), lineno=141, col_offset=37, end_lineno=141, end_col_offset=55), ctx=Load(),
      lineno=141, col_offset=24, end_lineno=141, end_col_offset=56), slice=Constant(value=''class_attributes'',
      lineno=141, col_offset=57, end_lineno=141, end_col_offset=75), ctx=Load(), lineno=141,
      col_offset=24, end_lineno=141, end_col_offset=76), attr=''extend'', ctx=Load(),
      lineno=141, col_offset=24, end_lineno=141, end_col_offset=83), args=[Name(id=''attributes'',
      ctx=Load(), lineno=141, col_offset=84, end_lineno=141, end_col_offset=94)],
      keywords=[], lineno=141, col_offset=24, end_lineno=141, end_col_offset=95),
      lineno=141, col_offset=24, end_lineno=141, end_col_offset=95)], orelse=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=143, col_offset=24, end_lineno=143, end_col_offset=28), attr=''classes'',
      ctx=Load(), lineno=143, col_offset=24, end_lineno=143, end_col_offset=36), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=143, col_offset=37, end_lineno=143, end_col_offset=41), attr=''current_class'',
      ctx=Load(), lineno=143, col_offset=37, end_lineno=143, end_col_offset=55), ctx=Load(),
      lineno=143, col_offset=24, end_lineno=143, end_col_offset=56), slice=Constant(value=''class_attributes'',
      lineno=143, col_offset=57, end_lineno=143, end_col_offset=75), ctx=Store(),
      lineno=143, col_offset=24, end_lineno=143, end_col_offset=76)], value=Name(id=''attributes'',
      ctx=Load(), lineno=143, col_offset=79, end_lineno=143, end_col_offset=89), lineno=143,
      col_offset=24, end_lineno=143, end_col_offset=89)], lineno=140, col_offset=20,
      end_lineno=143, end_col_offset=89)], orelse=[], lineno=139, col_offset=16, end_lineno=143,
      end_col_offset=89)], orelse=[], lineno=137, col_offset=12, end_lineno=143, end_col_offset=89),
      If(test=Compare(left=Name(id=''node_type'', ctx=Load(), lineno=144, col_offset=15,
      end_lineno=144, end_col_offset=24), ops=[Eq()], comparators=[Constant(value=''class'',
      lineno=144, col_offset=28, end_lineno=144, end_col_offset=35)], lineno=144,
      col_offset=15, end_lineno=144, end_col_offset=35), body=[Expr(value=Call(func=Attribute(value=Name(id=''details'',
      ctx=Load(), lineno=145, col_offset=16, end_lineno=145, end_col_offset=23), attr=''update'',
      ctx=Load(), lineno=145, col_offset=16, end_lineno=145, end_col_offset=30), args=[Dict(keys=[Constant(value=''class_attributes'',
      lineno=146, col_offset=20, end_lineno=146, end_col_offset=38), Constant(value=''class_methods'',
      lineno=147, col_offset=20, end_lineno=147, end_col_offset=35), Constant(value=''class_inheritance'',
      lineno=148, col_offset=20, end_lineno=148, end_col_offset=39), Constant(value=''class_static_methods'',
      lineno=149, col_offset=20, end_lineno=149, end_col_offset=42)], values=[ListComp(elt=Attribute(value=Name(id=''target'',
      ctx=Load(), lineno=146, col_offset=41, end_lineno=146, end_col_offset=47), attr=''attr'',
      ctx=Load(), lineno=146, col_offset=41, end_lineno=146, end_col_offset=52), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=146, col_offset=57, end_lineno=146, end_col_offset=64),
      iter=Attribute(value=Name(id=''node'', ctx=Load(), lineno=146, col_offset=68,
      end_lineno=146, end_col_offset=72), attr=''body'', ctx=Load(), lineno=146, col_offset=68,
      end_lineno=146, end_col_offset=77), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=146, col_offset=81, end_lineno=146, end_col_offset=91), args=[Name(id=''subnode'',
      ctx=Load(), lineno=146, col_offset=92, end_lineno=146, end_col_offset=99), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=146, col_offset=101, end_lineno=146, end_col_offset=104),
      attr=''Assign'', ctx=Load(), lineno=146, col_offset=101, end_lineno=146, end_col_offset=111)],
      keywords=[], lineno=146, col_offset=81, end_lineno=146, end_col_offset=112)],
      is_async=0), comprehension(target=Name(id=''target'', ctx=Store(), lineno=146,
      col_offset=117, end_lineno=146, end_col_offset=123), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=146, col_offset=127, end_lineno=146, end_col_offset=134),
      attr=''targets'', ctx=Load(), lineno=146, col_offset=127, end_lineno=146, end_col_offset=142),
      ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=146, col_offset=146,
      end_lineno=146, end_col_offset=156), args=[Name(id=''target'', ctx=Load(), lineno=146,
      col_offset=157, end_lineno=146, end_col_offset=163), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=146, col_offset=165, end_lineno=146, end_col_offset=168),
      attr=''Attribute'', ctx=Load(), lineno=146, col_offset=165, end_lineno=146,
      end_col_offset=178)], keywords=[], lineno=146, col_offset=146, end_lineno=146,
      end_col_offset=179)], is_async=0)], lineno=146, col_offset=40, end_lineno=146,
      end_col_offset=180), ListComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(),
      lineno=147, col_offset=38, end_lineno=147, end_col_offset=45), attr=''name'',
      ctx=Load(), lineno=147, col_offset=38, end_lineno=147, end_col_offset=50), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=147, col_offset=55, end_lineno=147, end_col_offset=62),
      iter=Attribute(value=Name(id=''node'', ctx=Load(), lineno=147, col_offset=66,
      end_lineno=147, end_col_offset=70), attr=''body'', ctx=Load(), lineno=147, col_offset=66,
      end_lineno=147, end_col_offset=75), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=147, col_offset=79, end_lineno=147, end_col_offset=89), args=[Name(id=''subnode'',
      ctx=Load(), lineno=147, col_offset=90, end_lineno=147, end_col_offset=97), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=147, col_offset=99, end_lineno=147, end_col_offset=102),
      attr=''FunctionDef'', ctx=Load(), lineno=147, col_offset=99, end_lineno=147,
      end_col_offset=114)], keywords=[], lineno=147, col_offset=79, end_lineno=147,
      end_col_offset=115), Compare(left=Attribute(value=Name(id=''subnode'', ctx=Load(),
      lineno=147, col_offset=120, end_lineno=147, end_col_offset=127), attr=''name'',
      ctx=Load(), lineno=147, col_offset=120, end_lineno=147, end_col_offset=132),
      ops=[NotEq()], comparators=[Constant(value=''__init__'', lineno=147, col_offset=136,
      end_lineno=147, end_col_offset=146)], lineno=147, col_offset=120, end_lineno=147,
      end_col_offset=146)], lineno=147, col_offset=79, end_lineno=147, end_col_offset=146)],
      is_async=0)], lineno=147, col_offset=37, end_lineno=147, end_col_offset=147),
      IfExp(test=Attribute(value=Name(id=''node'', ctx=Load(), lineno=148, col_offset=87,
      end_lineno=148, end_col_offset=91), attr=''bases'', ctx=Load(), lineno=148,
      col_offset=87, end_lineno=148, end_col_offset=97), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=148, col_offset=42, end_lineno=148, end_col_offset=45), attr=''unparse'',
      ctx=Load(), lineno=148, col_offset=42, end_lineno=148, end_col_offset=53), args=[Name(id=''base'',
      ctx=Load(), lineno=148, col_offset=54, end_lineno=148, end_col_offset=58)],
      keywords=[], lineno=148, col_offset=42, end_lineno=148, end_col_offset=59),
      generators=[comprehension(target=Name(id=''base'', ctx=Store(), lineno=148,
      col_offset=64, end_lineno=148, end_col_offset=68), iter=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=148, col_offset=72, end_lineno=148, end_col_offset=76), attr=''bases'',
      ctx=Load(), lineno=148, col_offset=72, end_lineno=148, end_col_offset=82), ifs=[],
      is_async=0)], lineno=148, col_offset=41, end_lineno=148, end_col_offset=83),
      orelse=List(elts=[], ctx=Load(), lineno=148, col_offset=103, end_lineno=148,
      end_col_offset=105), lineno=148, col_offset=41, end_lineno=148, end_col_offset=105),
      ListComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=149, col_offset=45,
      end_lineno=149, end_col_offset=52), attr=''name'', ctx=Load(), lineno=149, col_offset=45,
      end_lineno=149, end_col_offset=57), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=149, col_offset=62, end_lineno=149, end_col_offset=69),
      iter=Attribute(value=Name(id=''node'', ctx=Load(), lineno=149, col_offset=73,
      end_lineno=149, end_col_offset=77), attr=''body'', ctx=Load(), lineno=149, col_offset=73,
      end_lineno=149, end_col_offset=82), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=149, col_offset=86, end_lineno=149, end_col_offset=96), args=[Name(id=''subnode'',
      ctx=Load(), lineno=149, col_offset=97, end_lineno=149, end_col_offset=104),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=149, col_offset=106, end_lineno=149,
      end_col_offset=109), attr=''FunctionDef'', ctx=Load(), lineno=149, col_offset=106,
      end_lineno=149, end_col_offset=121)], keywords=[], lineno=149, col_offset=86,
      end_lineno=149, end_col_offset=122), Compare(left=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=149, col_offset=127, end_lineno=149, end_col_offset=134),
      attr=''name'', ctx=Load(), lineno=149, col_offset=127, end_lineno=149, end_col_offset=139),
      ops=[NotEq()], comparators=[Constant(value=''__init__'', lineno=149, col_offset=143,
      end_lineno=149, end_col_offset=153)], lineno=149, col_offset=127, end_lineno=149,
      end_col_offset=153), Call(func=Name(id=''any'', ctx=Load(), lineno=149, col_offset=158,
      end_lineno=149, end_col_offset=161), args=[GeneratorExp(elt=BoolOp(op=And(),
      values=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=149, col_offset=162,
      end_lineno=149, end_col_offset=172), args=[Name(id=''decorator'', ctx=Load(),
      lineno=149, col_offset=173, end_lineno=149, end_col_offset=182), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=149, col_offset=184, end_lineno=149, end_col_offset=187),
      attr=''Name'', ctx=Load(), lineno=149, col_offset=184, end_lineno=149, end_col_offset=192)],
      keywords=[], lineno=149, col_offset=162, end_lineno=149, end_col_offset=193),
      Compare(left=Attribute(value=Name(id=''decorator'', ctx=Load(), lineno=149,
      col_offset=198, end_lineno=149, end_col_offset=207), attr=''id'', ctx=Load(),
      lineno=149, col_offset=198, end_lineno=149, end_col_offset=210), ops=[Eq()],
      comparators=[Constant(value=''staticmethod'', lineno=149, col_offset=214, end_lineno=149,
      end_col_offset=228)], lineno=149, col_offset=198, end_lineno=149, end_col_offset=228)],
      lineno=149, col_offset=162, end_lineno=149, end_col_offset=228), generators=[comprehension(target=Name(id=''decorator'',
      ctx=Store(), lineno=149, col_offset=233, end_lineno=149, end_col_offset=242),
      iter=Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=149, col_offset=246,
      end_lineno=149, end_col_offset=253), attr=''decorator_list'', ctx=Load(), lineno=149,
      col_offset=246, end_lineno=149, end_col_offset=268), ifs=[], is_async=0)], lineno=149,
      col_offset=161, end_lineno=149, end_col_offset=269)], keywords=[], lineno=149,
      col_offset=158, end_lineno=149, end_col_offset=269)], lineno=149, col_offset=86,
      end_lineno=149, end_col_offset=269)], is_async=0)], lineno=149, col_offset=44,
      end_lineno=149, end_col_offset=270)], lineno=145, col_offset=31, end_lineno=150,
      end_col_offset=21)], keywords=[], lineno=145, col_offset=16, end_lineno=150,
      end_col_offset=22), lineno=145, col_offset=16, end_lineno=150, end_col_offset=22)],
      orelse=[], lineno=144, col_offset=12, end_lineno=150, end_col_offset=22)], orelse=[],
      lineno=136, col_offset=8, end_lineno=150, end_col_offset=22), Return(value=Name(id=''details'',
      ctx=Load(), lineno=151, col_offset=15, end_lineno=151, end_col_offset=22), lineno=151,
      col_offset=8, end_lineno=151, end_col_offset=22)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=110, col_offset=64, end_lineno=110, end_col_offset=68), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=110, col_offset=69, end_lineno=110, end_col_offset=72), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=110, col_offset=74, end_lineno=110, end_col_offset=79), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=110, col_offset=80, end_lineno=110, end_col_offset=83), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=110, col_offset=85, end_lineno=110, end_col_offset=89), slice=Name(id=''str'',
      ctx=Load(), lineno=110, col_offset=90, end_lineno=110, end_col_offset=93), ctx=Load(),
      lineno=110, col_offset=85, end_lineno=110, end_col_offset=94)], ctx=Load(),
      lineno=110, col_offset=80, end_lineno=110, end_col_offset=94), ctx=Load(), lineno=110,
      col_offset=74, end_lineno=110, end_col_offset=95)], ctx=Load(), lineno=110,
      col_offset=69, end_lineno=110, end_col_offset=95), ctx=Load(), lineno=110, col_offset=64,
      end_lineno=110, end_col_offset=96), lineno=110, col_offset=4, end_lineno=151,
      end_col_offset=22), FunctionDef(name=''analyze'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=153, col_offset=16, end_lineno=153, end_col_offset=20),
      arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=153,
      col_offset=28, end_lineno=153, end_col_offset=31), attr=''AST'', ctx=Load(),
      lineno=153, col_offset=28, end_lineno=153, end_col_offset=35), lineno=153, col_offset=22,
      end_lineno=153, end_col_offset=35)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value="\n        Traverse the AST rooted at ''node'',
      create a list of all nodes within the current file, and populate ''file_info''
      with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        ",
      lineno=154, col_offset=8, end_lineno=160, end_col_offset=11), lineno=154, col_offset=8,
      end_lineno=160, end_col_offset=11), Assign(targets=[Name(id=''node_walk'', ctx=Store(),
      lineno=161, col_offset=8, end_lineno=161, end_col_offset=17)], value=Call(func=Name(id=''list'',
      ctx=Load(), lineno=161, col_offset=20, end_lineno=161, end_col_offset=24), args=[Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=161, col_offset=25, end_lineno=161, end_col_offset=28), attr=''walk'',
      ctx=Load(), lineno=161, col_offset=25, end_lineno=161, end_col_offset=33), args=[Name(id=''node'',
      ctx=Load(), lineno=161, col_offset=34, end_lineno=161, end_col_offset=38)],
      keywords=[], lineno=161, col_offset=25, end_lineno=161, end_col_offset=39)],
      keywords=[], lineno=161, col_offset=20, end_lineno=161, end_col_offset=40),
      lineno=161, col_offset=8, end_lineno=161, end_col_offset=40), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=162, col_offset=8, end_lineno=162, end_col_offset=12), attr=''visit'',
      ctx=Load(), lineno=162, col_offset=8, end_lineno=162, end_col_offset=18), args=[Name(id=''node'',
      ctx=Load(), lineno=162, col_offset=19, end_lineno=162, end_col_offset=23)],
      keywords=[], lineno=162, col_offset=8, end_lineno=162, end_col_offset=24), lineno=162,
      col_offset=8, end_lineno=162, end_col_offset=24), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=163, col_offset=8, end_lineno=163, end_col_offset=12), attr=''file_info'',
      ctx=Store(), lineno=163, col_offset=8, end_lineno=163, end_col_offset=22)],
      value=Dict(keys=[Constant(value=''file_code'', lineno=164, col_offset=12, end_lineno=164,
      end_col_offset=23), Constant(value=''file_ast'', lineno=165, col_offset=12,
      end_lineno=165, end_col_offset=22), Constant(value=''file_dependencies'', lineno=166,
      col_offset=12, end_lineno=166, end_col_offset=31), Constant(value=''file_functions'',
      lineno=167, col_offset=12, end_lineno=167, end_col_offset=28), Constant(value=''file_classes'',
      lineno=168, col_offset=12, end_lineno=168, end_col_offset=26)], values=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=164, col_offset=25, end_lineno=164, end_col_offset=29), attr=''code'',
      ctx=Load(), lineno=164, col_offset=25, end_lineno=164, end_col_offset=34), Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=165, col_offset=25, end_lineno=165, end_col_offset=28), attr=''dump'',
      ctx=Load(), lineno=165, col_offset=25, end_lineno=165, end_col_offset=33), args=[Name(id=''node'',
      ctx=Load(), lineno=165, col_offset=34, end_lineno=165, end_col_offset=38)],
      keywords=[], lineno=165, col_offset=25, end_lineno=165, end_col_offset=39),
      Call(func=Name(id=''list'', ctx=Load(), lineno=166, col_offset=33, end_lineno=166,
      end_col_offset=37), args=[BinOp(left=SetComp(elt=Attribute(value=Name(id=''alias'',
      ctx=Load(), lineno=166, col_offset=39, end_lineno=166, end_col_offset=44), attr=''name'',
      ctx=Load(), lineno=166, col_offset=39, end_lineno=166, end_col_offset=49), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=166, col_offset=54, end_lineno=166, end_col_offset=61),
      iter=Name(id=''node_walk'', ctx=Load(), lineno=166, col_offset=65, end_lineno=166,
      end_col_offset=74), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=166,
      col_offset=78, end_lineno=166, end_col_offset=88), args=[Name(id=''subnode'',
      ctx=Load(), lineno=166, col_offset=89, end_lineno=166, end_col_offset=96), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=166, col_offset=98, end_lineno=166, end_col_offset=101),
      attr=''Import'', ctx=Load(), lineno=166, col_offset=98, end_lineno=166, end_col_offset=108)],
      keywords=[], lineno=166, col_offset=78, end_lineno=166, end_col_offset=109)],
      is_async=0), comprehension(target=Name(id=''alias'', ctx=Store(), lineno=166,
      col_offset=114, end_lineno=166, end_col_offset=119), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=166, col_offset=123, end_lineno=166, end_col_offset=130),
      attr=''names'', ctx=Load(), lineno=166, col_offset=123, end_lineno=166, end_col_offset=136),
      ifs=[], is_async=0)], lineno=166, col_offset=38, end_lineno=166, end_col_offset=137),
      op=BitOr(), right=SetComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(),
      lineno=166, col_offset=141, end_lineno=166, end_col_offset=148), attr=''module'',
      ctx=Load(), lineno=166, col_offset=141, end_lineno=166, end_col_offset=155),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=166,
      col_offset=160, end_lineno=166, end_col_offset=167), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=166, col_offset=171, end_lineno=166, end_col_offset=180),
      ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=166, col_offset=184,
      end_lineno=166, end_col_offset=194), args=[Name(id=''subnode'', ctx=Load(),
      lineno=166, col_offset=195, end_lineno=166, end_col_offset=202), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=166, col_offset=204, end_lineno=166, end_col_offset=207),
      attr=''ImportFrom'', ctx=Load(), lineno=166, col_offset=204, end_lineno=166,
      end_col_offset=218)], keywords=[], lineno=166, col_offset=184, end_lineno=166,
      end_col_offset=219)], is_async=0)], lineno=166, col_offset=140, end_lineno=166,
      end_col_offset=220), lineno=166, col_offset=38, end_lineno=166, end_col_offset=220)],
      keywords=[], lineno=166, col_offset=33, end_lineno=166, end_col_offset=221),
      Call(func=Name(id=''list'', ctx=Load(), lineno=167, col_offset=30, end_lineno=167,
      end_col_offset=34), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=167, col_offset=35, end_lineno=167, end_col_offset=39), attr=''functions'',
      ctx=Load(), lineno=167, col_offset=35, end_lineno=167, end_col_offset=49), attr=''keys'',
      ctx=Load(), lineno=167, col_offset=35, end_lineno=167, end_col_offset=54), args=[],
      keywords=[], lineno=167, col_offset=35, end_lineno=167, end_col_offset=56)],
      keywords=[], lineno=167, col_offset=30, end_lineno=167, end_col_offset=57),
      Call(func=Name(id=''list'', ctx=Load(), lineno=168, col_offset=28, end_lineno=168,
      end_col_offset=32), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=168, col_offset=33, end_lineno=168, end_col_offset=37), attr=''classes'',
      ctx=Load(), lineno=168, col_offset=33, end_lineno=168, end_col_offset=45), attr=''keys'',
      ctx=Load(), lineno=168, col_offset=33, end_lineno=168, end_col_offset=50), args=[],
      keywords=[], lineno=168, col_offset=33, end_lineno=168, end_col_offset=52)],
      keywords=[], lineno=168, col_offset=28, end_lineno=168, end_col_offset=53)],
      lineno=163, col_offset=25, end_lineno=169, end_col_offset=9), lineno=163, col_offset=8,
      end_lineno=169, end_col_offset=9), Assign(targets=[Name(id=''function_defs'',
      ctx=Store(), lineno=172, col_offset=8, end_lineno=172, end_col_offset=21)],
      value=ListComp(elt=Dict(keys=[Name(id=''func_name'', ctx=Load(), lineno=172,
      col_offset=26, end_lineno=172, end_col_offset=35)], values=[Dict(keys=[Constant(value=''inputs'',
      lineno=172, col_offset=38, end_lineno=172, end_col_offset=46), Constant(value=''calls'',
      lineno=172, col_offset=76, end_lineno=172, end_col_offset=83), Constant(value=''call_inputs'',
      lineno=172, col_offset=112, end_lineno=172, end_col_offset=125), Constant(value=''returns'',
      lineno=172, col_offset=160, end_lineno=172, end_col_offset=169)], values=[Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=172, col_offset=48, end_lineno=172, end_col_offset=55), slice=Constant(value=''function_inputs'',
      lineno=172, col_offset=56, end_lineno=172, end_col_offset=73), ctx=Load(), lineno=172,
      col_offset=48, end_lineno=172, end_col_offset=74), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=172, col_offset=85, end_lineno=172, end_col_offset=92), slice=Constant(value=''function_calls'',
      lineno=172, col_offset=93, end_lineno=172, end_col_offset=109), ctx=Load(),
      lineno=172, col_offset=85, end_lineno=172, end_col_offset=110), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=172, col_offset=127, end_lineno=172, end_col_offset=134),
      slice=Constant(value=''function_call_inputs'', lineno=172, col_offset=135, end_lineno=172,
      end_col_offset=157), ctx=Load(), lineno=172, col_offset=127, end_lineno=172,
      end_col_offset=158), Subscript(value=Name(id=''details'', ctx=Load(), lineno=172,
      col_offset=171, end_lineno=172, end_col_offset=178), slice=Constant(value=''function_returns'',
      lineno=172, col_offset=179, end_lineno=172, end_col_offset=197), ctx=Load(),
      lineno=172, col_offset=171, end_lineno=172, end_col_offset=198)], lineno=172,
      col_offset=37, end_lineno=172, end_col_offset=199)], lineno=172, col_offset=25,
      end_lineno=172, end_col_offset=200), generators=[comprehension(target=Tuple(elts=[Name(id=''func_name'',
      ctx=Store(), lineno=172, col_offset=205, end_lineno=172, end_col_offset=214),
      Name(id=''details'', ctx=Store(), lineno=172, col_offset=216, end_lineno=172,
      end_col_offset=223)], ctx=Store(), lineno=172, col_offset=205, end_lineno=172,
      end_col_offset=223), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=172, col_offset=227, end_lineno=172, end_col_offset=231),
      attr=''functions'', ctx=Load(), lineno=172, col_offset=227, end_lineno=172,
      end_col_offset=241), attr=''items'', ctx=Load(), lineno=172, col_offset=227,
      end_lineno=172, end_col_offset=247), args=[], keywords=[], lineno=172, col_offset=227,
      end_lineno=172, end_col_offset=249), ifs=[], is_async=0)], lineno=172, col_offset=24,
      end_lineno=172, end_col_offset=250), lineno=172, col_offset=8, end_lineno=172,
      end_col_offset=250), Assign(targets=[Name(id=''class_defs'', ctx=Store(), lineno=173,
      col_offset=8, end_lineno=173, end_col_offset=18)], value=List(elts=[], ctx=Load(),
      lineno=173, col_offset=21, end_lineno=173, end_col_offset=23), lineno=173, col_offset=8,
      end_lineno=173, end_col_offset=23), For(target=Tuple(elts=[Name(id=''class_name'',
      ctx=Store(), lineno=174, col_offset=12, end_lineno=174, end_col_offset=22),
      Name(id=''class_details'', ctx=Store(), lineno=174, col_offset=24, end_lineno=174,
      end_col_offset=37)], ctx=Store(), lineno=174, col_offset=12, end_lineno=174,
      end_col_offset=37), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=174, col_offset=41, end_lineno=174, end_col_offset=45), attr=''classes'',
      ctx=Load(), lineno=174, col_offset=41, end_lineno=174, end_col_offset=53), attr=''items'',
      ctx=Load(), lineno=174, col_offset=41, end_lineno=174, end_col_offset=59), args=[],
      keywords=[], lineno=174, col_offset=41, end_lineno=174, end_col_offset=61),
      body=[Assign(targets=[Name(id=''method_defs'', ctx=Store(), lineno=175, col_offset=12,
      end_lineno=175, end_col_offset=23)], value=Dict(keys=[], values=[], lineno=175,
      col_offset=26, end_lineno=175, end_col_offset=28), lineno=175, col_offset=12,
      end_lineno=175, end_col_offset=28), For(target=Tuple(elts=[Name(id=''method_name'',
      ctx=Store(), lineno=176, col_offset=16, end_lineno=176, end_col_offset=27),
      Name(id=''details'', ctx=Store(), lineno=176, col_offset=29, end_lineno=176,
      end_col_offset=36)], ctx=Store(), lineno=176, col_offset=16, end_lineno=176,
      end_col_offset=36), iter=Call(func=Attribute(value=Name(id=''class_details'',
      ctx=Load(), lineno=176, col_offset=40, end_lineno=176, end_col_offset=53), attr=''items'',
      ctx=Load(), lineno=176, col_offset=40, end_lineno=176, end_col_offset=59), args=[],
      keywords=[], lineno=176, col_offset=40, end_lineno=176, end_col_offset=61),
      body=[If(test=Call(func=Attribute(value=Name(id=''method_name'', ctx=Load(),
      lineno=177, col_offset=19, end_lineno=177, end_col_offset=30), attr=''startswith'',
      ctx=Load(), lineno=177, col_offset=19, end_lineno=177, end_col_offset=41), args=[Constant(value=''class_method_'',
      lineno=177, col_offset=42, end_lineno=177, end_col_offset=57)], keywords=[],
      lineno=177, col_offset=19, end_lineno=177, end_col_offset=58), body=[Assign(targets=[Subscript(value=Name(id=''method_defs'',
      ctx=Load(), lineno=178, col_offset=20, end_lineno=178, end_col_offset=31), slice=Subscript(value=Name(id=''method_name'',
      ctx=Load(), lineno=178, col_offset=32, end_lineno=178, end_col_offset=43), slice=Slice(lower=Call(func=Name(id=''len'',
      ctx=Load(), lineno=178, col_offset=44, end_lineno=178, end_col_offset=47), args=[Constant(value=''class_method_'',
      lineno=178, col_offset=48, end_lineno=178, end_col_offset=63)], keywords=[],
      lineno=178, col_offset=44, end_lineno=178, end_col_offset=64), lineno=178, col_offset=44,
      end_lineno=178, end_col_offset=65), ctx=Load(), lineno=178, col_offset=32, end_lineno=178,
      end_col_offset=66), ctx=Store(), lineno=178, col_offset=20, end_lineno=178,
      end_col_offset=67)], value=Dict(keys=[Constant(value=''inputs'', lineno=178,
      col_offset=71, end_lineno=178, end_col_offset=79), Constant(value=''calls'',
      lineno=178, col_offset=107, end_lineno=178, end_col_offset=114), Constant(value=''call_inputs'',
      lineno=178, col_offset=141, end_lineno=178, end_col_offset=154), Constant(value=''returns'',
      lineno=178, col_offset=187, end_lineno=178, end_col_offset=196)], values=[Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=178, col_offset=81, end_lineno=178, end_col_offset=88), slice=Constant(value=''method_inputs'',
      lineno=178, col_offset=89, end_lineno=178, end_col_offset=104), ctx=Load(),
      lineno=178, col_offset=81, end_lineno=178, end_col_offset=105), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=178, col_offset=116, end_lineno=178, end_col_offset=123),
      slice=Constant(value=''method_calls'', lineno=178, col_offset=124, end_lineno=178,
      end_col_offset=138), ctx=Load(), lineno=178, col_offset=116, end_lineno=178,
      end_col_offset=139), Subscript(value=Name(id=''details'', ctx=Load(), lineno=178,
      col_offset=156, end_lineno=178, end_col_offset=163), slice=Constant(value=''method_call_inputs'',
      lineno=178, col_offset=164, end_lineno=178, end_col_offset=184), ctx=Load(),
      lineno=178, col_offset=156, end_lineno=178, end_col_offset=185), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=178, col_offset=198, end_lineno=178, end_col_offset=205),
      slice=Constant(value=''method_returns'', lineno=178, col_offset=206, end_lineno=178,
      end_col_offset=222), ctx=Load(), lineno=178, col_offset=198, end_lineno=178,
      end_col_offset=223)], lineno=178, col_offset=70, end_lineno=178, end_col_offset=224),
      lineno=178, col_offset=20, end_lineno=178, end_col_offset=224)], orelse=[],
      lineno=177, col_offset=16, end_lineno=178, end_col_offset=224)], orelse=[],
      lineno=176, col_offset=12, end_lineno=178, end_col_offset=224), Expr(value=Call(func=Attribute(value=Name(id=''class_defs'',
      ctx=Load(), lineno=179, col_offset=12, end_lineno=179, end_col_offset=22), attr=''append'',
      ctx=Load(), lineno=179, col_offset=12, end_lineno=179, end_col_offset=29), args=[Dict(keys=[Name(id=''class_name'',
      ctx=Load(), lineno=179, col_offset=31, end_lineno=179, end_col_offset=41)],
      values=[Dict(keys=[Constant(value=''method_defs'', lineno=179, col_offset=44,
      end_lineno=179, end_col_offset=57)], values=[Name(id=''method_defs'', ctx=Load(),
      lineno=179, col_offset=59, end_lineno=179, end_col_offset=70)], lineno=179,
      col_offset=43, end_lineno=179, end_col_offset=71)], lineno=179, col_offset=30,
      end_lineno=179, end_col_offset=72)], keywords=[], lineno=179, col_offset=12,
      end_lineno=179, end_col_offset=73), lineno=179, col_offset=12, end_lineno=179,
      end_col_offset=73)], orelse=[], lineno=174, col_offset=8, end_lineno=179, end_col_offset=73),
      Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=180, col_offset=8, end_lineno=180, end_col_offset=12), attr=''file_info'',
      ctx=Load(), lineno=180, col_offset=8, end_lineno=180, end_col_offset=22), slice=Constant(value=''file_summary'',
      lineno=180, col_offset=23, end_lineno=180, end_col_offset=37), ctx=Store(),
      lineno=180, col_offset=8, end_lineno=180, end_col_offset=38)], value=Dict(keys=[Constant(value=''dependencies'',
      lineno=180, col_offset=43, end_lineno=180, end_col_offset=57), Constant(value=''function_defs'',
      lineno=180, col_offset=96, end_lineno=180, end_col_offset=111), Constant(value=''class_defs'',
      lineno=180, col_offset=129, end_lineno=180, end_col_offset=141)], values=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=180, col_offset=59, end_lineno=180, end_col_offset=63), attr=''file_info'',
      ctx=Load(), lineno=180, col_offset=59, end_lineno=180, end_col_offset=73), slice=Constant(value=''file_dependencies'',
      lineno=180, col_offset=74, end_lineno=180, end_col_offset=93), ctx=Load(), lineno=180,
      col_offset=59, end_lineno=180, end_col_offset=94), Name(id=''function_defs'',
      ctx=Load(), lineno=180, col_offset=114, end_lineno=180, end_col_offset=127),
      Name(id=''class_defs'', ctx=Load(), lineno=180, col_offset=144, end_lineno=180,
      end_col_offset=154)], lineno=180, col_offset=41, end_lineno=180, end_col_offset=155),
      lineno=180, col_offset=8, end_lineno=180, end_col_offset=155)], decorator_list=[],
      returns=Constant(value=None, lineno=153, col_offset=40, end_lineno=153, end_col_offset=44),
      lineno=153, col_offset=4, end_lineno=180, end_col_offset=155)], decorator_list=[],
      lineno=50, col_offset=0, end_lineno=180, end_col_offset=155)'
    class_docstring: "Visitor class for traversing an AST (Abstract Syntax Tree) and\
      \ extracting details about the code.\nAttributes:\n    code (str): The source\
      \ code.\n    functions(Dict): details about functions in the code.\n    classes\
      \ (Dict): details about classes in the code.\n    file_info (Dict): details\
      \ about the file.\nMethods:\n    visit_FunctionDef(node: ast.FunctionDef) ->\
      \ None: \n        Extract details about a function.\n    visit_ClassDef(node:\
      \ ast.ClassDef) -> None: \n        Extract details about a class.\n    extract_details(node:\
      \ ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n        Extract\
      \ details about a node.\n    analyze(node: ast.AST) -> None: \n        Populate\
      \ file_info with details about the file."
    class_inputs: null
    class_defaults: null
    class_returns:
    - details
    class_calls:
    - self.extract_details
    - self.generic_visit
    - list
    - ast.walk
    - get_all_calls
    - ast.unparse
    - ast.dump
    - ast.get_docstring
    - isinstance
    - call_data.keys
    - set
    - self.classes[self.current_class]['class_attributes'].extend
    - details.update
    - any
    - self.visit
    - self.functions.keys
    - self.classes.keys
    - self.functions.items
    - self.classes.items
    - class_details.items
    - method_name.startswith
    - len
    - class_defs.append
    class_call_inputs:
      self.extract_details:
      - node
      - '''class'''
      self.generic_visit:
      - node
      list:
      - self.classes.keys()
      ast.walk:
      - node
      get_all_calls:
      - node
      ast.unparse:
      - base
      ast.dump:
      - node
      ast.get_docstring:
      - node
      isinstance:
      - subnode
      - ast.ImportFrom
      call_data.keys: []
      set: []
      self.classes[self.current_class]['class_attributes'].extend:
      - attributes
      details.update:
      - '{''class_attributes'': [target.attr for subnode in node.body if isinstance(subnode,
        ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],
        ''class_methods'': [subnode.name for subnode in node.body if isinstance(subnode,
        ast.FunctionDef) and subnode.name != ''__init__''], ''class_inheritance'':
        [ast.unparse(base) for base in node.bases] if node.bases else [], ''class_static_methods'':
        [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)
        and subnode.name != ''__init__'' and any((isinstance(decorator, ast.Name)
        and decorator.id == ''staticmethod'' for decorator in subnode.decorator_list))]}'
      any:
      - (isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator
        in subnode.decorator_list)
      self.visit:
      - node
      self.functions.keys: []
      self.classes.keys: []
      self.functions.items: []
      self.classes.items: []
      class_details.items: []
      method_name.startswith:
      - '''class_method_'''
      len:
      - '''class_method_'''
      class_defs.append:
      - '{class_name: {''method_defs'': method_defs}}'
    class_variables:
    - method_defs
    - node_walk
    - function_defs
    - call_data
    - class_defs
    - attributes
    - details
    class_decorators: []
    class_annotations:
    - str
    - Dict[str, Union[str, List[str]]]
    - Dict[str, Dict[str, Union[str, List[str]]]]
    class_properties:
    - self.current_class
    - self.file_info
    - self.code
    - self.classes
    - self.functions
    class_attributes:
    - current_class
    - current_class
    - file_info
    class_methods:
    - visit_FunctionDef
    - visit_ClassDef
    - extract_details
    - analyze
    class_inheritance:
    - ast.NodeVisitor
    class_static_methods: []
    class_method___init__:
      method_name: __init__
      method_code: "def __init__(self, code: str):\n    \"\"\"\n        Initialize\
        \ a new instance of the class.\n        Args:\n            code: str: The\
        \ source code.\n        Returns:\n            None\n        \"\"\"\n    self.code:\
        \ str = code\n    self.functions: Dict[str, Dict[str, Union[str, List[str]]]]\
        \ = {}\n    self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n\
        \    self.file_info: Dict[str, Union[str, List[str]]] = {}\n    self.current_class:\
        \ str = None"
      method_ast: 'FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
        lineno=68, col_offset=17, end_lineno=68, end_col_offset=21), arg(arg=''code'',
        annotation=Name(id=''str'', ctx=Load(), lineno=68, col_offset=29, end_lineno=68,
        end_col_offset=32), lineno=68, col_offset=23, end_lineno=68, end_col_offset=32)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Initialize
        a new instance of the class.\n        Args:\n            code: str: The source
        code.\n        Returns:\n            None\n        '', lineno=69, col_offset=8,
        end_lineno=75, end_col_offset=11), lineno=69, col_offset=8, end_lineno=75,
        end_col_offset=11), AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=76, col_offset=8, end_lineno=76, end_col_offset=12), attr=''code'',
        ctx=Store(), lineno=76, col_offset=8, end_lineno=76, end_col_offset=17), annotation=Name(id=''str'',
        ctx=Load(), lineno=76, col_offset=19, end_lineno=76, end_col_offset=22), value=Name(id=''code'',
        ctx=Load(), lineno=76, col_offset=25, end_lineno=76, end_col_offset=29), simple=0,
        lineno=76, col_offset=8, end_lineno=76, end_col_offset=29), AnnAssign(target=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=77, col_offset=8, end_lineno=77, end_col_offset=12), attr=''functions'',
        ctx=Store(), lineno=77, col_offset=8, end_lineno=77, end_col_offset=22), annotation=Subscript(value=Name(id=''Dict'',
        ctx=Load(), lineno=77, col_offset=24, end_lineno=77, end_col_offset=28), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=77, col_offset=29, end_lineno=77, end_col_offset=32), Subscript(value=Name(id=''Dict'',
        ctx=Load(), lineno=77, col_offset=34, end_lineno=77, end_col_offset=38), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=77, col_offset=39, end_lineno=77, end_col_offset=42), Subscript(value=Name(id=''Union'',
        ctx=Load(), lineno=77, col_offset=44, end_lineno=77, end_col_offset=49), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=77, col_offset=50, end_lineno=77, end_col_offset=53), Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=77, col_offset=55, end_lineno=77, end_col_offset=59), slice=Name(id=''str'',
        ctx=Load(), lineno=77, col_offset=60, end_lineno=77, end_col_offset=63), ctx=Load(),
        lineno=77, col_offset=55, end_lineno=77, end_col_offset=64)], ctx=Load(),
        lineno=77, col_offset=50, end_lineno=77, end_col_offset=64), ctx=Load(), lineno=77,
        col_offset=44, end_lineno=77, end_col_offset=65)], ctx=Load(), lineno=77,
        col_offset=39, end_lineno=77, end_col_offset=65), ctx=Load(), lineno=77, col_offset=34,
        end_lineno=77, end_col_offset=66)], ctx=Load(), lineno=77, col_offset=29,
        end_lineno=77, end_col_offset=66), ctx=Load(), lineno=77, col_offset=24, end_lineno=77,
        end_col_offset=67), value=Dict(keys=[], values=[], lineno=77, col_offset=70,
        end_lineno=77, end_col_offset=72), simple=0, lineno=77, col_offset=8, end_lineno=77,
        end_col_offset=72), AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=78, col_offset=8, end_lineno=78, end_col_offset=12), attr=''classes'',
        ctx=Store(), lineno=78, col_offset=8, end_lineno=78, end_col_offset=20), annotation=Subscript(value=Name(id=''Dict'',
        ctx=Load(), lineno=78, col_offset=22, end_lineno=78, end_col_offset=26), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=78, col_offset=27, end_lineno=78, end_col_offset=30), Subscript(value=Name(id=''Dict'',
        ctx=Load(), lineno=78, col_offset=32, end_lineno=78, end_col_offset=36), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=78, col_offset=37, end_lineno=78, end_col_offset=40), Subscript(value=Name(id=''Union'',
        ctx=Load(), lineno=78, col_offset=42, end_lineno=78, end_col_offset=47), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=78, col_offset=48, end_lineno=78, end_col_offset=51), Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=78, col_offset=53, end_lineno=78, end_col_offset=57), slice=Name(id=''str'',
        ctx=Load(), lineno=78, col_offset=58, end_lineno=78, end_col_offset=61), ctx=Load(),
        lineno=78, col_offset=53, end_lineno=78, end_col_offset=62)], ctx=Load(),
        lineno=78, col_offset=48, end_lineno=78, end_col_offset=62), ctx=Load(), lineno=78,
        col_offset=42, end_lineno=78, end_col_offset=63)], ctx=Load(), lineno=78,
        col_offset=37, end_lineno=78, end_col_offset=63), ctx=Load(), lineno=78, col_offset=32,
        end_lineno=78, end_col_offset=64)], ctx=Load(), lineno=78, col_offset=27,
        end_lineno=78, end_col_offset=64), ctx=Load(), lineno=78, col_offset=22, end_lineno=78,
        end_col_offset=65), value=Dict(keys=[], values=[], lineno=78, col_offset=68,
        end_lineno=78, end_col_offset=70), simple=0, lineno=78, col_offset=8, end_lineno=78,
        end_col_offset=70), AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=79, col_offset=8, end_lineno=79, end_col_offset=12), attr=''file_info'',
        ctx=Store(), lineno=79, col_offset=8, end_lineno=79, end_col_offset=22), annotation=Subscript(value=Name(id=''Dict'',
        ctx=Load(), lineno=79, col_offset=24, end_lineno=79, end_col_offset=28), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=79, col_offset=29, end_lineno=79, end_col_offset=32), Subscript(value=Name(id=''Union'',
        ctx=Load(), lineno=79, col_offset=34, end_lineno=79, end_col_offset=39), slice=Tuple(elts=[Name(id=''str'',
        ctx=Load(), lineno=79, col_offset=40, end_lineno=79, end_col_offset=43), Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=79, col_offset=45, end_lineno=79, end_col_offset=49), slice=Name(id=''str'',
        ctx=Load(), lineno=79, col_offset=50, end_lineno=79, end_col_offset=53), ctx=Load(),
        lineno=79, col_offset=45, end_lineno=79, end_col_offset=54)], ctx=Load(),
        lineno=79, col_offset=40, end_lineno=79, end_col_offset=54), ctx=Load(), lineno=79,
        col_offset=34, end_lineno=79, end_col_offset=55)], ctx=Load(), lineno=79,
        col_offset=29, end_lineno=79, end_col_offset=55), ctx=Load(), lineno=79, col_offset=24,
        end_lineno=79, end_col_offset=56), value=Dict(keys=[], values=[], lineno=79,
        col_offset=59, end_lineno=79, end_col_offset=61), simple=0, lineno=79, col_offset=8,
        end_lineno=79, end_col_offset=61), AnnAssign(target=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=80, col_offset=8, end_lineno=80, end_col_offset=12), attr=''current_class'',
        ctx=Store(), lineno=80, col_offset=8, end_lineno=80, end_col_offset=26), annotation=Name(id=''str'',
        ctx=Load(), lineno=80, col_offset=28, end_lineno=80, end_col_offset=31), value=Constant(value=None,
        lineno=80, col_offset=34, end_lineno=80, end_col_offset=38), simple=0, lineno=80,
        col_offset=8, end_lineno=80, end_col_offset=38)], decorator_list=[], lineno=68,
        col_offset=4, end_lineno=80, end_col_offset=38)'
      method_docstring: "Initialize a new instance of the class.\nArgs:\n    code:\
        \ str: The source code.\nReturns:\n    None"
      method_inputs:
      - self
      - code
      method_defaults: []
      method_returns: []
      method_calls: []
      method_call_inputs: {}
      method_variables: []
      method_decorators: []
      method_annotations:
      - str
      - Dict[str, Union[str, List[str]]]
      - Dict[str, Dict[str, Union[str, List[str]]]]
      method_properties:
      - self.current_class
      - self.file_info
      - self.code
      - self.classes
      - self.functions
    class_method_visit_FunctionDef:
      method_name: visit_FunctionDef
      method_code: "def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n\
        \    \"\"\"\n        Extract details about a function.\n        Args:\n  \
        \          node: ast.FunctionDef: The node to visit.\n        Returns:\n \
        \           None\n        \"\"\"\n    details = self.extract_details(node,\
        \ 'method' if self.current_class else 'function')\n    if self.current_class:\n\
        \        self.classes[self.current_class][f'class_method_{node.name}'] = details\n\
        \    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)"
      method_ast: 'FunctionDef(name=''visit_FunctionDef'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=82, col_offset=26, end_lineno=82, end_col_offset=30),
        arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'', ctx=Load(),
        lineno=82, col_offset=38, end_lineno=82, end_col_offset=41), attr=''FunctionDef'',
        ctx=Load(), lineno=82, col_offset=38, end_lineno=82, end_col_offset=53), lineno=82,
        col_offset=32, end_lineno=82, end_col_offset=53)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[Expr(value=Constant(value=''\n        Extract details
        about a function.\n        Args:\n            node: ast.FunctionDef: The node
        to visit.\n        Returns:\n            None\n        '', lineno=83, col_offset=8,
        end_lineno=89, end_col_offset=11), lineno=83, col_offset=8, end_lineno=89,
        end_col_offset=11), Assign(targets=[Name(id=''details'', ctx=Store(), lineno=90,
        col_offset=8, end_lineno=90, end_col_offset=15)], value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=90, col_offset=18, end_lineno=90, end_col_offset=22), attr=''extract_details'',
        ctx=Load(), lineno=90, col_offset=18, end_lineno=90, end_col_offset=38), args=[Name(id=''node'',
        ctx=Load(), lineno=90, col_offset=39, end_lineno=90, end_col_offset=43), IfExp(test=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=90, col_offset=57, end_lineno=90, end_col_offset=61), attr=''current_class'',
        ctx=Load(), lineno=90, col_offset=57, end_lineno=90, end_col_offset=75), body=Constant(value=''method'',
        lineno=90, col_offset=45, end_lineno=90, end_col_offset=53), orelse=Constant(value=''function'',
        lineno=90, col_offset=81, end_lineno=90, end_col_offset=91), lineno=90, col_offset=45,
        end_lineno=90, end_col_offset=91)], keywords=[], lineno=90, col_offset=18,
        end_lineno=90, end_col_offset=92), lineno=90, col_offset=8, end_lineno=90,
        end_col_offset=92), If(test=Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=91, col_offset=11, end_lineno=91, end_col_offset=15), attr=''current_class'',
        ctx=Load(), lineno=91, col_offset=11, end_lineno=91, end_col_offset=29), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=92, col_offset=12, end_lineno=92, end_col_offset=16), attr=''classes'',
        ctx=Load(), lineno=92, col_offset=12, end_lineno=92, end_col_offset=24), slice=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=92, col_offset=25, end_lineno=92, end_col_offset=29), attr=''current_class'',
        ctx=Load(), lineno=92, col_offset=25, end_lineno=92, end_col_offset=43), ctx=Load(),
        lineno=92, col_offset=12, end_lineno=92, end_col_offset=44), slice=JoinedStr(values=[Constant(value=''class_method_'',
        lineno=92, col_offset=45, end_lineno=92, end_col_offset=72), FormattedValue(value=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=92, col_offset=61, end_lineno=92, end_col_offset=65), attr=''name'',
        ctx=Load(), lineno=92, col_offset=61, end_lineno=92, end_col_offset=70), conversion=-1,
        lineno=92, col_offset=45, end_lineno=92, end_col_offset=72)], lineno=92, col_offset=45,
        end_lineno=92, end_col_offset=72), ctx=Store(), lineno=92, col_offset=12,
        end_lineno=92, end_col_offset=73)], value=Name(id=''details'', ctx=Load(),
        lineno=92, col_offset=76, end_lineno=92, end_col_offset=83), lineno=92, col_offset=12,
        end_lineno=92, end_col_offset=83)], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=94, col_offset=12, end_lineno=94, end_col_offset=16), attr=''functions'',
        ctx=Load(), lineno=94, col_offset=12, end_lineno=94, end_col_offset=26), slice=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=94, col_offset=27, end_lineno=94, end_col_offset=31), attr=''name'',
        ctx=Load(), lineno=94, col_offset=27, end_lineno=94, end_col_offset=36), ctx=Store(),
        lineno=94, col_offset=12, end_lineno=94, end_col_offset=37)], value=Name(id=''details'',
        ctx=Load(), lineno=94, col_offset=40, end_lineno=94, end_col_offset=47), lineno=94,
        col_offset=12, end_lineno=94, end_col_offset=47)], lineno=91, col_offset=8,
        end_lineno=94, end_col_offset=47), Expr(value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=95, col_offset=8, end_lineno=95, end_col_offset=12), attr=''generic_visit'',
        ctx=Load(), lineno=95, col_offset=8, end_lineno=95, end_col_offset=26), args=[Name(id=''node'',
        ctx=Load(), lineno=95, col_offset=27, end_lineno=95, end_col_offset=31)],
        keywords=[], lineno=95, col_offset=8, end_lineno=95, end_col_offset=32), lineno=95,
        col_offset=8, end_lineno=95, end_col_offset=32)], decorator_list=[], returns=Constant(value=None,
        lineno=82, col_offset=58, end_lineno=82, end_col_offset=62), lineno=82, col_offset=4,
        end_lineno=95, end_col_offset=32)'
      method_docstring: "Extract details about a function.\nArgs:\n    node: ast.FunctionDef:\
        \ The node to visit.\nReturns:\n    None"
      method_inputs:
      - self
      - node
      method_defaults: []
      method_returns: []
      method_calls:
      - self.extract_details
      - self.generic_visit
      method_call_inputs:
        self.extract_details:
        - node
        - '''method'' if self.current_class else ''function'''
        self.generic_visit:
        - node
      method_variables:
      - details
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_visit_ClassDef:
      method_name: visit_ClassDef
      method_code: "def visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\
        \"\n        Extract details about a class.\n        Args:\n            node:\
        \ ast.ClassDef: The node to visit.\n        Returns:\n            None\n \
        \       \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n\
        \    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class\
        \ = None"
      method_ast: 'FunctionDef(name=''visit_ClassDef'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=97, col_offset=23, end_lineno=97, end_col_offset=27),
        arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'', ctx=Load(),
        lineno=97, col_offset=35, end_lineno=97, end_col_offset=38), attr=''ClassDef'',
        ctx=Load(), lineno=97, col_offset=35, end_lineno=97, end_col_offset=47), lineno=97,
        col_offset=29, end_lineno=97, end_col_offset=47)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[Expr(value=Constant(value=''\n        Extract details
        about a class.\n        Args:\n            node: ast.ClassDef: The node to
        visit.\n        Returns:\n            None\n        '', lineno=98, col_offset=8,
        end_lineno=104, end_col_offset=11), lineno=98, col_offset=8, end_lineno=104,
        end_col_offset=11), Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=12),
        attr=''classes'', ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=20),
        slice=Attribute(value=Name(id=''node'', ctx=Load(), lineno=105, col_offset=21,
        end_lineno=105, end_col_offset=25), attr=''name'', ctx=Load(), lineno=105,
        col_offset=21, end_lineno=105, end_col_offset=30), ctx=Store(), lineno=105,
        col_offset=8, end_lineno=105, end_col_offset=31)], value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=105, col_offset=34, end_lineno=105, end_col_offset=38),
        attr=''extract_details'', ctx=Load(), lineno=105, col_offset=34, end_lineno=105,
        end_col_offset=54), args=[Name(id=''node'', ctx=Load(), lineno=105, col_offset=55,
        end_lineno=105, end_col_offset=59), Constant(value=''class'', lineno=105,
        col_offset=61, end_lineno=105, end_col_offset=68)], keywords=[], lineno=105,
        col_offset=34, end_lineno=105, end_col_offset=69), lineno=105, col_offset=8,
        end_lineno=105, end_col_offset=69), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=106, col_offset=8, end_lineno=106, end_col_offset=12),
        attr=''current_class'', ctx=Store(), lineno=106, col_offset=8, end_lineno=106,
        end_col_offset=26)], value=Attribute(value=Name(id=''node'', ctx=Load(), lineno=106,
        col_offset=29, end_lineno=106, end_col_offset=33), attr=''name'', ctx=Load(),
        lineno=106, col_offset=29, end_lineno=106, end_col_offset=38), lineno=106,
        col_offset=8, end_lineno=106, end_col_offset=38), Expr(value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=107, col_offset=8, end_lineno=107, end_col_offset=12),
        attr=''generic_visit'', ctx=Load(), lineno=107, col_offset=8, end_lineno=107,
        end_col_offset=26), args=[Name(id=''node'', ctx=Load(), lineno=107, col_offset=27,
        end_lineno=107, end_col_offset=31)], keywords=[], lineno=107, col_offset=8,
        end_lineno=107, end_col_offset=32), lineno=107, col_offset=8, end_lineno=107,
        end_col_offset=32), Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=108, col_offset=8, end_lineno=108, end_col_offset=12), attr=''current_class'',
        ctx=Store(), lineno=108, col_offset=8, end_lineno=108, end_col_offset=26)],
        value=Constant(value=None, lineno=108, col_offset=29, end_lineno=108, end_col_offset=33),
        lineno=108, col_offset=8, end_lineno=108, end_col_offset=33)], decorator_list=[],
        returns=Constant(value=None, lineno=97, col_offset=52, end_lineno=97, end_col_offset=56),
        lineno=97, col_offset=4, end_lineno=108, end_col_offset=33)'
      method_docstring: "Extract details about a class.\nArgs:\n    node: ast.ClassDef:\
        \ The node to visit.\nReturns:\n    None"
      method_inputs:
      - self
      - node
      method_defaults: []
      method_returns: []
      method_calls:
      - self.extract_details
      - self.generic_visit
      method_call_inputs:
        self.extract_details:
        - node
        - '''class'''
        self.generic_visit:
        - node
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.current_class
    class_method_extract_details:
      method_name: extract_details
      method_code: "def extract_details(self, node: ast.AST, node_type: str) -> Dict[str,\
        \ Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n\
        \        Args:\n            node: ast.AST: The node to extract details from.\n\
        \            node_type: str: The type of node.\n        Returns:\n       \
        \     Dict[str, Union[str, List[str]]]: The details extracted from the node.\n\
        \        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n\
        \    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node),\
        \ f'{node_type}_ast': ast.dump(node, include_attributes=True), f'{node_type}_docstring':\
        \ ast.get_docstring(node), f'{node_type}_inputs': [arg.arg for arg in node.args.args]\
        \ if node_type in ['function', 'method'] else None, f'{node_type}_defaults':\
        \ [ast.unparse(d) for d in node.args.defaults] if node_type in ['function',\
        \ 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value)\
        \ if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode,\
        \ ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs':\
        \ call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode\
        \ in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets\
        \ if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator)\
        \ for decorator in node.decorator_list} if node.decorator_list else set()),\
        \ f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode\
        \ in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation\
        \ is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for\
        \ subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx,\
        \ ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type\
        \ == 'method' and self.current_class:\n            attributes = [target.attr\
        \ for subnode in node_walk if isinstance(subnode, ast.Assign) for target in\
        \ subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value,\
        \ ast.Name) and (target.value.id == 'self')]\n            if attributes:\n\
        \                if 'class_attributes' in self.classes[self.current_class]:\n\
        \                    self.classes[self.current_class]['class_attributes'].extend(attributes)\n\
        \                else:\n                    self.classes[self.current_class]['class_attributes']\
        \ = attributes\n        if node_type == 'class':\n            details.update({'class_attributes':\
        \ [target.attr for subnode in node.body if isinstance(subnode, ast.Assign)\
        \ for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods':\
        \ [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)\
        \ and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base)\
        \ for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name\
        \ for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name\
        \ != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id\
        \ == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return\
        \ details"
      method_ast: 'FunctionDef(name=''extract_details'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=110, col_offset=24, end_lineno=110, end_col_offset=28),
        arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'', ctx=Load(),
        lineno=110, col_offset=36, end_lineno=110, end_col_offset=39), attr=''AST'',
        ctx=Load(), lineno=110, col_offset=36, end_lineno=110, end_col_offset=43),
        lineno=110, col_offset=30, end_lineno=110, end_col_offset=43), arg(arg=''node_type'',
        annotation=Name(id=''str'', ctx=Load(), lineno=110, col_offset=56, end_lineno=110,
        end_col_offset=59), lineno=110, col_offset=45, end_lineno=110, end_col_offset=59)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Extract
        details about a node.\n        Args:\n            node: ast.AST: The node
        to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str,
        Union[str, List[str]]]: The details extracted from the node.\n        '',
        lineno=111, col_offset=8, end_lineno=118, end_col_offset=11), lineno=111,
        col_offset=8, end_lineno=118, end_col_offset=11), Assign(targets=[Name(id=''node_walk'',
        ctx=Store(), lineno=119, col_offset=8, end_lineno=119, end_col_offset=17)],
        value=Call(func=Name(id=''list'', ctx=Load(), lineno=119, col_offset=20, end_lineno=119,
        end_col_offset=24), args=[Call(func=Attribute(value=Name(id=''ast'', ctx=Load(),
        lineno=119, col_offset=25, end_lineno=119, end_col_offset=28), attr=''walk'',
        ctx=Load(), lineno=119, col_offset=25, end_lineno=119, end_col_offset=33),
        args=[Name(id=''node'', ctx=Load(), lineno=119, col_offset=34, end_lineno=119,
        end_col_offset=38)], keywords=[], lineno=119, col_offset=25, end_lineno=119,
        end_col_offset=39)], keywords=[], lineno=119, col_offset=20, end_lineno=119,
        end_col_offset=40), lineno=119, col_offset=8, end_lineno=119, end_col_offset=40),
        Assign(targets=[Name(id=''call_data'', ctx=Store(), lineno=120, col_offset=8,
        end_lineno=120, end_col_offset=17)], value=Call(func=Name(id=''get_all_calls'',
        ctx=Load(), lineno=120, col_offset=20, end_lineno=120, end_col_offset=33),
        args=[Name(id=''node'', ctx=Load(), lineno=120, col_offset=34, end_lineno=120,
        end_col_offset=38)], keywords=[], lineno=120, col_offset=20, end_lineno=120,
        end_col_offset=39), lineno=120, col_offset=8, end_lineno=120, end_col_offset=39),
        Assign(targets=[Name(id=''details'', ctx=Store(), lineno=121, col_offset=8,
        end_lineno=121, end_col_offset=15)], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=122, col_offset=15, end_lineno=122, end_col_offset=24),
        conversion=-1, lineno=122, col_offset=12, end_lineno=122, end_col_offset=31),
        Constant(value=''_name'', lineno=122, col_offset=12, end_lineno=122, end_col_offset=31)],
        lineno=122, col_offset=12, end_lineno=122, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=123, col_offset=15, end_lineno=123, end_col_offset=24),
        conversion=-1, lineno=123, col_offset=12, end_lineno=123, end_col_offset=31),
        Constant(value=''_code'', lineno=123, col_offset=12, end_lineno=123, end_col_offset=31)],
        lineno=123, col_offset=12, end_lineno=123, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=124, col_offset=15, end_lineno=124, end_col_offset=24),
        conversion=-1, lineno=124, col_offset=12, end_lineno=124, end_col_offset=30),
        Constant(value=''_ast'', lineno=124, col_offset=12, end_lineno=124, end_col_offset=30)],
        lineno=124, col_offset=12, end_lineno=124, end_col_offset=30), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=125, col_offset=15, end_lineno=125, end_col_offset=24),
        conversion=-1, lineno=125, col_offset=12, end_lineno=125, end_col_offset=36),
        Constant(value=''_docstring'', lineno=125, col_offset=12, end_lineno=125,
        end_col_offset=36)], lineno=125, col_offset=12, end_lineno=125, end_col_offset=36),
        JoinedStr(values=[FormattedValue(value=Name(id=''node_type'', ctx=Load(),
        lineno=126, col_offset=15, end_lineno=126, end_col_offset=24), conversion=-1,
        lineno=126, col_offset=12, end_lineno=126, end_col_offset=33), Constant(value=''_inputs'',
        lineno=126, col_offset=12, end_lineno=126, end_col_offset=33)], lineno=126,
        col_offset=12, end_lineno=126, end_col_offset=33), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=127, col_offset=15, end_lineno=127, end_col_offset=24),
        conversion=-1, lineno=127, col_offset=12, end_lineno=127, end_col_offset=35),
        Constant(value=''_defaults'', lineno=127, col_offset=12, end_lineno=127, end_col_offset=35)],
        lineno=127, col_offset=12, end_lineno=127, end_col_offset=35), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=128, col_offset=15, end_lineno=128, end_col_offset=24),
        conversion=-1, lineno=128, col_offset=12, end_lineno=128, end_col_offset=34),
        Constant(value=''_returns'', lineno=128, col_offset=12, end_lineno=128, end_col_offset=34)],
        lineno=128, col_offset=12, end_lineno=128, end_col_offset=34), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=129, col_offset=15, end_lineno=129, end_col_offset=24),
        conversion=-1, lineno=129, col_offset=12, end_lineno=129, end_col_offset=32),
        Constant(value=''_calls'', lineno=129, col_offset=12, end_lineno=129, end_col_offset=32)],
        lineno=129, col_offset=12, end_lineno=129, end_col_offset=32), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=130, col_offset=15, end_lineno=130, end_col_offset=24),
        conversion=-1, lineno=130, col_offset=12, end_lineno=130, end_col_offset=38),
        Constant(value=''_call_inputs'', lineno=130, col_offset=12, end_lineno=130,
        end_col_offset=38)], lineno=130, col_offset=12, end_lineno=130, end_col_offset=38),
        JoinedStr(values=[FormattedValue(value=Name(id=''node_type'', ctx=Load(),
        lineno=131, col_offset=15, end_lineno=131, end_col_offset=24), conversion=-1,
        lineno=131, col_offset=12, end_lineno=131, end_col_offset=36), Constant(value=''_variables'',
        lineno=131, col_offset=12, end_lineno=131, end_col_offset=36)], lineno=131,
        col_offset=12, end_lineno=131, end_col_offset=36), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=132, col_offset=15, end_lineno=132, end_col_offset=24),
        conversion=-1, lineno=132, col_offset=12, end_lineno=132, end_col_offset=37),
        Constant(value=''_decorators'', lineno=132, col_offset=12, end_lineno=132,
        end_col_offset=37)], lineno=132, col_offset=12, end_lineno=132, end_col_offset=37),
        JoinedStr(values=[FormattedValue(value=Name(id=''node_type'', ctx=Load(),
        lineno=133, col_offset=15, end_lineno=133, end_col_offset=24), conversion=-1,
        lineno=133, col_offset=12, end_lineno=133, end_col_offset=38), Constant(value=''_annotations'',
        lineno=133, col_offset=12, end_lineno=133, end_col_offset=38)], lineno=133,
        col_offset=12, end_lineno=133, end_col_offset=38), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
        ctx=Load(), lineno=134, col_offset=15, end_lineno=134, end_col_offset=24),
        conversion=-1, lineno=134, col_offset=12, end_lineno=134, end_col_offset=37),
        Constant(value=''_properties'', lineno=134, col_offset=12, end_lineno=134,
        end_col_offset=37)], lineno=134, col_offset=12, end_lineno=134, end_col_offset=37)],
        values=[Attribute(value=Name(id=''node'', ctx=Load(), lineno=122, col_offset=33,
        end_lineno=122, end_col_offset=37), attr=''name'', ctx=Load(), lineno=122,
        col_offset=33, end_lineno=122, end_col_offset=42), Call(func=Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=123, col_offset=33, end_lineno=123, end_col_offset=36),
        attr=''unparse'', ctx=Load(), lineno=123, col_offset=33, end_lineno=123, end_col_offset=44),
        args=[Name(id=''node'', ctx=Load(), lineno=123, col_offset=45, end_lineno=123,
        end_col_offset=49)], keywords=[], lineno=123, col_offset=33, end_lineno=123,
        end_col_offset=50), Call(func=Attribute(value=Name(id=''ast'', ctx=Load(),
        lineno=124, col_offset=32, end_lineno=124, end_col_offset=35), attr=''dump'',
        ctx=Load(), lineno=124, col_offset=32, end_lineno=124, end_col_offset=40),
        args=[Name(id=''node'', ctx=Load(), lineno=124, col_offset=41, end_lineno=124,
        end_col_offset=45)], keywords=[keyword(arg=''include_attributes'', value=Constant(value=True,
        lineno=124, col_offset=66, end_lineno=124, end_col_offset=70), lineno=124,
        col_offset=47, end_lineno=124, end_col_offset=70)], lineno=124, col_offset=32,
        end_lineno=124, end_col_offset=71), Call(func=Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=125, col_offset=38, end_lineno=125, end_col_offset=41),
        attr=''get_docstring'', ctx=Load(), lineno=125, col_offset=38, end_lineno=125,
        end_col_offset=55), args=[Name(id=''node'', ctx=Load(), lineno=125, col_offset=56,
        end_lineno=125, end_col_offset=60)], keywords=[], lineno=125, col_offset=38,
        end_lineno=125, end_col_offset=61), IfExp(test=Compare(left=Name(id=''node_type'',
        ctx=Load(), lineno=126, col_offset=74, end_lineno=126, end_col_offset=83),
        ops=[In()], comparators=[List(elts=[Constant(value=''function'', lineno=126,
        col_offset=88, end_lineno=126, end_col_offset=98), Constant(value=''method'',
        lineno=126, col_offset=100, end_lineno=126, end_col_offset=108)], ctx=Load(),
        lineno=126, col_offset=87, end_lineno=126, end_col_offset=109)], lineno=126,
        col_offset=74, end_lineno=126, end_col_offset=109), body=ListComp(elt=Attribute(value=Name(id=''arg'',
        ctx=Load(), lineno=126, col_offset=36, end_lineno=126, end_col_offset=39),
        attr=''arg'', ctx=Load(), lineno=126, col_offset=36, end_lineno=126, end_col_offset=43),
        generators=[comprehension(target=Name(id=''arg'', ctx=Store(), lineno=126,
        col_offset=48, end_lineno=126, end_col_offset=51), iter=Attribute(value=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=126, col_offset=55, end_lineno=126, end_col_offset=59),
        attr=''args'', ctx=Load(), lineno=126, col_offset=55, end_lineno=126, end_col_offset=64),
        attr=''args'', ctx=Load(), lineno=126, col_offset=55, end_lineno=126, end_col_offset=69),
        ifs=[], is_async=0)], lineno=126, col_offset=35, end_lineno=126, end_col_offset=70),
        orelse=Constant(value=None, lineno=126, col_offset=115, end_lineno=126, end_col_offset=119),
        lineno=126, col_offset=35, end_lineno=126, end_col_offset=119), IfExp(test=Compare(left=Name(id=''node_type'',
        ctx=Load(), lineno=127, col_offset=85, end_lineno=127, end_col_offset=94),
        ops=[In()], comparators=[List(elts=[Constant(value=''function'', lineno=127,
        col_offset=99, end_lineno=127, end_col_offset=109), Constant(value=''method'',
        lineno=127, col_offset=111, end_lineno=127, end_col_offset=119)], ctx=Load(),
        lineno=127, col_offset=98, end_lineno=127, end_col_offset=120)], lineno=127,
        col_offset=85, end_lineno=127, end_col_offset=120), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=127, col_offset=38, end_lineno=127, end_col_offset=41),
        attr=''unparse'', ctx=Load(), lineno=127, col_offset=38, end_lineno=127, end_col_offset=49),
        args=[Name(id=''d'', ctx=Load(), lineno=127, col_offset=50, end_lineno=127,
        end_col_offset=51)], keywords=[], lineno=127, col_offset=38, end_lineno=127,
        end_col_offset=52), generators=[comprehension(target=Name(id=''d'', ctx=Store(),
        lineno=127, col_offset=57, end_lineno=127, end_col_offset=58), iter=Attribute(value=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=127, col_offset=62, end_lineno=127, end_col_offset=66),
        attr=''args'', ctx=Load(), lineno=127, col_offset=62, end_lineno=127, end_col_offset=71),
        attr=''defaults'', ctx=Load(), lineno=127, col_offset=62, end_lineno=127,
        end_col_offset=80), ifs=[], is_async=0)], lineno=127, col_offset=37, end_lineno=127,
        end_col_offset=81), orelse=Constant(value=None, lineno=127, col_offset=126,
        end_lineno=127, end_col_offset=130), lineno=127, col_offset=37, end_lineno=127,
        end_col_offset=130), ListComp(elt=IfExp(test=Compare(left=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=128, col_offset=67, end_lineno=128, end_col_offset=74),
        attr=''value'', ctx=Load(), lineno=128, col_offset=67, end_lineno=128, end_col_offset=80),
        ops=[IsNot()], comparators=[Constant(value=None, lineno=128, col_offset=88,
        end_lineno=128, end_col_offset=92)], lineno=128, col_offset=67, end_lineno=128,
        end_col_offset=92), body=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(),
        lineno=128, col_offset=37, end_lineno=128, end_col_offset=40), attr=''unparse'',
        ctx=Load(), lineno=128, col_offset=37, end_lineno=128, end_col_offset=48),
        args=[Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=128, col_offset=49,
        end_lineno=128, end_col_offset=56), attr=''value'', ctx=Load(), lineno=128,
        col_offset=49, end_lineno=128, end_col_offset=62)], keywords=[], lineno=128,
        col_offset=37, end_lineno=128, end_col_offset=63), orelse=Constant(value=''None'',
        lineno=128, col_offset=98, end_lineno=128, end_col_offset=104), lineno=128,
        col_offset=37, end_lineno=128, end_col_offset=104), generators=[comprehension(target=Name(id=''subnode'',
        ctx=Store(), lineno=128, col_offset=109, end_lineno=128, end_col_offset=116),
        iter=Name(id=''node_walk'', ctx=Load(), lineno=128, col_offset=120, end_lineno=128,
        end_col_offset=129), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=128,
        col_offset=133, end_lineno=128, end_col_offset=143), args=[Name(id=''subnode'',
        ctx=Load(), lineno=128, col_offset=144, end_lineno=128, end_col_offset=151),
        Attribute(value=Name(id=''ast'', ctx=Load(), lineno=128, col_offset=153, end_lineno=128,
        end_col_offset=156), attr=''Return'', ctx=Load(), lineno=128, col_offset=153,
        end_lineno=128, end_col_offset=163)], keywords=[], lineno=128, col_offset=133,
        end_lineno=128, end_col_offset=164)], is_async=0)], lineno=128, col_offset=36,
        end_lineno=128, end_col_offset=165), Call(func=Name(id=''list'', ctx=Load(),
        lineno=129, col_offset=34, end_lineno=129, end_col_offset=38), args=[Call(func=Attribute(value=Name(id=''call_data'',
        ctx=Load(), lineno=129, col_offset=39, end_lineno=129, end_col_offset=48),
        attr=''keys'', ctx=Load(), lineno=129, col_offset=39, end_lineno=129, end_col_offset=53),
        args=[], keywords=[], lineno=129, col_offset=39, end_lineno=129, end_col_offset=55)],
        keywords=[], lineno=129, col_offset=34, end_lineno=129, end_col_offset=56),
        Name(id=''call_data'', ctx=Load(), lineno=130, col_offset=40, end_lineno=130,
        end_col_offset=49), Call(func=Name(id=''list'', ctx=Load(), lineno=131, col_offset=38,
        end_lineno=131, end_col_offset=42), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=131, col_offset=44, end_lineno=131, end_col_offset=47),
        attr=''unparse'', ctx=Load(), lineno=131, col_offset=44, end_lineno=131, end_col_offset=55),
        args=[Name(id=''target'', ctx=Load(), lineno=131, col_offset=56, end_lineno=131,
        end_col_offset=62)], keywords=[], lineno=131, col_offset=44, end_lineno=131,
        end_col_offset=63), generators=[comprehension(target=Name(id=''subnode'',
        ctx=Store(), lineno=131, col_offset=68, end_lineno=131, end_col_offset=75),
        iter=Name(id=''node_walk'', ctx=Load(), lineno=131, col_offset=79, end_lineno=131,
        end_col_offset=88), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=131,
        col_offset=92, end_lineno=131, end_col_offset=102), args=[Name(id=''subnode'',
        ctx=Load(), lineno=131, col_offset=103, end_lineno=131, end_col_offset=110),
        Attribute(value=Name(id=''ast'', ctx=Load(), lineno=131, col_offset=112, end_lineno=131,
        end_col_offset=115), attr=''Assign'', ctx=Load(), lineno=131, col_offset=112,
        end_lineno=131, end_col_offset=122)], keywords=[], lineno=131, col_offset=92,
        end_lineno=131, end_col_offset=123)], is_async=0), comprehension(target=Name(id=''target'',
        ctx=Store(), lineno=131, col_offset=128, end_lineno=131, end_col_offset=134),
        iter=Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=131, col_offset=138,
        end_lineno=131, end_col_offset=145), attr=''targets'', ctx=Load(), lineno=131,
        col_offset=138, end_lineno=131, end_col_offset=153), ifs=[Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=131, col_offset=157, end_lineno=131, end_col_offset=167),
        args=[Name(id=''target'', ctx=Load(), lineno=131, col_offset=168, end_lineno=131,
        end_col_offset=174), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=131,
        col_offset=176, end_lineno=131, end_col_offset=179), attr=''Name'', ctx=Load(),
        lineno=131, col_offset=176, end_lineno=131, end_col_offset=184)], keywords=[],
        lineno=131, col_offset=157, end_lineno=131, end_col_offset=185)], is_async=0)],
        lineno=131, col_offset=43, end_lineno=131, end_col_offset=186)], keywords=[],
        lineno=131, col_offset=38, end_lineno=131, end_col_offset=187), Call(func=Name(id=''list'',
        ctx=Load(), lineno=132, col_offset=39, end_lineno=132, end_col_offset=43),
        args=[IfExp(test=Attribute(value=Name(id=''node'', ctx=Load(), lineno=132,
        col_offset=109, end_lineno=132, end_col_offset=113), attr=''decorator_list'',
        ctx=Load(), lineno=132, col_offset=109, end_lineno=132, end_col_offset=128),
        body=SetComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=132,
        col_offset=45, end_lineno=132, end_col_offset=48), attr=''unparse'', ctx=Load(),
        lineno=132, col_offset=45, end_lineno=132, end_col_offset=56), args=[Name(id=''decorator'',
        ctx=Load(), lineno=132, col_offset=57, end_lineno=132, end_col_offset=66)],
        keywords=[], lineno=132, col_offset=45, end_lineno=132, end_col_offset=67),
        generators=[comprehension(target=Name(id=''decorator'', ctx=Store(), lineno=132,
        col_offset=72, end_lineno=132, end_col_offset=81), iter=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=132, col_offset=85, end_lineno=132, end_col_offset=89),
        attr=''decorator_list'', ctx=Load(), lineno=132, col_offset=85, end_lineno=132,
        end_col_offset=104), ifs=[], is_async=0)], lineno=132, col_offset=44, end_lineno=132,
        end_col_offset=105), orelse=Call(func=Name(id=''set'', ctx=Load(), lineno=132,
        col_offset=134, end_lineno=132, end_col_offset=137), args=[], keywords=[],
        lineno=132, col_offset=134, end_lineno=132, end_col_offset=139), lineno=132,
        col_offset=44, end_lineno=132, end_col_offset=139)], keywords=[], lineno=132,
        col_offset=39, end_lineno=132, end_col_offset=140), Call(func=Name(id=''list'',
        ctx=Load(), lineno=133, col_offset=40, end_lineno=133, end_col_offset=44),
        args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=133,
        col_offset=46, end_lineno=133, end_col_offset=49), attr=''unparse'', ctx=Load(),
        lineno=133, col_offset=46, end_lineno=133, end_col_offset=57), args=[Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=133, col_offset=58, end_lineno=133, end_col_offset=65),
        attr=''annotation'', ctx=Load(), lineno=133, col_offset=58, end_lineno=133,
        end_col_offset=76)], keywords=[], lineno=133, col_offset=46, end_lineno=133,
        end_col_offset=77), generators=[comprehension(target=Name(id=''subnode'',
        ctx=Store(), lineno=133, col_offset=82, end_lineno=133, end_col_offset=89),
        iter=Name(id=''node_walk'', ctx=Load(), lineno=133, col_offset=93, end_lineno=133,
        end_col_offset=102), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=133, col_offset=106, end_lineno=133, end_col_offset=116),
        args=[Name(id=''subnode'', ctx=Load(), lineno=133, col_offset=117, end_lineno=133,
        end_col_offset=124), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=133,
        col_offset=126, end_lineno=133, end_col_offset=129), attr=''AnnAssign'', ctx=Load(),
        lineno=133, col_offset=126, end_lineno=133, end_col_offset=139)], keywords=[],
        lineno=133, col_offset=106, end_lineno=133, end_col_offset=140), Compare(left=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=133, col_offset=145, end_lineno=133, end_col_offset=152),
        attr=''annotation'', ctx=Load(), lineno=133, col_offset=145, end_lineno=133,
        end_col_offset=163), ops=[IsNot()], comparators=[Constant(value=None, lineno=133,
        col_offset=171, end_lineno=133, end_col_offset=175)], lineno=133, col_offset=145,
        end_lineno=133, end_col_offset=175)], lineno=133, col_offset=106, end_lineno=133,
        end_col_offset=175)], is_async=0)], lineno=133, col_offset=45, end_lineno=133,
        end_col_offset=176)], keywords=[], lineno=133, col_offset=40, end_lineno=133,
        end_col_offset=177), Call(func=Name(id=''list'', ctx=Load(), lineno=134, col_offset=39,
        end_lineno=134, end_col_offset=43), args=[SetComp(elt=Call(func=Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=134, col_offset=45, end_lineno=134, end_col_offset=48),
        attr=''unparse'', ctx=Load(), lineno=134, col_offset=45, end_lineno=134, end_col_offset=56),
        args=[Name(id=''subnode'', ctx=Load(), lineno=134, col_offset=57, end_lineno=134,
        end_col_offset=64)], keywords=[], lineno=134, col_offset=45, end_lineno=134,
        end_col_offset=65), generators=[comprehension(target=Name(id=''subnode'',
        ctx=Store(), lineno=134, col_offset=70, end_lineno=134, end_col_offset=77),
        iter=Name(id=''node_walk'', ctx=Load(), lineno=134, col_offset=81, end_lineno=134,
        end_col_offset=90), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=134, col_offset=94, end_lineno=134, end_col_offset=104),
        args=[Name(id=''subnode'', ctx=Load(), lineno=134, col_offset=105, end_lineno=134,
        end_col_offset=112), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=134,
        col_offset=114, end_lineno=134, end_col_offset=117), attr=''Attribute'', ctx=Load(),
        lineno=134, col_offset=114, end_lineno=134, end_col_offset=127)], keywords=[],
        lineno=134, col_offset=94, end_lineno=134, end_col_offset=128), Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=134, col_offset=133, end_lineno=134, end_col_offset=143),
        args=[Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=134, col_offset=144,
        end_lineno=134, end_col_offset=151), attr=''ctx'', ctx=Load(), lineno=134,
        col_offset=144, end_lineno=134, end_col_offset=155), Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=134, col_offset=157, end_lineno=134, end_col_offset=160),
        attr=''Store'', ctx=Load(), lineno=134, col_offset=157, end_lineno=134, end_col_offset=166)],
        keywords=[], lineno=134, col_offset=133, end_lineno=134, end_col_offset=167)],
        lineno=134, col_offset=94, end_lineno=134, end_col_offset=167)], is_async=0)],
        lineno=134, col_offset=44, end_lineno=134, end_col_offset=168)], keywords=[],
        lineno=134, col_offset=39, end_lineno=134, end_col_offset=169)], lineno=121,
        col_offset=18, end_lineno=135, end_col_offset=9), lineno=121, col_offset=8,
        end_lineno=135, end_col_offset=9), If(test=Compare(left=Name(id=''node_type'',
        ctx=Load(), lineno=136, col_offset=11, end_lineno=136, end_col_offset=20),
        ops=[In()], comparators=[List(elts=[Constant(value=''class'', lineno=136,
        col_offset=25, end_lineno=136, end_col_offset=32), Constant(value=''method'',
        lineno=136, col_offset=34, end_lineno=136, end_col_offset=42)], ctx=Load(),
        lineno=136, col_offset=24, end_lineno=136, end_col_offset=43)], lineno=136,
        col_offset=11, end_lineno=136, end_col_offset=43), body=[If(test=BoolOp(op=And(),
        values=[Compare(left=Name(id=''node_type'', ctx=Load(), lineno=137, col_offset=15,
        end_lineno=137, end_col_offset=24), ops=[Eq()], comparators=[Constant(value=''method'',
        lineno=137, col_offset=28, end_lineno=137, end_col_offset=36)], lineno=137,
        col_offset=15, end_lineno=137, end_col_offset=36), Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=137, col_offset=41, end_lineno=137, end_col_offset=45),
        attr=''current_class'', ctx=Load(), lineno=137, col_offset=41, end_lineno=137,
        end_col_offset=59)], lineno=137, col_offset=15, end_lineno=137, end_col_offset=59),
        body=[Assign(targets=[Name(id=''attributes'', ctx=Store(), lineno=138, col_offset=16,
        end_lineno=138, end_col_offset=26)], value=ListComp(elt=Attribute(value=Name(id=''target'',
        ctx=Load(), lineno=138, col_offset=30, end_lineno=138, end_col_offset=36),
        attr=''attr'', ctx=Load(), lineno=138, col_offset=30, end_lineno=138, end_col_offset=41),
        generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=138,
        col_offset=46, end_lineno=138, end_col_offset=53), iter=Name(id=''node_walk'',
        ctx=Load(), lineno=138, col_offset=57, end_lineno=138, end_col_offset=66),
        ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=138, col_offset=70,
        end_lineno=138, end_col_offset=80), args=[Name(id=''subnode'', ctx=Load(),
        lineno=138, col_offset=81, end_lineno=138, end_col_offset=88), Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=138, col_offset=90, end_lineno=138, end_col_offset=93),
        attr=''Assign'', ctx=Load(), lineno=138, col_offset=90, end_lineno=138, end_col_offset=100)],
        keywords=[], lineno=138, col_offset=70, end_lineno=138, end_col_offset=101)],
        is_async=0), comprehension(target=Name(id=''target'', ctx=Store(), lineno=138,
        col_offset=106, end_lineno=138, end_col_offset=112), iter=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=138, col_offset=116, end_lineno=138, end_col_offset=123),
        attr=''targets'', ctx=Load(), lineno=138, col_offset=116, end_lineno=138,
        end_col_offset=131), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=138, col_offset=135, end_lineno=138, end_col_offset=145),
        args=[Name(id=''target'', ctx=Load(), lineno=138, col_offset=146, end_lineno=138,
        end_col_offset=152), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=138,
        col_offset=154, end_lineno=138, end_col_offset=157), attr=''Attribute'', ctx=Load(),
        lineno=138, col_offset=154, end_lineno=138, end_col_offset=167)], keywords=[],
        lineno=138, col_offset=135, end_lineno=138, end_col_offset=168), Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=138, col_offset=173, end_lineno=138, end_col_offset=183),
        args=[Attribute(value=Name(id=''target'', ctx=Load(), lineno=138, col_offset=184,
        end_lineno=138, end_col_offset=190), attr=''value'', ctx=Load(), lineno=138,
        col_offset=184, end_lineno=138, end_col_offset=196), Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=138, col_offset=198, end_lineno=138, end_col_offset=201),
        attr=''Name'', ctx=Load(), lineno=138, col_offset=198, end_lineno=138, end_col_offset=206)],
        keywords=[], lineno=138, col_offset=173, end_lineno=138, end_col_offset=207),
        Compare(left=Attribute(value=Attribute(value=Name(id=''target'', ctx=Load(),
        lineno=138, col_offset=212, end_lineno=138, end_col_offset=218), attr=''value'',
        ctx=Load(), lineno=138, col_offset=212, end_lineno=138, end_col_offset=224),
        attr=''id'', ctx=Load(), lineno=138, col_offset=212, end_lineno=138, end_col_offset=227),
        ops=[Eq()], comparators=[Constant(value=''self'', lineno=138, col_offset=231,
        end_lineno=138, end_col_offset=237)], lineno=138, col_offset=212, end_lineno=138,
        end_col_offset=237)], lineno=138, col_offset=135, end_lineno=138, end_col_offset=237)],
        is_async=0)], lineno=138, col_offset=29, end_lineno=138, end_col_offset=238),
        lineno=138, col_offset=16, end_lineno=138, end_col_offset=238), If(test=Name(id=''attributes'',
        ctx=Load(), lineno=139, col_offset=19, end_lineno=139, end_col_offset=29),
        body=[If(test=Compare(left=Constant(value=''class_attributes'', lineno=140,
        col_offset=23, end_lineno=140, end_col_offset=41), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=140, col_offset=45, end_lineno=140, end_col_offset=49),
        attr=''classes'', ctx=Load(), lineno=140, col_offset=45, end_lineno=140, end_col_offset=57),
        slice=Attribute(value=Name(id=''self'', ctx=Load(), lineno=140, col_offset=58,
        end_lineno=140, end_col_offset=62), attr=''current_class'', ctx=Load(), lineno=140,
        col_offset=58, end_lineno=140, end_col_offset=76), ctx=Load(), lineno=140,
        col_offset=45, end_lineno=140, end_col_offset=77)], lineno=140, col_offset=23,
        end_lineno=140, end_col_offset=77), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=141, col_offset=24, end_lineno=141, end_col_offset=28),
        attr=''classes'', ctx=Load(), lineno=141, col_offset=24, end_lineno=141, end_col_offset=36),
        slice=Attribute(value=Name(id=''self'', ctx=Load(), lineno=141, col_offset=37,
        end_lineno=141, end_col_offset=41), attr=''current_class'', ctx=Load(), lineno=141,
        col_offset=37, end_lineno=141, end_col_offset=55), ctx=Load(), lineno=141,
        col_offset=24, end_lineno=141, end_col_offset=56), slice=Constant(value=''class_attributes'',
        lineno=141, col_offset=57, end_lineno=141, end_col_offset=75), ctx=Load(),
        lineno=141, col_offset=24, end_lineno=141, end_col_offset=76), attr=''extend'',
        ctx=Load(), lineno=141, col_offset=24, end_lineno=141, end_col_offset=83),
        args=[Name(id=''attributes'', ctx=Load(), lineno=141, col_offset=84, end_lineno=141,
        end_col_offset=94)], keywords=[], lineno=141, col_offset=24, end_lineno=141,
        end_col_offset=95), lineno=141, col_offset=24, end_lineno=141, end_col_offset=95)],
        orelse=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=143, col_offset=24, end_lineno=143, end_col_offset=28),
        attr=''classes'', ctx=Load(), lineno=143, col_offset=24, end_lineno=143, end_col_offset=36),
        slice=Attribute(value=Name(id=''self'', ctx=Load(), lineno=143, col_offset=37,
        end_lineno=143, end_col_offset=41), attr=''current_class'', ctx=Load(), lineno=143,
        col_offset=37, end_lineno=143, end_col_offset=55), ctx=Load(), lineno=143,
        col_offset=24, end_lineno=143, end_col_offset=56), slice=Constant(value=''class_attributes'',
        lineno=143, col_offset=57, end_lineno=143, end_col_offset=75), ctx=Store(),
        lineno=143, col_offset=24, end_lineno=143, end_col_offset=76)], value=Name(id=''attributes'',
        ctx=Load(), lineno=143, col_offset=79, end_lineno=143, end_col_offset=89),
        lineno=143, col_offset=24, end_lineno=143, end_col_offset=89)], lineno=140,
        col_offset=20, end_lineno=143, end_col_offset=89)], orelse=[], lineno=139,
        col_offset=16, end_lineno=143, end_col_offset=89)], orelse=[], lineno=137,
        col_offset=12, end_lineno=143, end_col_offset=89), If(test=Compare(left=Name(id=''node_type'',
        ctx=Load(), lineno=144, col_offset=15, end_lineno=144, end_col_offset=24),
        ops=[Eq()], comparators=[Constant(value=''class'', lineno=144, col_offset=28,
        end_lineno=144, end_col_offset=35)], lineno=144, col_offset=15, end_lineno=144,
        end_col_offset=35), body=[Expr(value=Call(func=Attribute(value=Name(id=''details'',
        ctx=Load(), lineno=145, col_offset=16, end_lineno=145, end_col_offset=23),
        attr=''update'', ctx=Load(), lineno=145, col_offset=16, end_lineno=145, end_col_offset=30),
        args=[Dict(keys=[Constant(value=''class_attributes'', lineno=146, col_offset=20,
        end_lineno=146, end_col_offset=38), Constant(value=''class_methods'', lineno=147,
        col_offset=20, end_lineno=147, end_col_offset=35), Constant(value=''class_inheritance'',
        lineno=148, col_offset=20, end_lineno=148, end_col_offset=39), Constant(value=''class_static_methods'',
        lineno=149, col_offset=20, end_lineno=149, end_col_offset=42)], values=[ListComp(elt=Attribute(value=Name(id=''target'',
        ctx=Load(), lineno=146, col_offset=41, end_lineno=146, end_col_offset=47),
        attr=''attr'', ctx=Load(), lineno=146, col_offset=41, end_lineno=146, end_col_offset=52),
        generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=146,
        col_offset=57, end_lineno=146, end_col_offset=64), iter=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=146, col_offset=68, end_lineno=146, end_col_offset=72),
        attr=''body'', ctx=Load(), lineno=146, col_offset=68, end_lineno=146, end_col_offset=77),
        ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=146, col_offset=81,
        end_lineno=146, end_col_offset=91), args=[Name(id=''subnode'', ctx=Load(),
        lineno=146, col_offset=92, end_lineno=146, end_col_offset=99), Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=146, col_offset=101, end_lineno=146, end_col_offset=104),
        attr=''Assign'', ctx=Load(), lineno=146, col_offset=101, end_lineno=146, end_col_offset=111)],
        keywords=[], lineno=146, col_offset=81, end_lineno=146, end_col_offset=112)],
        is_async=0), comprehension(target=Name(id=''target'', ctx=Store(), lineno=146,
        col_offset=117, end_lineno=146, end_col_offset=123), iter=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=146, col_offset=127, end_lineno=146, end_col_offset=134),
        attr=''targets'', ctx=Load(), lineno=146, col_offset=127, end_lineno=146,
        end_col_offset=142), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=146,
        col_offset=146, end_lineno=146, end_col_offset=156), args=[Name(id=''target'',
        ctx=Load(), lineno=146, col_offset=157, end_lineno=146, end_col_offset=163),
        Attribute(value=Name(id=''ast'', ctx=Load(), lineno=146, col_offset=165, end_lineno=146,
        end_col_offset=168), attr=''Attribute'', ctx=Load(), lineno=146, col_offset=165,
        end_lineno=146, end_col_offset=178)], keywords=[], lineno=146, col_offset=146,
        end_lineno=146, end_col_offset=179)], is_async=0)], lineno=146, col_offset=40,
        end_lineno=146, end_col_offset=180), ListComp(elt=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=147, col_offset=38, end_lineno=147, end_col_offset=45),
        attr=''name'', ctx=Load(), lineno=147, col_offset=38, end_lineno=147, end_col_offset=50),
        generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=147,
        col_offset=55, end_lineno=147, end_col_offset=62), iter=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=147, col_offset=66, end_lineno=147, end_col_offset=70),
        attr=''body'', ctx=Load(), lineno=147, col_offset=66, end_lineno=147, end_col_offset=75),
        ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load(),
        lineno=147, col_offset=79, end_lineno=147, end_col_offset=89), args=[Name(id=''subnode'',
        ctx=Load(), lineno=147, col_offset=90, end_lineno=147, end_col_offset=97),
        Attribute(value=Name(id=''ast'', ctx=Load(), lineno=147, col_offset=99, end_lineno=147,
        end_col_offset=102), attr=''FunctionDef'', ctx=Load(), lineno=147, col_offset=99,
        end_lineno=147, end_col_offset=114)], keywords=[], lineno=147, col_offset=79,
        end_lineno=147, end_col_offset=115), Compare(left=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=147, col_offset=120, end_lineno=147, end_col_offset=127),
        attr=''name'', ctx=Load(), lineno=147, col_offset=120, end_lineno=147, end_col_offset=132),
        ops=[NotEq()], comparators=[Constant(value=''__init__'', lineno=147, col_offset=136,
        end_lineno=147, end_col_offset=146)], lineno=147, col_offset=120, end_lineno=147,
        end_col_offset=146)], lineno=147, col_offset=79, end_lineno=147, end_col_offset=146)],
        is_async=0)], lineno=147, col_offset=37, end_lineno=147, end_col_offset=147),
        IfExp(test=Attribute(value=Name(id=''node'', ctx=Load(), lineno=148, col_offset=87,
        end_lineno=148, end_col_offset=91), attr=''bases'', ctx=Load(), lineno=148,
        col_offset=87, end_lineno=148, end_col_offset=97), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=148, col_offset=42, end_lineno=148, end_col_offset=45),
        attr=''unparse'', ctx=Load(), lineno=148, col_offset=42, end_lineno=148, end_col_offset=53),
        args=[Name(id=''base'', ctx=Load(), lineno=148, col_offset=54, end_lineno=148,
        end_col_offset=58)], keywords=[], lineno=148, col_offset=42, end_lineno=148,
        end_col_offset=59), generators=[comprehension(target=Name(id=''base'', ctx=Store(),
        lineno=148, col_offset=64, end_lineno=148, end_col_offset=68), iter=Attribute(value=Name(id=''node'',
        ctx=Load(), lineno=148, col_offset=72, end_lineno=148, end_col_offset=76),
        attr=''bases'', ctx=Load(), lineno=148, col_offset=72, end_lineno=148, end_col_offset=82),
        ifs=[], is_async=0)], lineno=148, col_offset=41, end_lineno=148, end_col_offset=83),
        orelse=List(elts=[], ctx=Load(), lineno=148, col_offset=103, end_lineno=148,
        end_col_offset=105), lineno=148, col_offset=41, end_lineno=148, end_col_offset=105),
        ListComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=149,
        col_offset=45, end_lineno=149, end_col_offset=52), attr=''name'', ctx=Load(),
        lineno=149, col_offset=45, end_lineno=149, end_col_offset=57), generators=[comprehension(target=Name(id=''subnode'',
        ctx=Store(), lineno=149, col_offset=62, end_lineno=149, end_col_offset=69),
        iter=Attribute(value=Name(id=''node'', ctx=Load(), lineno=149, col_offset=73,
        end_lineno=149, end_col_offset=77), attr=''body'', ctx=Load(), lineno=149,
        col_offset=73, end_lineno=149, end_col_offset=82), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=149, col_offset=86, end_lineno=149, end_col_offset=96),
        args=[Name(id=''subnode'', ctx=Load(), lineno=149, col_offset=97, end_lineno=149,
        end_col_offset=104), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=149,
        col_offset=106, end_lineno=149, end_col_offset=109), attr=''FunctionDef'',
        ctx=Load(), lineno=149, col_offset=106, end_lineno=149, end_col_offset=121)],
        keywords=[], lineno=149, col_offset=86, end_lineno=149, end_col_offset=122),
        Compare(left=Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=149,
        col_offset=127, end_lineno=149, end_col_offset=134), attr=''name'', ctx=Load(),
        lineno=149, col_offset=127, end_lineno=149, end_col_offset=139), ops=[NotEq()],
        comparators=[Constant(value=''__init__'', lineno=149, col_offset=143, end_lineno=149,
        end_col_offset=153)], lineno=149, col_offset=127, end_lineno=149, end_col_offset=153),
        Call(func=Name(id=''any'', ctx=Load(), lineno=149, col_offset=158, end_lineno=149,
        end_col_offset=161), args=[GeneratorExp(elt=BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
        ctx=Load(), lineno=149, col_offset=162, end_lineno=149, end_col_offset=172),
        args=[Name(id=''decorator'', ctx=Load(), lineno=149, col_offset=173, end_lineno=149,
        end_col_offset=182), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=149,
        col_offset=184, end_lineno=149, end_col_offset=187), attr=''Name'', ctx=Load(),
        lineno=149, col_offset=184, end_lineno=149, end_col_offset=192)], keywords=[],
        lineno=149, col_offset=162, end_lineno=149, end_col_offset=193), Compare(left=Attribute(value=Name(id=''decorator'',
        ctx=Load(), lineno=149, col_offset=198, end_lineno=149, end_col_offset=207),
        attr=''id'', ctx=Load(), lineno=149, col_offset=198, end_lineno=149, end_col_offset=210),
        ops=[Eq()], comparators=[Constant(value=''staticmethod'', lineno=149, col_offset=214,
        end_lineno=149, end_col_offset=228)], lineno=149, col_offset=198, end_lineno=149,
        end_col_offset=228)], lineno=149, col_offset=162, end_lineno=149, end_col_offset=228),
        generators=[comprehension(target=Name(id=''decorator'', ctx=Store(), lineno=149,
        col_offset=233, end_lineno=149, end_col_offset=242), iter=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=149, col_offset=246, end_lineno=149, end_col_offset=253),
        attr=''decorator_list'', ctx=Load(), lineno=149, col_offset=246, end_lineno=149,
        end_col_offset=268), ifs=[], is_async=0)], lineno=149, col_offset=161, end_lineno=149,
        end_col_offset=269)], keywords=[], lineno=149, col_offset=158, end_lineno=149,
        end_col_offset=269)], lineno=149, col_offset=86, end_lineno=149, end_col_offset=269)],
        is_async=0)], lineno=149, col_offset=44, end_lineno=149, end_col_offset=270)],
        lineno=145, col_offset=31, end_lineno=150, end_col_offset=21)], keywords=[],
        lineno=145, col_offset=16, end_lineno=150, end_col_offset=22), lineno=145,
        col_offset=16, end_lineno=150, end_col_offset=22)], orelse=[], lineno=144,
        col_offset=12, end_lineno=150, end_col_offset=22)], orelse=[], lineno=136,
        col_offset=8, end_lineno=150, end_col_offset=22), Return(value=Name(id=''details'',
        ctx=Load(), lineno=151, col_offset=15, end_lineno=151, end_col_offset=22),
        lineno=151, col_offset=8, end_lineno=151, end_col_offset=22)], decorator_list=[],
        returns=Subscript(value=Name(id=''Dict'', ctx=Load(), lineno=110, col_offset=64,
        end_lineno=110, end_col_offset=68), slice=Tuple(elts=[Name(id=''str'', ctx=Load(),
        lineno=110, col_offset=69, end_lineno=110, end_col_offset=72), Subscript(value=Name(id=''Union'',
        ctx=Load(), lineno=110, col_offset=74, end_lineno=110, end_col_offset=79),
        slice=Tuple(elts=[Name(id=''str'', ctx=Load(), lineno=110, col_offset=80,
        end_lineno=110, end_col_offset=83), Subscript(value=Name(id=''List'', ctx=Load(),
        lineno=110, col_offset=85, end_lineno=110, end_col_offset=89), slice=Name(id=''str'',
        ctx=Load(), lineno=110, col_offset=90, end_lineno=110, end_col_offset=93),
        ctx=Load(), lineno=110, col_offset=85, end_lineno=110, end_col_offset=94)],
        ctx=Load(), lineno=110, col_offset=80, end_lineno=110, end_col_offset=94),
        ctx=Load(), lineno=110, col_offset=74, end_lineno=110, end_col_offset=95)],
        ctx=Load(), lineno=110, col_offset=69, end_lineno=110, end_col_offset=95),
        ctx=Load(), lineno=110, col_offset=64, end_lineno=110, end_col_offset=96),
        lineno=110, col_offset=4, end_lineno=151, end_col_offset=22)'
      method_docstring: "Extract details about a node.\nArgs:\n    node: ast.AST:\
        \ The node to extract details from.\n    node_type: str: The type of node.\n\
        Returns:\n    Dict[str, Union[str, List[str]]]: The details extracted from\
        \ the node."
      method_inputs:
      - self
      - node
      - node_type
      method_defaults: []
      method_returns:
      - details
      method_calls:
      - list
      - ast.walk
      - get_all_calls
      - ast.unparse
      - ast.dump
      - ast.get_docstring
      - isinstance
      - call_data.keys
      - set
      - self.classes[self.current_class]['class_attributes'].extend
      - details.update
      - any
      method_call_inputs:
        list:
        - '{ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute)
          and isinstance(subnode.ctx, ast.Store)}'
        ast.walk:
        - node
        get_all_calls:
        - node
        ast.unparse:
        - base
        ast.dump:
        - node
        ast.get_docstring:
        - node
        isinstance:
        - decorator
        - ast.Name
        call_data.keys: []
        set: []
        self.classes[self.current_class]['class_attributes'].extend:
        - attributes
        details.update:
        - '{''class_attributes'': [target.attr for subnode in node.body if isinstance(subnode,
          ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],
          ''class_methods'': [subnode.name for subnode in node.body if isinstance(subnode,
          ast.FunctionDef) and subnode.name != ''__init__''], ''class_inheritance'':
          [ast.unparse(base) for base in node.bases] if node.bases else [], ''class_static_methods'':
          [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)
          and subnode.name != ''__init__'' and any((isinstance(decorator, ast.Name)
          and decorator.id == ''staticmethod'' for decorator in subnode.decorator_list))]}'
        any:
        - (isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for
          decorator in subnode.decorator_list)
      method_variables:
      - details
      - node_walk
      - call_data
      - attributes
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_analyze:
      method_name: analyze
      method_code: "def analyze(self, node: ast.AST) -> None:\n    \"\"\"\n      \
        \  Traverse the AST rooted at 'node', create a list of all nodes within the\
        \ current file, and populate 'file_info' with file details\n        Args:\n\
        \            node: ast.AST: The node to analyze.\n        Returns:\n     \
        \       None\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    self.visit(node)\n\
        \    self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node),\
        \ 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode,\
        \ ast.Import) for alias in subnode.names} | {subnode.module for subnode in\
        \ node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()),\
        \ 'file_classes': list(self.classes.keys())}\n    function_defs = [{func_name:\
        \ {'inputs': details['function_inputs'], 'calls': details['function_calls'],\
        \ 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}}\
        \ for func_name, details in self.functions.items()]\n    class_defs = []\n\
        \    for class_name, class_details in self.classes.items():\n        method_defs\
        \ = {}\n        for method_name, details in class_details.items():\n     \
        \       if method_name.startswith('class_method_'):\n                method_defs[method_name[len('class_method_'):]]\
        \ = {'inputs': details['method_inputs'], 'calls': details['method_calls'],\
        \ 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n\
        \        class_defs.append({class_name: {'method_defs': method_defs}})\n \
        \   self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'],\
        \ 'function_defs': function_defs, 'class_defs': class_defs}"
      method_ast: 'FunctionDef(name=''analyze'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
        lineno=153, col_offset=16, end_lineno=153, end_col_offset=20), arg(arg=''node'',
        annotation=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=153, col_offset=28,
        end_lineno=153, end_col_offset=31), attr=''AST'', ctx=Load(), lineno=153,
        col_offset=28, end_lineno=153, end_col_offset=35), lineno=153, col_offset=22,
        end_lineno=153, end_col_offset=35)], kwonlyargs=[], kw_defaults=[], defaults=[]),
        body=[Expr(value=Constant(value="\n        Traverse the AST rooted at ''node'',
        create a list of all nodes within the current file, and populate ''file_info''
        with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        ",
        lineno=154, col_offset=8, end_lineno=160, end_col_offset=11), lineno=154,
        col_offset=8, end_lineno=160, end_col_offset=11), Assign(targets=[Name(id=''node_walk'',
        ctx=Store(), lineno=161, col_offset=8, end_lineno=161, end_col_offset=17)],
        value=Call(func=Name(id=''list'', ctx=Load(), lineno=161, col_offset=20, end_lineno=161,
        end_col_offset=24), args=[Call(func=Attribute(value=Name(id=''ast'', ctx=Load(),
        lineno=161, col_offset=25, end_lineno=161, end_col_offset=28), attr=''walk'',
        ctx=Load(), lineno=161, col_offset=25, end_lineno=161, end_col_offset=33),
        args=[Name(id=''node'', ctx=Load(), lineno=161, col_offset=34, end_lineno=161,
        end_col_offset=38)], keywords=[], lineno=161, col_offset=25, end_lineno=161,
        end_col_offset=39)], keywords=[], lineno=161, col_offset=20, end_lineno=161,
        end_col_offset=40), lineno=161, col_offset=8, end_lineno=161, end_col_offset=40),
        Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=162,
        col_offset=8, end_lineno=162, end_col_offset=12), attr=''visit'', ctx=Load(),
        lineno=162, col_offset=8, end_lineno=162, end_col_offset=18), args=[Name(id=''node'',
        ctx=Load(), lineno=162, col_offset=19, end_lineno=162, end_col_offset=23)],
        keywords=[], lineno=162, col_offset=8, end_lineno=162, end_col_offset=24),
        lineno=162, col_offset=8, end_lineno=162, end_col_offset=24), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=163, col_offset=8, end_lineno=163, end_col_offset=12),
        attr=''file_info'', ctx=Store(), lineno=163, col_offset=8, end_lineno=163,
        end_col_offset=22)], value=Dict(keys=[Constant(value=''file_code'', lineno=164,
        col_offset=12, end_lineno=164, end_col_offset=23), Constant(value=''file_ast'',
        lineno=165, col_offset=12, end_lineno=165, end_col_offset=22), Constant(value=''file_dependencies'',
        lineno=166, col_offset=12, end_lineno=166, end_col_offset=31), Constant(value=''file_functions'',
        lineno=167, col_offset=12, end_lineno=167, end_col_offset=28), Constant(value=''file_classes'',
        lineno=168, col_offset=12, end_lineno=168, end_col_offset=26)], values=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=164, col_offset=25, end_lineno=164, end_col_offset=29),
        attr=''code'', ctx=Load(), lineno=164, col_offset=25, end_lineno=164, end_col_offset=34),
        Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=165, col_offset=25,
        end_lineno=165, end_col_offset=28), attr=''dump'', ctx=Load(), lineno=165,
        col_offset=25, end_lineno=165, end_col_offset=33), args=[Name(id=''node'',
        ctx=Load(), lineno=165, col_offset=34, end_lineno=165, end_col_offset=38)],
        keywords=[], lineno=165, col_offset=25, end_lineno=165, end_col_offset=39),
        Call(func=Name(id=''list'', ctx=Load(), lineno=166, col_offset=33, end_lineno=166,
        end_col_offset=37), args=[BinOp(left=SetComp(elt=Attribute(value=Name(id=''alias'',
        ctx=Load(), lineno=166, col_offset=39, end_lineno=166, end_col_offset=44),
        attr=''name'', ctx=Load(), lineno=166, col_offset=39, end_lineno=166, end_col_offset=49),
        generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=166,
        col_offset=54, end_lineno=166, end_col_offset=61), iter=Name(id=''node_walk'',
        ctx=Load(), lineno=166, col_offset=65, end_lineno=166, end_col_offset=74),
        ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=166, col_offset=78,
        end_lineno=166, end_col_offset=88), args=[Name(id=''subnode'', ctx=Load(),
        lineno=166, col_offset=89, end_lineno=166, end_col_offset=96), Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=166, col_offset=98, end_lineno=166, end_col_offset=101),
        attr=''Import'', ctx=Load(), lineno=166, col_offset=98, end_lineno=166, end_col_offset=108)],
        keywords=[], lineno=166, col_offset=78, end_lineno=166, end_col_offset=109)],
        is_async=0), comprehension(target=Name(id=''alias'', ctx=Store(), lineno=166,
        col_offset=114, end_lineno=166, end_col_offset=119), iter=Attribute(value=Name(id=''subnode'',
        ctx=Load(), lineno=166, col_offset=123, end_lineno=166, end_col_offset=130),
        attr=''names'', ctx=Load(), lineno=166, col_offset=123, end_lineno=166, end_col_offset=136),
        ifs=[], is_async=0)], lineno=166, col_offset=38, end_lineno=166, end_col_offset=137),
        op=BitOr(), right=SetComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(),
        lineno=166, col_offset=141, end_lineno=166, end_col_offset=148), attr=''module'',
        ctx=Load(), lineno=166, col_offset=141, end_lineno=166, end_col_offset=155),
        generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=166,
        col_offset=160, end_lineno=166, end_col_offset=167), iter=Name(id=''node_walk'',
        ctx=Load(), lineno=166, col_offset=171, end_lineno=166, end_col_offset=180),
        ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=166, col_offset=184,
        end_lineno=166, end_col_offset=194), args=[Name(id=''subnode'', ctx=Load(),
        lineno=166, col_offset=195, end_lineno=166, end_col_offset=202), Attribute(value=Name(id=''ast'',
        ctx=Load(), lineno=166, col_offset=204, end_lineno=166, end_col_offset=207),
        attr=''ImportFrom'', ctx=Load(), lineno=166, col_offset=204, end_lineno=166,
        end_col_offset=218)], keywords=[], lineno=166, col_offset=184, end_lineno=166,
        end_col_offset=219)], is_async=0)], lineno=166, col_offset=140, end_lineno=166,
        end_col_offset=220), lineno=166, col_offset=38, end_lineno=166, end_col_offset=220)],
        keywords=[], lineno=166, col_offset=33, end_lineno=166, end_col_offset=221),
        Call(func=Name(id=''list'', ctx=Load(), lineno=167, col_offset=30, end_lineno=167,
        end_col_offset=34), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=167, col_offset=35, end_lineno=167, end_col_offset=39),
        attr=''functions'', ctx=Load(), lineno=167, col_offset=35, end_lineno=167,
        end_col_offset=49), attr=''keys'', ctx=Load(), lineno=167, col_offset=35,
        end_lineno=167, end_col_offset=54), args=[], keywords=[], lineno=167, col_offset=35,
        end_lineno=167, end_col_offset=56)], keywords=[], lineno=167, col_offset=30,
        end_lineno=167, end_col_offset=57), Call(func=Name(id=''list'', ctx=Load(),
        lineno=168, col_offset=28, end_lineno=168, end_col_offset=32), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=168, col_offset=33, end_lineno=168, end_col_offset=37),
        attr=''classes'', ctx=Load(), lineno=168, col_offset=33, end_lineno=168, end_col_offset=45),
        attr=''keys'', ctx=Load(), lineno=168, col_offset=33, end_lineno=168, end_col_offset=50),
        args=[], keywords=[], lineno=168, col_offset=33, end_lineno=168, end_col_offset=52)],
        keywords=[], lineno=168, col_offset=28, end_lineno=168, end_col_offset=53)],
        lineno=163, col_offset=25, end_lineno=169, end_col_offset=9), lineno=163,
        col_offset=8, end_lineno=169, end_col_offset=9), Assign(targets=[Name(id=''function_defs'',
        ctx=Store(), lineno=172, col_offset=8, end_lineno=172, end_col_offset=21)],
        value=ListComp(elt=Dict(keys=[Name(id=''func_name'', ctx=Load(), lineno=172,
        col_offset=26, end_lineno=172, end_col_offset=35)], values=[Dict(keys=[Constant(value=''inputs'',
        lineno=172, col_offset=38, end_lineno=172, end_col_offset=46), Constant(value=''calls'',
        lineno=172, col_offset=76, end_lineno=172, end_col_offset=83), Constant(value=''call_inputs'',
        lineno=172, col_offset=112, end_lineno=172, end_col_offset=125), Constant(value=''returns'',
        lineno=172, col_offset=160, end_lineno=172, end_col_offset=169)], values=[Subscript(value=Name(id=''details'',
        ctx=Load(), lineno=172, col_offset=48, end_lineno=172, end_col_offset=55),
        slice=Constant(value=''function_inputs'', lineno=172, col_offset=56, end_lineno=172,
        end_col_offset=73), ctx=Load(), lineno=172, col_offset=48, end_lineno=172,
        end_col_offset=74), Subscript(value=Name(id=''details'', ctx=Load(), lineno=172,
        col_offset=85, end_lineno=172, end_col_offset=92), slice=Constant(value=''function_calls'',
        lineno=172, col_offset=93, end_lineno=172, end_col_offset=109), ctx=Load(),
        lineno=172, col_offset=85, end_lineno=172, end_col_offset=110), Subscript(value=Name(id=''details'',
        ctx=Load(), lineno=172, col_offset=127, end_lineno=172, end_col_offset=134),
        slice=Constant(value=''function_call_inputs'', lineno=172, col_offset=135,
        end_lineno=172, end_col_offset=157), ctx=Load(), lineno=172, col_offset=127,
        end_lineno=172, end_col_offset=158), Subscript(value=Name(id=''details'',
        ctx=Load(), lineno=172, col_offset=171, end_lineno=172, end_col_offset=178),
        slice=Constant(value=''function_returns'', lineno=172, col_offset=179, end_lineno=172,
        end_col_offset=197), ctx=Load(), lineno=172, col_offset=171, end_lineno=172,
        end_col_offset=198)], lineno=172, col_offset=37, end_lineno=172, end_col_offset=199)],
        lineno=172, col_offset=25, end_lineno=172, end_col_offset=200), generators=[comprehension(target=Tuple(elts=[Name(id=''func_name'',
        ctx=Store(), lineno=172, col_offset=205, end_lineno=172, end_col_offset=214),
        Name(id=''details'', ctx=Store(), lineno=172, col_offset=216, end_lineno=172,
        end_col_offset=223)], ctx=Store(), lineno=172, col_offset=205, end_lineno=172,
        end_col_offset=223), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=172, col_offset=227, end_lineno=172, end_col_offset=231),
        attr=''functions'', ctx=Load(), lineno=172, col_offset=227, end_lineno=172,
        end_col_offset=241), attr=''items'', ctx=Load(), lineno=172, col_offset=227,
        end_lineno=172, end_col_offset=247), args=[], keywords=[], lineno=172, col_offset=227,
        end_lineno=172, end_col_offset=249), ifs=[], is_async=0)], lineno=172, col_offset=24,
        end_lineno=172, end_col_offset=250), lineno=172, col_offset=8, end_lineno=172,
        end_col_offset=250), Assign(targets=[Name(id=''class_defs'', ctx=Store(),
        lineno=173, col_offset=8, end_lineno=173, end_col_offset=18)], value=List(elts=[],
        ctx=Load(), lineno=173, col_offset=21, end_lineno=173, end_col_offset=23),
        lineno=173, col_offset=8, end_lineno=173, end_col_offset=23), For(target=Tuple(elts=[Name(id=''class_name'',
        ctx=Store(), lineno=174, col_offset=12, end_lineno=174, end_col_offset=22),
        Name(id=''class_details'', ctx=Store(), lineno=174, col_offset=24, end_lineno=174,
        end_col_offset=37)], ctx=Store(), lineno=174, col_offset=12, end_lineno=174,
        end_col_offset=37), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=174, col_offset=41, end_lineno=174, end_col_offset=45),
        attr=''classes'', ctx=Load(), lineno=174, col_offset=41, end_lineno=174, end_col_offset=53),
        attr=''items'', ctx=Load(), lineno=174, col_offset=41, end_lineno=174, end_col_offset=59),
        args=[], keywords=[], lineno=174, col_offset=41, end_lineno=174, end_col_offset=61),
        body=[Assign(targets=[Name(id=''method_defs'', ctx=Store(), lineno=175, col_offset=12,
        end_lineno=175, end_col_offset=23)], value=Dict(keys=[], values=[], lineno=175,
        col_offset=26, end_lineno=175, end_col_offset=28), lineno=175, col_offset=12,
        end_lineno=175, end_col_offset=28), For(target=Tuple(elts=[Name(id=''method_name'',
        ctx=Store(), lineno=176, col_offset=16, end_lineno=176, end_col_offset=27),
        Name(id=''details'', ctx=Store(), lineno=176, col_offset=29, end_lineno=176,
        end_col_offset=36)], ctx=Store(), lineno=176, col_offset=16, end_lineno=176,
        end_col_offset=36), iter=Call(func=Attribute(value=Name(id=''class_details'',
        ctx=Load(), lineno=176, col_offset=40, end_lineno=176, end_col_offset=53),
        attr=''items'', ctx=Load(), lineno=176, col_offset=40, end_lineno=176, end_col_offset=59),
        args=[], keywords=[], lineno=176, col_offset=40, end_lineno=176, end_col_offset=61),
        body=[If(test=Call(func=Attribute(value=Name(id=''method_name'', ctx=Load(),
        lineno=177, col_offset=19, end_lineno=177, end_col_offset=30), attr=''startswith'',
        ctx=Load(), lineno=177, col_offset=19, end_lineno=177, end_col_offset=41),
        args=[Constant(value=''class_method_'', lineno=177, col_offset=42, end_lineno=177,
        end_col_offset=57)], keywords=[], lineno=177, col_offset=19, end_lineno=177,
        end_col_offset=58), body=[Assign(targets=[Subscript(value=Name(id=''method_defs'',
        ctx=Load(), lineno=178, col_offset=20, end_lineno=178, end_col_offset=31),
        slice=Subscript(value=Name(id=''method_name'', ctx=Load(), lineno=178, col_offset=32,
        end_lineno=178, end_col_offset=43), slice=Slice(lower=Call(func=Name(id=''len'',
        ctx=Load(), lineno=178, col_offset=44, end_lineno=178, end_col_offset=47),
        args=[Constant(value=''class_method_'', lineno=178, col_offset=48, end_lineno=178,
        end_col_offset=63)], keywords=[], lineno=178, col_offset=44, end_lineno=178,
        end_col_offset=64), lineno=178, col_offset=44, end_lineno=178, end_col_offset=65),
        ctx=Load(), lineno=178, col_offset=32, end_lineno=178, end_col_offset=66),
        ctx=Store(), lineno=178, col_offset=20, end_lineno=178, end_col_offset=67)],
        value=Dict(keys=[Constant(value=''inputs'', lineno=178, col_offset=71, end_lineno=178,
        end_col_offset=79), Constant(value=''calls'', lineno=178, col_offset=107,
        end_lineno=178, end_col_offset=114), Constant(value=''call_inputs'', lineno=178,
        col_offset=141, end_lineno=178, end_col_offset=154), Constant(value=''returns'',
        lineno=178, col_offset=187, end_lineno=178, end_col_offset=196)], values=[Subscript(value=Name(id=''details'',
        ctx=Load(), lineno=178, col_offset=81, end_lineno=178, end_col_offset=88),
        slice=Constant(value=''method_inputs'', lineno=178, col_offset=89, end_lineno=178,
        end_col_offset=104), ctx=Load(), lineno=178, col_offset=81, end_lineno=178,
        end_col_offset=105), Subscript(value=Name(id=''details'', ctx=Load(), lineno=178,
        col_offset=116, end_lineno=178, end_col_offset=123), slice=Constant(value=''method_calls'',
        lineno=178, col_offset=124, end_lineno=178, end_col_offset=138), ctx=Load(),
        lineno=178, col_offset=116, end_lineno=178, end_col_offset=139), Subscript(value=Name(id=''details'',
        ctx=Load(), lineno=178, col_offset=156, end_lineno=178, end_col_offset=163),
        slice=Constant(value=''method_call_inputs'', lineno=178, col_offset=164, end_lineno=178,
        end_col_offset=184), ctx=Load(), lineno=178, col_offset=156, end_lineno=178,
        end_col_offset=185), Subscript(value=Name(id=''details'', ctx=Load(), lineno=178,
        col_offset=198, end_lineno=178, end_col_offset=205), slice=Constant(value=''method_returns'',
        lineno=178, col_offset=206, end_lineno=178, end_col_offset=222), ctx=Load(),
        lineno=178, col_offset=198, end_lineno=178, end_col_offset=223)], lineno=178,
        col_offset=70, end_lineno=178, end_col_offset=224), lineno=178, col_offset=20,
        end_lineno=178, end_col_offset=224)], orelse=[], lineno=177, col_offset=16,
        end_lineno=178, end_col_offset=224)], orelse=[], lineno=176, col_offset=12,
        end_lineno=178, end_col_offset=224), Expr(value=Call(func=Attribute(value=Name(id=''class_defs'',
        ctx=Load(), lineno=179, col_offset=12, end_lineno=179, end_col_offset=22),
        attr=''append'', ctx=Load(), lineno=179, col_offset=12, end_lineno=179, end_col_offset=29),
        args=[Dict(keys=[Name(id=''class_name'', ctx=Load(), lineno=179, col_offset=31,
        end_lineno=179, end_col_offset=41)], values=[Dict(keys=[Constant(value=''method_defs'',
        lineno=179, col_offset=44, end_lineno=179, end_col_offset=57)], values=[Name(id=''method_defs'',
        ctx=Load(), lineno=179, col_offset=59, end_lineno=179, end_col_offset=70)],
        lineno=179, col_offset=43, end_lineno=179, end_col_offset=71)], lineno=179,
        col_offset=30, end_lineno=179, end_col_offset=72)], keywords=[], lineno=179,
        col_offset=12, end_lineno=179, end_col_offset=73), lineno=179, col_offset=12,
        end_lineno=179, end_col_offset=73)], orelse=[], lineno=174, col_offset=8,
        end_lineno=179, end_col_offset=73), Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=180, col_offset=8, end_lineno=180, end_col_offset=12),
        attr=''file_info'', ctx=Load(), lineno=180, col_offset=8, end_lineno=180,
        end_col_offset=22), slice=Constant(value=''file_summary'', lineno=180, col_offset=23,
        end_lineno=180, end_col_offset=37), ctx=Store(), lineno=180, col_offset=8,
        end_lineno=180, end_col_offset=38)], value=Dict(keys=[Constant(value=''dependencies'',
        lineno=180, col_offset=43, end_lineno=180, end_col_offset=57), Constant(value=''function_defs'',
        lineno=180, col_offset=96, end_lineno=180, end_col_offset=111), Constant(value=''class_defs'',
        lineno=180, col_offset=129, end_lineno=180, end_col_offset=141)], values=[Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=180, col_offset=59, end_lineno=180, end_col_offset=63),
        attr=''file_info'', ctx=Load(), lineno=180, col_offset=59, end_lineno=180,
        end_col_offset=73), slice=Constant(value=''file_dependencies'', lineno=180,
        col_offset=74, end_lineno=180, end_col_offset=93), ctx=Load(), lineno=180,
        col_offset=59, end_lineno=180, end_col_offset=94), Name(id=''function_defs'',
        ctx=Load(), lineno=180, col_offset=114, end_lineno=180, end_col_offset=127),
        Name(id=''class_defs'', ctx=Load(), lineno=180, col_offset=144, end_lineno=180,
        end_col_offset=154)], lineno=180, col_offset=41, end_lineno=180, end_col_offset=155),
        lineno=180, col_offset=8, end_lineno=180, end_col_offset=155)], decorator_list=[],
        returns=Constant(value=None, lineno=153, col_offset=40, end_lineno=153, end_col_offset=44),
        lineno=153, col_offset=4, end_lineno=180, end_col_offset=155)'
      method_docstring: "Traverse the AST rooted at 'node', create a list of all nodes\
        \ within the current file, and populate 'file_info' with file details\nArgs:\n\
        \    node: ast.AST: The node to analyze.\nReturns:\n    None"
      method_inputs:
      - self
      - node
      method_defaults: []
      method_returns: []
      method_calls:
      - list
      - ast.walk
      - self.visit
      - ast.dump
      - isinstance
      - self.functions.keys
      - self.classes.keys
      - self.functions.items
      - self.classes.items
      - class_details.items
      - method_name.startswith
      - len
      - class_defs.append
      method_call_inputs:
        list:
        - self.classes.keys()
        ast.walk:
        - node
        self.visit:
        - node
        ast.dump:
        - node
        isinstance:
        - subnode
        - ast.ImportFrom
        self.functions.keys: []
        self.classes.keys: []
        self.functions.items: []
        self.classes.items: []
        class_details.items: []
        method_name.startswith:
        - '''class_method_'''
        len:
        - '''class_method_'''
        class_defs.append:
        - '{class_name: {''method_defs'': method_defs}}'
      method_variables:
      - method_defs
      - node_walk
      - class_defs
      - function_defs
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.file_info
