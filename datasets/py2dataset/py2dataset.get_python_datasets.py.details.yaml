file_info:
  file_code: "\"\"\"\nGenerates JSON format question-answer pairs and instructions\
    \ for a Python file\nRequirements:\n[req01] The `DatasetGenerator` class shall:\n\
    \        a. Accept a Python file path (str), file details (Dict), base name (str),\
    \ list of questions (List[Dict]), use_llm flag (bool), language model (object),\
    \ and prompt (str) as input during instantiation.\n        b. Initialize and store\
    \ the Python file path, file details, base name, list of questions, use_llm flag,\
    \ language model, and prompt as class attributes.\n        c. Provide the `clean_and_get_unique_elements`\
    \ method to clean an input string (str) and return a string of unique elements.\n\
    \        d. Provide the `add_to_list` method to add a response (str) to a list\
    \ (List[Dict]).\n        e. Provide the `get_response_from_llm` method to retrieve\
    \ a response from the language model.\n        f. Provide the `process_question`\
    \ method to process a question and add the generated response to the instruct_list.\n\
    \        g. Provide the `process_question_type` method to process questions related\
    \ to a file, function, class, or method.\n        h. Provide the `generate` method\
    \ to generate responses for all questions in the list and return the instruct_list.\n\
    [req02] The `get_python_datasets` function shall:\n        a. Accept a Python\
    \ file path (str), file details (Dict), base name (str), list of questions (List[Dict]),\
    \ use_llm flag (bool), language model (object), and prompt (str) as input.\n \
    \       b. Create an instance of the `DatasetGenerator` class using the provided\
    \ input.\n        c. Generate question-answer pairs and instructions using the\
    \ `generate` method of the `DatasetGenerator` instance.\n        d. Return the\
    \ generated `instruct_list`.\n\"\"\"\nimport logging\nimport re\nfrom typing import\
    \ Dict, List, Tuple\n\n# Set up logging\nlogging.basicConfig(\n    format='%(asctime)s\
    \ - %(levelname)s - %(message)s', \n    level=logging.INFO\n)\nlogger = logging.getLogger(__name__)\n\
    \nclass DatasetGenerator:\n    \"\"\"\n    Generate JSON formatted dictionary\
    \ outputs for a Python file.\n    Attributes:\n        file_path (str): The path\
    \ to the Python file.\n        file_details (Dict[str, Any]): Details of the Python\
    \ file.\n        base_name (str): The base name of the Python file.\n        questions\
    \ (List[Dict[str, str]]): Questions for generating responses.\n        instruct_list\
    \ (List[Dict[str, str]]): Storage for generated instructions.\n        question_mapping\
    \ (Dict[str, str]): Mapping of question types to keys in file details.\n     \
    \   use_llm (bool): Flag indicating if a language model should be used.\n    \
    \    llm (object): The language model for generating responses.\n        prompt\
    \ (str): The prompt format for querying the language model.\n    Methods:\n  \
    \      clean_and_get_unique_elements(input_str: str) -> str: \n            Clean\
    \ and return unique elements from an input string.\n        add_to_list(list_to_update:\
    \ List[Dict], query: str, response: str, additional_field=None) -> List[Dict]:\
    \ \n            Add response to the instruct list.\n        get_response_from_llm(query:\
    \ str, context: str) -> str:\n            Get language model response to query\
    \ for given context.\n        process_question(question_type: str, question_id:\
    \ str, query: str, context: str, info: Dict) -> None:\n            Process question\
    \ and add generated response to the instruct_list.\n        process_question_type(question_type:\
    \ str, question_id: str, question_text: str) -> None:\n            Process question\
    \ related to file, function, class, or method.\n        generate() -> Tuple[List[Dict],\
    \ List[Dict]]:\n            Generate responses for all the questions and return\
    \ the instruct_list.\n    \"\"\"\n    def __init__(self, file_path: str, file_details:\
    \ Dict, base_name: str, questions: List[Dict], llm: object, prompt: str) -> None:\n\
    \        self.file_path = file_path\n        self.file_details = file_details\n\
    \        self.base_name = base_name\n        self.questions = questions\n    \
    \    self.llm = llm\n        self.prompt = prompt\n        if self.llm is None:\n\
    \            self.use_llm = False\n        else:\n            self.use_llm = True\n\
    \        self.instruct_list = []\n        self.question_mapping = {\n        \
    \    'file': 'file',\n            'function': 'functions',\n            'class':\
    \ 'classes',\n            'method': 'classes'\n        }\n\n    @staticmethod\n\
    \    def clean_and_get_unique_elements(input_str: str) -> str:\n        \"\"\"\
    \n        Clean input string and return string of unique elements.\n        Args:\n\
    \            input_str (str): The input string to be cleaned.\n        Returns:\n\
    \            str: The cleaned string.\n        \"\"\"\n        cleaned_elements\
    \ = set(re.sub(r'[^\\w\\-_>\\s:/.]', '', element.strip())\n                  \
    \             for element in re.sub(r'\\s+', ' ', input_str).split(','))\n   \
    \     return ', '.join(cleaned_elements)\n\n    @staticmethod\n    def add_to_list(list_to_update:\
    \ List[Dict], query: str, response: str, additional_field=None) -> List[Dict]:\n\
    \        \"\"\"\n        Adds response to instruct list.\n        Args:\n    \
    \        list_to_update (List[Dict]): The list to be updated.\n            query\
    \ (str): The query to be added.\n            response (str): The response to be\
    \ added.\n            additional_field (str): The additional field to be added.\n\
    \        Returns:\n            List[Dict]: The updated list.\n        \"\"\"\n\
    \        if response and response.strip() and response != 'None':\n          \
    \  list_to_update.append(\n                {'instruction': query, 'input' : additional_field,\
    \ 'output': response}\n                if additional_field else\n            \
    \    {'question': query, 'answer': response}\n            )\n        return list_to_update\n\
    \n    def get_response_from_llm(self, query: str, context: str) -> str:\n    \
    \    \"\"\"\n        Get language model response to query for given context.\n\
    \        Args:\n            query (str): The query to be used for generating the\
    \ response.\n            context (str): The context to be used for generating\
    \ the response.\n        Returns:\n            str: The generated response.\n\
    \        \"\"\"\n        # Update the context with the selected instructions from\
    \ the instruct_list\n        excluded_instructions = [\"What is the call code\
    \ graph\", \"What is the docstring\"]\n        filtered_instruct_list = [item\
    \ for item in self.instruct_list if not any(item['instruction'].startswith(prefix)\
    \ for prefix in excluded_instructions)]\n        past_instructs = \"\\n\".join([f\"\
    Instruction: {item['instruction']} \\nOutput: {item['output']}\" for item in filtered_instruct_list])\n\
    \        full_context = context + \"\\n\" + \"Here's some detail about this code:\"\
    \ + \"\\n\" + past_instructs\n\n        try:\n            prompt = self.prompt.format(context=full_context,\
    \ query=query)\n            logging.info(f'Query: {query}')\n            response\
    \ = self.llm(prompt)\n            logging.info(f'Response: {response}')\n    \
    \    except:\n            logger.error('Failed to generate model response')\n\
    \        return response\n\n    def process_question(self, question_type: str,\
    \ question_id: str, query: str, context: str, info: Dict) -> None:\n        \"\
    \"\"\n        Process question and add the generated response to the instruct_list.\n\
    \        Args:\n            question_type (str): The type of question to be processed.\n\
    \            question_id (str): The ID of the question to be processed.\n    \
    \        query (str): The query to be processed.\n            context (str): The\
    \ context to be used for generating the response.\n            info (Dict): The\
    \ information of the Python file.\n        Returns:\n            None\n      \
    \  \"\"\"\n        if question_id.endswith('code_graph'):\n            response\
    \ = info.get(question_id, {})\n        else:\n            response = self.get_response_from_llm(query,\
    \ context) if self.use_llm and question_id.endswith('purpose') else self.clean_and_get_unique_elements(str(info.get(question_id,\
    \ '')))\n        if response and response != 'None':\n            response_str\
    \ = str(response).strip()\n            if response_str:\n                self.instruct_list.append({'instruction':\
    \ query, 'input': context, 'output': response_str})\n\n    @staticmethod\n   \
    \ def get_string_from_info(info, item_type):\n        if info[item_type]:\n  \
    \          items = [item.strip() for item in str(info[item_type]).split(',') if\
    \ item]\n            return ', '.join(items)\n        return ''\n\n    def process_question_type(self,\
    \ question_type: str, question_id: str, question_text: str) -> None:\n       \
    \ \"\"\"\n        Process questions related to a file, function, class, or method.\n\
    \        Args:\n            question_type (str): The type of question to be processed.\n\
    \            question_id (str): The ID of the question to be processed.\n    \
    \        question_text (str): The text of the question to be processed.\n    \
    \    Returns:\n            None\n        \"\"\"\n        if question_type == 'file':\n\
    \            query = question_text.format(filename=self.base_name)\n         \
    \   context = self.file_details['file_info']['file_code']\n            info =\
    \ self.file_details['file_info']\n            self.process_question(question_type,\
    \ question_id, query, context, info)\n        elif question_type == 'method':\
    \  \n            for class_name, class_info in self.file_details['classes'].items():\n\
    \                for key, method_info in class_info.items():\n               \
    \     if key.startswith('class_method_'):\n                        method_name\
    \ = key[len('class_method_'):]\n                        context = method_info['method_code']\n\
    \                        mapping = {'class_name': class_name, 'method_name': method_name}\n\
    \                        query = question_text.format(filename=self.base_name,\
    \ **mapping)\n                        self.process_question(question_type, question_id,\
    \ query, context, method_info)\n        else:  # if question_type == 'function'\
    \ or question_type == 'class'\n            for name, info in self.file_details[self.question_mapping[question_type]].items():\n\
    \                context = info[f'{question_type}_code']\n                mapping\
    \ = {f'{question_type}_name': name}\n                if question_id == f'{question_type}_purpose'\
    \ and self.use_llm:\n                    variables_string = self.get_string_from_info(info,\
    \ f'{question_type}_variables')\n                    inputs_string = self.get_string_from_info(info,\
    \ f'{question_type}_inputs')\n                    combined_string = ', '.join([s\
    \ for s in [variables_string, inputs_string] if s])\n                    mapping[f'{question_type}_variables']\
    \ = self.clean_and_get_unique_elements(combined_string)\n                    #\
    \ get methods to include in mapping for query\n                    if question_type\
    \ == 'class':\n                        methods_string = self.get_string_from_info(info,\
    \ f'{question_type}_methods')\n                        mapping[f'{question_type}_methods']\
    \ = methods_string\n\n                query = question_text.format(filename=self.base_name,\
    \ **mapping)\n                self.process_question(question_type, question_id,\
    \ query, context, info)\n\n    def generate(self) -> Tuple[List[Dict], List[Dict]]:\n\
    \        \"\"\"\n        Generate responses for all the questions and returns\
    \ the instruct_list.\n        Args:\n            None\n        Returns:\n    \
    \        Tuple[List[Dict], List[Dict]]: The generated question-answer pairs and\
    \ instructions.\n        \"\"\"\n        for question in self.questions:\n   \
    \         self.process_question_type(question['type'], question['id'], question['text'])\n\
    \        return self.instruct_list\n\n\ndef get_python_datasets(file_path: str,\
    \ file_details: Dict, base_name: str, questions: List[Dict], \n              \
    \          llm: object, prompt: str) -> Tuple[List[Dict], List[Dict]]:\n    \"\
    \"\"\n    Extract information from a Python file and return it in JSON format.\n\
    \    Args:\n        file_path (str): The path to the Python file.\n        file_details\
    \ (Dict): The details of the file.\n        base_name (str): The base Python code\
    \ filename.\n        questions (List[Dict]): The list of questions.\n        llm\
    \ (object): The language model to be used for generating responses.\n        prompt\
    \ (str): The prompt to be used for generating responses.\n    Returns:\n     \
    \   Tuple[List[Dict], List[Dict]]: Extracted information in JSON format.\n   \
    \ \"\"\"\n    generator = DatasetGenerator(file_path, file_details, base_name,\
    \ questions, llm, prompt)\n    return generator.generate()\n"
  file_ast: 'Module(body=[Expr(value=Constant(value=''\nGenerates JSON format question-answer
    pairs and instructions for a Python file\nRequirements:\n[req01] The `DatasetGenerator`
    class shall:\n        a. Accept a Python file path (str), file details (Dict),
    base name (str), list of questions (List[Dict]), use_llm flag (bool), language
    model (object), and prompt (str) as input during instantiation.\n        b. Initialize
    and store the Python file path, file details, base name, list of questions, use_llm
    flag, language model, and prompt as class attributes.\n        c. Provide the
    `clean_and_get_unique_elements` method to clean an input string (str) and return
    a string of unique elements.\n        d. Provide the `add_to_list` method to add
    a response (str) to a list (List[Dict]).\n        e. Provide the `get_response_from_llm`
    method to retrieve a response from the language model.\n        f. Provide the
    `process_question` method to process a question and add the generated response
    to the instruct_list.\n        g. Provide the `process_question_type` method to
    process questions related to a file, function, class, or method.\n        h. Provide
    the `generate` method to generate responses for all questions in the list and
    return the instruct_list.\n[req02] The `get_python_datasets` function shall:\n        a.
    Accept a Python file path (str), file details (Dict), base name (str), list of
    questions (List[Dict]), use_llm flag (bool), language model (object), and prompt
    (str) as input.\n        b. Create an instance of the `DatasetGenerator` class
    using the provided input.\n        c. Generate question-answer pairs and instructions
    using the `generate` method of the `DatasetGenerator` instance.\n        d. Return
    the generated `instruct_list`.\n'')), Import(names=[alias(name=''logging'')]),
    Import(names=[alias(name=''re'')]), ImportFrom(module=''typing'', names=[alias(name=''Dict''),
    alias(name=''List''), alias(name=''Tuple'')], level=0), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''basicConfig'', ctx=Load()), args=[], keywords=[keyword(arg=''format'',
    value=Constant(value=''%(asctime)s - %(levelname)s - %(message)s'')), keyword(arg=''level'',
    value=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''INFO'', ctx=Load()))])),
    Assign(targets=[Name(id=''logger'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[Name(id=''__name__'', ctx=Load())],
    keywords=[])), ClassDef(name=''DatasetGenerator'', bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    Generate
    JSON formatted dictionary outputs for a Python file.\n    Attributes:\n        file_path
    (str): The path to the Python file.\n        file_details (Dict[str, Any]): Details
    of the Python file.\n        base_name (str): The base name of the Python file.\n        questions
    (List[Dict[str, str]]): Questions for generating responses.\n        instruct_list
    (List[Dict[str, str]]): Storage for generated instructions.\n        question_mapping
    (Dict[str, str]): Mapping of question types to keys in file details.\n        use_llm
    (bool): Flag indicating if a language model should be used.\n        llm (object):
    The language model for generating responses.\n        prompt (str): The prompt
    format for querying the language model.\n    Methods:\n        clean_and_get_unique_elements(input_str:
    str) -> str: \n            Clean and return unique elements from an input string.\n        add_to_list(list_to_update:
    List[Dict], query: str, response: str, additional_field=None) -> List[Dict]: \n            Add
    response to the instruct list.\n        get_response_from_llm(query: str, context:
    str) -> str:\n            Get language model response to query for given context.\n        process_question(question_type:
    str, question_id: str, query: str, context: str, info: Dict) -> None:\n            Process
    question and add generated response to the instruct_list.\n        process_question_type(question_type:
    str, question_id: str, question_text: str) -> None:\n            Process question
    related to file, function, class, or method.\n        generate() -> Tuple[List[Dict],
    List[Dict]]:\n            Generate responses for all the questions and return
    the instruct_list.\n    '')), FunctionDef(name=''__init__'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''base_name'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''llm'',
    annotation=Name(id=''object'', ctx=Load())), arg(arg=''prompt'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_path'', ctx=Store())], value=Name(id=''file_path'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''file_details'',
    ctx=Store())], value=Name(id=''file_details'', ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Store())], value=Name(id=''base_name'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''questions'',
    ctx=Store())], value=Name(id=''questions'', ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Store())], value=Name(id=''llm'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''prompt'',
    ctx=Store())], value=Name(id=''prompt'', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]),
    body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''use_llm'',
    ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Store())], value=Constant(value=True))]), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''instruct_list'', ctx=Store())], value=List(elts=[], ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''question_mapping'',
    ctx=Store())], value=Dict(keys=[Constant(value=''file''), Constant(value=''function''),
    Constant(value=''class''), Constant(value=''method'')], values=[Constant(value=''file''),
    Constant(value=''functions''), Constant(value=''classes''), Constant(value=''classes'')]))],
    decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''clean_and_get_unique_elements'',
    args=arguments(posonlyargs=[], args=[arg(arg=''input_str'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Clean
    input string and return string of unique elements.\n        Args:\n            input_str
    (str): The input string to be cleaned.\n        Returns:\n            str: The
    cleaned string.\n        '')), Assign(targets=[Name(id=''cleaned_elements'', ctx=Store())],
    value=Call(func=Name(id=''set'', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''re'',
    ctx=Load()), attr=''sub'', ctx=Load()), args=[Constant(value=''[^\\w\\-_>\\s:/.]''),
    Constant(value=''''), Call(func=Attribute(value=Name(id=''element'', ctx=Load()),
    attr=''strip'', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id=''element'',
    ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''re'',
    ctx=Load()), attr=''sub'', ctx=Load()), args=[Constant(value=''\\s+''), Constant(value=''
    ''), Name(id=''input_str'', ctx=Load())], keywords=[]), attr=''split'', ctx=Load()),
    args=[Constant(value='','')], keywords=[]), ifs=[], is_async=0)])], keywords=[])),
    Return(value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[Name(id=''cleaned_elements'', ctx=Load())], keywords=[]))],
    decorator_list=[Name(id=''staticmethod'', ctx=Load())], returns=Name(id=''str'',
    ctx=Load())), FunctionDef(name=''add_to_list'', args=arguments(posonlyargs=[],
    args=[arg(arg=''list_to_update'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''query'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''response'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''additional_field'')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]),
    body=[Expr(value=Constant(value=''\n        Adds response to instruct list.\n        Args:\n            list_to_update
    (List[Dict]): The list to be updated.\n            query (str): The query to be
    added.\n            response (str): The response to be added.\n            additional_field
    (str): The additional field to be added.\n        Returns:\n            List[Dict]:
    The updated list.\n        '')), If(test=BoolOp(op=And(), values=[Name(id=''response'',
    ctx=Load()), Call(func=Attribute(value=Name(id=''response'', ctx=Load()), attr=''strip'',
    ctx=Load()), args=[], keywords=[]), Compare(left=Name(id=''response'', ctx=Load()),
    ops=[NotEq()], comparators=[Constant(value=''None'')])]), body=[Expr(value=Call(func=Attribute(value=Name(id=''list_to_update'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[IfExp(test=Name(id=''additional_field'',
    ctx=Load()), body=Dict(keys=[Constant(value=''instruction''), Constant(value=''input''),
    Constant(value=''output'')], values=[Name(id=''query'', ctx=Load()), Name(id=''additional_field'',
    ctx=Load()), Name(id=''response'', ctx=Load())]), orelse=Dict(keys=[Constant(value=''question''),
    Constant(value=''answer'')], values=[Name(id=''query'', ctx=Load()), Name(id=''response'',
    ctx=Load())]))], keywords=[]))], orelse=[]), Return(value=Name(id=''list_to_update'',
    ctx=Load()))], decorator_list=[Name(id=''staticmethod'', ctx=Load())], returns=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''get_response_from_llm'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''query'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Get
    language model response to query for given context.\n        Args:\n            query
    (str): The query to be used for generating the response.\n            context
    (str): The context to be used for generating the response.\n        Returns:\n            str:
    The generated response.\n        '')), Assign(targets=[Name(id=''excluded_instructions'',
    ctx=Store())], value=List(elts=[Constant(value=''What is the call code graph''),
    Constant(value=''What is the docstring'')], ctx=Load())), Assign(targets=[Name(id=''filtered_instruct_list'',
    ctx=Store())], value=ListComp(elt=Name(id=''item'', ctx=Load()), generators=[comprehension(target=Name(id=''item'',
    ctx=Store()), iter=Attribute(value=Name(id=''self'', ctx=Load()), attr=''instruct_list'',
    ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id=''any'', ctx=Load()),
    args=[GeneratorExp(elt=Call(func=Attribute(value=Subscript(value=Name(id=''item'',
    ctx=Load()), slice=Constant(value=''instruction''), ctx=Load()), attr=''startswith'',
    ctx=Load()), args=[Name(id=''prefix'', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id=''prefix'',
    ctx=Store()), iter=Name(id=''excluded_instructions'', ctx=Load()), ifs=[], is_async=0)])],
    keywords=[]))], is_async=0)])), Assign(targets=[Name(id=''past_instructs'', ctx=Store())],
    value=Call(func=Attribute(value=Constant(value=''\n''), attr=''join'', ctx=Load()),
    args=[ListComp(elt=JoinedStr(values=[Constant(value=''Instruction: ''), FormattedValue(value=Subscript(value=Name(id=''item'',
    ctx=Load()), slice=Constant(value=''instruction''), ctx=Load()), conversion=-1),
    Constant(value='' \nOutput: ''), FormattedValue(value=Subscript(value=Name(id=''item'',
    ctx=Load()), slice=Constant(value=''output''), ctx=Load()), conversion=-1)]),
    generators=[comprehension(target=Name(id=''item'', ctx=Store()), iter=Name(id=''filtered_instruct_list'',
    ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id=''full_context'',
    ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id=''context'',
    ctx=Load()), op=Add(), right=Constant(value=''\n'')), op=Add(), right=Constant(value="Here''s
    some detail about this code:")), op=Add(), right=Constant(value=''\n'')), op=Add(),
    right=Name(id=''past_instructs'', ctx=Load()))), Try(body=[Assign(targets=[Name(id=''prompt'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''prompt'', ctx=Load()), attr=''format'', ctx=Load()), args=[],
    keywords=[keyword(arg=''context'', value=Name(id=''full_context'', ctx=Load())),
    keyword(arg=''query'', value=Name(id=''query'', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Query:
    ''), FormattedValue(value=Name(id=''query'', ctx=Load()), conversion=-1)])], keywords=[])),
    Assign(targets=[Name(id=''response'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Load()), args=[Name(id=''prompt'', ctx=Load())],
    keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Response:
    ''), FormattedValue(value=Name(id=''response'', ctx=Load()), conversion=-1)])],
    keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
    ctx=Load()), attr=''error'', ctx=Load()), args=[Constant(value=''Failed to generate
    model response'')], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id=''response'',
    ctx=Load()))], decorator_list=[], returns=Name(id=''str'', ctx=Load())), FunctionDef(name=''process_question'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''question_type'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''question_id'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''query'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''context'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''info'', annotation=Name(id=''Dict'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Process
    question and add the generated response to the instruct_list.\n        Args:\n            question_type
    (str): The type of question to be processed.\n            question_id (str): The
    ID of the question to be processed.\n            query (str): The query to be
    processed.\n            context (str): The context to be used for generating the
    response.\n            info (Dict): The information of the Python file.\n        Returns:\n            None\n        '')),
    If(test=Call(func=Attribute(value=Name(id=''question_id'', ctx=Load()), attr=''endswith'',
    ctx=Load()), args=[Constant(value=''code_graph'')], keywords=[]), body=[Assign(targets=[Name(id=''response'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''info'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''question_id'', ctx=Load()), Dict(keys=[],
    values=[])], keywords=[]))], orelse=[Assign(targets=[Name(id=''response'', ctx=Store())],
    value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''use_llm'', ctx=Load()), Call(func=Attribute(value=Name(id=''question_id'',
    ctx=Load()), attr=''endswith'', ctx=Load()), args=[Constant(value=''purpose'')],
    keywords=[])]), body=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''get_response_from_llm'', ctx=Load()), args=[Name(id=''query'', ctx=Load()),
    Name(id=''context'', ctx=Load())], keywords=[]), orelse=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''clean_and_get_unique_elements'', ctx=Load()), args=[Call(func=Name(id=''str'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''info'', ctx=Load()), attr=''get'',
    ctx=Load()), args=[Name(id=''question_id'', ctx=Load()), Constant(value='''')],
    keywords=[])], keywords=[])], keywords=[])))]), If(test=BoolOp(op=And(), values=[Name(id=''response'',
    ctx=Load()), Compare(left=Name(id=''response'', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''None'')])]),
    body=[Assign(targets=[Name(id=''response_str'', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id=''str'',
    ctx=Load()), args=[Name(id=''response'', ctx=Load())], keywords=[]), attr=''strip'',
    ctx=Load()), args=[], keywords=[])), If(test=Name(id=''response_str'', ctx=Load()),
    body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''instruct_list'', ctx=Load()), attr=''append'', ctx=Load()), args=[Dict(keys=[Constant(value=''instruction''),
    Constant(value=''input''), Constant(value=''output'')], values=[Name(id=''query'',
    ctx=Load()), Name(id=''context'', ctx=Load()), Name(id=''response_str'', ctx=Load())])],
    keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)),
    FunctionDef(name=''get_string_from_info'', args=arguments(posonlyargs=[], args=[arg(arg=''info''),
    arg(arg=''item_type'')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Name(id=''info'',
    ctx=Load()), slice=Name(id=''item_type'', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id=''items'',
    ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id=''item'',
    ctx=Load()), attr=''strip'', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id=''item'',
    ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id=''str'', ctx=Load()),
    args=[Subscript(value=Name(id=''info'', ctx=Load()), slice=Name(id=''item_type'',
    ctx=Load()), ctx=Load())], keywords=[]), attr=''split'', ctx=Load()), args=[Constant(value='','')],
    keywords=[]), ifs=[Name(id=''item'', ctx=Load())], is_async=0)])), Return(value=Call(func=Attribute(value=Constant(value='',
    ''), attr=''join'', ctx=Load()), args=[Name(id=''items'', ctx=Load())], keywords=[]))],
    orelse=[]), Return(value=Constant(value=''''))], decorator_list=[Name(id=''staticmethod'',
    ctx=Load())]), FunctionDef(name=''process_question_type'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''question_type'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''question_id'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Process
    questions related to a file, function, class, or method.\n        Args:\n            question_type
    (str): The type of question to be processed.\n            question_id (str): The
    ID of the question to be processed.\n            question_text (str): The text
    of the question to be processed.\n        Returns:\n            None\n        '')),
    If(test=Compare(left=Name(id=''question_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''file'')]),
    body=[Assign(targets=[Name(id=''query'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''question_text'',
    ctx=Load()), attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''filename'',
    value=Attribute(value=Name(id=''self'', ctx=Load()), attr=''base_name'', ctx=Load()))])),
    Assign(targets=[Name(id=''context'', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Constant(value=''file_info''),
    ctx=Load()), slice=Constant(value=''file_code''), ctx=Load())), Assign(targets=[Name(id=''info'',
    ctx=Store())], value=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''file_details'', ctx=Load()), slice=Constant(value=''file_info''), ctx=Load())),
    Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''process_question'',
    ctx=Load()), args=[Name(id=''question_type'', ctx=Load()), Name(id=''question_id'',
    ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'', ctx=Load()),
    Name(id=''info'', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''method'')]), body=[For(target=Tuple(elts=[Name(id=''class_name'',
    ctx=Store()), Name(id=''class_info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Constant(value=''classes''),
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id=''key'',
    ctx=Store()), Name(id=''method_info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_info'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id=''key'',
    ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[]), body=[Assign(targets=[Name(id=''method_name'', ctx=Store())], value=Subscript(value=Name(id=''key'',
    ctx=Load()), slice=Slice(lower=Call(func=Name(id=''len'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[])), ctx=Load())), Assign(targets=[Name(id=''context'', ctx=Store())],
    value=Subscript(value=Name(id=''method_info'', ctx=Load()), slice=Constant(value=''method_code''),
    ctx=Load())), Assign(targets=[Name(id=''mapping'', ctx=Store())], value=Dict(keys=[Constant(value=''class_name''),
    Constant(value=''method_name'')], values=[Name(id=''class_name'', ctx=Load()),
    Name(id=''method_name'', ctx=Load())])), Assign(targets=[Name(id=''query'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()), attr=''format'',
    ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load())), keyword(value=Name(id=''mapping'',
    ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''process_question'', ctx=Load()), args=[Name(id=''question_type'', ctx=Load()),
    Name(id=''question_id'', ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'',
    ctx=Load()), Name(id=''method_info'', ctx=Load())], keywords=[]))], orelse=[])],
    orelse=[])], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id=''name'', ctx=Store()),
    Name(id=''info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''question_mapping'', ctx=Load()), slice=Name(id=''question_type'',
    ctx=Load()), ctx=Load()), ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]),
    body=[Assign(targets=[Name(id=''context'', ctx=Store())], value=Subscript(value=Name(id=''info'',
    ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_code'')]), ctx=Load())), Assign(targets=[Name(id=''mapping'',
    ctx=Store())], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_name'')])], values=[Name(id=''name'',
    ctx=Load())])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_id'',
    ctx=Load()), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_purpose'')])]), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Load())]), body=[Assign(targets=[Name(id=''variables_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''get_string_from_info'', ctx=Load()), args=[Name(id=''info'', ctx=Load()),
    JoinedStr(values=[FormattedValue(value=Name(id=''question_type'', ctx=Load()),
    conversion=-1), Constant(value=''_variables'')])], keywords=[])), Assign(targets=[Name(id=''inputs_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''get_string_from_info'', ctx=Load()), args=[Name(id=''info'', ctx=Load()),
    JoinedStr(values=[FormattedValue(value=Name(id=''question_type'', ctx=Load()),
    conversion=-1), Constant(value=''_inputs'')])], keywords=[])), Assign(targets=[Name(id=''combined_string'',
    ctx=Store())], value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[ListComp(elt=Name(id=''s'', ctx=Load()), generators=[comprehension(target=Name(id=''s'',
    ctx=Store()), iter=List(elts=[Name(id=''variables_string'', ctx=Load()), Name(id=''inputs_string'',
    ctx=Load())], ctx=Load()), ifs=[Name(id=''s'', ctx=Load())], is_async=0)])], keywords=[])),
    Assign(targets=[Subscript(value=Name(id=''mapping'', ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variables'')]), ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''clean_and_get_unique_elements'',
    ctx=Load()), args=[Name(id=''combined_string'', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''class'')]), body=[Assign(targets=[Name(id=''methods_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''get_string_from_info'', ctx=Load()), args=[Name(id=''info'', ctx=Load()),
    JoinedStr(values=[FormattedValue(value=Name(id=''question_type'', ctx=Load()),
    conversion=-1), Constant(value=''_methods'')])], keywords=[])), Assign(targets=[Subscript(value=Name(id=''mapping'',
    ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_methods'')]), ctx=Store())], value=Name(id=''methods_string'',
    ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id=''query'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()), attr=''format'',
    ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load())), keyword(value=Name(id=''mapping'',
    ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''process_question'', ctx=Load()), args=[Name(id=''question_type'', ctx=Load()),
    Name(id=''question_id'', ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'',
    ctx=Load()), Name(id=''info'', ctx=Load())], keywords=[]))], orelse=[])])])],
    decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''generate'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self'')], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Expr(value=Constant(value=''\n        Generate responses for
    all the questions and returns the instruct_list.\n        Args:\n            None\n        Returns:\n            Tuple[List[Dict],
    List[Dict]]: The generated question-answer pairs and instructions.\n        '')),
    For(target=Name(id=''question'', ctx=Store()), iter=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''questions'', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''process_question_type'', ctx=Load()), args=[Subscript(value=Name(id=''question'',
    ctx=Load()), slice=Constant(value=''type''), ctx=Load()), Subscript(value=Name(id=''question'',
    ctx=Load()), slice=Constant(value=''id''), ctx=Load()), Subscript(value=Name(id=''question'',
    ctx=Load()), slice=Constant(value=''text''), ctx=Load())], keywords=[]))], orelse=[]),
    Return(value=Attribute(value=Name(id=''self'', ctx=Load()), attr=''instruct_list'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''Tuple'', ctx=Load()),
    slice=Tuple(elts=[Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''Dict'',
    ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''Dict'',
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name=''get_python_datasets'',
    args=arguments(posonlyargs=[], args=[arg(arg=''file_path'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load())),
    arg(arg=''base_name'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''questions'',
    annotation=Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''Dict'',
    ctx=Load()), ctx=Load())), arg(arg=''llm'', annotation=Name(id=''object'', ctx=Load())),
    arg(arg=''prompt'', annotation=Name(id=''str'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Extract
    information from a Python file and return it in JSON format.\n    Args:\n        file_path
    (str): The path to the Python file.\n        file_details (Dict): The details
    of the file.\n        base_name (str): The base Python code filename.\n        questions
    (List[Dict]): The list of questions.\n        llm (object): The language model
    to be used for generating responses.\n        prompt (str): The prompt to be used
    for generating responses.\n    Returns:\n        Tuple[List[Dict], List[Dict]]:
    Extracted information in JSON format.\n    '')), Assign(targets=[Name(id=''generator'',
    ctx=Store())], value=Call(func=Name(id=''DatasetGenerator'', ctx=Load()), args=[Name(id=''file_path'',
    ctx=Load()), Name(id=''file_details'', ctx=Load()), Name(id=''base_name'', ctx=Load()),
    Name(id=''questions'', ctx=Load()), Name(id=''llm'', ctx=Load()), Name(id=''prompt'',
    ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id=''generator'',
    ctx=Load()), attr=''generate'', ctx=Load()), args=[], keywords=[]))], decorator_list=[],
    returns=Subscript(value=Name(id=''Tuple'', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))],
    type_ignores=[])'
  file_dependencies:
  - re
  - typing
  - logging
  file_functions:
  - get_python_datasets
  file_classes:
  - DatasetGenerator
  file_summary: '{dependencies: [re, typing, logging], function_defs: [{get_python_datasets:
    {inputs: [file_path, file_details, base_name, questions, llm, prompt], calls:
    [DatasetGenerator, generator.generate], call_inputs: {DatasetGenerator: [file_path,
    file_details, base_name, questions, llm, prompt], generator.generate: []}, returns:
    [generator.generate()]}}], class_defs: [{DatasetGenerator: {method_defs: {__init__:
    {inputs: [self, file_path, file_details, base_name, questions, llm, prompt], calls:
    [], call_inputs: {}, returns: []}, clean_and_get_unique_elements: {inputs: [input_str],
    calls: [set, re.sub, element.strip, re.sub(''\\\\s+'', '' '', input_str).split,
    '', ''.join], call_inputs: {set: [(re.sub(''[^\\\\w\\\\-_>\\\\s:/.]'', '''', element.strip())
    for element in re.sub(''\\\\s+'', '' '', input_str).split('',''))], re.sub: [''\\\\s+'',
    '' '', input_str], element.strip: [], re.sub(''\\\\s+'', '' '', input_str).split:
    ['',''], '', ''.join: [cleaned_elements]}, returns: ['', ''.join(cleaned_elements)]},
    add_to_list: {inputs: [list_to_update, query, response, additional_field], calls:
    [response.strip, list_to_update.append], call_inputs: {response.strip: [], list_to_update.append:
    [{''instruction'': query, ''input'': additional_field, ''output'': response} if
    additional_field else {''question'': query, ''answer'': response}]}, returns:
    [list_to_update]}, get_response_from_llm: {inputs: [self, query, context], calls:
    [any, item[''instruction''].startswith, ''\\n''.join, self.prompt.format, logging.info,
    self.llm, logger.error], call_inputs: {any: [(item[''instruction''].startswith(prefix)
    for prefix in excluded_instructions)], item[''instruction''].startswith: [prefix],
    ''\\n''.join: [[f\Instruction: {item[''instruction'']} \\nOutput: {item[''output'']}\
    for item in filtered_instruct_list]], self.prompt.format: [], logging.info: [f''Response:
    {response}''], self.llm: [prompt], logger.error: [''Failed to generate model response'']},
    returns: [response]}, process_question: {inputs: [self, question_type, question_id,
    query, context, info], calls: [question_id.endswith, info.get, self.get_response_from_llm,
    self.clean_and_get_unique_elements, str, str(response).strip, self.instruct_list.append],
    call_inputs: {question_id.endswith: [''purpose''], info.get: [question_id, ''''],
    self.get_response_from_llm: [query, context], self.clean_and_get_unique_elements:
    [str(info.get(question_id, ''''))], str: [response], str(response).strip: [],
    self.instruct_list.append: [{''instruction'': query, ''input'': context, ''output'':
    response_str}]}, returns: []}, get_string_from_info: {inputs: [info, item_type],
    calls: [item.strip, str(info[item_type]).split, str, '', ''.join], call_inputs:
    {item.strip: [], str(info[item_type]).split: ['',''], str: [info[item_type]],
    '', ''.join: [items]}, returns: ['''', '', ''.join(items)]}, process_question_type:
    {inputs: [self, question_type, question_id, question_text], calls: [question_text.format,
    self.process_question, self.file_details[''classes''].items, class_info.items,
    key.startswith, len, self.file_details[self.question_mapping[question_type]].items,
    self.get_string_from_info, '', ''.join, self.clean_and_get_unique_elements], call_inputs:
    {question_text.format: [], self.process_question: [question_type, question_id,
    query, context, info], self.file_details[''classes''].items: [], class_info.items:
    [], key.startswith: [''class_method_''], len: [''class_method_''], self.file_details[self.question_mapping[question_type]].items:
    [], self.get_string_from_info: [info, f''{question_type}_methods''], '', ''.join:
    [[s for s in [variables_string, inputs_string] if s]], self.clean_and_get_unique_elements:
    [combined_string]}, returns: []}, generate: {inputs: [self], calls: [self.process_question_type],
    call_inputs: {self.process_question_type: [question[''type''], question[''id''],
    question[''text'']]}, returns: [self.instruct_list]}}}}]}'
  entire_code_graph:
    nodes:
    - DatasetGenerator
    - DatasetGenerator.__init__
    - DatasetGenerator.clean_and_get_unique_elements
    - DatasetGenerator.add_to_list
    - DatasetGenerator.get_response_from_llm
    - DatasetGenerator.process_question
    - DatasetGenerator.get_string_from_info
    - DatasetGenerator.process_question_type
    - DatasetGenerator.generate
    - get_python_datasets
    - generator.generate
    - set
    - re.sub
    - element.strip
    - re.sub('\\s+', ' ', input_str).split
    - ''', ''.join'
    - response.strip
    - list_to_update.append
    - any
    - item['instruction'].startswith
    - '''\n''.join'
    - self.prompt.format
    - logging.info
    - self.llm
    - logger.error
    - question_id.endswith
    - info.get
    - str
    - str(response).strip
    - self.instruct_list.append
    - item.strip
    - str(info[item_type]).split
    - question_text.format
    - self.file_details['classes'].items
    - class_info.items
    - key.startswith
    - len
    - self.file_details[self.question_mapping[question_type]].items
    edges:
    - source: DatasetGenerator
      target: DatasetGenerator.__init__
      target_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - llm
      - prompt
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator
      target: DatasetGenerator.add_to_list
      target_inputs:
      - list_to_update
      - query
      - response
      - additional_field
      target_returns:
      - list_to_update
    - source: DatasetGenerator
      target: DatasetGenerator.get_response_from_llm
      target_inputs:
      - self
      - query
      - context
      target_returns:
      - response
    - source: DatasetGenerator
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.get_string_from_info
      target_inputs:
      - info
      - item_type
      target_returns:
      - ''', ''.join(items)'
      - ''''''
    - source: DatasetGenerator
      target: DatasetGenerator.process_question_type
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.generate
      target_inputs:
      - self
      target_returns:
      - self.instruct_list
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: set
      target_inputs:
      - (re.sub('[^\\w\\-_>\\s:/.]', '', element.strip()) for element in re.sub('\\s+',
        ' ', input_str).split(','))
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: re.sub
      target_inputs:
      - '''\\s+'''
      - ''' '''
      - input_str
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: element.strip
      target_inputs: []
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: re.sub('\\s+', ' ', input_str).split
      target_inputs:
      - ''','''
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: ''', ''.join'
      target_inputs:
      - cleaned_elements
    - source: DatasetGenerator.add_to_list
      target: response.strip
      target_inputs: []
    - source: DatasetGenerator.add_to_list
      target: list_to_update.append
      target_inputs:
      - '{''instruction'': query, ''input'': additional_field, ''output'': response}
        if additional_field else {''question'': query, ''answer'': response}'
    - source: DatasetGenerator.get_response_from_llm
      target: any
      target_inputs:
      - (item['instruction'].startswith(prefix) for prefix in excluded_instructions)
    - source: DatasetGenerator.get_response_from_llm
      target: item['instruction'].startswith
      target_inputs:
      - prefix
    - source: DatasetGenerator.get_response_from_llm
      target: '''\n''.join'
      target_inputs:
      - '[f"Instruction: {item[''instruction'']} \nOutput: {item[''output'']}" for
        item in filtered_instruct_list]'
    - source: DatasetGenerator.get_response_from_llm
      target: self.prompt.format
      target_inputs: []
    - source: DatasetGenerator.get_response_from_llm
      target: logging.info
      target_inputs:
      - 'f''Response: {response}'''
    - source: DatasetGenerator.get_response_from_llm
      target: self.llm
      target_inputs:
      - prompt
    - source: DatasetGenerator.get_response_from_llm
      target: logger.error
      target_inputs:
      - '''Failed to generate model response'''
    - source: DatasetGenerator.process_question
      target: question_id.endswith
      target_inputs:
      - '''purpose'''
    - source: DatasetGenerator.process_question
      target: info.get
      target_inputs:
      - question_id
      - ''''''
    - source: DatasetGenerator.process_question
      target: DatasetGenerator.get_response_from_llm
      target_inputs:
      - self
      - query
      - context
      target_returns:
      - response
    - source: DatasetGenerator.process_question
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator.process_question
      target: str
      target_inputs:
      - response
    - source: DatasetGenerator.process_question
      target: str(response).strip
      target_inputs: []
    - source: DatasetGenerator.process_question
      target: self.instruct_list.append
      target_inputs:
      - '{''instruction'': query, ''input'': context, ''output'': response_str}'
    - source: DatasetGenerator.get_string_from_info
      target: item.strip
      target_inputs: []
    - source: DatasetGenerator.get_string_from_info
      target: str(info[item_type]).split
      target_inputs:
      - ''','''
    - source: DatasetGenerator.get_string_from_info
      target: str
      target_inputs:
      - info[item_type]
    - source: DatasetGenerator.get_string_from_info
      target: ''', ''.join'
      target_inputs:
      - items
    - source: DatasetGenerator.process_question_type
      target: question_text.format
      target_inputs: []
    - source: DatasetGenerator.process_question_type
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator.process_question_type
      target: self.file_details['classes'].items
      target_inputs: []
    - source: DatasetGenerator.process_question_type
      target: class_info.items
      target_inputs: []
    - source: DatasetGenerator.process_question_type
      target: key.startswith
      target_inputs:
      - '''class_method_'''
    - source: DatasetGenerator.process_question_type
      target: len
      target_inputs:
      - '''class_method_'''
    - source: DatasetGenerator.process_question_type
      target: self.file_details[self.question_mapping[question_type]].items
      target_inputs: []
    - source: DatasetGenerator.process_question_type
      target: DatasetGenerator.get_string_from_info
      target_inputs:
      - info
      - item_type
      target_returns:
      - ''', ''.join(items)'
      - ''''''
    - source: DatasetGenerator.process_question_type
      target: ''', ''.join'
      target_inputs:
      - '[s for s in [variables_string, inputs_string] if s]'
    - source: DatasetGenerator.process_question_type
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator.generate
      target: DatasetGenerator.process_question_type
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      target_returns: []
    - source: get_python_datasets
      target: DatasetGenerator
      target_inputs:
      - file_path
      - file_details
      - base_name
      - questions
      - llm
      - prompt
      target_returns: []
    - source: get_python_datasets
      target: generator.generate
      target_inputs: []
functions:
  get_python_datasets:
    function_name: get_python_datasets
    function_code: "def get_python_datasets(file_path: str, file_details: Dict, base_name:\
      \ str, questions: List[Dict], llm: object, prompt: str) -> Tuple[List[Dict],\
      \ List[Dict]]:\n    \"\"\"\n    Extract information from a Python file and return\
      \ it in JSON format.\n    Args:\n        file_path (str): The path to the Python\
      \ file.\n        file_details (Dict): The details of the file.\n        base_name\
      \ (str): The base Python code filename.\n        questions (List[Dict]): The\
      \ list of questions.\n        llm (object): The language model to be used for\
      \ generating responses.\n        prompt (str): The prompt to be used for generating\
      \ responses.\n    Returns:\n        Tuple[List[Dict], List[Dict]]: Extracted\
      \ information in JSON format.\n    \"\"\"\n    generator = DatasetGenerator(file_path,\
      \ file_details, base_name, questions, llm, prompt)\n    return generator.generate()"
    function_ast: 'FunctionDef(name=''get_python_datasets'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load(), lineno=215,
      col_offset=35, end_lineno=215, end_col_offset=38), lineno=215, col_offset=24,
      end_lineno=215, end_col_offset=38), arg(arg=''file_details'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=215, col_offset=54, end_lineno=215, end_col_offset=58), lineno=215,
      col_offset=40, end_lineno=215, end_col_offset=58), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=215, col_offset=71, end_lineno=215, end_col_offset=74), lineno=215,
      col_offset=60, end_lineno=215, end_col_offset=74), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=215, col_offset=87, end_lineno=215, end_col_offset=91), slice=Name(id=''Dict'',
      ctx=Load(), lineno=215, col_offset=92, end_lineno=215, end_col_offset=96), ctx=Load(),
      lineno=215, col_offset=87, end_lineno=215, end_col_offset=97), lineno=215, col_offset=76,
      end_lineno=215, end_col_offset=97), arg(arg=''llm'', annotation=Name(id=''object'',
      ctx=Load(), lineno=216, col_offset=29, end_lineno=216, end_col_offset=35), lineno=216,
      col_offset=24, end_lineno=216, end_col_offset=35), arg(arg=''prompt'', annotation=Name(id=''str'',
      ctx=Load(), lineno=216, col_offset=45, end_lineno=216, end_col_offset=48), lineno=216,
      col_offset=37, end_lineno=216, end_col_offset=48)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value=''\n    Extract information from
      a Python file and return it in JSON format.\n    Args:\n        file_path (str):
      The path to the Python file.\n        file_details (Dict): The details of the
      file.\n        base_name (str): The base Python code filename.\n        questions
      (List[Dict]): The list of questions.\n        llm (object): The language model
      to be used for generating responses.\n        prompt (str): The prompt to be
      used for generating responses.\n    Returns:\n        Tuple[List[Dict], List[Dict]]:
      Extracted information in JSON format.\n    '', lineno=217, col_offset=4, end_lineno=228,
      end_col_offset=7), lineno=217, col_offset=4, end_lineno=228, end_col_offset=7),
      Assign(targets=[Name(id=''generator'', ctx=Store(), lineno=229, col_offset=4,
      end_lineno=229, end_col_offset=13)], value=Call(func=Name(id=''DatasetGenerator'',
      ctx=Load(), lineno=229, col_offset=16, end_lineno=229, end_col_offset=32), args=[Name(id=''file_path'',
      ctx=Load(), lineno=229, col_offset=33, end_lineno=229, end_col_offset=42), Name(id=''file_details'',
      ctx=Load(), lineno=229, col_offset=44, end_lineno=229, end_col_offset=56), Name(id=''base_name'',
      ctx=Load(), lineno=229, col_offset=58, end_lineno=229, end_col_offset=67), Name(id=''questions'',
      ctx=Load(), lineno=229, col_offset=69, end_lineno=229, end_col_offset=78), Name(id=''llm'',
      ctx=Load(), lineno=229, col_offset=80, end_lineno=229, end_col_offset=83), Name(id=''prompt'',
      ctx=Load(), lineno=229, col_offset=85, end_lineno=229, end_col_offset=91)],
      keywords=[], lineno=229, col_offset=16, end_lineno=229, end_col_offset=92),
      lineno=229, col_offset=4, end_lineno=229, end_col_offset=92), Return(value=Call(func=Attribute(value=Name(id=''generator'',
      ctx=Load(), lineno=230, col_offset=11, end_lineno=230, end_col_offset=20), attr=''generate'',
      ctx=Load(), lineno=230, col_offset=11, end_lineno=230, end_col_offset=29), args=[],
      keywords=[], lineno=230, col_offset=11, end_lineno=230, end_col_offset=31),
      lineno=230, col_offset=4, end_lineno=230, end_col_offset=31)], decorator_list=[],
      returns=Subscript(value=Name(id=''Tuple'', ctx=Load(), lineno=216, col_offset=53,
      end_lineno=216, end_col_offset=58), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=216, col_offset=59, end_lineno=216, end_col_offset=63), slice=Name(id=''Dict'',
      ctx=Load(), lineno=216, col_offset=64, end_lineno=216, end_col_offset=68), ctx=Load(),
      lineno=216, col_offset=59, end_lineno=216, end_col_offset=69), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=216, col_offset=71, end_lineno=216, end_col_offset=75), slice=Name(id=''Dict'',
      ctx=Load(), lineno=216, col_offset=76, end_lineno=216, end_col_offset=80), ctx=Load(),
      lineno=216, col_offset=71, end_lineno=216, end_col_offset=81)], ctx=Load(),
      lineno=216, col_offset=59, end_lineno=216, end_col_offset=81), ctx=Load(), lineno=216,
      col_offset=53, end_lineno=216, end_col_offset=82), lineno=215, col_offset=0,
      end_lineno=230, end_col_offset=31)'
    function_docstring: "Extract information from a Python file and return it in JSON\
      \ format.\nArgs:\n    file_path (str): The path to the Python file.\n    file_details\
      \ (Dict): The details of the file.\n    base_name (str): The base Python code\
      \ filename.\n    questions (List[Dict]): The list of questions.\n    llm (object):\
      \ The language model to be used for generating responses.\n    prompt (str):\
      \ The prompt to be used for generating responses.\nReturns:\n    Tuple[List[Dict],\
      \ List[Dict]]: Extracted information in JSON format."
    function_inputs:
    - file_path
    - file_details
    - base_name
    - questions
    - llm
    - prompt
    function_defaults: []
    function_returns:
    - generator.generate()
    function_calls:
    - DatasetGenerator
    - generator.generate
    function_call_inputs:
      DatasetGenerator:
      - file_path
      - file_details
      - base_name
      - questions
      - llm
      - prompt
      generator.generate: []
    function_variables:
    - generator
    function_decorators: []
    function_annotations: []
    function_properties: []
classes:
  DatasetGenerator:
    class_name: DatasetGenerator
    class_code: "class DatasetGenerator:\n    \"\"\"\n    Generate JSON formatted\
      \ dictionary outputs for a Python file.\n    Attributes:\n        file_path\
      \ (str): The path to the Python file.\n        file_details (Dict[str, Any]):\
      \ Details of the Python file.\n        base_name (str): The base name of the\
      \ Python file.\n        questions (List[Dict[str, str]]): Questions for generating\
      \ responses.\n        instruct_list (List[Dict[str, str]]): Storage for generated\
      \ instructions.\n        question_mapping (Dict[str, str]): Mapping of question\
      \ types to keys in file details.\n        use_llm (bool): Flag indicating if\
      \ a language model should be used.\n        llm (object): The language model\
      \ for generating responses.\n        prompt (str): The prompt format for querying\
      \ the language model.\n    Methods:\n        clean_and_get_unique_elements(input_str:\
      \ str) -> str: \n            Clean and return unique elements from an input\
      \ string.\n        add_to_list(list_to_update: List[Dict], query: str, response:\
      \ str, additional_field=None) -> List[Dict]: \n            Add response to the\
      \ instruct list.\n        get_response_from_llm(query: str, context: str) ->\
      \ str:\n            Get language model response to query for given context.\n\
      \        process_question(question_type: str, question_id: str, query: str,\
      \ context: str, info: Dict) -> None:\n            Process question and add generated\
      \ response to the instruct_list.\n        process_question_type(question_type:\
      \ str, question_id: str, question_text: str) -> None:\n            Process question\
      \ related to file, function, class, or method.\n        generate() -> Tuple[List[Dict],\
      \ List[Dict]]:\n            Generate responses for all the questions and return\
      \ the instruct_list.\n    \"\"\"\n\n    def __init__(self, file_path: str, file_details:\
      \ Dict, base_name: str, questions: List[Dict], llm: object, prompt: str) ->\
      \ None:\n        self.file_path = file_path\n        self.file_details = file_details\n\
      \        self.base_name = base_name\n        self.questions = questions\n  \
      \      self.llm = llm\n        self.prompt = prompt\n        if self.llm is\
      \ None:\n            self.use_llm = False\n        else:\n            self.use_llm\
      \ = True\n        self.instruct_list = []\n        self.question_mapping = {'file':\
      \ 'file', 'function': 'functions', 'class': 'classes', 'method': 'classes'}\n\
      \n    @staticmethod\n    def clean_and_get_unique_elements(input_str: str) ->\
      \ str:\n        \"\"\"\n        Clean input string and return string of unique\
      \ elements.\n        Args:\n            input_str (str): The input string to\
      \ be cleaned.\n        Returns:\n            str: The cleaned string.\n    \
      \    \"\"\"\n        cleaned_elements = set((re.sub('[^\\\\w\\\\-_>\\\\s:/.]',\
      \ '', element.strip()) for element in re.sub('\\\\s+', ' ', input_str).split(',')))\n\
      \        return ', '.join(cleaned_elements)\n\n    @staticmethod\n    def add_to_list(list_to_update:\
      \ List[Dict], query: str, response: str, additional_field=None) -> List[Dict]:\n\
      \        \"\"\"\n        Adds response to instruct list.\n        Args:\n  \
      \          list_to_update (List[Dict]): The list to be updated.\n          \
      \  query (str): The query to be added.\n            response (str): The response\
      \ to be added.\n            additional_field (str): The additional field to\
      \ be added.\n        Returns:\n            List[Dict]: The updated list.\n \
      \       \"\"\"\n        if response and response.strip() and (response != 'None'):\n\
      \            list_to_update.append({'instruction': query, 'input': additional_field,\
      \ 'output': response} if additional_field else {'question': query, 'answer':\
      \ response})\n        return list_to_update\n\n    def get_response_from_llm(self,\
      \ query: str, context: str) -> str:\n        \"\"\"\n        Get language model\
      \ response to query for given context.\n        Args:\n            query (str):\
      \ The query to be used for generating the response.\n            context (str):\
      \ The context to be used for generating the response.\n        Returns:\n  \
      \          str: The generated response.\n        \"\"\"\n        excluded_instructions\
      \ = ['What is the call code graph', 'What is the docstring']\n        filtered_instruct_list\
      \ = [item for item in self.instruct_list if not any((item['instruction'].startswith(prefix)\
      \ for prefix in excluded_instructions))]\n        past_instructs = '\\n'.join([f\"\
      Instruction: {item['instruction']} \\nOutput: {item['output']}\" for item in\
      \ filtered_instruct_list])\n        full_context = context + '\\n' + \"Here's\
      \ some detail about this code:\" + '\\n' + past_instructs\n        try:\n  \
      \          prompt = self.prompt.format(context=full_context, query=query)\n\
      \            logging.info(f'Query: {query}')\n            response = self.llm(prompt)\n\
      \            logging.info(f'Response: {response}')\n        except:\n      \
      \      logger.error('Failed to generate model response')\n        return response\n\
      \n    def process_question(self, question_type: str, question_id: str, query:\
      \ str, context: str, info: Dict) -> None:\n        \"\"\"\n        Process question\
      \ and add the generated response to the instruct_list.\n        Args:\n    \
      \        question_type (str): The type of question to be processed.\n      \
      \      question_id (str): The ID of the question to be processed.\n        \
      \    query (str): The query to be processed.\n            context (str): The\
      \ context to be used for generating the response.\n            info (Dict):\
      \ The information of the Python file.\n        Returns:\n            None\n\
      \        \"\"\"\n        if question_id.endswith('code_graph'):\n          \
      \  response = info.get(question_id, {})\n        else:\n            response\
      \ = self.get_response_from_llm(query, context) if self.use_llm and question_id.endswith('purpose')\
      \ else self.clean_and_get_unique_elements(str(info.get(question_id, '')))\n\
      \        if response and response != 'None':\n            response_str = str(response).strip()\n\
      \            if response_str:\n                self.instruct_list.append({'instruction':\
      \ query, 'input': context, 'output': response_str})\n\n    @staticmethod\n \
      \   def get_string_from_info(info, item_type):\n        if info[item_type]:\n\
      \            items = [item.strip() for item in str(info[item_type]).split(',')\
      \ if item]\n            return ', '.join(items)\n        return ''\n\n    def\
      \ process_question_type(self, question_type: str, question_id: str, question_text:\
      \ str) -> None:\n        \"\"\"\n        Process questions related to a file,\
      \ function, class, or method.\n        Args:\n            question_type (str):\
      \ The type of question to be processed.\n            question_id (str): The\
      \ ID of the question to be processed.\n            question_text (str): The\
      \ text of the question to be processed.\n        Returns:\n            None\n\
      \        \"\"\"\n        if question_type == 'file':\n            query = question_text.format(filename=self.base_name)\n\
      \            context = self.file_details['file_info']['file_code']\n       \
      \     info = self.file_details['file_info']\n            self.process_question(question_type,\
      \ question_id, query, context, info)\n        elif question_type == 'method':\n\
      \            for class_name, class_info in self.file_details['classes'].items():\n\
      \                for key, method_info in class_info.items():\n             \
      \       if key.startswith('class_method_'):\n                        method_name\
      \ = key[len('class_method_'):]\n                        context = method_info['method_code']\n\
      \                        mapping = {'class_name': class_name, 'method_name':\
      \ method_name}\n                        query = question_text.format(filename=self.base_name,\
      \ **mapping)\n                        self.process_question(question_type, question_id,\
      \ query, context, method_info)\n        else:\n            for name, info in\
      \ self.file_details[self.question_mapping[question_type]].items():\n       \
      \         context = info[f'{question_type}_code']\n                mapping =\
      \ {f'{question_type}_name': name}\n                if question_id == f'{question_type}_purpose'\
      \ and self.use_llm:\n                    variables_string = self.get_string_from_info(info,\
      \ f'{question_type}_variables')\n                    inputs_string = self.get_string_from_info(info,\
      \ f'{question_type}_inputs')\n                    combined_string = ', '.join([s\
      \ for s in [variables_string, inputs_string] if s])\n                    mapping[f'{question_type}_variables']\
      \ = self.clean_and_get_unique_elements(combined_string)\n                  \
      \  if question_type == 'class':\n                        methods_string = self.get_string_from_info(info,\
      \ f'{question_type}_methods')\n                        mapping[f'{question_type}_methods']\
      \ = methods_string\n                query = question_text.format(filename=self.base_name,\
      \ **mapping)\n                self.process_question(question_type, question_id,\
      \ query, context, info)\n\n    def generate(self) -> Tuple[List[Dict], List[Dict]]:\n\
      \        \"\"\"\n        Generate responses for all the questions and returns\
      \ the instruct_list.\n        Args:\n            None\n        Returns:\n  \
      \          Tuple[List[Dict], List[Dict]]: The generated question-answer pairs\
      \ and instructions.\n        \"\"\"\n        for question in self.questions:\n\
      \            self.process_question_type(question['type'], question['id'], question['text'])\n\
      \        return self.instruct_list"
    class_ast: 'ClassDef(name=''DatasetGenerator'', bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    Generate
      JSON formatted dictionary outputs for a Python file.\n    Attributes:\n        file_path
      (str): The path to the Python file.\n        file_details (Dict[str, Any]):
      Details of the Python file.\n        base_name (str): The base name of the Python
      file.\n        questions (List[Dict[str, str]]): Questions for generating responses.\n        instruct_list
      (List[Dict[str, str]]): Storage for generated instructions.\n        question_mapping
      (Dict[str, str]): Mapping of question types to keys in file details.\n        use_llm
      (bool): Flag indicating if a language model should be used.\n        llm (object):
      The language model for generating responses.\n        prompt (str): The prompt
      format for querying the language model.\n    Methods:\n        clean_and_get_unique_elements(input_str:
      str) -> str: \n            Clean and return unique elements from an input string.\n        add_to_list(list_to_update:
      List[Dict], query: str, response: str, additional_field=None) -> List[Dict]:
      \n            Add response to the instruct list.\n        get_response_from_llm(query:
      str, context: str) -> str:\n            Get language model response to query
      for given context.\n        process_question(question_type: str, question_id:
      str, query: str, context: str, info: Dict) -> None:\n            Process question
      and add generated response to the instruct_list.\n        process_question_type(question_type:
      str, question_id: str, question_text: str) -> None:\n            Process question
      related to file, function, class, or method.\n        generate() -> Tuple[List[Dict],
      List[Dict]]:\n            Generate responses for all the questions and return
      the instruct_list.\n    '', lineno=31, col_offset=4, end_lineno=56, end_col_offset=7),
      lineno=31, col_offset=4, end_lineno=56, end_col_offset=7), FunctionDef(name=''__init__'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=57, col_offset=17,
      end_lineno=57, end_col_offset=21), arg(arg=''file_path'', annotation=Name(id=''str'',
      ctx=Load(), lineno=57, col_offset=34, end_lineno=57, end_col_offset=37), lineno=57,
      col_offset=23, end_lineno=57, end_col_offset=37), arg(arg=''file_details'',
      annotation=Name(id=''Dict'', ctx=Load(), lineno=57, col_offset=53, end_lineno=57,
      end_col_offset=57), lineno=57, col_offset=39, end_lineno=57, end_col_offset=57),
      arg(arg=''base_name'', annotation=Name(id=''str'', ctx=Load(), lineno=57, col_offset=70,
      end_lineno=57, end_col_offset=73), lineno=57, col_offset=59, end_lineno=57,
      end_col_offset=73), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=57, col_offset=86, end_lineno=57, end_col_offset=90), slice=Name(id=''Dict'',
      ctx=Load(), lineno=57, col_offset=91, end_lineno=57, end_col_offset=95), ctx=Load(),
      lineno=57, col_offset=86, end_lineno=57, end_col_offset=96), lineno=57, col_offset=75,
      end_lineno=57, end_col_offset=96), arg(arg=''llm'', annotation=Name(id=''object'',
      ctx=Load(), lineno=57, col_offset=103, end_lineno=57, end_col_offset=109), lineno=57,
      col_offset=98, end_lineno=57, end_col_offset=109), arg(arg=''prompt'', annotation=Name(id=''str'',
      ctx=Load(), lineno=57, col_offset=119, end_lineno=57, end_col_offset=122), lineno=57,
      col_offset=111, end_lineno=57, end_col_offset=122)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=58, col_offset=8, end_lineno=58, end_col_offset=12), attr=''file_path'',
      ctx=Store(), lineno=58, col_offset=8, end_lineno=58, end_col_offset=22)], value=Name(id=''file_path'',
      ctx=Load(), lineno=58, col_offset=25, end_lineno=58, end_col_offset=34), lineno=58,
      col_offset=8, end_lineno=58, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=59, col_offset=8, end_lineno=59, end_col_offset=12), attr=''file_details'',
      ctx=Store(), lineno=59, col_offset=8, end_lineno=59, end_col_offset=25)], value=Name(id=''file_details'',
      ctx=Load(), lineno=59, col_offset=28, end_lineno=59, end_col_offset=40), lineno=59,
      col_offset=8, end_lineno=59, end_col_offset=40), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=60, col_offset=8, end_lineno=60, end_col_offset=12), attr=''base_name'',
      ctx=Store(), lineno=60, col_offset=8, end_lineno=60, end_col_offset=22)], value=Name(id=''base_name'',
      ctx=Load(), lineno=60, col_offset=25, end_lineno=60, end_col_offset=34), lineno=60,
      col_offset=8, end_lineno=60, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=61, col_offset=8, end_lineno=61, end_col_offset=12), attr=''questions'',
      ctx=Store(), lineno=61, col_offset=8, end_lineno=61, end_col_offset=22)], value=Name(id=''questions'',
      ctx=Load(), lineno=61, col_offset=25, end_lineno=61, end_col_offset=34), lineno=61,
      col_offset=8, end_lineno=61, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=62, col_offset=8, end_lineno=62, end_col_offset=12), attr=''llm'',
      ctx=Store(), lineno=62, col_offset=8, end_lineno=62, end_col_offset=16)], value=Name(id=''llm'',
      ctx=Load(), lineno=62, col_offset=19, end_lineno=62, end_col_offset=22), lineno=62,
      col_offset=8, end_lineno=62, end_col_offset=22), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=63, col_offset=8, end_lineno=63, end_col_offset=12), attr=''prompt'',
      ctx=Store(), lineno=63, col_offset=8, end_lineno=63, end_col_offset=19)], value=Name(id=''prompt'',
      ctx=Load(), lineno=63, col_offset=22, end_lineno=63, end_col_offset=28), lineno=63,
      col_offset=8, end_lineno=63, end_col_offset=28), If(test=Compare(left=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=64, col_offset=11, end_lineno=64, end_col_offset=15), attr=''llm'',
      ctx=Load(), lineno=64, col_offset=11, end_lineno=64, end_col_offset=19), ops=[Is()],
      comparators=[Constant(value=None, lineno=64, col_offset=23, end_lineno=64, end_col_offset=27)],
      lineno=64, col_offset=11, end_lineno=64, end_col_offset=27), body=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=65, col_offset=12, end_lineno=65, end_col_offset=16), attr=''use_llm'',
      ctx=Store(), lineno=65, col_offset=12, end_lineno=65, end_col_offset=24)], value=Constant(value=False,
      lineno=65, col_offset=27, end_lineno=65, end_col_offset=32), lineno=65, col_offset=12,
      end_lineno=65, end_col_offset=32)], orelse=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=67, col_offset=12, end_lineno=67, end_col_offset=16), attr=''use_llm'',
      ctx=Store(), lineno=67, col_offset=12, end_lineno=67, end_col_offset=24)], value=Constant(value=True,
      lineno=67, col_offset=27, end_lineno=67, end_col_offset=31), lineno=67, col_offset=12,
      end_lineno=67, end_col_offset=31)], lineno=64, col_offset=8, end_lineno=67,
      end_col_offset=31), Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=68, col_offset=8, end_lineno=68, end_col_offset=12), attr=''instruct_list'',
      ctx=Store(), lineno=68, col_offset=8, end_lineno=68, end_col_offset=26)], value=List(elts=[],
      ctx=Load(), lineno=68, col_offset=29, end_lineno=68, end_col_offset=31), lineno=68,
      col_offset=8, end_lineno=68, end_col_offset=31), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=69, col_offset=8, end_lineno=69, end_col_offset=12), attr=''question_mapping'',
      ctx=Store(), lineno=69, col_offset=8, end_lineno=69, end_col_offset=29)], value=Dict(keys=[Constant(value=''file'',
      lineno=70, col_offset=12, end_lineno=70, end_col_offset=18), Constant(value=''function'',
      lineno=71, col_offset=12, end_lineno=71, end_col_offset=22), Constant(value=''class'',
      lineno=72, col_offset=12, end_lineno=72, end_col_offset=19), Constant(value=''method'',
      lineno=73, col_offset=12, end_lineno=73, end_col_offset=20)], values=[Constant(value=''file'',
      lineno=70, col_offset=20, end_lineno=70, end_col_offset=26), Constant(value=''functions'',
      lineno=71, col_offset=24, end_lineno=71, end_col_offset=35), Constant(value=''classes'',
      lineno=72, col_offset=21, end_lineno=72, end_col_offset=30), Constant(value=''classes'',
      lineno=73, col_offset=22, end_lineno=73, end_col_offset=31)], lineno=69, col_offset=32,
      end_lineno=74, end_col_offset=9), lineno=69, col_offset=8, end_lineno=74, end_col_offset=9)],
      decorator_list=[], returns=Constant(value=None, lineno=57, col_offset=127, end_lineno=57,
      end_col_offset=131), lineno=57, col_offset=4, end_lineno=74, end_col_offset=9),
      FunctionDef(name=''clean_and_get_unique_elements'', args=arguments(posonlyargs=[],
      args=[arg(arg=''input_str'', annotation=Name(id=''str'', ctx=Load(), lineno=77,
      col_offset=49, end_lineno=77, end_col_offset=52), lineno=77, col_offset=38,
      end_lineno=77, end_col_offset=52)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n        Clean input string and return string
      of unique elements.\n        Args:\n            input_str (str): The input string
      to be cleaned.\n        Returns:\n            str: The cleaned string.\n        '',
      lineno=78, col_offset=8, end_lineno=84, end_col_offset=11), lineno=78, col_offset=8,
      end_lineno=84, end_col_offset=11), Assign(targets=[Name(id=''cleaned_elements'',
      ctx=Store(), lineno=85, col_offset=8, end_lineno=85, end_col_offset=24)], value=Call(func=Name(id=''set'',
      ctx=Load(), lineno=85, col_offset=27, end_lineno=85, end_col_offset=30), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''re'',
      ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=33), attr=''sub'',
      ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=37), args=[Constant(value=''[^\\w\\-_>\\s:/.]'',
      lineno=85, col_offset=38, end_lineno=85, end_col_offset=55), Constant(value='''',
      lineno=85, col_offset=57, end_lineno=85, end_col_offset=59), Call(func=Attribute(value=Name(id=''element'',
      ctx=Load(), lineno=85, col_offset=61, end_lineno=85, end_col_offset=68), attr=''strip'',
      ctx=Load(), lineno=85, col_offset=61, end_lineno=85, end_col_offset=74), args=[],
      keywords=[], lineno=85, col_offset=61, end_lineno=85, end_col_offset=76)], keywords=[],
      lineno=85, col_offset=31, end_lineno=85, end_col_offset=77), generators=[comprehension(target=Name(id=''element'',
      ctx=Store(), lineno=86, col_offset=35, end_lineno=86, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''re'',
      ctx=Load(), lineno=86, col_offset=46, end_lineno=86, end_col_offset=48), attr=''sub'',
      ctx=Load(), lineno=86, col_offset=46, end_lineno=86, end_col_offset=52), args=[Constant(value=''\\s+'',
      lineno=86, col_offset=53, end_lineno=86, end_col_offset=59), Constant(value=''
      '', lineno=86, col_offset=61, end_lineno=86, end_col_offset=64), Name(id=''input_str'',
      ctx=Load(), lineno=86, col_offset=66, end_lineno=86, end_col_offset=75)], keywords=[],
      lineno=86, col_offset=46, end_lineno=86, end_col_offset=76), attr=''split'',
      ctx=Load(), lineno=86, col_offset=46, end_lineno=86, end_col_offset=82), args=[Constant(value='','',
      lineno=86, col_offset=83, end_lineno=86, end_col_offset=86)], keywords=[], lineno=86,
      col_offset=46, end_lineno=86, end_col_offset=87), ifs=[], is_async=0)], lineno=85,
      col_offset=30, end_lineno=86, end_col_offset=88)], keywords=[], lineno=85, col_offset=27,
      end_lineno=86, end_col_offset=88), lineno=85, col_offset=8, end_lineno=86, end_col_offset=88),
      Return(value=Call(func=Attribute(value=Constant(value='', '', lineno=87, col_offset=15,
      end_lineno=87, end_col_offset=19), attr=''join'', ctx=Load(), lineno=87, col_offset=15,
      end_lineno=87, end_col_offset=24), args=[Name(id=''cleaned_elements'', ctx=Load(),
      lineno=87, col_offset=25, end_lineno=87, end_col_offset=41)], keywords=[], lineno=87,
      col_offset=15, end_lineno=87, end_col_offset=42), lineno=87, col_offset=8, end_lineno=87,
      end_col_offset=42)], decorator_list=[Name(id=''staticmethod'', ctx=Load(), lineno=76,
      col_offset=5, end_lineno=76, end_col_offset=17)], returns=Name(id=''str'', ctx=Load(),
      lineno=77, col_offset=57, end_lineno=77, end_col_offset=60), lineno=77, col_offset=4,
      end_lineno=87, end_col_offset=42), FunctionDef(name=''add_to_list'', args=arguments(posonlyargs=[],
      args=[arg(arg=''list_to_update'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=90, col_offset=36, end_lineno=90, end_col_offset=40), slice=Name(id=''Dict'',
      ctx=Load(), lineno=90, col_offset=41, end_lineno=90, end_col_offset=45), ctx=Load(),
      lineno=90, col_offset=36, end_lineno=90, end_col_offset=46), lineno=90, col_offset=20,
      end_lineno=90, end_col_offset=46), arg(arg=''query'', annotation=Name(id=''str'',
      ctx=Load(), lineno=90, col_offset=55, end_lineno=90, end_col_offset=58), lineno=90,
      col_offset=48, end_lineno=90, end_col_offset=58), arg(arg=''response'', annotation=Name(id=''str'',
      ctx=Load(), lineno=90, col_offset=70, end_lineno=90, end_col_offset=73), lineno=90,
      col_offset=60, end_lineno=90, end_col_offset=73), arg(arg=''additional_field'',
      lineno=90, col_offset=75, end_lineno=90, end_col_offset=91)], kwonlyargs=[],
      kw_defaults=[], defaults=[Constant(value=None, lineno=90, col_offset=92, end_lineno=90,
      end_col_offset=96)]), body=[Expr(value=Constant(value=''\n        Adds response
      to instruct list.\n        Args:\n            list_to_update (List[Dict]): The
      list to be updated.\n            query (str): The query to be added.\n            response
      (str): The response to be added.\n            additional_field (str): The additional
      field to be added.\n        Returns:\n            List[Dict]: The updated list.\n        '',
      lineno=91, col_offset=8, end_lineno=100, end_col_offset=11), lineno=91, col_offset=8,
      end_lineno=100, end_col_offset=11), If(test=BoolOp(op=And(), values=[Name(id=''response'',
      ctx=Load(), lineno=101, col_offset=11, end_lineno=101, end_col_offset=19), Call(func=Attribute(value=Name(id=''response'',
      ctx=Load(), lineno=101, col_offset=24, end_lineno=101, end_col_offset=32), attr=''strip'',
      ctx=Load(), lineno=101, col_offset=24, end_lineno=101, end_col_offset=38), args=[],
      keywords=[], lineno=101, col_offset=24, end_lineno=101, end_col_offset=40),
      Compare(left=Name(id=''response'', ctx=Load(), lineno=101, col_offset=45, end_lineno=101,
      end_col_offset=53), ops=[NotEq()], comparators=[Constant(value=''None'', lineno=101,
      col_offset=57, end_lineno=101, end_col_offset=63)], lineno=101, col_offset=45,
      end_lineno=101, end_col_offset=63)], lineno=101, col_offset=11, end_lineno=101,
      end_col_offset=63), body=[Expr(value=Call(func=Attribute(value=Name(id=''list_to_update'',
      ctx=Load(), lineno=102, col_offset=12, end_lineno=102, end_col_offset=26), attr=''append'',
      ctx=Load(), lineno=102, col_offset=12, end_lineno=102, end_col_offset=33), args=[IfExp(test=Name(id=''additional_field'',
      ctx=Load(), lineno=104, col_offset=19, end_lineno=104, end_col_offset=35), body=Dict(keys=[Constant(value=''instruction'',
      lineno=103, col_offset=17, end_lineno=103, end_col_offset=30), Constant(value=''input'',
      lineno=103, col_offset=39, end_lineno=103, end_col_offset=46), Constant(value=''output'',
      lineno=103, col_offset=67, end_lineno=103, end_col_offset=75)], values=[Name(id=''query'',
      ctx=Load(), lineno=103, col_offset=32, end_lineno=103, end_col_offset=37), Name(id=''additional_field'',
      ctx=Load(), lineno=103, col_offset=49, end_lineno=103, end_col_offset=65), Name(id=''response'',
      ctx=Load(), lineno=103, col_offset=77, end_lineno=103, end_col_offset=85)],
      lineno=103, col_offset=16, end_lineno=103, end_col_offset=86), orelse=Dict(keys=[Constant(value=''question'',
      lineno=105, col_offset=17, end_lineno=105, end_col_offset=27), Constant(value=''answer'',
      lineno=105, col_offset=36, end_lineno=105, end_col_offset=44)], values=[Name(id=''query'',
      ctx=Load(), lineno=105, col_offset=29, end_lineno=105, end_col_offset=34), Name(id=''response'',
      ctx=Load(), lineno=105, col_offset=46, end_lineno=105, end_col_offset=54)],
      lineno=105, col_offset=16, end_lineno=105, end_col_offset=55), lineno=103, col_offset=16,
      end_lineno=105, end_col_offset=55)], keywords=[], lineno=102, col_offset=12,
      end_lineno=106, end_col_offset=13), lineno=102, col_offset=12, end_lineno=106,
      end_col_offset=13)], orelse=[], lineno=101, col_offset=8, end_lineno=106, end_col_offset=13),
      Return(value=Name(id=''list_to_update'', ctx=Load(), lineno=107, col_offset=15,
      end_lineno=107, end_col_offset=29), lineno=107, col_offset=8, end_lineno=107,
      end_col_offset=29)], decorator_list=[Name(id=''staticmethod'', ctx=Load(), lineno=89,
      col_offset=5, end_lineno=89, end_col_offset=17)], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=90, col_offset=101, end_lineno=90, end_col_offset=105), slice=Name(id=''Dict'',
      ctx=Load(), lineno=90, col_offset=106, end_lineno=90, end_col_offset=110), ctx=Load(),
      lineno=90, col_offset=101, end_lineno=90, end_col_offset=111), lineno=90, col_offset=4,
      end_lineno=107, end_col_offset=29), FunctionDef(name=''get_response_from_llm'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=109, col_offset=30,
      end_lineno=109, end_col_offset=34), arg(arg=''query'', annotation=Name(id=''str'',
      ctx=Load(), lineno=109, col_offset=43, end_lineno=109, end_col_offset=46), lineno=109,
      col_offset=36, end_lineno=109, end_col_offset=46), arg(arg=''context'', annotation=Name(id=''str'',
      ctx=Load(), lineno=109, col_offset=57, end_lineno=109, end_col_offset=60), lineno=109,
      col_offset=48, end_lineno=109, end_col_offset=60)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value=''\n        Get language model
      response to query for given context.\n        Args:\n            query (str):
      The query to be used for generating the response.\n            context (str):
      The context to be used for generating the response.\n        Returns:\n            str:
      The generated response.\n        '', lineno=110, col_offset=8, end_lineno=117,
      end_col_offset=11), lineno=110, col_offset=8, end_lineno=117, end_col_offset=11),
      Assign(targets=[Name(id=''excluded_instructions'', ctx=Store(), lineno=119,
      col_offset=8, end_lineno=119, end_col_offset=29)], value=List(elts=[Constant(value=''What
      is the call code graph'', lineno=119, col_offset=33, end_lineno=119, end_col_offset=62),
      Constant(value=''What is the docstring'', lineno=119, col_offset=64, end_lineno=119,
      end_col_offset=87)], ctx=Load(), lineno=119, col_offset=32, end_lineno=119,
      end_col_offset=88), lineno=119, col_offset=8, end_lineno=119, end_col_offset=88),
      Assign(targets=[Name(id=''filtered_instruct_list'', ctx=Store(), lineno=120,
      col_offset=8, end_lineno=120, end_col_offset=30)], value=ListComp(elt=Name(id=''item'',
      ctx=Load(), lineno=120, col_offset=34, end_lineno=120, end_col_offset=38), generators=[comprehension(target=Name(id=''item'',
      ctx=Store(), lineno=120, col_offset=43, end_lineno=120, end_col_offset=47),
      iter=Attribute(value=Name(id=''self'', ctx=Load(), lineno=120, col_offset=51,
      end_lineno=120, end_col_offset=55), attr=''instruct_list'', ctx=Load(), lineno=120,
      col_offset=51, end_lineno=120, end_col_offset=69), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id=''any'',
      ctx=Load(), lineno=120, col_offset=77, end_lineno=120, end_col_offset=80), args=[GeneratorExp(elt=Call(func=Attribute(value=Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=120, col_offset=81, end_lineno=120, end_col_offset=85), slice=Constant(value=''instruction'',
      lineno=120, col_offset=86, end_lineno=120, end_col_offset=99), ctx=Load(), lineno=120,
      col_offset=81, end_lineno=120, end_col_offset=100), attr=''startswith'', ctx=Load(),
      lineno=120, col_offset=81, end_lineno=120, end_col_offset=111), args=[Name(id=''prefix'',
      ctx=Load(), lineno=120, col_offset=112, end_lineno=120, end_col_offset=118)],
      keywords=[], lineno=120, col_offset=81, end_lineno=120, end_col_offset=119),
      generators=[comprehension(target=Name(id=''prefix'', ctx=Store(), lineno=120,
      col_offset=124, end_lineno=120, end_col_offset=130), iter=Name(id=''excluded_instructions'',
      ctx=Load(), lineno=120, col_offset=134, end_lineno=120, end_col_offset=155),
      ifs=[], is_async=0)], lineno=120, col_offset=80, end_lineno=120, end_col_offset=156)],
      keywords=[], lineno=120, col_offset=77, end_lineno=120, end_col_offset=156),
      lineno=120, col_offset=73, end_lineno=120, end_col_offset=156)], is_async=0)],
      lineno=120, col_offset=33, end_lineno=120, end_col_offset=157), lineno=120,
      col_offset=8, end_lineno=120, end_col_offset=157), Assign(targets=[Name(id=''past_instructs'',
      ctx=Store(), lineno=121, col_offset=8, end_lineno=121, end_col_offset=22)],
      value=Call(func=Attribute(value=Constant(value=''\n'', lineno=121, col_offset=25,
      end_lineno=121, end_col_offset=29), attr=''join'', ctx=Load(), lineno=121, col_offset=25,
      end_lineno=121, end_col_offset=34), args=[ListComp(elt=JoinedStr(values=[Constant(value=''Instruction:
      '', lineno=121, col_offset=36, end_lineno=121, end_col_offset=100), FormattedValue(value=Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=121, col_offset=52, end_lineno=121, end_col_offset=56), slice=Constant(value=''instruction'',
      lineno=121, col_offset=57, end_lineno=121, end_col_offset=70), ctx=Load(), lineno=121,
      col_offset=52, end_lineno=121, end_col_offset=71), conversion=-1, lineno=121,
      col_offset=36, end_lineno=121, end_col_offset=100), Constant(value='' \nOutput:
      '', lineno=121, col_offset=36, end_lineno=121, end_col_offset=100), FormattedValue(value=Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=121, col_offset=84, end_lineno=121, end_col_offset=88), slice=Constant(value=''output'',
      lineno=121, col_offset=89, end_lineno=121, end_col_offset=97), ctx=Load(), lineno=121,
      col_offset=84, end_lineno=121, end_col_offset=98), conversion=-1, lineno=121,
      col_offset=36, end_lineno=121, end_col_offset=100)], lineno=121, col_offset=36,
      end_lineno=121, end_col_offset=100), generators=[comprehension(target=Name(id=''item'',
      ctx=Store(), lineno=121, col_offset=105, end_lineno=121, end_col_offset=109),
      iter=Name(id=''filtered_instruct_list'', ctx=Load(), lineno=121, col_offset=113,
      end_lineno=121, end_col_offset=135), ifs=[], is_async=0)], lineno=121, col_offset=35,
      end_lineno=121, end_col_offset=136)], keywords=[], lineno=121, col_offset=25,
      end_lineno=121, end_col_offset=137), lineno=121, col_offset=8, end_lineno=121,
      end_col_offset=137), Assign(targets=[Name(id=''full_context'', ctx=Store(),
      lineno=122, col_offset=8, end_lineno=122, end_col_offset=20)], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id=''context'',
      ctx=Load(), lineno=122, col_offset=23, end_lineno=122, end_col_offset=30), op=Add(),
      right=Constant(value=''\n'', lineno=122, col_offset=33, end_lineno=122, end_col_offset=37),
      lineno=122, col_offset=23, end_lineno=122, end_col_offset=37), op=Add(), right=Constant(value="Here''s
      some detail about this code:", lineno=122, col_offset=40, end_lineno=122, end_col_offset=77),
      lineno=122, col_offset=23, end_lineno=122, end_col_offset=77), op=Add(), right=Constant(value=''\n'',
      lineno=122, col_offset=80, end_lineno=122, end_col_offset=84), lineno=122, col_offset=23,
      end_lineno=122, end_col_offset=84), op=Add(), right=Name(id=''past_instructs'',
      ctx=Load(), lineno=122, col_offset=87, end_lineno=122, end_col_offset=101),
      lineno=122, col_offset=23, end_lineno=122, end_col_offset=101), lineno=122,
      col_offset=8, end_lineno=122, end_col_offset=101), Try(body=[Assign(targets=[Name(id=''prompt'',
      ctx=Store(), lineno=125, col_offset=12, end_lineno=125, end_col_offset=18)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=125, col_offset=21, end_lineno=125, end_col_offset=25), attr=''prompt'',
      ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=32), attr=''format'',
      ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=39), args=[],
      keywords=[keyword(arg=''context'', value=Name(id=''full_context'', ctx=Load(),
      lineno=125, col_offset=48, end_lineno=125, end_col_offset=60), lineno=125, col_offset=40,
      end_lineno=125, end_col_offset=60), keyword(arg=''query'', value=Name(id=''query'',
      ctx=Load(), lineno=125, col_offset=68, end_lineno=125, end_col_offset=73), lineno=125,
      col_offset=62, end_lineno=125, end_col_offset=73)], lineno=125, col_offset=21,
      end_lineno=125, end_col_offset=74), lineno=125, col_offset=12, end_lineno=125,
      end_col_offset=74), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=19), attr=''info'',
      ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=24), args=[JoinedStr(values=[Constant(value=''Query:
      '', lineno=126, col_offset=25, end_lineno=126, end_col_offset=42), FormattedValue(value=Name(id=''query'',
      ctx=Load(), lineno=126, col_offset=35, end_lineno=126, end_col_offset=40), conversion=-1,
      lineno=126, col_offset=25, end_lineno=126, end_col_offset=42)], lineno=126,
      col_offset=25, end_lineno=126, end_col_offset=42)], keywords=[], lineno=126,
      col_offset=12, end_lineno=126, end_col_offset=43), lineno=126, col_offset=12,
      end_lineno=126, end_col_offset=43), Assign(targets=[Name(id=''response'', ctx=Store(),
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=20)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=127, col_offset=23, end_lineno=127, end_col_offset=27), attr=''llm'',
      ctx=Load(), lineno=127, col_offset=23, end_lineno=127, end_col_offset=31), args=[Name(id=''prompt'',
      ctx=Load(), lineno=127, col_offset=32, end_lineno=127, end_col_offset=38)],
      keywords=[], lineno=127, col_offset=23, end_lineno=127, end_col_offset=39),
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=39), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=19), attr=''info'',
      ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=24), args=[JoinedStr(values=[Constant(value=''Response:
      '', lineno=128, col_offset=25, end_lineno=128, end_col_offset=48), FormattedValue(value=Name(id=''response'',
      ctx=Load(), lineno=128, col_offset=38, end_lineno=128, end_col_offset=46), conversion=-1,
      lineno=128, col_offset=25, end_lineno=128, end_col_offset=48)], lineno=128,
      col_offset=25, end_lineno=128, end_col_offset=48)], keywords=[], lineno=128,
      col_offset=12, end_lineno=128, end_col_offset=49), lineno=128, col_offset=12,
      end_lineno=128, end_col_offset=49)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
      ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=18), attr=''error'',
      ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=24), args=[Constant(value=''Failed
      to generate model response'', lineno=130, col_offset=25, end_lineno=130, end_col_offset=60)],
      keywords=[], lineno=130, col_offset=12, end_lineno=130, end_col_offset=61),
      lineno=130, col_offset=12, end_lineno=130, end_col_offset=61)], lineno=129,
      col_offset=8, end_lineno=130, end_col_offset=61)], orelse=[], finalbody=[],
      lineno=124, col_offset=8, end_lineno=130, end_col_offset=61), Return(value=Name(id=''response'',
      ctx=Load(), lineno=131, col_offset=15, end_lineno=131, end_col_offset=23), lineno=131,
      col_offset=8, end_lineno=131, end_col_offset=23)], decorator_list=[], returns=Name(id=''str'',
      ctx=Load(), lineno=109, col_offset=65, end_lineno=109, end_col_offset=68), lineno=109,
      col_offset=4, end_lineno=131, end_col_offset=23), FunctionDef(name=''process_question'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=133, col_offset=25,
      end_lineno=133, end_col_offset=29), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=133, col_offset=46, end_lineno=133, end_col_offset=49), lineno=133,
      col_offset=31, end_lineno=133, end_col_offset=49), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=133, col_offset=64, end_lineno=133,
      end_col_offset=67), lineno=133, col_offset=51, end_lineno=133, end_col_offset=67),
      arg(arg=''query'', annotation=Name(id=''str'', ctx=Load(), lineno=133, col_offset=76,
      end_lineno=133, end_col_offset=79), lineno=133, col_offset=69, end_lineno=133,
      end_col_offset=79), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
      lineno=133, col_offset=90, end_lineno=133, end_col_offset=93), lineno=133, col_offset=81,
      end_lineno=133, end_col_offset=93), arg(arg=''info'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=133, col_offset=101, end_lineno=133, end_col_offset=105),
      lineno=133, col_offset=95, end_lineno=133, end_col_offset=105)], kwonlyargs=[],
      kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Process
      question and add the generated response to the instruct_list.\n        Args:\n            question_type
      (str): The type of question to be processed.\n            question_id (str):
      The ID of the question to be processed.\n            query (str): The query
      to be processed.\n            context (str): The context to be used for generating
      the response.\n            info (Dict): The information of the Python file.\n        Returns:\n            None\n        '',
      lineno=134, col_offset=8, end_lineno=144, end_col_offset=11), lineno=134, col_offset=8,
      end_lineno=144, end_col_offset=11), If(test=Call(func=Attribute(value=Name(id=''question_id'',
      ctx=Load(), lineno=145, col_offset=11, end_lineno=145, end_col_offset=22), attr=''endswith'',
      ctx=Load(), lineno=145, col_offset=11, end_lineno=145, end_col_offset=31), args=[Constant(value=''code_graph'',
      lineno=145, col_offset=32, end_lineno=145, end_col_offset=44)], keywords=[],
      lineno=145, col_offset=11, end_lineno=145, end_col_offset=45), body=[Assign(targets=[Name(id=''response'',
      ctx=Store(), lineno=146, col_offset=12, end_lineno=146, end_col_offset=20)],
      value=Call(func=Attribute(value=Name(id=''info'', ctx=Load(), lineno=146, col_offset=23,
      end_lineno=146, end_col_offset=27), attr=''get'', ctx=Load(), lineno=146, col_offset=23,
      end_lineno=146, end_col_offset=31), args=[Name(id=''question_id'', ctx=Load(),
      lineno=146, col_offset=32, end_lineno=146, end_col_offset=43), Dict(keys=[],
      values=[], lineno=146, col_offset=45, end_lineno=146, end_col_offset=47)], keywords=[],
      lineno=146, col_offset=23, end_lineno=146, end_col_offset=48), lineno=146, col_offset=12,
      end_lineno=146, end_col_offset=48)], orelse=[Assign(targets=[Name(id=''response'',
      ctx=Store(), lineno=148, col_offset=12, end_lineno=148, end_col_offset=20)],
      value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=148, col_offset=69, end_lineno=148, end_col_offset=73), attr=''use_llm'',
      ctx=Load(), lineno=148, col_offset=69, end_lineno=148, end_col_offset=81), Call(func=Attribute(value=Name(id=''question_id'',
      ctx=Load(), lineno=148, col_offset=86, end_lineno=148, end_col_offset=97), attr=''endswith'',
      ctx=Load(), lineno=148, col_offset=86, end_lineno=148, end_col_offset=106),
      args=[Constant(value=''purpose'', lineno=148, col_offset=107, end_lineno=148,
      end_col_offset=116)], keywords=[], lineno=148, col_offset=86, end_lineno=148,
      end_col_offset=117)], lineno=148, col_offset=69, end_lineno=148, end_col_offset=117),
      body=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=148, col_offset=23,
      end_lineno=148, end_col_offset=27), attr=''get_response_from_llm'', ctx=Load(),
      lineno=148, col_offset=23, end_lineno=148, end_col_offset=49), args=[Name(id=''query'',
      ctx=Load(), lineno=148, col_offset=50, end_lineno=148, end_col_offset=55), Name(id=''context'',
      ctx=Load(), lineno=148, col_offset=57, end_lineno=148, end_col_offset=64)],
      keywords=[], lineno=148, col_offset=23, end_lineno=148, end_col_offset=65),
      orelse=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=148, col_offset=123,
      end_lineno=148, end_col_offset=127), attr=''clean_and_get_unique_elements'',
      ctx=Load(), lineno=148, col_offset=123, end_lineno=148, end_col_offset=157),
      args=[Call(func=Name(id=''str'', ctx=Load(), lineno=148, col_offset=158, end_lineno=148,
      end_col_offset=161), args=[Call(func=Attribute(value=Name(id=''info'', ctx=Load(),
      lineno=148, col_offset=162, end_lineno=148, end_col_offset=166), attr=''get'',
      ctx=Load(), lineno=148, col_offset=162, end_lineno=148, end_col_offset=170),
      args=[Name(id=''question_id'', ctx=Load(), lineno=148, col_offset=171, end_lineno=148,
      end_col_offset=182), Constant(value='''', lineno=148, col_offset=184, end_lineno=148,
      end_col_offset=186)], keywords=[], lineno=148, col_offset=162, end_lineno=148,
      end_col_offset=187)], keywords=[], lineno=148, col_offset=158, end_lineno=148,
      end_col_offset=188)], keywords=[], lineno=148, col_offset=123, end_lineno=148,
      end_col_offset=189), lineno=148, col_offset=23, end_lineno=148, end_col_offset=189),
      lineno=148, col_offset=12, end_lineno=148, end_col_offset=189)], lineno=145,
      col_offset=8, end_lineno=148, end_col_offset=189), If(test=BoolOp(op=And(),
      values=[Name(id=''response'', ctx=Load(), lineno=149, col_offset=11, end_lineno=149,
      end_col_offset=19), Compare(left=Name(id=''response'', ctx=Load(), lineno=149,
      col_offset=24, end_lineno=149, end_col_offset=32), ops=[NotEq()], comparators=[Constant(value=''None'',
      lineno=149, col_offset=36, end_lineno=149, end_col_offset=42)], lineno=149,
      col_offset=24, end_lineno=149, end_col_offset=42)], lineno=149, col_offset=11,
      end_lineno=149, end_col_offset=42), body=[Assign(targets=[Name(id=''response_str'',
      ctx=Store(), lineno=150, col_offset=12, end_lineno=150, end_col_offset=24)],
      value=Call(func=Attribute(value=Call(func=Name(id=''str'', ctx=Load(), lineno=150,
      col_offset=27, end_lineno=150, end_col_offset=30), args=[Name(id=''response'',
      ctx=Load(), lineno=150, col_offset=31, end_lineno=150, end_col_offset=39)],
      keywords=[], lineno=150, col_offset=27, end_lineno=150, end_col_offset=40),
      attr=''strip'', ctx=Load(), lineno=150, col_offset=27, end_lineno=150, end_col_offset=46),
      args=[], keywords=[], lineno=150, col_offset=27, end_lineno=150, end_col_offset=48),
      lineno=150, col_offset=12, end_lineno=150, end_col_offset=48), If(test=Name(id=''response_str'',
      ctx=Load(), lineno=151, col_offset=15, end_lineno=151, end_col_offset=27), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=20), attr=''instruct_list'',
      ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=34), attr=''append'',
      ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=41), args=[Dict(keys=[Constant(value=''instruction'',
      lineno=152, col_offset=43, end_lineno=152, end_col_offset=56), Constant(value=''input'',
      lineno=152, col_offset=65, end_lineno=152, end_col_offset=72), Constant(value=''output'',
      lineno=152, col_offset=83, end_lineno=152, end_col_offset=91)], values=[Name(id=''query'',
      ctx=Load(), lineno=152, col_offset=58, end_lineno=152, end_col_offset=63), Name(id=''context'',
      ctx=Load(), lineno=152, col_offset=74, end_lineno=152, end_col_offset=81), Name(id=''response_str'',
      ctx=Load(), lineno=152, col_offset=93, end_lineno=152, end_col_offset=105)],
      lineno=152, col_offset=42, end_lineno=152, end_col_offset=106)], keywords=[],
      lineno=152, col_offset=16, end_lineno=152, end_col_offset=107), lineno=152,
      col_offset=16, end_lineno=152, end_col_offset=107)], orelse=[], lineno=151,
      col_offset=12, end_lineno=152, end_col_offset=107)], orelse=[], lineno=149,
      col_offset=8, end_lineno=152, end_col_offset=107)], decorator_list=[], returns=Constant(value=None,
      lineno=133, col_offset=110, end_lineno=133, end_col_offset=114), lineno=133,
      col_offset=4, end_lineno=152, end_col_offset=107), FunctionDef(name=''get_string_from_info'',
      args=arguments(posonlyargs=[], args=[arg(arg=''info'', lineno=155, col_offset=29,
      end_lineno=155, end_col_offset=33), arg(arg=''item_type'', lineno=155, col_offset=35,
      end_lineno=155, end_col_offset=44)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[If(test=Subscript(value=Name(id=''info'', ctx=Load(), lineno=156, col_offset=11,
      end_lineno=156, end_col_offset=15), slice=Name(id=''item_type'', ctx=Load(),
      lineno=156, col_offset=16, end_lineno=156, end_col_offset=25), ctx=Load(), lineno=156,
      col_offset=11, end_lineno=156, end_col_offset=26), body=[Assign(targets=[Name(id=''items'',
      ctx=Store(), lineno=157, col_offset=12, end_lineno=157, end_col_offset=17)],
      value=ListComp(elt=Call(func=Attribute(value=Name(id=''item'', ctx=Load(), lineno=157,
      col_offset=21, end_lineno=157, end_col_offset=25), attr=''strip'', ctx=Load(),
      lineno=157, col_offset=21, end_lineno=157, end_col_offset=31), args=[], keywords=[],
      lineno=157, col_offset=21, end_lineno=157, end_col_offset=33), generators=[comprehension(target=Name(id=''item'',
      ctx=Store(), lineno=157, col_offset=38, end_lineno=157, end_col_offset=42),
      iter=Call(func=Attribute(value=Call(func=Name(id=''str'', ctx=Load(), lineno=157,
      col_offset=46, end_lineno=157, end_col_offset=49), args=[Subscript(value=Name(id=''info'',
      ctx=Load(), lineno=157, col_offset=50, end_lineno=157, end_col_offset=54), slice=Name(id=''item_type'',
      ctx=Load(), lineno=157, col_offset=55, end_lineno=157, end_col_offset=64), ctx=Load(),
      lineno=157, col_offset=50, end_lineno=157, end_col_offset=65)], keywords=[],
      lineno=157, col_offset=46, end_lineno=157, end_col_offset=66), attr=''split'',
      ctx=Load(), lineno=157, col_offset=46, end_lineno=157, end_col_offset=72), args=[Constant(value='','',
      lineno=157, col_offset=73, end_lineno=157, end_col_offset=76)], keywords=[],
      lineno=157, col_offset=46, end_lineno=157, end_col_offset=77), ifs=[Name(id=''item'',
      ctx=Load(), lineno=157, col_offset=81, end_lineno=157, end_col_offset=85)],
      is_async=0)], lineno=157, col_offset=20, end_lineno=157, end_col_offset=86),
      lineno=157, col_offset=12, end_lineno=157, end_col_offset=86), Return(value=Call(func=Attribute(value=Constant(value='',
      '', lineno=158, col_offset=19, end_lineno=158, end_col_offset=23), attr=''join'',
      ctx=Load(), lineno=158, col_offset=19, end_lineno=158, end_col_offset=28), args=[Name(id=''items'',
      ctx=Load(), lineno=158, col_offset=29, end_lineno=158, end_col_offset=34)],
      keywords=[], lineno=158, col_offset=19, end_lineno=158, end_col_offset=35),
      lineno=158, col_offset=12, end_lineno=158, end_col_offset=35)], orelse=[], lineno=156,
      col_offset=8, end_lineno=158, end_col_offset=35), Return(value=Constant(value='''',
      lineno=159, col_offset=15, end_lineno=159, end_col_offset=17), lineno=159, col_offset=8,
      end_lineno=159, end_col_offset=17)], decorator_list=[Name(id=''staticmethod'',
      ctx=Load(), lineno=154, col_offset=5, end_lineno=154, end_col_offset=17)], lineno=155,
      col_offset=4, end_lineno=159, end_col_offset=17), FunctionDef(name=''process_question_type'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=161, col_offset=30,
      end_lineno=161, end_col_offset=34), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=161, col_offset=51, end_lineno=161, end_col_offset=54), lineno=161,
      col_offset=36, end_lineno=161, end_col_offset=54), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=161, col_offset=69, end_lineno=161,
      end_col_offset=72), lineno=161, col_offset=56, end_lineno=161, end_col_offset=72),
      arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load(), lineno=161,
      col_offset=89, end_lineno=161, end_col_offset=92), lineno=161, col_offset=74,
      end_lineno=161, end_col_offset=92)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n        Process questions related to a file,
      function, class, or method.\n        Args:\n            question_type (str):
      The type of question to be processed.\n            question_id (str): The ID
      of the question to be processed.\n            question_text (str): The text
      of the question to be processed.\n        Returns:\n            None\n        '',
      lineno=162, col_offset=8, end_lineno=170, end_col_offset=11), lineno=162, col_offset=8,
      end_lineno=170, end_col_offset=11), If(test=Compare(left=Name(id=''question_type'',
      ctx=Load(), lineno=171, col_offset=11, end_lineno=171, end_col_offset=24), ops=[Eq()],
      comparators=[Constant(value=''file'', lineno=171, col_offset=28, end_lineno=171,
      end_col_offset=34)], lineno=171, col_offset=11, end_lineno=171, end_col_offset=34),
      body=[Assign(targets=[Name(id=''query'', ctx=Store(), lineno=172, col_offset=12,
      end_lineno=172, end_col_offset=17)], value=Call(func=Attribute(value=Name(id=''question_text'',
      ctx=Load(), lineno=172, col_offset=20, end_lineno=172, end_col_offset=33), attr=''format'',
      ctx=Load(), lineno=172, col_offset=20, end_lineno=172, end_col_offset=40), args=[],
      keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=172, col_offset=50, end_lineno=172, end_col_offset=54), attr=''base_name'',
      ctx=Load(), lineno=172, col_offset=50, end_lineno=172, end_col_offset=64), lineno=172,
      col_offset=41, end_lineno=172, end_col_offset=64)], lineno=172, col_offset=20,
      end_lineno=172, end_col_offset=65), lineno=172, col_offset=12, end_lineno=172,
      end_col_offset=65), Assign(targets=[Name(id=''context'', ctx=Store(), lineno=173,
      col_offset=12, end_lineno=173, end_col_offset=19)], value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=173, col_offset=22, end_lineno=173, end_col_offset=26), attr=''file_details'',
      ctx=Load(), lineno=173, col_offset=22, end_lineno=173, end_col_offset=39), slice=Constant(value=''file_info'',
      lineno=173, col_offset=40, end_lineno=173, end_col_offset=51), ctx=Load(), lineno=173,
      col_offset=22, end_lineno=173, end_col_offset=52), slice=Constant(value=''file_code'',
      lineno=173, col_offset=53, end_lineno=173, end_col_offset=64), ctx=Load(), lineno=173,
      col_offset=22, end_lineno=173, end_col_offset=65), lineno=173, col_offset=12,
      end_lineno=173, end_col_offset=65), Assign(targets=[Name(id=''info'', ctx=Store(),
      lineno=174, col_offset=12, end_lineno=174, end_col_offset=16)], value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=174, col_offset=19, end_lineno=174, end_col_offset=23), attr=''file_details'',
      ctx=Load(), lineno=174, col_offset=19, end_lineno=174, end_col_offset=36), slice=Constant(value=''file_info'',
      lineno=174, col_offset=37, end_lineno=174, end_col_offset=48), ctx=Load(), lineno=174,
      col_offset=19, end_lineno=174, end_col_offset=49), lineno=174, col_offset=12,
      end_lineno=174, end_col_offset=49), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=175, col_offset=12, end_lineno=175, end_col_offset=16), attr=''process_question'',
      ctx=Load(), lineno=175, col_offset=12, end_lineno=175, end_col_offset=33), args=[Name(id=''question_type'',
      ctx=Load(), lineno=175, col_offset=34, end_lineno=175, end_col_offset=47), Name(id=''question_id'',
      ctx=Load(), lineno=175, col_offset=49, end_lineno=175, end_col_offset=60), Name(id=''query'',
      ctx=Load(), lineno=175, col_offset=62, end_lineno=175, end_col_offset=67), Name(id=''context'',
      ctx=Load(), lineno=175, col_offset=69, end_lineno=175, end_col_offset=76), Name(id=''info'',
      ctx=Load(), lineno=175, col_offset=78, end_lineno=175, end_col_offset=82)],
      keywords=[], lineno=175, col_offset=12, end_lineno=175, end_col_offset=83),
      lineno=175, col_offset=12, end_lineno=175, end_col_offset=83)], orelse=[If(test=Compare(left=Name(id=''question_type'',
      ctx=Load(), lineno=176, col_offset=13, end_lineno=176, end_col_offset=26), ops=[Eq()],
      comparators=[Constant(value=''method'', lineno=176, col_offset=30, end_lineno=176,
      end_col_offset=38)], lineno=176, col_offset=13, end_lineno=176, end_col_offset=38),
      body=[For(target=Tuple(elts=[Name(id=''class_name'', ctx=Store(), lineno=177,
      col_offset=16, end_lineno=177, end_col_offset=26), Name(id=''class_info'', ctx=Store(),
      lineno=177, col_offset=28, end_lineno=177, end_col_offset=38)], ctx=Store(),
      lineno=177, col_offset=16, end_lineno=177, end_col_offset=38), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=177, col_offset=42, end_lineno=177, end_col_offset=46), attr=''file_details'',
      ctx=Load(), lineno=177, col_offset=42, end_lineno=177, end_col_offset=59), slice=Constant(value=''classes'',
      lineno=177, col_offset=60, end_lineno=177, end_col_offset=69), ctx=Load(), lineno=177,
      col_offset=42, end_lineno=177, end_col_offset=70), attr=''items'', ctx=Load(),
      lineno=177, col_offset=42, end_lineno=177, end_col_offset=76), args=[], keywords=[],
      lineno=177, col_offset=42, end_lineno=177, end_col_offset=78), body=[For(target=Tuple(elts=[Name(id=''key'',
      ctx=Store(), lineno=178, col_offset=20, end_lineno=178, end_col_offset=23),
      Name(id=''method_info'', ctx=Store(), lineno=178, col_offset=25, end_lineno=178,
      end_col_offset=36)], ctx=Store(), lineno=178, col_offset=20, end_lineno=178,
      end_col_offset=36), iter=Call(func=Attribute(value=Name(id=''class_info'', ctx=Load(),
      lineno=178, col_offset=40, end_lineno=178, end_col_offset=50), attr=''items'',
      ctx=Load(), lineno=178, col_offset=40, end_lineno=178, end_col_offset=56), args=[],
      keywords=[], lineno=178, col_offset=40, end_lineno=178, end_col_offset=58),
      body=[If(test=Call(func=Attribute(value=Name(id=''key'', ctx=Load(), lineno=179,
      col_offset=23, end_lineno=179, end_col_offset=26), attr=''startswith'', ctx=Load(),
      lineno=179, col_offset=23, end_lineno=179, end_col_offset=37), args=[Constant(value=''class_method_'',
      lineno=179, col_offset=38, end_lineno=179, end_col_offset=53)], keywords=[],
      lineno=179, col_offset=23, end_lineno=179, end_col_offset=54), body=[Assign(targets=[Name(id=''method_name'',
      ctx=Store(), lineno=180, col_offset=24, end_lineno=180, end_col_offset=35)],
      value=Subscript(value=Name(id=''key'', ctx=Load(), lineno=180, col_offset=38,
      end_lineno=180, end_col_offset=41), slice=Slice(lower=Call(func=Name(id=''len'',
      ctx=Load(), lineno=180, col_offset=42, end_lineno=180, end_col_offset=45), args=[Constant(value=''class_method_'',
      lineno=180, col_offset=46, end_lineno=180, end_col_offset=61)], keywords=[],
      lineno=180, col_offset=42, end_lineno=180, end_col_offset=62), lineno=180, col_offset=42,
      end_lineno=180, end_col_offset=63), ctx=Load(), lineno=180, col_offset=38, end_lineno=180,
      end_col_offset=64), lineno=180, col_offset=24, end_lineno=180, end_col_offset=64),
      Assign(targets=[Name(id=''context'', ctx=Store(), lineno=181, col_offset=24,
      end_lineno=181, end_col_offset=31)], value=Subscript(value=Name(id=''method_info'',
      ctx=Load(), lineno=181, col_offset=34, end_lineno=181, end_col_offset=45), slice=Constant(value=''method_code'',
      lineno=181, col_offset=46, end_lineno=181, end_col_offset=59), ctx=Load(), lineno=181,
      col_offset=34, end_lineno=181, end_col_offset=60), lineno=181, col_offset=24,
      end_lineno=181, end_col_offset=60), Assign(targets=[Name(id=''mapping'', ctx=Store(),
      lineno=182, col_offset=24, end_lineno=182, end_col_offset=31)], value=Dict(keys=[Constant(value=''class_name'',
      lineno=182, col_offset=35, end_lineno=182, end_col_offset=47), Constant(value=''method_name'',
      lineno=182, col_offset=61, end_lineno=182, end_col_offset=74)], values=[Name(id=''class_name'',
      ctx=Load(), lineno=182, col_offset=49, end_lineno=182, end_col_offset=59), Name(id=''method_name'',
      ctx=Load(), lineno=182, col_offset=76, end_lineno=182, end_col_offset=87)],
      lineno=182, col_offset=34, end_lineno=182, end_col_offset=88), lineno=182, col_offset=24,
      end_lineno=182, end_col_offset=88), Assign(targets=[Name(id=''query'', ctx=Store(),
      lineno=183, col_offset=24, end_lineno=183, end_col_offset=29)], value=Call(func=Attribute(value=Name(id=''question_text'',
      ctx=Load(), lineno=183, col_offset=32, end_lineno=183, end_col_offset=45), attr=''format'',
      ctx=Load(), lineno=183, col_offset=32, end_lineno=183, end_col_offset=52), args=[],
      keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=183, col_offset=62, end_lineno=183, end_col_offset=66), attr=''base_name'',
      ctx=Load(), lineno=183, col_offset=62, end_lineno=183, end_col_offset=76), lineno=183,
      col_offset=53, end_lineno=183, end_col_offset=76), keyword(value=Name(id=''mapping'',
      ctx=Load(), lineno=183, col_offset=80, end_lineno=183, end_col_offset=87), lineno=183,
      col_offset=78, end_lineno=183, end_col_offset=87)], lineno=183, col_offset=32,
      end_lineno=183, end_col_offset=88), lineno=183, col_offset=24, end_lineno=183,
      end_col_offset=88), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=184, col_offset=24, end_lineno=184, end_col_offset=28), attr=''process_question'',
      ctx=Load(), lineno=184, col_offset=24, end_lineno=184, end_col_offset=45), args=[Name(id=''question_type'',
      ctx=Load(), lineno=184, col_offset=46, end_lineno=184, end_col_offset=59), Name(id=''question_id'',
      ctx=Load(), lineno=184, col_offset=61, end_lineno=184, end_col_offset=72), Name(id=''query'',
      ctx=Load(), lineno=184, col_offset=74, end_lineno=184, end_col_offset=79), Name(id=''context'',
      ctx=Load(), lineno=184, col_offset=81, end_lineno=184, end_col_offset=88), Name(id=''method_info'',
      ctx=Load(), lineno=184, col_offset=90, end_lineno=184, end_col_offset=101)],
      keywords=[], lineno=184, col_offset=24, end_lineno=184, end_col_offset=102),
      lineno=184, col_offset=24, end_lineno=184, end_col_offset=102)], orelse=[],
      lineno=179, col_offset=20, end_lineno=184, end_col_offset=102)], orelse=[],
      lineno=178, col_offset=16, end_lineno=184, end_col_offset=102)], orelse=[],
      lineno=177, col_offset=12, end_lineno=184, end_col_offset=102)], orelse=[For(target=Tuple(elts=[Name(id=''name'',
      ctx=Store(), lineno=186, col_offset=16, end_lineno=186, end_col_offset=20),
      Name(id=''info'', ctx=Store(), lineno=186, col_offset=22, end_lineno=186, end_col_offset=26)],
      ctx=Store(), lineno=186, col_offset=16, end_lineno=186, end_col_offset=26),
      iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=186, col_offset=30, end_lineno=186, end_col_offset=34), attr=''file_details'',
      ctx=Load(), lineno=186, col_offset=30, end_lineno=186, end_col_offset=47), slice=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=186, col_offset=48, end_lineno=186, end_col_offset=52), attr=''question_mapping'',
      ctx=Load(), lineno=186, col_offset=48, end_lineno=186, end_col_offset=69), slice=Name(id=''question_type'',
      ctx=Load(), lineno=186, col_offset=70, end_lineno=186, end_col_offset=83), ctx=Load(),
      lineno=186, col_offset=48, end_lineno=186, end_col_offset=84), ctx=Load(), lineno=186,
      col_offset=30, end_lineno=186, end_col_offset=85), attr=''items'', ctx=Load(),
      lineno=186, col_offset=30, end_lineno=186, end_col_offset=91), args=[], keywords=[],
      lineno=186, col_offset=30, end_lineno=186, end_col_offset=93), body=[Assign(targets=[Name(id=''context'',
      ctx=Store(), lineno=187, col_offset=16, end_lineno=187, end_col_offset=23)],
      value=Subscript(value=Name(id=''info'', ctx=Load(), lineno=187, col_offset=26,
      end_lineno=187, end_col_offset=30), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=187, col_offset=34, end_lineno=187, end_col_offset=47), conversion=-1,
      lineno=187, col_offset=31, end_lineno=187, end_col_offset=54), Constant(value=''_code'',
      lineno=187, col_offset=31, end_lineno=187, end_col_offset=54)], lineno=187,
      col_offset=31, end_lineno=187, end_col_offset=54), ctx=Load(), lineno=187, col_offset=26,
      end_lineno=187, end_col_offset=55), lineno=187, col_offset=16, end_lineno=187,
      end_col_offset=55), Assign(targets=[Name(id=''mapping'', ctx=Store(), lineno=188,
      col_offset=16, end_lineno=188, end_col_offset=23)], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=188, col_offset=30, end_lineno=188, end_col_offset=43), conversion=-1,
      lineno=188, col_offset=27, end_lineno=188, end_col_offset=50), Constant(value=''_name'',
      lineno=188, col_offset=27, end_lineno=188, end_col_offset=50)], lineno=188,
      col_offset=27, end_lineno=188, end_col_offset=50)], values=[Name(id=''name'',
      ctx=Load(), lineno=188, col_offset=52, end_lineno=188, end_col_offset=56)],
      lineno=188, col_offset=26, end_lineno=188, end_col_offset=57), lineno=188, col_offset=16,
      end_lineno=188, end_col_offset=57), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_id'',
      ctx=Load(), lineno=189, col_offset=19, end_lineno=189, end_col_offset=30), ops=[Eq()],
      comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=189, col_offset=37, end_lineno=189, end_col_offset=50), conversion=-1,
      lineno=189, col_offset=34, end_lineno=189, end_col_offset=60), Constant(value=''_purpose'',
      lineno=189, col_offset=34, end_lineno=189, end_col_offset=60)], lineno=189,
      col_offset=34, end_lineno=189, end_col_offset=60)], lineno=189, col_offset=19,
      end_lineno=189, end_col_offset=60), Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=189, col_offset=65, end_lineno=189, end_col_offset=69), attr=''use_llm'',
      ctx=Load(), lineno=189, col_offset=65, end_lineno=189, end_col_offset=77)],
      lineno=189, col_offset=19, end_lineno=189, end_col_offset=77), body=[Assign(targets=[Name(id=''variables_string'',
      ctx=Store(), lineno=190, col_offset=20, end_lineno=190, end_col_offset=36)],
      value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=190, col_offset=39,
      end_lineno=190, end_col_offset=43), attr=''get_string_from_info'', ctx=Load(),
      lineno=190, col_offset=39, end_lineno=190, end_col_offset=64), args=[Name(id=''info'',
      ctx=Load(), lineno=190, col_offset=65, end_lineno=190, end_col_offset=69), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=190, col_offset=74, end_lineno=190, end_col_offset=87), conversion=-1,
      lineno=190, col_offset=71, end_lineno=190, end_col_offset=99), Constant(value=''_variables'',
      lineno=190, col_offset=71, end_lineno=190, end_col_offset=99)], lineno=190,
      col_offset=71, end_lineno=190, end_col_offset=99)], keywords=[], lineno=190,
      col_offset=39, end_lineno=190, end_col_offset=100), lineno=190, col_offset=20,
      end_lineno=190, end_col_offset=100), Assign(targets=[Name(id=''inputs_string'',
      ctx=Store(), lineno=191, col_offset=20, end_lineno=191, end_col_offset=33)],
      value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=191, col_offset=36,
      end_lineno=191, end_col_offset=40), attr=''get_string_from_info'', ctx=Load(),
      lineno=191, col_offset=36, end_lineno=191, end_col_offset=61), args=[Name(id=''info'',
      ctx=Load(), lineno=191, col_offset=62, end_lineno=191, end_col_offset=66), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=191, col_offset=71, end_lineno=191, end_col_offset=84), conversion=-1,
      lineno=191, col_offset=68, end_lineno=191, end_col_offset=93), Constant(value=''_inputs'',
      lineno=191, col_offset=68, end_lineno=191, end_col_offset=93)], lineno=191,
      col_offset=68, end_lineno=191, end_col_offset=93)], keywords=[], lineno=191,
      col_offset=36, end_lineno=191, end_col_offset=94), lineno=191, col_offset=20,
      end_lineno=191, end_col_offset=94), Assign(targets=[Name(id=''combined_string'',
      ctx=Store(), lineno=192, col_offset=20, end_lineno=192, end_col_offset=35)],
      value=Call(func=Attribute(value=Constant(value='', '', lineno=192, col_offset=38,
      end_lineno=192, end_col_offset=42), attr=''join'', ctx=Load(), lineno=192, col_offset=38,
      end_lineno=192, end_col_offset=47), args=[ListComp(elt=Name(id=''s'', ctx=Load(),
      lineno=192, col_offset=49, end_lineno=192, end_col_offset=50), generators=[comprehension(target=Name(id=''s'',
      ctx=Store(), lineno=192, col_offset=55, end_lineno=192, end_col_offset=56),
      iter=List(elts=[Name(id=''variables_string'', ctx=Load(), lineno=192, col_offset=61,
      end_lineno=192, end_col_offset=77), Name(id=''inputs_string'', ctx=Load(), lineno=192,
      col_offset=79, end_lineno=192, end_col_offset=92)], ctx=Load(), lineno=192,
      col_offset=60, end_lineno=192, end_col_offset=93), ifs=[Name(id=''s'', ctx=Load(),
      lineno=192, col_offset=97, end_lineno=192, end_col_offset=98)], is_async=0)],
      lineno=192, col_offset=48, end_lineno=192, end_col_offset=99)], keywords=[],
      lineno=192, col_offset=38, end_lineno=192, end_col_offset=100), lineno=192,
      col_offset=20, end_lineno=192, end_col_offset=100), Assign(targets=[Subscript(value=Name(id=''mapping'',
      ctx=Load(), lineno=193, col_offset=20, end_lineno=193, end_col_offset=27), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=193, col_offset=31, end_lineno=193, end_col_offset=44), conversion=-1,
      lineno=193, col_offset=28, end_lineno=193, end_col_offset=56), Constant(value=''_variables'',
      lineno=193, col_offset=28, end_lineno=193, end_col_offset=56)], lineno=193,
      col_offset=28, end_lineno=193, end_col_offset=56), ctx=Store(), lineno=193,
      col_offset=20, end_lineno=193, end_col_offset=57)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=193, col_offset=60, end_lineno=193, end_col_offset=64), attr=''clean_and_get_unique_elements'',
      ctx=Load(), lineno=193, col_offset=60, end_lineno=193, end_col_offset=94), args=[Name(id=''combined_string'',
      ctx=Load(), lineno=193, col_offset=95, end_lineno=193, end_col_offset=110)],
      keywords=[], lineno=193, col_offset=60, end_lineno=193, end_col_offset=111),
      lineno=193, col_offset=20, end_lineno=193, end_col_offset=111), If(test=Compare(left=Name(id=''question_type'',
      ctx=Load(), lineno=195, col_offset=23, end_lineno=195, end_col_offset=36), ops=[Eq()],
      comparators=[Constant(value=''class'', lineno=195, col_offset=40, end_lineno=195,
      end_col_offset=47)], lineno=195, col_offset=23, end_lineno=195, end_col_offset=47),
      body=[Assign(targets=[Name(id=''methods_string'', ctx=Store(), lineno=196, col_offset=24,
      end_lineno=196, end_col_offset=38)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=196, col_offset=41, end_lineno=196, end_col_offset=45), attr=''get_string_from_info'',
      ctx=Load(), lineno=196, col_offset=41, end_lineno=196, end_col_offset=66), args=[Name(id=''info'',
      ctx=Load(), lineno=196, col_offset=67, end_lineno=196, end_col_offset=71), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=196, col_offset=76, end_lineno=196, end_col_offset=89), conversion=-1,
      lineno=196, col_offset=73, end_lineno=196, end_col_offset=99), Constant(value=''_methods'',
      lineno=196, col_offset=73, end_lineno=196, end_col_offset=99)], lineno=196,
      col_offset=73, end_lineno=196, end_col_offset=99)], keywords=[], lineno=196,
      col_offset=41, end_lineno=196, end_col_offset=100), lineno=196, col_offset=24,
      end_lineno=196, end_col_offset=100), Assign(targets=[Subscript(value=Name(id=''mapping'',
      ctx=Load(), lineno=197, col_offset=24, end_lineno=197, end_col_offset=31), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=197, col_offset=35, end_lineno=197, end_col_offset=48), conversion=-1,
      lineno=197, col_offset=32, end_lineno=197, end_col_offset=58), Constant(value=''_methods'',
      lineno=197, col_offset=32, end_lineno=197, end_col_offset=58)], lineno=197,
      col_offset=32, end_lineno=197, end_col_offset=58), ctx=Store(), lineno=197,
      col_offset=24, end_lineno=197, end_col_offset=59)], value=Name(id=''methods_string'',
      ctx=Load(), lineno=197, col_offset=62, end_lineno=197, end_col_offset=76), lineno=197,
      col_offset=24, end_lineno=197, end_col_offset=76)], orelse=[], lineno=195, col_offset=20,
      end_lineno=197, end_col_offset=76)], orelse=[], lineno=189, col_offset=16, end_lineno=197,
      end_col_offset=76), Assign(targets=[Name(id=''query'', ctx=Store(), lineno=199,
      col_offset=16, end_lineno=199, end_col_offset=21)], value=Call(func=Attribute(value=Name(id=''question_text'',
      ctx=Load(), lineno=199, col_offset=24, end_lineno=199, end_col_offset=37), attr=''format'',
      ctx=Load(), lineno=199, col_offset=24, end_lineno=199, end_col_offset=44), args=[],
      keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=199, col_offset=54, end_lineno=199, end_col_offset=58), attr=''base_name'',
      ctx=Load(), lineno=199, col_offset=54, end_lineno=199, end_col_offset=68), lineno=199,
      col_offset=45, end_lineno=199, end_col_offset=68), keyword(value=Name(id=''mapping'',
      ctx=Load(), lineno=199, col_offset=72, end_lineno=199, end_col_offset=79), lineno=199,
      col_offset=70, end_lineno=199, end_col_offset=79)], lineno=199, col_offset=24,
      end_lineno=199, end_col_offset=80), lineno=199, col_offset=16, end_lineno=199,
      end_col_offset=80), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=200, col_offset=16, end_lineno=200, end_col_offset=20), attr=''process_question'',
      ctx=Load(), lineno=200, col_offset=16, end_lineno=200, end_col_offset=37), args=[Name(id=''question_type'',
      ctx=Load(), lineno=200, col_offset=38, end_lineno=200, end_col_offset=51), Name(id=''question_id'',
      ctx=Load(), lineno=200, col_offset=53, end_lineno=200, end_col_offset=64), Name(id=''query'',
      ctx=Load(), lineno=200, col_offset=66, end_lineno=200, end_col_offset=71), Name(id=''context'',
      ctx=Load(), lineno=200, col_offset=73, end_lineno=200, end_col_offset=80), Name(id=''info'',
      ctx=Load(), lineno=200, col_offset=82, end_lineno=200, end_col_offset=86)],
      keywords=[], lineno=200, col_offset=16, end_lineno=200, end_col_offset=87),
      lineno=200, col_offset=16, end_lineno=200, end_col_offset=87)], orelse=[], lineno=186,
      col_offset=12, end_lineno=200, end_col_offset=87)], lineno=176, col_offset=8,
      end_lineno=200, end_col_offset=87)], lineno=171, col_offset=8, end_lineno=200,
      end_col_offset=87)], decorator_list=[], returns=Constant(value=None, lineno=161,
      col_offset=97, end_lineno=161, end_col_offset=101), lineno=161, col_offset=4,
      end_lineno=200, end_col_offset=87), FunctionDef(name=''generate'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=202, col_offset=17, end_lineno=202, end_col_offset=21)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Generate
      responses for all the questions and returns the instruct_list.\n        Args:\n            None\n        Returns:\n            Tuple[List[Dict],
      List[Dict]]: The generated question-answer pairs and instructions.\n        '',
      lineno=203, col_offset=8, end_lineno=209, end_col_offset=11), lineno=203, col_offset=8,
      end_lineno=209, end_col_offset=11), For(target=Name(id=''question'', ctx=Store(),
      lineno=210, col_offset=12, end_lineno=210, end_col_offset=20), iter=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=210, col_offset=24, end_lineno=210, end_col_offset=28), attr=''questions'',
      ctx=Load(), lineno=210, col_offset=24, end_lineno=210, end_col_offset=38), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=211, col_offset=12, end_lineno=211, end_col_offset=16), attr=''process_question_type'',
      ctx=Load(), lineno=211, col_offset=12, end_lineno=211, end_col_offset=38), args=[Subscript(value=Name(id=''question'',
      ctx=Load(), lineno=211, col_offset=39, end_lineno=211, end_col_offset=47), slice=Constant(value=''type'',
      lineno=211, col_offset=48, end_lineno=211, end_col_offset=54), ctx=Load(), lineno=211,
      col_offset=39, end_lineno=211, end_col_offset=55), Subscript(value=Name(id=''question'',
      ctx=Load(), lineno=211, col_offset=57, end_lineno=211, end_col_offset=65), slice=Constant(value=''id'',
      lineno=211, col_offset=66, end_lineno=211, end_col_offset=70), ctx=Load(), lineno=211,
      col_offset=57, end_lineno=211, end_col_offset=71), Subscript(value=Name(id=''question'',
      ctx=Load(), lineno=211, col_offset=73, end_lineno=211, end_col_offset=81), slice=Constant(value=''text'',
      lineno=211, col_offset=82, end_lineno=211, end_col_offset=88), ctx=Load(), lineno=211,
      col_offset=73, end_lineno=211, end_col_offset=89)], keywords=[], lineno=211,
      col_offset=12, end_lineno=211, end_col_offset=90), lineno=211, col_offset=12,
      end_lineno=211, end_col_offset=90)], orelse=[], lineno=210, col_offset=8, end_lineno=211,
      end_col_offset=90), Return(value=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=212, col_offset=15, end_lineno=212, end_col_offset=19), attr=''instruct_list'',
      ctx=Load(), lineno=212, col_offset=15, end_lineno=212, end_col_offset=33), lineno=212,
      col_offset=8, end_lineno=212, end_col_offset=33)], decorator_list=[], returns=Subscript(value=Name(id=''Tuple'',
      ctx=Load(), lineno=202, col_offset=26, end_lineno=202, end_col_offset=31), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=202, col_offset=32, end_lineno=202, end_col_offset=36), slice=Name(id=''Dict'',
      ctx=Load(), lineno=202, col_offset=37, end_lineno=202, end_col_offset=41), ctx=Load(),
      lineno=202, col_offset=32, end_lineno=202, end_col_offset=42), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=202, col_offset=44, end_lineno=202, end_col_offset=48), slice=Name(id=''Dict'',
      ctx=Load(), lineno=202, col_offset=49, end_lineno=202, end_col_offset=53), ctx=Load(),
      lineno=202, col_offset=44, end_lineno=202, end_col_offset=54)], ctx=Load(),
      lineno=202, col_offset=32, end_lineno=202, end_col_offset=54), ctx=Load(), lineno=202,
      col_offset=26, end_lineno=202, end_col_offset=55), lineno=202, col_offset=4,
      end_lineno=212, end_col_offset=33)], decorator_list=[], lineno=30, col_offset=0,
      end_lineno=212, end_col_offset=33)'
    class_docstring: "Generate JSON formatted dictionary outputs for a Python file.\n\
      Attributes:\n    file_path (str): The path to the Python file.\n    file_details\
      \ (Dict[str, Any]): Details of the Python file.\n    base_name (str): The base\
      \ name of the Python file.\n    questions (List[Dict[str, str]]): Questions\
      \ for generating responses.\n    instruct_list (List[Dict[str, str]]): Storage\
      \ for generated instructions.\n    question_mapping (Dict[str, str]): Mapping\
      \ of question types to keys in file details.\n    use_llm (bool): Flag indicating\
      \ if a language model should be used.\n    llm (object): The language model\
      \ for generating responses.\n    prompt (str): The prompt format for querying\
      \ the language model.\nMethods:\n    clean_and_get_unique_elements(input_str:\
      \ str) -> str: \n        Clean and return unique elements from an input string.\n\
      \    add_to_list(list_to_update: List[Dict], query: str, response: str, additional_field=None)\
      \ -> List[Dict]: \n        Add response to the instruct list.\n    get_response_from_llm(query:\
      \ str, context: str) -> str:\n        Get language model response to query for\
      \ given context.\n    process_question(question_type: str, question_id: str,\
      \ query: str, context: str, info: Dict) -> None:\n        Process question and\
      \ add generated response to the instruct_list.\n    process_question_type(question_type:\
      \ str, question_id: str, question_text: str) -> None:\n        Process question\
      \ related to file, function, class, or method.\n    generate() -> Tuple[List[Dict],\
      \ List[Dict]]:\n        Generate responses for all the questions and return\
      \ the instruct_list."
    class_inputs: null
    class_defaults: null
    class_returns:
    - ''', ''.join(cleaned_elements)'
    - list_to_update
    - response
    - ''''''
    - self.instruct_list
    - ''', ''.join(items)'
    class_calls:
    - set
    - re.sub
    - element.strip
    - re.sub('\\s+', ' ', input_str).split
    - ''', ''.join'
    - response.strip
    - list_to_update.append
    - any
    - item['instruction'].startswith
    - '''\n''.join'
    - self.prompt.format
    - logging.info
    - self.llm
    - logger.error
    - question_id.endswith
    - info.get
    - self.get_response_from_llm
    - self.clean_and_get_unique_elements
    - str
    - str(response).strip
    - self.instruct_list.append
    - item.strip
    - str(info[item_type]).split
    - question_text.format
    - self.process_question
    - self.file_details['classes'].items
    - class_info.items
    - key.startswith
    - len
    - self.file_details[self.question_mapping[question_type]].items
    - self.get_string_from_info
    - self.process_question_type
    class_call_inputs:
      set:
      - (re.sub('[^\\w\\-_>\\s:/.]', '', element.strip()) for element in re.sub('\\s+',
        ' ', input_str).split(','))
      re.sub:
      - '''\\s+'''
      - ''' '''
      - input_str
      element.strip: []
      re.sub('\\s+', ' ', input_str).split:
      - ''','''
      ''', ''.join':
      - '[s for s in [variables_string, inputs_string] if s]'
      response.strip: []
      list_to_update.append:
      - '{''instruction'': query, ''input'': additional_field, ''output'': response}
        if additional_field else {''question'': query, ''answer'': response}'
      any:
      - (item['instruction'].startswith(prefix) for prefix in excluded_instructions)
      item['instruction'].startswith:
      - prefix
      '''\n''.join':
      - '[f"Instruction: {item[''instruction'']} \nOutput: {item[''output'']}" for
        item in filtered_instruct_list]'
      self.prompt.format: []
      logging.info:
      - 'f''Response: {response}'''
      self.llm:
      - prompt
      logger.error:
      - '''Failed to generate model response'''
      question_id.endswith:
      - '''purpose'''
      info.get:
      - question_id
      - ''''''
      self.get_response_from_llm:
      - query
      - context
      self.clean_and_get_unique_elements:
      - combined_string
      str:
      - info[item_type]
      str(response).strip: []
      self.instruct_list.append:
      - '{''instruction'': query, ''input'': context, ''output'': response_str}'
      item.strip: []
      str(info[item_type]).split:
      - ''','''
      question_text.format: []
      self.process_question:
      - question_type
      - question_id
      - query
      - context
      - info
      self.file_details['classes'].items: []
      class_info.items: []
      key.startswith:
      - '''class_method_'''
      len:
      - '''class_method_'''
      self.file_details[self.question_mapping[question_type]].items: []
      self.get_string_from_info:
      - info
      - f'{question_type}_methods'
      self.process_question_type:
      - question['type']
      - question['id']
      - question['text']
    class_variables:
    - excluded_instructions
    - filtered_instruct_list
    - methods_string
    - combined_string
    - full_context
    - variables_string
    - inputs_string
    - cleaned_elements
    - past_instructs
    - method_name
    - response
    - items
    - info
    - prompt
    - mapping
    - context
    - query
    - response_str
    class_decorators: []
    class_annotations: []
    class_properties:
    - self.base_name
    - self.use_llm
    - self.prompt
    - self.file_path
    - self.llm
    - self.file_details
    - self.questions
    - self.instruct_list
    - self.question_mapping
    class_attributes:
    - file_path
    - file_details
    - base_name
    - questions
    - llm
    - prompt
    - instruct_list
    - question_mapping
    - use_llm
    - use_llm
    class_methods:
    - clean_and_get_unique_elements
    - add_to_list
    - get_response_from_llm
    - process_question
    - get_string_from_info
    - process_question_type
    - generate
    class_inheritance: []
    class_static_methods:
    - clean_and_get_unique_elements
    - add_to_list
    - get_string_from_info
    class_method___init__:
      method_name: __init__
      method_code: "def __init__(self, file_path: str, file_details: Dict, base_name:\
        \ str, questions: List[Dict], llm: object, prompt: str) -> None:\n    self.file_path\
        \ = file_path\n    self.file_details = file_details\n    self.base_name =\
        \ base_name\n    self.questions = questions\n    self.llm = llm\n    self.prompt\
        \ = prompt\n    if self.llm is None:\n        self.use_llm = False\n    else:\n\
        \        self.use_llm = True\n    self.instruct_list = []\n    self.question_mapping\
        \ = {'file': 'file', 'function': 'functions', 'class': 'classes', 'method':\
        \ 'classes'}"
      method_ast: FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self',
        lineno=57, col_offset=17, end_lineno=57, end_col_offset=21), arg(arg='file_path',
        annotation=Name(id='str', ctx=Load(), lineno=57, col_offset=34, end_lineno=57,
        end_col_offset=37), lineno=57, col_offset=23, end_lineno=57, end_col_offset=37),
        arg(arg='file_details', annotation=Name(id='Dict', ctx=Load(), lineno=57,
        col_offset=53, end_lineno=57, end_col_offset=57), lineno=57, col_offset=39,
        end_lineno=57, end_col_offset=57), arg(arg='base_name', annotation=Name(id='str',
        ctx=Load(), lineno=57, col_offset=70, end_lineno=57, end_col_offset=73), lineno=57,
        col_offset=59, end_lineno=57, end_col_offset=73), arg(arg='questions', annotation=Subscript(value=Name(id='List',
        ctx=Load(), lineno=57, col_offset=86, end_lineno=57, end_col_offset=90), slice=Name(id='Dict',
        ctx=Load(), lineno=57, col_offset=91, end_lineno=57, end_col_offset=95), ctx=Load(),
        lineno=57, col_offset=86, end_lineno=57, end_col_offset=96), lineno=57, col_offset=75,
        end_lineno=57, end_col_offset=96), arg(arg='llm', annotation=Name(id='object',
        ctx=Load(), lineno=57, col_offset=103, end_lineno=57, end_col_offset=109),
        lineno=57, col_offset=98, end_lineno=57, end_col_offset=109), arg(arg='prompt',
        annotation=Name(id='str', ctx=Load(), lineno=57, col_offset=119, end_lineno=57,
        end_col_offset=122), lineno=57, col_offset=111, end_lineno=57, end_col_offset=122)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=58, col_offset=8, end_lineno=58, end_col_offset=12), attr='file_path',
        ctx=Store(), lineno=58, col_offset=8, end_lineno=58, end_col_offset=22)],
        value=Name(id='file_path', ctx=Load(), lineno=58, col_offset=25, end_lineno=58,
        end_col_offset=34), lineno=58, col_offset=8, end_lineno=58, end_col_offset=34),
        Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=59, col_offset=8,
        end_lineno=59, end_col_offset=12), attr='file_details', ctx=Store(), lineno=59,
        col_offset=8, end_lineno=59, end_col_offset=25)], value=Name(id='file_details',
        ctx=Load(), lineno=59, col_offset=28, end_lineno=59, end_col_offset=40), lineno=59,
        col_offset=8, end_lineno=59, end_col_offset=40), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=60, col_offset=8, end_lineno=60, end_col_offset=12), attr='base_name',
        ctx=Store(), lineno=60, col_offset=8, end_lineno=60, end_col_offset=22)],
        value=Name(id='base_name', ctx=Load(), lineno=60, col_offset=25, end_lineno=60,
        end_col_offset=34), lineno=60, col_offset=8, end_lineno=60, end_col_offset=34),
        Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=61, col_offset=8,
        end_lineno=61, end_col_offset=12), attr='questions', ctx=Store(), lineno=61,
        col_offset=8, end_lineno=61, end_col_offset=22)], value=Name(id='questions',
        ctx=Load(), lineno=61, col_offset=25, end_lineno=61, end_col_offset=34), lineno=61,
        col_offset=8, end_lineno=61, end_col_offset=34), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=62, col_offset=8, end_lineno=62, end_col_offset=12), attr='llm',
        ctx=Store(), lineno=62, col_offset=8, end_lineno=62, end_col_offset=16)],
        value=Name(id='llm', ctx=Load(), lineno=62, col_offset=19, end_lineno=62,
        end_col_offset=22), lineno=62, col_offset=8, end_lineno=62, end_col_offset=22),
        Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=63, col_offset=8,
        end_lineno=63, end_col_offset=12), attr='prompt', ctx=Store(), lineno=63,
        col_offset=8, end_lineno=63, end_col_offset=19)], value=Name(id='prompt',
        ctx=Load(), lineno=63, col_offset=22, end_lineno=63, end_col_offset=28), lineno=63,
        col_offset=8, end_lineno=63, end_col_offset=28), If(test=Compare(left=Attribute(value=Name(id='self',
        ctx=Load(), lineno=64, col_offset=11, end_lineno=64, end_col_offset=15), attr='llm',
        ctx=Load(), lineno=64, col_offset=11, end_lineno=64, end_col_offset=19), ops=[Is()],
        comparators=[Constant(value=None, lineno=64, col_offset=23, end_lineno=64,
        end_col_offset=27)], lineno=64, col_offset=11, end_lineno=64, end_col_offset=27),
        body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=65,
        col_offset=12, end_lineno=65, end_col_offset=16), attr='use_llm', ctx=Store(),
        lineno=65, col_offset=12, end_lineno=65, end_col_offset=24)], value=Constant(value=False,
        lineno=65, col_offset=27, end_lineno=65, end_col_offset=32), lineno=65, col_offset=12,
        end_lineno=65, end_col_offset=32)], orelse=[Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=67, col_offset=12, end_lineno=67, end_col_offset=16), attr='use_llm',
        ctx=Store(), lineno=67, col_offset=12, end_lineno=67, end_col_offset=24)],
        value=Constant(value=True, lineno=67, col_offset=27, end_lineno=67, end_col_offset=31),
        lineno=67, col_offset=12, end_lineno=67, end_col_offset=31)], lineno=64, col_offset=8,
        end_lineno=67, end_col_offset=31), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=68, col_offset=8, end_lineno=68, end_col_offset=12), attr='instruct_list',
        ctx=Store(), lineno=68, col_offset=8, end_lineno=68, end_col_offset=26)],
        value=List(elts=[], ctx=Load(), lineno=68, col_offset=29, end_lineno=68, end_col_offset=31),
        lineno=68, col_offset=8, end_lineno=68, end_col_offset=31), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=69, col_offset=8, end_lineno=69, end_col_offset=12), attr='question_mapping',
        ctx=Store(), lineno=69, col_offset=8, end_lineno=69, end_col_offset=29)],
        value=Dict(keys=[Constant(value='file', lineno=70, col_offset=12, end_lineno=70,
        end_col_offset=18), Constant(value='function', lineno=71, col_offset=12, end_lineno=71,
        end_col_offset=22), Constant(value='class', lineno=72, col_offset=12, end_lineno=72,
        end_col_offset=19), Constant(value='method', lineno=73, col_offset=12, end_lineno=73,
        end_col_offset=20)], values=[Constant(value='file', lineno=70, col_offset=20,
        end_lineno=70, end_col_offset=26), Constant(value='functions', lineno=71,
        col_offset=24, end_lineno=71, end_col_offset=35), Constant(value='classes',
        lineno=72, col_offset=21, end_lineno=72, end_col_offset=30), Constant(value='classes',
        lineno=73, col_offset=22, end_lineno=73, end_col_offset=31)], lineno=69, col_offset=32,
        end_lineno=74, end_col_offset=9), lineno=69, col_offset=8, end_lineno=74,
        end_col_offset=9)], decorator_list=[], returns=Constant(value=None, lineno=57,
        col_offset=127, end_lineno=57, end_col_offset=131), lineno=57, col_offset=4,
        end_lineno=74, end_col_offset=9)
      method_docstring: null
      method_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - llm
      - prompt
      method_defaults: []
      method_returns: []
      method_calls: []
      method_call_inputs: {}
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.base_name
      - self.use_llm
      - self.prompt
      - self.file_path
      - self.llm
      - self.file_details
      - self.questions
      - self.instruct_list
      - self.question_mapping
    class_method_clean_and_get_unique_elements:
      method_name: clean_and_get_unique_elements
      method_code: "@staticmethod\ndef clean_and_get_unique_elements(input_str: str)\
        \ -> str:\n    \"\"\"\n        Clean input string and return string of unique\
        \ elements.\n        Args:\n            input_str (str): The input string\
        \ to be cleaned.\n        Returns:\n            str: The cleaned string.\n\
        \        \"\"\"\n    cleaned_elements = set((re.sub('[^\\\\w\\\\-_>\\\\s:/.]',\
        \ '', element.strip()) for element in re.sub('\\\\s+', ' ', input_str).split(',')))\n\
        \    return ', '.join(cleaned_elements)"
      method_ast: 'FunctionDef(name=''clean_and_get_unique_elements'', args=arguments(posonlyargs=[],
        args=[arg(arg=''input_str'', annotation=Name(id=''str'', ctx=Load(), lineno=77,
        col_offset=49, end_lineno=77, end_col_offset=52), lineno=77, col_offset=38,
        end_lineno=77, end_col_offset=52)], kwonlyargs=[], kw_defaults=[], defaults=[]),
        body=[Expr(value=Constant(value=''\n        Clean input string and return
        string of unique elements.\n        Args:\n            input_str (str): The
        input string to be cleaned.\n        Returns:\n            str: The cleaned
        string.\n        '', lineno=78, col_offset=8, end_lineno=84, end_col_offset=11),
        lineno=78, col_offset=8, end_lineno=84, end_col_offset=11), Assign(targets=[Name(id=''cleaned_elements'',
        ctx=Store(), lineno=85, col_offset=8, end_lineno=85, end_col_offset=24)],
        value=Call(func=Name(id=''set'', ctx=Load(), lineno=85, col_offset=27, end_lineno=85,
        end_col_offset=30), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''re'',
        ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=33), attr=''sub'',
        ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=37), args=[Constant(value=''[^\\w\\-_>\\s:/.]'',
        lineno=85, col_offset=38, end_lineno=85, end_col_offset=55), Constant(value='''',
        lineno=85, col_offset=57, end_lineno=85, end_col_offset=59), Call(func=Attribute(value=Name(id=''element'',
        ctx=Load(), lineno=85, col_offset=61, end_lineno=85, end_col_offset=68), attr=''strip'',
        ctx=Load(), lineno=85, col_offset=61, end_lineno=85, end_col_offset=74), args=[],
        keywords=[], lineno=85, col_offset=61, end_lineno=85, end_col_offset=76)],
        keywords=[], lineno=85, col_offset=31, end_lineno=85, end_col_offset=77),
        generators=[comprehension(target=Name(id=''element'', ctx=Store(), lineno=86,
        col_offset=35, end_lineno=86, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''re'',
        ctx=Load(), lineno=86, col_offset=46, end_lineno=86, end_col_offset=48), attr=''sub'',
        ctx=Load(), lineno=86, col_offset=46, end_lineno=86, end_col_offset=52), args=[Constant(value=''\\s+'',
        lineno=86, col_offset=53, end_lineno=86, end_col_offset=59), Constant(value=''
        '', lineno=86, col_offset=61, end_lineno=86, end_col_offset=64), Name(id=''input_str'',
        ctx=Load(), lineno=86, col_offset=66, end_lineno=86, end_col_offset=75)],
        keywords=[], lineno=86, col_offset=46, end_lineno=86, end_col_offset=76),
        attr=''split'', ctx=Load(), lineno=86, col_offset=46, end_lineno=86, end_col_offset=82),
        args=[Constant(value='','', lineno=86, col_offset=83, end_lineno=86, end_col_offset=86)],
        keywords=[], lineno=86, col_offset=46, end_lineno=86, end_col_offset=87),
        ifs=[], is_async=0)], lineno=85, col_offset=30, end_lineno=86, end_col_offset=88)],
        keywords=[], lineno=85, col_offset=27, end_lineno=86, end_col_offset=88),
        lineno=85, col_offset=8, end_lineno=86, end_col_offset=88), Return(value=Call(func=Attribute(value=Constant(value='',
        '', lineno=87, col_offset=15, end_lineno=87, end_col_offset=19), attr=''join'',
        ctx=Load(), lineno=87, col_offset=15, end_lineno=87, end_col_offset=24), args=[Name(id=''cleaned_elements'',
        ctx=Load(), lineno=87, col_offset=25, end_lineno=87, end_col_offset=41)],
        keywords=[], lineno=87, col_offset=15, end_lineno=87, end_col_offset=42),
        lineno=87, col_offset=8, end_lineno=87, end_col_offset=42)], decorator_list=[Name(id=''staticmethod'',
        ctx=Load(), lineno=76, col_offset=5, end_lineno=76, end_col_offset=17)], returns=Name(id=''str'',
        ctx=Load(), lineno=77, col_offset=57, end_lineno=77, end_col_offset=60), lineno=77,
        col_offset=4, end_lineno=87, end_col_offset=42)'
      method_docstring: "Clean input string and return string of unique elements.\n\
        Args:\n    input_str (str): The input string to be cleaned.\nReturns:\n  \
        \  str: The cleaned string."
      method_inputs:
      - input_str
      method_defaults: []
      method_returns:
      - ''', ''.join(cleaned_elements)'
      method_calls:
      - set
      - re.sub
      - element.strip
      - re.sub('\\s+', ' ', input_str).split
      - ''', ''.join'
      method_call_inputs:
        set:
        - (re.sub('[^\\w\\-_>\\s:/.]', '', element.strip()) for element in re.sub('\\s+',
          ' ', input_str).split(','))
        re.sub:
        - '''\\s+'''
        - ''' '''
        - input_str
        element.strip: []
        re.sub('\\s+', ' ', input_str).split:
        - ''','''
        ''', ''.join':
        - cleaned_elements
      method_variables:
      - cleaned_elements
      method_decorators:
      - staticmethod
      method_annotations: []
      method_properties: []
    class_method_add_to_list:
      method_name: add_to_list
      method_code: "@staticmethod\ndef add_to_list(list_to_update: List[Dict], query:\
        \ str, response: str, additional_field=None) -> List[Dict]:\n    \"\"\"\n\
        \        Adds response to instruct list.\n        Args:\n            list_to_update\
        \ (List[Dict]): The list to be updated.\n            query (str): The query\
        \ to be added.\n            response (str): The response to be added.\n  \
        \          additional_field (str): The additional field to be added.\n   \
        \     Returns:\n            List[Dict]: The updated list.\n        \"\"\"\n\
        \    if response and response.strip() and (response != 'None'):\n        list_to_update.append({'instruction':\
        \ query, 'input': additional_field, 'output': response} if additional_field\
        \ else {'question': query, 'answer': response})\n    return list_to_update"
      method_ast: 'FunctionDef(name=''add_to_list'', args=arguments(posonlyargs=[],
        args=[arg(arg=''list_to_update'', annotation=Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=90, col_offset=36, end_lineno=90, end_col_offset=40), slice=Name(id=''Dict'',
        ctx=Load(), lineno=90, col_offset=41, end_lineno=90, end_col_offset=45), ctx=Load(),
        lineno=90, col_offset=36, end_lineno=90, end_col_offset=46), lineno=90, col_offset=20,
        end_lineno=90, end_col_offset=46), arg(arg=''query'', annotation=Name(id=''str'',
        ctx=Load(), lineno=90, col_offset=55, end_lineno=90, end_col_offset=58), lineno=90,
        col_offset=48, end_lineno=90, end_col_offset=58), arg(arg=''response'', annotation=Name(id=''str'',
        ctx=Load(), lineno=90, col_offset=70, end_lineno=90, end_col_offset=73), lineno=90,
        col_offset=60, end_lineno=90, end_col_offset=73), arg(arg=''additional_field'',
        lineno=90, col_offset=75, end_lineno=90, end_col_offset=91)], kwonlyargs=[],
        kw_defaults=[], defaults=[Constant(value=None, lineno=90, col_offset=92, end_lineno=90,
        end_col_offset=96)]), body=[Expr(value=Constant(value=''\n        Adds response
        to instruct list.\n        Args:\n            list_to_update (List[Dict]):
        The list to be updated.\n            query (str): The query to be added.\n            response
        (str): The response to be added.\n            additional_field (str): The
        additional field to be added.\n        Returns:\n            List[Dict]: The
        updated list.\n        '', lineno=91, col_offset=8, end_lineno=100, end_col_offset=11),
        lineno=91, col_offset=8, end_lineno=100, end_col_offset=11), If(test=BoolOp(op=And(),
        values=[Name(id=''response'', ctx=Load(), lineno=101, col_offset=11, end_lineno=101,
        end_col_offset=19), Call(func=Attribute(value=Name(id=''response'', ctx=Load(),
        lineno=101, col_offset=24, end_lineno=101, end_col_offset=32), attr=''strip'',
        ctx=Load(), lineno=101, col_offset=24, end_lineno=101, end_col_offset=38),
        args=[], keywords=[], lineno=101, col_offset=24, end_lineno=101, end_col_offset=40),
        Compare(left=Name(id=''response'', ctx=Load(), lineno=101, col_offset=45,
        end_lineno=101, end_col_offset=53), ops=[NotEq()], comparators=[Constant(value=''None'',
        lineno=101, col_offset=57, end_lineno=101, end_col_offset=63)], lineno=101,
        col_offset=45, end_lineno=101, end_col_offset=63)], lineno=101, col_offset=11,
        end_lineno=101, end_col_offset=63), body=[Expr(value=Call(func=Attribute(value=Name(id=''list_to_update'',
        ctx=Load(), lineno=102, col_offset=12, end_lineno=102, end_col_offset=26),
        attr=''append'', ctx=Load(), lineno=102, col_offset=12, end_lineno=102, end_col_offset=33),
        args=[IfExp(test=Name(id=''additional_field'', ctx=Load(), lineno=104, col_offset=19,
        end_lineno=104, end_col_offset=35), body=Dict(keys=[Constant(value=''instruction'',
        lineno=103, col_offset=17, end_lineno=103, end_col_offset=30), Constant(value=''input'',
        lineno=103, col_offset=39, end_lineno=103, end_col_offset=46), Constant(value=''output'',
        lineno=103, col_offset=67, end_lineno=103, end_col_offset=75)], values=[Name(id=''query'',
        ctx=Load(), lineno=103, col_offset=32, end_lineno=103, end_col_offset=37),
        Name(id=''additional_field'', ctx=Load(), lineno=103, col_offset=49, end_lineno=103,
        end_col_offset=65), Name(id=''response'', ctx=Load(), lineno=103, col_offset=77,
        end_lineno=103, end_col_offset=85)], lineno=103, col_offset=16, end_lineno=103,
        end_col_offset=86), orelse=Dict(keys=[Constant(value=''question'', lineno=105,
        col_offset=17, end_lineno=105, end_col_offset=27), Constant(value=''answer'',
        lineno=105, col_offset=36, end_lineno=105, end_col_offset=44)], values=[Name(id=''query'',
        ctx=Load(), lineno=105, col_offset=29, end_lineno=105, end_col_offset=34),
        Name(id=''response'', ctx=Load(), lineno=105, col_offset=46, end_lineno=105,
        end_col_offset=54)], lineno=105, col_offset=16, end_lineno=105, end_col_offset=55),
        lineno=103, col_offset=16, end_lineno=105, end_col_offset=55)], keywords=[],
        lineno=102, col_offset=12, end_lineno=106, end_col_offset=13), lineno=102,
        col_offset=12, end_lineno=106, end_col_offset=13)], orelse=[], lineno=101,
        col_offset=8, end_lineno=106, end_col_offset=13), Return(value=Name(id=''list_to_update'',
        ctx=Load(), lineno=107, col_offset=15, end_lineno=107, end_col_offset=29),
        lineno=107, col_offset=8, end_lineno=107, end_col_offset=29)], decorator_list=[Name(id=''staticmethod'',
        ctx=Load(), lineno=89, col_offset=5, end_lineno=89, end_col_offset=17)], returns=Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=90, col_offset=101, end_lineno=90, end_col_offset=105),
        slice=Name(id=''Dict'', ctx=Load(), lineno=90, col_offset=106, end_lineno=90,
        end_col_offset=110), ctx=Load(), lineno=90, col_offset=101, end_lineno=90,
        end_col_offset=111), lineno=90, col_offset=4, end_lineno=107, end_col_offset=29)'
      method_docstring: "Adds response to instruct list.\nArgs:\n    list_to_update\
        \ (List[Dict]): The list to be updated.\n    query (str): The query to be\
        \ added.\n    response (str): The response to be added.\n    additional_field\
        \ (str): The additional field to be added.\nReturns:\n    List[Dict]: The\
        \ updated list."
      method_inputs:
      - list_to_update
      - query
      - response
      - additional_field
      method_defaults:
      - None
      method_returns:
      - list_to_update
      method_calls:
      - response.strip
      - list_to_update.append
      method_call_inputs:
        response.strip: []
        list_to_update.append:
        - '{''instruction'': query, ''input'': additional_field, ''output'': response}
          if additional_field else {''question'': query, ''answer'': response}'
      method_variables: []
      method_decorators:
      - staticmethod
      method_annotations: []
      method_properties: []
    class_method_get_response_from_llm:
      method_name: get_response_from_llm
      method_code: "def get_response_from_llm(self, query: str, context: str) -> str:\n\
        \    \"\"\"\n        Get language model response to query for given context.\n\
        \        Args:\n            query (str): The query to be used for generating\
        \ the response.\n            context (str): The context to be used for generating\
        \ the response.\n        Returns:\n            str: The generated response.\n\
        \        \"\"\"\n    excluded_instructions = ['What is the call code graph',\
        \ 'What is the docstring']\n    filtered_instruct_list = [item for item in\
        \ self.instruct_list if not any((item['instruction'].startswith(prefix) for\
        \ prefix in excluded_instructions))]\n    past_instructs = '\\n'.join([f\"\
        Instruction: {item['instruction']} \\nOutput: {item['output']}\" for item\
        \ in filtered_instruct_list])\n    full_context = context + '\\n' + \"Here's\
        \ some detail about this code:\" + '\\n' + past_instructs\n    try:\n    \
        \    prompt = self.prompt.format(context=full_context, query=query)\n    \
        \    logging.info(f'Query: {query}')\n        response = self.llm(prompt)\n\
        \        logging.info(f'Response: {response}')\n    except:\n        logger.error('Failed\
        \ to generate model response')\n    return response"
      method_ast: 'FunctionDef(name=''get_response_from_llm'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=109, col_offset=30, end_lineno=109, end_col_offset=34),
        arg(arg=''query'', annotation=Name(id=''str'', ctx=Load(), lineno=109, col_offset=43,
        end_lineno=109, end_col_offset=46), lineno=109, col_offset=36, end_lineno=109,
        end_col_offset=46), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
        lineno=109, col_offset=57, end_lineno=109, end_col_offset=60), lineno=109,
        col_offset=48, end_lineno=109, end_col_offset=60)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[Expr(value=Constant(value=''\n        Get language model
        response to query for given context.\n        Args:\n            query (str):
        The query to be used for generating the response.\n            context (str):
        The context to be used for generating the response.\n        Returns:\n            str:
        The generated response.\n        '', lineno=110, col_offset=8, end_lineno=117,
        end_col_offset=11), lineno=110, col_offset=8, end_lineno=117, end_col_offset=11),
        Assign(targets=[Name(id=''excluded_instructions'', ctx=Store(), lineno=119,
        col_offset=8, end_lineno=119, end_col_offset=29)], value=List(elts=[Constant(value=''What
        is the call code graph'', lineno=119, col_offset=33, end_lineno=119, end_col_offset=62),
        Constant(value=''What is the docstring'', lineno=119, col_offset=64, end_lineno=119,
        end_col_offset=87)], ctx=Load(), lineno=119, col_offset=32, end_lineno=119,
        end_col_offset=88), lineno=119, col_offset=8, end_lineno=119, end_col_offset=88),
        Assign(targets=[Name(id=''filtered_instruct_list'', ctx=Store(), lineno=120,
        col_offset=8, end_lineno=120, end_col_offset=30)], value=ListComp(elt=Name(id=''item'',
        ctx=Load(), lineno=120, col_offset=34, end_lineno=120, end_col_offset=38),
        generators=[comprehension(target=Name(id=''item'', ctx=Store(), lineno=120,
        col_offset=43, end_lineno=120, end_col_offset=47), iter=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=120, col_offset=51, end_lineno=120, end_col_offset=55),
        attr=''instruct_list'', ctx=Load(), lineno=120, col_offset=51, end_lineno=120,
        end_col_offset=69), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id=''any'',
        ctx=Load(), lineno=120, col_offset=77, end_lineno=120, end_col_offset=80),
        args=[GeneratorExp(elt=Call(func=Attribute(value=Subscript(value=Name(id=''item'',
        ctx=Load(), lineno=120, col_offset=81, end_lineno=120, end_col_offset=85),
        slice=Constant(value=''instruction'', lineno=120, col_offset=86, end_lineno=120,
        end_col_offset=99), ctx=Load(), lineno=120, col_offset=81, end_lineno=120,
        end_col_offset=100), attr=''startswith'', ctx=Load(), lineno=120, col_offset=81,
        end_lineno=120, end_col_offset=111), args=[Name(id=''prefix'', ctx=Load(),
        lineno=120, col_offset=112, end_lineno=120, end_col_offset=118)], keywords=[],
        lineno=120, col_offset=81, end_lineno=120, end_col_offset=119), generators=[comprehension(target=Name(id=''prefix'',
        ctx=Store(), lineno=120, col_offset=124, end_lineno=120, end_col_offset=130),
        iter=Name(id=''excluded_instructions'', ctx=Load(), lineno=120, col_offset=134,
        end_lineno=120, end_col_offset=155), ifs=[], is_async=0)], lineno=120, col_offset=80,
        end_lineno=120, end_col_offset=156)], keywords=[], lineno=120, col_offset=77,
        end_lineno=120, end_col_offset=156), lineno=120, col_offset=73, end_lineno=120,
        end_col_offset=156)], is_async=0)], lineno=120, col_offset=33, end_lineno=120,
        end_col_offset=157), lineno=120, col_offset=8, end_lineno=120, end_col_offset=157),
        Assign(targets=[Name(id=''past_instructs'', ctx=Store(), lineno=121, col_offset=8,
        end_lineno=121, end_col_offset=22)], value=Call(func=Attribute(value=Constant(value=''\n'',
        lineno=121, col_offset=25, end_lineno=121, end_col_offset=29), attr=''join'',
        ctx=Load(), lineno=121, col_offset=25, end_lineno=121, end_col_offset=34),
        args=[ListComp(elt=JoinedStr(values=[Constant(value=''Instruction: '', lineno=121,
        col_offset=36, end_lineno=121, end_col_offset=100), FormattedValue(value=Subscript(value=Name(id=''item'',
        ctx=Load(), lineno=121, col_offset=52, end_lineno=121, end_col_offset=56),
        slice=Constant(value=''instruction'', lineno=121, col_offset=57, end_lineno=121,
        end_col_offset=70), ctx=Load(), lineno=121, col_offset=52, end_lineno=121,
        end_col_offset=71), conversion=-1, lineno=121, col_offset=36, end_lineno=121,
        end_col_offset=100), Constant(value='' \nOutput: '', lineno=121, col_offset=36,
        end_lineno=121, end_col_offset=100), FormattedValue(value=Subscript(value=Name(id=''item'',
        ctx=Load(), lineno=121, col_offset=84, end_lineno=121, end_col_offset=88),
        slice=Constant(value=''output'', lineno=121, col_offset=89, end_lineno=121,
        end_col_offset=97), ctx=Load(), lineno=121, col_offset=84, end_lineno=121,
        end_col_offset=98), conversion=-1, lineno=121, col_offset=36, end_lineno=121,
        end_col_offset=100)], lineno=121, col_offset=36, end_lineno=121, end_col_offset=100),
        generators=[comprehension(target=Name(id=''item'', ctx=Store(), lineno=121,
        col_offset=105, end_lineno=121, end_col_offset=109), iter=Name(id=''filtered_instruct_list'',
        ctx=Load(), lineno=121, col_offset=113, end_lineno=121, end_col_offset=135),
        ifs=[], is_async=0)], lineno=121, col_offset=35, end_lineno=121, end_col_offset=136)],
        keywords=[], lineno=121, col_offset=25, end_lineno=121, end_col_offset=137),
        lineno=121, col_offset=8, end_lineno=121, end_col_offset=137), Assign(targets=[Name(id=''full_context'',
        ctx=Store(), lineno=122, col_offset=8, end_lineno=122, end_col_offset=20)],
        value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id=''context'', ctx=Load(),
        lineno=122, col_offset=23, end_lineno=122, end_col_offset=30), op=Add(), right=Constant(value=''\n'',
        lineno=122, col_offset=33, end_lineno=122, end_col_offset=37), lineno=122,
        col_offset=23, end_lineno=122, end_col_offset=37), op=Add(), right=Constant(value="Here''s
        some detail about this code:", lineno=122, col_offset=40, end_lineno=122,
        end_col_offset=77), lineno=122, col_offset=23, end_lineno=122, end_col_offset=77),
        op=Add(), right=Constant(value=''\n'', lineno=122, col_offset=80, end_lineno=122,
        end_col_offset=84), lineno=122, col_offset=23, end_lineno=122, end_col_offset=84),
        op=Add(), right=Name(id=''past_instructs'', ctx=Load(), lineno=122, col_offset=87,
        end_lineno=122, end_col_offset=101), lineno=122, col_offset=23, end_lineno=122,
        end_col_offset=101), lineno=122, col_offset=8, end_lineno=122, end_col_offset=101),
        Try(body=[Assign(targets=[Name(id=''prompt'', ctx=Store(), lineno=125, col_offset=12,
        end_lineno=125, end_col_offset=18)], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=25),
        attr=''prompt'', ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=32),
        attr=''format'', ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=39),
        args=[], keywords=[keyword(arg=''context'', value=Name(id=''full_context'',
        ctx=Load(), lineno=125, col_offset=48, end_lineno=125, end_col_offset=60),
        lineno=125, col_offset=40, end_lineno=125, end_col_offset=60), keyword(arg=''query'',
        value=Name(id=''query'', ctx=Load(), lineno=125, col_offset=68, end_lineno=125,
        end_col_offset=73), lineno=125, col_offset=62, end_lineno=125, end_col_offset=73)],
        lineno=125, col_offset=21, end_lineno=125, end_col_offset=74), lineno=125,
        col_offset=12, end_lineno=125, end_col_offset=74), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
        ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=19),
        attr=''info'', ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=24),
        args=[JoinedStr(values=[Constant(value=''Query: '', lineno=126, col_offset=25,
        end_lineno=126, end_col_offset=42), FormattedValue(value=Name(id=''query'',
        ctx=Load(), lineno=126, col_offset=35, end_lineno=126, end_col_offset=40),
        conversion=-1, lineno=126, col_offset=25, end_lineno=126, end_col_offset=42)],
        lineno=126, col_offset=25, end_lineno=126, end_col_offset=42)], keywords=[],
        lineno=126, col_offset=12, end_lineno=126, end_col_offset=43), lineno=126,
        col_offset=12, end_lineno=126, end_col_offset=43), Assign(targets=[Name(id=''response'',
        ctx=Store(), lineno=127, col_offset=12, end_lineno=127, end_col_offset=20)],
        value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=127,
        col_offset=23, end_lineno=127, end_col_offset=27), attr=''llm'', ctx=Load(),
        lineno=127, col_offset=23, end_lineno=127, end_col_offset=31), args=[Name(id=''prompt'',
        ctx=Load(), lineno=127, col_offset=32, end_lineno=127, end_col_offset=38)],
        keywords=[], lineno=127, col_offset=23, end_lineno=127, end_col_offset=39),
        lineno=127, col_offset=12, end_lineno=127, end_col_offset=39), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
        ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=19),
        attr=''info'', ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=24),
        args=[JoinedStr(values=[Constant(value=''Response: '', lineno=128, col_offset=25,
        end_lineno=128, end_col_offset=48), FormattedValue(value=Name(id=''response'',
        ctx=Load(), lineno=128, col_offset=38, end_lineno=128, end_col_offset=46),
        conversion=-1, lineno=128, col_offset=25, end_lineno=128, end_col_offset=48)],
        lineno=128, col_offset=25, end_lineno=128, end_col_offset=48)], keywords=[],
        lineno=128, col_offset=12, end_lineno=128, end_col_offset=49), lineno=128,
        col_offset=12, end_lineno=128, end_col_offset=49)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
        ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=18),
        attr=''error'', ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=24),
        args=[Constant(value=''Failed to generate model response'', lineno=130, col_offset=25,
        end_lineno=130, end_col_offset=60)], keywords=[], lineno=130, col_offset=12,
        end_lineno=130, end_col_offset=61), lineno=130, col_offset=12, end_lineno=130,
        end_col_offset=61)], lineno=129, col_offset=8, end_lineno=130, end_col_offset=61)],
        orelse=[], finalbody=[], lineno=124, col_offset=8, end_lineno=130, end_col_offset=61),
        Return(value=Name(id=''response'', ctx=Load(), lineno=131, col_offset=15,
        end_lineno=131, end_col_offset=23), lineno=131, col_offset=8, end_lineno=131,
        end_col_offset=23)], decorator_list=[], returns=Name(id=''str'', ctx=Load(),
        lineno=109, col_offset=65, end_lineno=109, end_col_offset=68), lineno=109,
        col_offset=4, end_lineno=131, end_col_offset=23)'
      method_docstring: "Get language model response to query for given context.\n\
        Args:\n    query (str): The query to be used for generating the response.\n\
        \    context (str): The context to be used for generating the response.\n\
        Returns:\n    str: The generated response."
      method_inputs:
      - self
      - query
      - context
      method_defaults: []
      method_returns:
      - response
      method_calls:
      - any
      - item['instruction'].startswith
      - '''\n''.join'
      - self.prompt.format
      - logging.info
      - self.llm
      - logger.error
      method_call_inputs:
        any:
        - (item['instruction'].startswith(prefix) for prefix in excluded_instructions)
        item['instruction'].startswith:
        - prefix
        '''\n''.join':
        - '[f"Instruction: {item[''instruction'']} \nOutput: {item[''output'']}" for
          item in filtered_instruct_list]'
        self.prompt.format: []
        logging.info:
        - 'f''Response: {response}'''
        self.llm:
        - prompt
        logger.error:
        - '''Failed to generate model response'''
      method_variables:
      - excluded_instructions
      - filtered_instruct_list
      - full_context
      - past_instructs
      - response
      - prompt
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_question:
      method_name: process_question
      method_code: "def process_question(self, question_type: str, question_id: str,\
        \ query: str, context: str, info: Dict) -> None:\n    \"\"\"\n        Process\
        \ question and add the generated response to the instruct_list.\n        Args:\n\
        \            question_type (str): The type of question to be processed.\n\
        \            question_id (str): The ID of the question to be processed.\n\
        \            query (str): The query to be processed.\n            context\
        \ (str): The context to be used for generating the response.\n           \
        \ info (Dict): The information of the Python file.\n        Returns:\n   \
        \         None\n        \"\"\"\n    if question_id.endswith('code_graph'):\n\
        \        response = info.get(question_id, {})\n    else:\n        response\
        \ = self.get_response_from_llm(query, context) if self.use_llm and question_id.endswith('purpose')\
        \ else self.clean_and_get_unique_elements(str(info.get(question_id, '')))\n\
        \    if response and response != 'None':\n        response_str = str(response).strip()\n\
        \        if response_str:\n            self.instruct_list.append({'instruction':\
        \ query, 'input': context, 'output': response_str})"
      method_ast: 'FunctionDef(name=''process_question'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=133, col_offset=25, end_lineno=133, end_col_offset=29),
        arg(arg=''question_type'', annotation=Name(id=''str'', ctx=Load(), lineno=133,
        col_offset=46, end_lineno=133, end_col_offset=49), lineno=133, col_offset=31,
        end_lineno=133, end_col_offset=49), arg(arg=''question_id'', annotation=Name(id=''str'',
        ctx=Load(), lineno=133, col_offset=64, end_lineno=133, end_col_offset=67),
        lineno=133, col_offset=51, end_lineno=133, end_col_offset=67), arg(arg=''query'',
        annotation=Name(id=''str'', ctx=Load(), lineno=133, col_offset=76, end_lineno=133,
        end_col_offset=79), lineno=133, col_offset=69, end_lineno=133, end_col_offset=79),
        arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(), lineno=133, col_offset=90,
        end_lineno=133, end_col_offset=93), lineno=133, col_offset=81, end_lineno=133,
        end_col_offset=93), arg(arg=''info'', annotation=Name(id=''Dict'', ctx=Load(),
        lineno=133, col_offset=101, end_lineno=133, end_col_offset=105), lineno=133,
        col_offset=95, end_lineno=133, end_col_offset=105)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[Expr(value=Constant(value=''\n        Process question
        and add the generated response to the instruct_list.\n        Args:\n            question_type
        (str): The type of question to be processed.\n            question_id (str):
        The ID of the question to be processed.\n            query (str): The query
        to be processed.\n            context (str): The context to be used for generating
        the response.\n            info (Dict): The information of the Python file.\n        Returns:\n            None\n        '',
        lineno=134, col_offset=8, end_lineno=144, end_col_offset=11), lineno=134,
        col_offset=8, end_lineno=144, end_col_offset=11), If(test=Call(func=Attribute(value=Name(id=''question_id'',
        ctx=Load(), lineno=145, col_offset=11, end_lineno=145, end_col_offset=22),
        attr=''endswith'', ctx=Load(), lineno=145, col_offset=11, end_lineno=145,
        end_col_offset=31), args=[Constant(value=''code_graph'', lineno=145, col_offset=32,
        end_lineno=145, end_col_offset=44)], keywords=[], lineno=145, col_offset=11,
        end_lineno=145, end_col_offset=45), body=[Assign(targets=[Name(id=''response'',
        ctx=Store(), lineno=146, col_offset=12, end_lineno=146, end_col_offset=20)],
        value=Call(func=Attribute(value=Name(id=''info'', ctx=Load(), lineno=146,
        col_offset=23, end_lineno=146, end_col_offset=27), attr=''get'', ctx=Load(),
        lineno=146, col_offset=23, end_lineno=146, end_col_offset=31), args=[Name(id=''question_id'',
        ctx=Load(), lineno=146, col_offset=32, end_lineno=146, end_col_offset=43),
        Dict(keys=[], values=[], lineno=146, col_offset=45, end_lineno=146, end_col_offset=47)],
        keywords=[], lineno=146, col_offset=23, end_lineno=146, end_col_offset=48),
        lineno=146, col_offset=12, end_lineno=146, end_col_offset=48)], orelse=[Assign(targets=[Name(id=''response'',
        ctx=Store(), lineno=148, col_offset=12, end_lineno=148, end_col_offset=20)],
        value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=148, col_offset=69, end_lineno=148, end_col_offset=73),
        attr=''use_llm'', ctx=Load(), lineno=148, col_offset=69, end_lineno=148, end_col_offset=81),
        Call(func=Attribute(value=Name(id=''question_id'', ctx=Load(), lineno=148,
        col_offset=86, end_lineno=148, end_col_offset=97), attr=''endswith'', ctx=Load(),
        lineno=148, col_offset=86, end_lineno=148, end_col_offset=106), args=[Constant(value=''purpose'',
        lineno=148, col_offset=107, end_lineno=148, end_col_offset=116)], keywords=[],
        lineno=148, col_offset=86, end_lineno=148, end_col_offset=117)], lineno=148,
        col_offset=69, end_lineno=148, end_col_offset=117), body=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=148, col_offset=23, end_lineno=148, end_col_offset=27),
        attr=''get_response_from_llm'', ctx=Load(), lineno=148, col_offset=23, end_lineno=148,
        end_col_offset=49), args=[Name(id=''query'', ctx=Load(), lineno=148, col_offset=50,
        end_lineno=148, end_col_offset=55), Name(id=''context'', ctx=Load(), lineno=148,
        col_offset=57, end_lineno=148, end_col_offset=64)], keywords=[], lineno=148,
        col_offset=23, end_lineno=148, end_col_offset=65), orelse=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=148, col_offset=123, end_lineno=148, end_col_offset=127),
        attr=''clean_and_get_unique_elements'', ctx=Load(), lineno=148, col_offset=123,
        end_lineno=148, end_col_offset=157), args=[Call(func=Name(id=''str'', ctx=Load(),
        lineno=148, col_offset=158, end_lineno=148, end_col_offset=161), args=[Call(func=Attribute(value=Name(id=''info'',
        ctx=Load(), lineno=148, col_offset=162, end_lineno=148, end_col_offset=166),
        attr=''get'', ctx=Load(), lineno=148, col_offset=162, end_lineno=148, end_col_offset=170),
        args=[Name(id=''question_id'', ctx=Load(), lineno=148, col_offset=171, end_lineno=148,
        end_col_offset=182), Constant(value='''', lineno=148, col_offset=184, end_lineno=148,
        end_col_offset=186)], keywords=[], lineno=148, col_offset=162, end_lineno=148,
        end_col_offset=187)], keywords=[], lineno=148, col_offset=158, end_lineno=148,
        end_col_offset=188)], keywords=[], lineno=148, col_offset=123, end_lineno=148,
        end_col_offset=189), lineno=148, col_offset=23, end_lineno=148, end_col_offset=189),
        lineno=148, col_offset=12, end_lineno=148, end_col_offset=189)], lineno=145,
        col_offset=8, end_lineno=148, end_col_offset=189), If(test=BoolOp(op=And(),
        values=[Name(id=''response'', ctx=Load(), lineno=149, col_offset=11, end_lineno=149,
        end_col_offset=19), Compare(left=Name(id=''response'', ctx=Load(), lineno=149,
        col_offset=24, end_lineno=149, end_col_offset=32), ops=[NotEq()], comparators=[Constant(value=''None'',
        lineno=149, col_offset=36, end_lineno=149, end_col_offset=42)], lineno=149,
        col_offset=24, end_lineno=149, end_col_offset=42)], lineno=149, col_offset=11,
        end_lineno=149, end_col_offset=42), body=[Assign(targets=[Name(id=''response_str'',
        ctx=Store(), lineno=150, col_offset=12, end_lineno=150, end_col_offset=24)],
        value=Call(func=Attribute(value=Call(func=Name(id=''str'', ctx=Load(), lineno=150,
        col_offset=27, end_lineno=150, end_col_offset=30), args=[Name(id=''response'',
        ctx=Load(), lineno=150, col_offset=31, end_lineno=150, end_col_offset=39)],
        keywords=[], lineno=150, col_offset=27, end_lineno=150, end_col_offset=40),
        attr=''strip'', ctx=Load(), lineno=150, col_offset=27, end_lineno=150, end_col_offset=46),
        args=[], keywords=[], lineno=150, col_offset=27, end_lineno=150, end_col_offset=48),
        lineno=150, col_offset=12, end_lineno=150, end_col_offset=48), If(test=Name(id=''response_str'',
        ctx=Load(), lineno=151, col_offset=15, end_lineno=151, end_col_offset=27),
        body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=20),
        attr=''instruct_list'', ctx=Load(), lineno=152, col_offset=16, end_lineno=152,
        end_col_offset=34), attr=''append'', ctx=Load(), lineno=152, col_offset=16,
        end_lineno=152, end_col_offset=41), args=[Dict(keys=[Constant(value=''instruction'',
        lineno=152, col_offset=43, end_lineno=152, end_col_offset=56), Constant(value=''input'',
        lineno=152, col_offset=65, end_lineno=152, end_col_offset=72), Constant(value=''output'',
        lineno=152, col_offset=83, end_lineno=152, end_col_offset=91)], values=[Name(id=''query'',
        ctx=Load(), lineno=152, col_offset=58, end_lineno=152, end_col_offset=63),
        Name(id=''context'', ctx=Load(), lineno=152, col_offset=74, end_lineno=152,
        end_col_offset=81), Name(id=''response_str'', ctx=Load(), lineno=152, col_offset=93,
        end_lineno=152, end_col_offset=105)], lineno=152, col_offset=42, end_lineno=152,
        end_col_offset=106)], keywords=[], lineno=152, col_offset=16, end_lineno=152,
        end_col_offset=107), lineno=152, col_offset=16, end_lineno=152, end_col_offset=107)],
        orelse=[], lineno=151, col_offset=12, end_lineno=152, end_col_offset=107)],
        orelse=[], lineno=149, col_offset=8, end_lineno=152, end_col_offset=107)],
        decorator_list=[], returns=Constant(value=None, lineno=133, col_offset=110,
        end_lineno=133, end_col_offset=114), lineno=133, col_offset=4, end_lineno=152,
        end_col_offset=107)'
      method_docstring: "Process question and add the generated response to the instruct_list.\n\
        Args:\n    question_type (str): The type of question to be processed.\n  \
        \  question_id (str): The ID of the question to be processed.\n    query (str):\
        \ The query to be processed.\n    context (str): The context to be used for\
        \ generating the response.\n    info (Dict): The information of the Python\
        \ file.\nReturns:\n    None"
      method_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      method_defaults: []
      method_returns: []
      method_calls:
      - question_id.endswith
      - info.get
      - self.get_response_from_llm
      - self.clean_and_get_unique_elements
      - str
      - str(response).strip
      - self.instruct_list.append
      method_call_inputs:
        question_id.endswith:
        - '''purpose'''
        info.get:
        - question_id
        - ''''''
        self.get_response_from_llm:
        - query
        - context
        self.clean_and_get_unique_elements:
        - str(info.get(question_id, ''))
        str:
        - response
        str(response).strip: []
        self.instruct_list.append:
        - '{''instruction'': query, ''input'': context, ''output'': response_str}'
      method_variables:
      - response
      - response_str
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_get_string_from_info:
      method_name: get_string_from_info
      method_code: "@staticmethod\ndef get_string_from_info(info, item_type):\n  \
        \  if info[item_type]:\n        items = [item.strip() for item in str(info[item_type]).split(',')\
        \ if item]\n        return ', '.join(items)\n    return ''"
      method_ast: FunctionDef(name='get_string_from_info', args=arguments(posonlyargs=[],
        args=[arg(arg='info', lineno=155, col_offset=29, end_lineno=155, end_col_offset=33),
        arg(arg='item_type', lineno=155, col_offset=35, end_lineno=155, end_col_offset=44)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Name(id='info',
        ctx=Load(), lineno=156, col_offset=11, end_lineno=156, end_col_offset=15),
        slice=Name(id='item_type', ctx=Load(), lineno=156, col_offset=16, end_lineno=156,
        end_col_offset=25), ctx=Load(), lineno=156, col_offset=11, end_lineno=156,
        end_col_offset=26), body=[Assign(targets=[Name(id='items', ctx=Store(), lineno=157,
        col_offset=12, end_lineno=157, end_col_offset=17)], value=ListComp(elt=Call(func=Attribute(value=Name(id='item',
        ctx=Load(), lineno=157, col_offset=21, end_lineno=157, end_col_offset=25),
        attr='strip', ctx=Load(), lineno=157, col_offset=21, end_lineno=157, end_col_offset=31),
        args=[], keywords=[], lineno=157, col_offset=21, end_lineno=157, end_col_offset=33),
        generators=[comprehension(target=Name(id='item', ctx=Store(), lineno=157,
        col_offset=38, end_lineno=157, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Name(id='str',
        ctx=Load(), lineno=157, col_offset=46, end_lineno=157, end_col_offset=49),
        args=[Subscript(value=Name(id='info', ctx=Load(), lineno=157, col_offset=50,
        end_lineno=157, end_col_offset=54), slice=Name(id='item_type', ctx=Load(),
        lineno=157, col_offset=55, end_lineno=157, end_col_offset=64), ctx=Load(),
        lineno=157, col_offset=50, end_lineno=157, end_col_offset=65)], keywords=[],
        lineno=157, col_offset=46, end_lineno=157, end_col_offset=66), attr='split',
        ctx=Load(), lineno=157, col_offset=46, end_lineno=157, end_col_offset=72),
        args=[Constant(value=',', lineno=157, col_offset=73, end_lineno=157, end_col_offset=76)],
        keywords=[], lineno=157, col_offset=46, end_lineno=157, end_col_offset=77),
        ifs=[Name(id='item', ctx=Load(), lineno=157, col_offset=81, end_lineno=157,
        end_col_offset=85)], is_async=0)], lineno=157, col_offset=20, end_lineno=157,
        end_col_offset=86), lineno=157, col_offset=12, end_lineno=157, end_col_offset=86),
        Return(value=Call(func=Attribute(value=Constant(value=', ', lineno=158, col_offset=19,
        end_lineno=158, end_col_offset=23), attr='join', ctx=Load(), lineno=158, col_offset=19,
        end_lineno=158, end_col_offset=28), args=[Name(id='items', ctx=Load(), lineno=158,
        col_offset=29, end_lineno=158, end_col_offset=34)], keywords=[], lineno=158,
        col_offset=19, end_lineno=158, end_col_offset=35), lineno=158, col_offset=12,
        end_lineno=158, end_col_offset=35)], orelse=[], lineno=156, col_offset=8,
        end_lineno=158, end_col_offset=35), Return(value=Constant(value='', lineno=159,
        col_offset=15, end_lineno=159, end_col_offset=17), lineno=159, col_offset=8,
        end_lineno=159, end_col_offset=17)], decorator_list=[Name(id='staticmethod',
        ctx=Load(), lineno=154, col_offset=5, end_lineno=154, end_col_offset=17)],
        lineno=155, col_offset=4, end_lineno=159, end_col_offset=17)
      method_docstring: null
      method_inputs:
      - info
      - item_type
      method_defaults: []
      method_returns:
      - ''''''
      - ''', ''.join(items)'
      method_calls:
      - item.strip
      - str(info[item_type]).split
      - str
      - ''', ''.join'
      method_call_inputs:
        item.strip: []
        str(info[item_type]).split:
        - ''','''
        str:
        - info[item_type]
        ''', ''.join':
        - items
      method_variables:
      - items
      method_decorators:
      - staticmethod
      method_annotations: []
      method_properties: []
    class_method_process_question_type:
      method_name: process_question_type
      method_code: "def process_question_type(self, question_type: str, question_id:\
        \ str, question_text: str) -> None:\n    \"\"\"\n        Process questions\
        \ related to a file, function, class, or method.\n        Args:\n        \
        \    question_type (str): The type of question to be processed.\n        \
        \    question_id (str): The ID of the question to be processed.\n        \
        \    question_text (str): The text of the question to be processed.\n    \
        \    Returns:\n            None\n        \"\"\"\n    if question_type == 'file':\n\
        \        query = question_text.format(filename=self.base_name)\n        context\
        \ = self.file_details['file_info']['file_code']\n        info = self.file_details['file_info']\n\
        \        self.process_question(question_type, question_id, query, context,\
        \ info)\n    elif question_type == 'method':\n        for class_name, class_info\
        \ in self.file_details['classes'].items():\n            for key, method_info\
        \ in class_info.items():\n                if key.startswith('class_method_'):\n\
        \                    method_name = key[len('class_method_'):]\n          \
        \          context = method_info['method_code']\n                    mapping\
        \ = {'class_name': class_name, 'method_name': method_name}\n             \
        \       query = question_text.format(filename=self.base_name, **mapping)\n\
        \                    self.process_question(question_type, question_id, query,\
        \ context, method_info)\n    else:\n        for name, info in self.file_details[self.question_mapping[question_type]].items():\n\
        \            context = info[f'{question_type}_code']\n            mapping\
        \ = {f'{question_type}_name': name}\n            if question_id == f'{question_type}_purpose'\
        \ and self.use_llm:\n                variables_string = self.get_string_from_info(info,\
        \ f'{question_type}_variables')\n                inputs_string = self.get_string_from_info(info,\
        \ f'{question_type}_inputs')\n                combined_string = ', '.join([s\
        \ for s in [variables_string, inputs_string] if s])\n                mapping[f'{question_type}_variables']\
        \ = self.clean_and_get_unique_elements(combined_string)\n                if\
        \ question_type == 'class':\n                    methods_string = self.get_string_from_info(info,\
        \ f'{question_type}_methods')\n                    mapping[f'{question_type}_methods']\
        \ = methods_string\n            query = question_text.format(filename=self.base_name,\
        \ **mapping)\n            self.process_question(question_type, question_id,\
        \ query, context, info)"
      method_ast: 'FunctionDef(name=''process_question_type'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=161, col_offset=30, end_lineno=161, end_col_offset=34),
        arg(arg=''question_type'', annotation=Name(id=''str'', ctx=Load(), lineno=161,
        col_offset=51, end_lineno=161, end_col_offset=54), lineno=161, col_offset=36,
        end_lineno=161, end_col_offset=54), arg(arg=''question_id'', annotation=Name(id=''str'',
        ctx=Load(), lineno=161, col_offset=69, end_lineno=161, end_col_offset=72),
        lineno=161, col_offset=56, end_lineno=161, end_col_offset=72), arg(arg=''question_text'',
        annotation=Name(id=''str'', ctx=Load(), lineno=161, col_offset=89, end_lineno=161,
        end_col_offset=92), lineno=161, col_offset=74, end_lineno=161, end_col_offset=92)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Process
        questions related to a file, function, class, or method.\n        Args:\n            question_type
        (str): The type of question to be processed.\n            question_id (str):
        The ID of the question to be processed.\n            question_text (str):
        The text of the question to be processed.\n        Returns:\n            None\n        '',
        lineno=162, col_offset=8, end_lineno=170, end_col_offset=11), lineno=162,
        col_offset=8, end_lineno=170, end_col_offset=11), If(test=Compare(left=Name(id=''question_type'',
        ctx=Load(), lineno=171, col_offset=11, end_lineno=171, end_col_offset=24),
        ops=[Eq()], comparators=[Constant(value=''file'', lineno=171, col_offset=28,
        end_lineno=171, end_col_offset=34)], lineno=171, col_offset=11, end_lineno=171,
        end_col_offset=34), body=[Assign(targets=[Name(id=''query'', ctx=Store(),
        lineno=172, col_offset=12, end_lineno=172, end_col_offset=17)], value=Call(func=Attribute(value=Name(id=''question_text'',
        ctx=Load(), lineno=172, col_offset=20, end_lineno=172, end_col_offset=33),
        attr=''format'', ctx=Load(), lineno=172, col_offset=20, end_lineno=172, end_col_offset=40),
        args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=172, col_offset=50, end_lineno=172, end_col_offset=54),
        attr=''base_name'', ctx=Load(), lineno=172, col_offset=50, end_lineno=172,
        end_col_offset=64), lineno=172, col_offset=41, end_lineno=172, end_col_offset=64)],
        lineno=172, col_offset=20, end_lineno=172, end_col_offset=65), lineno=172,
        col_offset=12, end_lineno=172, end_col_offset=65), Assign(targets=[Name(id=''context'',
        ctx=Store(), lineno=173, col_offset=12, end_lineno=173, end_col_offset=19)],
        value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=173, col_offset=22, end_lineno=173, end_col_offset=26), attr=''file_details'',
        ctx=Load(), lineno=173, col_offset=22, end_lineno=173, end_col_offset=39),
        slice=Constant(value=''file_info'', lineno=173, col_offset=40, end_lineno=173,
        end_col_offset=51), ctx=Load(), lineno=173, col_offset=22, end_lineno=173,
        end_col_offset=52), slice=Constant(value=''file_code'', lineno=173, col_offset=53,
        end_lineno=173, end_col_offset=64), ctx=Load(), lineno=173, col_offset=22,
        end_lineno=173, end_col_offset=65), lineno=173, col_offset=12, end_lineno=173,
        end_col_offset=65), Assign(targets=[Name(id=''info'', ctx=Store(), lineno=174,
        col_offset=12, end_lineno=174, end_col_offset=16)], value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=174, col_offset=19, end_lineno=174, end_col_offset=23),
        attr=''file_details'', ctx=Load(), lineno=174, col_offset=19, end_lineno=174,
        end_col_offset=36), slice=Constant(value=''file_info'', lineno=174, col_offset=37,
        end_lineno=174, end_col_offset=48), ctx=Load(), lineno=174, col_offset=19,
        end_lineno=174, end_col_offset=49), lineno=174, col_offset=12, end_lineno=174,
        end_col_offset=49), Expr(value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=175, col_offset=12, end_lineno=175, end_col_offset=16),
        attr=''process_question'', ctx=Load(), lineno=175, col_offset=12, end_lineno=175,
        end_col_offset=33), args=[Name(id=''question_type'', ctx=Load(), lineno=175,
        col_offset=34, end_lineno=175, end_col_offset=47), Name(id=''question_id'',
        ctx=Load(), lineno=175, col_offset=49, end_lineno=175, end_col_offset=60),
        Name(id=''query'', ctx=Load(), lineno=175, col_offset=62, end_lineno=175,
        end_col_offset=67), Name(id=''context'', ctx=Load(), lineno=175, col_offset=69,
        end_lineno=175, end_col_offset=76), Name(id=''info'', ctx=Load(), lineno=175,
        col_offset=78, end_lineno=175, end_col_offset=82)], keywords=[], lineno=175,
        col_offset=12, end_lineno=175, end_col_offset=83), lineno=175, col_offset=12,
        end_lineno=175, end_col_offset=83)], orelse=[If(test=Compare(left=Name(id=''question_type'',
        ctx=Load(), lineno=176, col_offset=13, end_lineno=176, end_col_offset=26),
        ops=[Eq()], comparators=[Constant(value=''method'', lineno=176, col_offset=30,
        end_lineno=176, end_col_offset=38)], lineno=176, col_offset=13, end_lineno=176,
        end_col_offset=38), body=[For(target=Tuple(elts=[Name(id=''class_name'', ctx=Store(),
        lineno=177, col_offset=16, end_lineno=177, end_col_offset=26), Name(id=''class_info'',
        ctx=Store(), lineno=177, col_offset=28, end_lineno=177, end_col_offset=38)],
        ctx=Store(), lineno=177, col_offset=16, end_lineno=177, end_col_offset=38),
        iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=177, col_offset=42, end_lineno=177, end_col_offset=46),
        attr=''file_details'', ctx=Load(), lineno=177, col_offset=42, end_lineno=177,
        end_col_offset=59), slice=Constant(value=''classes'', lineno=177, col_offset=60,
        end_lineno=177, end_col_offset=69), ctx=Load(), lineno=177, col_offset=42,
        end_lineno=177, end_col_offset=70), attr=''items'', ctx=Load(), lineno=177,
        col_offset=42, end_lineno=177, end_col_offset=76), args=[], keywords=[], lineno=177,
        col_offset=42, end_lineno=177, end_col_offset=78), body=[For(target=Tuple(elts=[Name(id=''key'',
        ctx=Store(), lineno=178, col_offset=20, end_lineno=178, end_col_offset=23),
        Name(id=''method_info'', ctx=Store(), lineno=178, col_offset=25, end_lineno=178,
        end_col_offset=36)], ctx=Store(), lineno=178, col_offset=20, end_lineno=178,
        end_col_offset=36), iter=Call(func=Attribute(value=Name(id=''class_info'',
        ctx=Load(), lineno=178, col_offset=40, end_lineno=178, end_col_offset=50),
        attr=''items'', ctx=Load(), lineno=178, col_offset=40, end_lineno=178, end_col_offset=56),
        args=[], keywords=[], lineno=178, col_offset=40, end_lineno=178, end_col_offset=58),
        body=[If(test=Call(func=Attribute(value=Name(id=''key'', ctx=Load(), lineno=179,
        col_offset=23, end_lineno=179, end_col_offset=26), attr=''startswith'', ctx=Load(),
        lineno=179, col_offset=23, end_lineno=179, end_col_offset=37), args=[Constant(value=''class_method_'',
        lineno=179, col_offset=38, end_lineno=179, end_col_offset=53)], keywords=[],
        lineno=179, col_offset=23, end_lineno=179, end_col_offset=54), body=[Assign(targets=[Name(id=''method_name'',
        ctx=Store(), lineno=180, col_offset=24, end_lineno=180, end_col_offset=35)],
        value=Subscript(value=Name(id=''key'', ctx=Load(), lineno=180, col_offset=38,
        end_lineno=180, end_col_offset=41), slice=Slice(lower=Call(func=Name(id=''len'',
        ctx=Load(), lineno=180, col_offset=42, end_lineno=180, end_col_offset=45),
        args=[Constant(value=''class_method_'', lineno=180, col_offset=46, end_lineno=180,
        end_col_offset=61)], keywords=[], lineno=180, col_offset=42, end_lineno=180,
        end_col_offset=62), lineno=180, col_offset=42, end_lineno=180, end_col_offset=63),
        ctx=Load(), lineno=180, col_offset=38, end_lineno=180, end_col_offset=64),
        lineno=180, col_offset=24, end_lineno=180, end_col_offset=64), Assign(targets=[Name(id=''context'',
        ctx=Store(), lineno=181, col_offset=24, end_lineno=181, end_col_offset=31)],
        value=Subscript(value=Name(id=''method_info'', ctx=Load(), lineno=181, col_offset=34,
        end_lineno=181, end_col_offset=45), slice=Constant(value=''method_code'',
        lineno=181, col_offset=46, end_lineno=181, end_col_offset=59), ctx=Load(),
        lineno=181, col_offset=34, end_lineno=181, end_col_offset=60), lineno=181,
        col_offset=24, end_lineno=181, end_col_offset=60), Assign(targets=[Name(id=''mapping'',
        ctx=Store(), lineno=182, col_offset=24, end_lineno=182, end_col_offset=31)],
        value=Dict(keys=[Constant(value=''class_name'', lineno=182, col_offset=35,
        end_lineno=182, end_col_offset=47), Constant(value=''method_name'', lineno=182,
        col_offset=61, end_lineno=182, end_col_offset=74)], values=[Name(id=''class_name'',
        ctx=Load(), lineno=182, col_offset=49, end_lineno=182, end_col_offset=59),
        Name(id=''method_name'', ctx=Load(), lineno=182, col_offset=76, end_lineno=182,
        end_col_offset=87)], lineno=182, col_offset=34, end_lineno=182, end_col_offset=88),
        lineno=182, col_offset=24, end_lineno=182, end_col_offset=88), Assign(targets=[Name(id=''query'',
        ctx=Store(), lineno=183, col_offset=24, end_lineno=183, end_col_offset=29)],
        value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load(), lineno=183,
        col_offset=32, end_lineno=183, end_col_offset=45), attr=''format'', ctx=Load(),
        lineno=183, col_offset=32, end_lineno=183, end_col_offset=52), args=[], keywords=[keyword(arg=''filename'',
        value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=183, col_offset=62,
        end_lineno=183, end_col_offset=66), attr=''base_name'', ctx=Load(), lineno=183,
        col_offset=62, end_lineno=183, end_col_offset=76), lineno=183, col_offset=53,
        end_lineno=183, end_col_offset=76), keyword(value=Name(id=''mapping'', ctx=Load(),
        lineno=183, col_offset=80, end_lineno=183, end_col_offset=87), lineno=183,
        col_offset=78, end_lineno=183, end_col_offset=87)], lineno=183, col_offset=32,
        end_lineno=183, end_col_offset=88), lineno=183, col_offset=24, end_lineno=183,
        end_col_offset=88), Expr(value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=184, col_offset=24, end_lineno=184, end_col_offset=28),
        attr=''process_question'', ctx=Load(), lineno=184, col_offset=24, end_lineno=184,
        end_col_offset=45), args=[Name(id=''question_type'', ctx=Load(), lineno=184,
        col_offset=46, end_lineno=184, end_col_offset=59), Name(id=''question_id'',
        ctx=Load(), lineno=184, col_offset=61, end_lineno=184, end_col_offset=72),
        Name(id=''query'', ctx=Load(), lineno=184, col_offset=74, end_lineno=184,
        end_col_offset=79), Name(id=''context'', ctx=Load(), lineno=184, col_offset=81,
        end_lineno=184, end_col_offset=88), Name(id=''method_info'', ctx=Load(), lineno=184,
        col_offset=90, end_lineno=184, end_col_offset=101)], keywords=[], lineno=184,
        col_offset=24, end_lineno=184, end_col_offset=102), lineno=184, col_offset=24,
        end_lineno=184, end_col_offset=102)], orelse=[], lineno=179, col_offset=20,
        end_lineno=184, end_col_offset=102)], orelse=[], lineno=178, col_offset=16,
        end_lineno=184, end_col_offset=102)], orelse=[], lineno=177, col_offset=12,
        end_lineno=184, end_col_offset=102)], orelse=[For(target=Tuple(elts=[Name(id=''name'',
        ctx=Store(), lineno=186, col_offset=16, end_lineno=186, end_col_offset=20),
        Name(id=''info'', ctx=Store(), lineno=186, col_offset=22, end_lineno=186,
        end_col_offset=26)], ctx=Store(), lineno=186, col_offset=16, end_lineno=186,
        end_col_offset=26), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=186, col_offset=30, end_lineno=186, end_col_offset=34),
        attr=''file_details'', ctx=Load(), lineno=186, col_offset=30, end_lineno=186,
        end_col_offset=47), slice=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=186, col_offset=48, end_lineno=186, end_col_offset=52),
        attr=''question_mapping'', ctx=Load(), lineno=186, col_offset=48, end_lineno=186,
        end_col_offset=69), slice=Name(id=''question_type'', ctx=Load(), lineno=186,
        col_offset=70, end_lineno=186, end_col_offset=83), ctx=Load(), lineno=186,
        col_offset=48, end_lineno=186, end_col_offset=84), ctx=Load(), lineno=186,
        col_offset=30, end_lineno=186, end_col_offset=85), attr=''items'', ctx=Load(),
        lineno=186, col_offset=30, end_lineno=186, end_col_offset=91), args=[], keywords=[],
        lineno=186, col_offset=30, end_lineno=186, end_col_offset=93), body=[Assign(targets=[Name(id=''context'',
        ctx=Store(), lineno=187, col_offset=16, end_lineno=187, end_col_offset=23)],
        value=Subscript(value=Name(id=''info'', ctx=Load(), lineno=187, col_offset=26,
        end_lineno=187, end_col_offset=30), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
        ctx=Load(), lineno=187, col_offset=34, end_lineno=187, end_col_offset=47),
        conversion=-1, lineno=187, col_offset=31, end_lineno=187, end_col_offset=54),
        Constant(value=''_code'', lineno=187, col_offset=31, end_lineno=187, end_col_offset=54)],
        lineno=187, col_offset=31, end_lineno=187, end_col_offset=54), ctx=Load(),
        lineno=187, col_offset=26, end_lineno=187, end_col_offset=55), lineno=187,
        col_offset=16, end_lineno=187, end_col_offset=55), Assign(targets=[Name(id=''mapping'',
        ctx=Store(), lineno=188, col_offset=16, end_lineno=188, end_col_offset=23)],
        value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
        ctx=Load(), lineno=188, col_offset=30, end_lineno=188, end_col_offset=43),
        conversion=-1, lineno=188, col_offset=27, end_lineno=188, end_col_offset=50),
        Constant(value=''_name'', lineno=188, col_offset=27, end_lineno=188, end_col_offset=50)],
        lineno=188, col_offset=27, end_lineno=188, end_col_offset=50)], values=[Name(id=''name'',
        ctx=Load(), lineno=188, col_offset=52, end_lineno=188, end_col_offset=56)],
        lineno=188, col_offset=26, end_lineno=188, end_col_offset=57), lineno=188,
        col_offset=16, end_lineno=188, end_col_offset=57), If(test=BoolOp(op=And(),
        values=[Compare(left=Name(id=''question_id'', ctx=Load(), lineno=189, col_offset=19,
        end_lineno=189, end_col_offset=30), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
        ctx=Load(), lineno=189, col_offset=37, end_lineno=189, end_col_offset=50),
        conversion=-1, lineno=189, col_offset=34, end_lineno=189, end_col_offset=60),
        Constant(value=''_purpose'', lineno=189, col_offset=34, end_lineno=189, end_col_offset=60)],
        lineno=189, col_offset=34, end_lineno=189, end_col_offset=60)], lineno=189,
        col_offset=19, end_lineno=189, end_col_offset=60), Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=189, col_offset=65, end_lineno=189, end_col_offset=69),
        attr=''use_llm'', ctx=Load(), lineno=189, col_offset=65, end_lineno=189, end_col_offset=77)],
        lineno=189, col_offset=19, end_lineno=189, end_col_offset=77), body=[Assign(targets=[Name(id=''variables_string'',
        ctx=Store(), lineno=190, col_offset=20, end_lineno=190, end_col_offset=36)],
        value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=190,
        col_offset=39, end_lineno=190, end_col_offset=43), attr=''get_string_from_info'',
        ctx=Load(), lineno=190, col_offset=39, end_lineno=190, end_col_offset=64),
        args=[Name(id=''info'', ctx=Load(), lineno=190, col_offset=65, end_lineno=190,
        end_col_offset=69), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
        ctx=Load(), lineno=190, col_offset=74, end_lineno=190, end_col_offset=87),
        conversion=-1, lineno=190, col_offset=71, end_lineno=190, end_col_offset=99),
        Constant(value=''_variables'', lineno=190, col_offset=71, end_lineno=190,
        end_col_offset=99)], lineno=190, col_offset=71, end_lineno=190, end_col_offset=99)],
        keywords=[], lineno=190, col_offset=39, end_lineno=190, end_col_offset=100),
        lineno=190, col_offset=20, end_lineno=190, end_col_offset=100), Assign(targets=[Name(id=''inputs_string'',
        ctx=Store(), lineno=191, col_offset=20, end_lineno=191, end_col_offset=33)],
        value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=191,
        col_offset=36, end_lineno=191, end_col_offset=40), attr=''get_string_from_info'',
        ctx=Load(), lineno=191, col_offset=36, end_lineno=191, end_col_offset=61),
        args=[Name(id=''info'', ctx=Load(), lineno=191, col_offset=62, end_lineno=191,
        end_col_offset=66), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
        ctx=Load(), lineno=191, col_offset=71, end_lineno=191, end_col_offset=84),
        conversion=-1, lineno=191, col_offset=68, end_lineno=191, end_col_offset=93),
        Constant(value=''_inputs'', lineno=191, col_offset=68, end_lineno=191, end_col_offset=93)],
        lineno=191, col_offset=68, end_lineno=191, end_col_offset=93)], keywords=[],
        lineno=191, col_offset=36, end_lineno=191, end_col_offset=94), lineno=191,
        col_offset=20, end_lineno=191, end_col_offset=94), Assign(targets=[Name(id=''combined_string'',
        ctx=Store(), lineno=192, col_offset=20, end_lineno=192, end_col_offset=35)],
        value=Call(func=Attribute(value=Constant(value='', '', lineno=192, col_offset=38,
        end_lineno=192, end_col_offset=42), attr=''join'', ctx=Load(), lineno=192,
        col_offset=38, end_lineno=192, end_col_offset=47), args=[ListComp(elt=Name(id=''s'',
        ctx=Load(), lineno=192, col_offset=49, end_lineno=192, end_col_offset=50),
        generators=[comprehension(target=Name(id=''s'', ctx=Store(), lineno=192, col_offset=55,
        end_lineno=192, end_col_offset=56), iter=List(elts=[Name(id=''variables_string'',
        ctx=Load(), lineno=192, col_offset=61, end_lineno=192, end_col_offset=77),
        Name(id=''inputs_string'', ctx=Load(), lineno=192, col_offset=79, end_lineno=192,
        end_col_offset=92)], ctx=Load(), lineno=192, col_offset=60, end_lineno=192,
        end_col_offset=93), ifs=[Name(id=''s'', ctx=Load(), lineno=192, col_offset=97,
        end_lineno=192, end_col_offset=98)], is_async=0)], lineno=192, col_offset=48,
        end_lineno=192, end_col_offset=99)], keywords=[], lineno=192, col_offset=38,
        end_lineno=192, end_col_offset=100), lineno=192, col_offset=20, end_lineno=192,
        end_col_offset=100), Assign(targets=[Subscript(value=Name(id=''mapping'',
        ctx=Load(), lineno=193, col_offset=20, end_lineno=193, end_col_offset=27),
        slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'', ctx=Load(),
        lineno=193, col_offset=31, end_lineno=193, end_col_offset=44), conversion=-1,
        lineno=193, col_offset=28, end_lineno=193, end_col_offset=56), Constant(value=''_variables'',
        lineno=193, col_offset=28, end_lineno=193, end_col_offset=56)], lineno=193,
        col_offset=28, end_lineno=193, end_col_offset=56), ctx=Store(), lineno=193,
        col_offset=20, end_lineno=193, end_col_offset=57)], value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=193, col_offset=60, end_lineno=193, end_col_offset=64),
        attr=''clean_and_get_unique_elements'', ctx=Load(), lineno=193, col_offset=60,
        end_lineno=193, end_col_offset=94), args=[Name(id=''combined_string'', ctx=Load(),
        lineno=193, col_offset=95, end_lineno=193, end_col_offset=110)], keywords=[],
        lineno=193, col_offset=60, end_lineno=193, end_col_offset=111), lineno=193,
        col_offset=20, end_lineno=193, end_col_offset=111), If(test=Compare(left=Name(id=''question_type'',
        ctx=Load(), lineno=195, col_offset=23, end_lineno=195, end_col_offset=36),
        ops=[Eq()], comparators=[Constant(value=''class'', lineno=195, col_offset=40,
        end_lineno=195, end_col_offset=47)], lineno=195, col_offset=23, end_lineno=195,
        end_col_offset=47), body=[Assign(targets=[Name(id=''methods_string'', ctx=Store(),
        lineno=196, col_offset=24, end_lineno=196, end_col_offset=38)], value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=196, col_offset=41, end_lineno=196, end_col_offset=45),
        attr=''get_string_from_info'', ctx=Load(), lineno=196, col_offset=41, end_lineno=196,
        end_col_offset=66), args=[Name(id=''info'', ctx=Load(), lineno=196, col_offset=67,
        end_lineno=196, end_col_offset=71), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
        ctx=Load(), lineno=196, col_offset=76, end_lineno=196, end_col_offset=89),
        conversion=-1, lineno=196, col_offset=73, end_lineno=196, end_col_offset=99),
        Constant(value=''_methods'', lineno=196, col_offset=73, end_lineno=196, end_col_offset=99)],
        lineno=196, col_offset=73, end_lineno=196, end_col_offset=99)], keywords=[],
        lineno=196, col_offset=41, end_lineno=196, end_col_offset=100), lineno=196,
        col_offset=24, end_lineno=196, end_col_offset=100), Assign(targets=[Subscript(value=Name(id=''mapping'',
        ctx=Load(), lineno=197, col_offset=24, end_lineno=197, end_col_offset=31),
        slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'', ctx=Load(),
        lineno=197, col_offset=35, end_lineno=197, end_col_offset=48), conversion=-1,
        lineno=197, col_offset=32, end_lineno=197, end_col_offset=58), Constant(value=''_methods'',
        lineno=197, col_offset=32, end_lineno=197, end_col_offset=58)], lineno=197,
        col_offset=32, end_lineno=197, end_col_offset=58), ctx=Store(), lineno=197,
        col_offset=24, end_lineno=197, end_col_offset=59)], value=Name(id=''methods_string'',
        ctx=Load(), lineno=197, col_offset=62, end_lineno=197, end_col_offset=76),
        lineno=197, col_offset=24, end_lineno=197, end_col_offset=76)], orelse=[],
        lineno=195, col_offset=20, end_lineno=197, end_col_offset=76)], orelse=[],
        lineno=189, col_offset=16, end_lineno=197, end_col_offset=76), Assign(targets=[Name(id=''query'',
        ctx=Store(), lineno=199, col_offset=16, end_lineno=199, end_col_offset=21)],
        value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load(), lineno=199,
        col_offset=24, end_lineno=199, end_col_offset=37), attr=''format'', ctx=Load(),
        lineno=199, col_offset=24, end_lineno=199, end_col_offset=44), args=[], keywords=[keyword(arg=''filename'',
        value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=199, col_offset=54,
        end_lineno=199, end_col_offset=58), attr=''base_name'', ctx=Load(), lineno=199,
        col_offset=54, end_lineno=199, end_col_offset=68), lineno=199, col_offset=45,
        end_lineno=199, end_col_offset=68), keyword(value=Name(id=''mapping'', ctx=Load(),
        lineno=199, col_offset=72, end_lineno=199, end_col_offset=79), lineno=199,
        col_offset=70, end_lineno=199, end_col_offset=79)], lineno=199, col_offset=24,
        end_lineno=199, end_col_offset=80), lineno=199, col_offset=16, end_lineno=199,
        end_col_offset=80), Expr(value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=200, col_offset=16, end_lineno=200, end_col_offset=20),
        attr=''process_question'', ctx=Load(), lineno=200, col_offset=16, end_lineno=200,
        end_col_offset=37), args=[Name(id=''question_type'', ctx=Load(), lineno=200,
        col_offset=38, end_lineno=200, end_col_offset=51), Name(id=''question_id'',
        ctx=Load(), lineno=200, col_offset=53, end_lineno=200, end_col_offset=64),
        Name(id=''query'', ctx=Load(), lineno=200, col_offset=66, end_lineno=200,
        end_col_offset=71), Name(id=''context'', ctx=Load(), lineno=200, col_offset=73,
        end_lineno=200, end_col_offset=80), Name(id=''info'', ctx=Load(), lineno=200,
        col_offset=82, end_lineno=200, end_col_offset=86)], keywords=[], lineno=200,
        col_offset=16, end_lineno=200, end_col_offset=87), lineno=200, col_offset=16,
        end_lineno=200, end_col_offset=87)], orelse=[], lineno=186, col_offset=12,
        end_lineno=200, end_col_offset=87)], lineno=176, col_offset=8, end_lineno=200,
        end_col_offset=87)], lineno=171, col_offset=8, end_lineno=200, end_col_offset=87)],
        decorator_list=[], returns=Constant(value=None, lineno=161, col_offset=97,
        end_lineno=161, end_col_offset=101), lineno=161, col_offset=4, end_lineno=200,
        end_col_offset=87)'
      method_docstring: "Process questions related to a file, function, class, or\
        \ method.\nArgs:\n    question_type (str): The type of question to be processed.\n\
        \    question_id (str): The ID of the question to be processed.\n    question_text\
        \ (str): The text of the question to be processed.\nReturns:\n    None"
      method_inputs:
      - self
      - question_type
      - question_id
      - question_text
      method_defaults: []
      method_returns: []
      method_calls:
      - question_text.format
      - self.process_question
      - self.file_details['classes'].items
      - class_info.items
      - key.startswith
      - len
      - self.file_details[self.question_mapping[question_type]].items
      - self.get_string_from_info
      - ''', ''.join'
      - self.clean_and_get_unique_elements
      method_call_inputs:
        question_text.format: []
        self.process_question:
        - question_type
        - question_id
        - query
        - context
        - info
        self.file_details['classes'].items: []
        class_info.items: []
        key.startswith:
        - '''class_method_'''
        len:
        - '''class_method_'''
        self.file_details[self.question_mapping[question_type]].items: []
        self.get_string_from_info:
        - info
        - f'{question_type}_methods'
        ''', ''.join':
        - '[s for s in [variables_string, inputs_string] if s]'
        self.clean_and_get_unique_elements:
        - combined_string
      method_variables:
      - methods_string
      - combined_string
      - variables_string
      - inputs_string
      - method_name
      - info
      - mapping
      - context
      - query
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_generate:
      method_name: generate
      method_code: "def generate(self) -> Tuple[List[Dict], List[Dict]]:\n    \"\"\
        \"\n        Generate responses for all the questions and returns the instruct_list.\n\
        \        Args:\n            None\n        Returns:\n            Tuple[List[Dict],\
        \ List[Dict]]: The generated question-answer pairs and instructions.\n   \
        \     \"\"\"\n    for question in self.questions:\n        self.process_question_type(question['type'],\
        \ question['id'], question['text'])\n    return self.instruct_list"
      method_ast: 'FunctionDef(name=''generate'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
        lineno=202, col_offset=17, end_lineno=202, end_col_offset=21)], kwonlyargs=[],
        kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Generate
        responses for all the questions and returns the instruct_list.\n        Args:\n            None\n        Returns:\n            Tuple[List[Dict],
        List[Dict]]: The generated question-answer pairs and instructions.\n        '',
        lineno=203, col_offset=8, end_lineno=209, end_col_offset=11), lineno=203,
        col_offset=8, end_lineno=209, end_col_offset=11), For(target=Name(id=''question'',
        ctx=Store(), lineno=210, col_offset=12, end_lineno=210, end_col_offset=20),
        iter=Attribute(value=Name(id=''self'', ctx=Load(), lineno=210, col_offset=24,
        end_lineno=210, end_col_offset=28), attr=''questions'', ctx=Load(), lineno=210,
        col_offset=24, end_lineno=210, end_col_offset=38), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=211, col_offset=12, end_lineno=211, end_col_offset=16),
        attr=''process_question_type'', ctx=Load(), lineno=211, col_offset=12, end_lineno=211,
        end_col_offset=38), args=[Subscript(value=Name(id=''question'', ctx=Load(),
        lineno=211, col_offset=39, end_lineno=211, end_col_offset=47), slice=Constant(value=''type'',
        lineno=211, col_offset=48, end_lineno=211, end_col_offset=54), ctx=Load(),
        lineno=211, col_offset=39, end_lineno=211, end_col_offset=55), Subscript(value=Name(id=''question'',
        ctx=Load(), lineno=211, col_offset=57, end_lineno=211, end_col_offset=65),
        slice=Constant(value=''id'', lineno=211, col_offset=66, end_lineno=211, end_col_offset=70),
        ctx=Load(), lineno=211, col_offset=57, end_lineno=211, end_col_offset=71),
        Subscript(value=Name(id=''question'', ctx=Load(), lineno=211, col_offset=73,
        end_lineno=211, end_col_offset=81), slice=Constant(value=''text'', lineno=211,
        col_offset=82, end_lineno=211, end_col_offset=88), ctx=Load(), lineno=211,
        col_offset=73, end_lineno=211, end_col_offset=89)], keywords=[], lineno=211,
        col_offset=12, end_lineno=211, end_col_offset=90), lineno=211, col_offset=12,
        end_lineno=211, end_col_offset=90)], orelse=[], lineno=210, col_offset=8,
        end_lineno=211, end_col_offset=90), Return(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=212, col_offset=15, end_lineno=212, end_col_offset=19),
        attr=''instruct_list'', ctx=Load(), lineno=212, col_offset=15, end_lineno=212,
        end_col_offset=33), lineno=212, col_offset=8, end_lineno=212, end_col_offset=33)],
        decorator_list=[], returns=Subscript(value=Name(id=''Tuple'', ctx=Load(),
        lineno=202, col_offset=26, end_lineno=202, end_col_offset=31), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=202, col_offset=32, end_lineno=202, end_col_offset=36),
        slice=Name(id=''Dict'', ctx=Load(), lineno=202, col_offset=37, end_lineno=202,
        end_col_offset=41), ctx=Load(), lineno=202, col_offset=32, end_lineno=202,
        end_col_offset=42), Subscript(value=Name(id=''List'', ctx=Load(), lineno=202,
        col_offset=44, end_lineno=202, end_col_offset=48), slice=Name(id=''Dict'',
        ctx=Load(), lineno=202, col_offset=49, end_lineno=202, end_col_offset=53),
        ctx=Load(), lineno=202, col_offset=44, end_lineno=202, end_col_offset=54)],
        ctx=Load(), lineno=202, col_offset=32, end_lineno=202, end_col_offset=54),
        ctx=Load(), lineno=202, col_offset=26, end_lineno=202, end_col_offset=55),
        lineno=202, col_offset=4, end_lineno=212, end_col_offset=33)'
      method_docstring: "Generate responses for all the questions and returns the\
        \ instruct_list.\nArgs:\n    None\nReturns:\n    Tuple[List[Dict], List[Dict]]:\
        \ The generated question-answer pairs and instructions."
      method_inputs:
      - self
      method_defaults: []
      method_returns:
      - self.instruct_list
      method_calls:
      - self.process_question_type
      method_call_inputs:
        self.process_question_type:
        - question['type']
        - question['id']
        - question['text']
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties: []
