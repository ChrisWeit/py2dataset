file_info:
  file_code: "\"\"\"\nObtain data parameter and model from the py2dataset functions.\n\
    Requirements:\n[req01] The `get_default_questions` function shall:\n        a.\
    \ Return a list of default questions.\n        b. Ensure each question in the\
    \ list is a dictionary.\n        c. Ensure each dictionary has the keys: id, text,\
    \ and type.\n[req02] The `get_default_model_config` function shall:\n        a.\
    \ Return a dictionary representing the default model configuration.\n        b.\
    \ Include keys: prompt_template and inference_model.\n        c. Ensure the inference_model\
    \ key contains a model_import_path and model_params.\n[req03] The `get_output_dir`\
    \ function shall:\n        a. Accept an optional output_dir argument.\n      \
    \  b. Return the absolute path of the provided output_dir if it exists or can\
    \ be created.\n        c. Return the default OUTPUT_DIR if the provided output_dir\
    \ argument is not provided or invalid.\n[req04] The `get_questions` function shall:\n\
    \        a. Accept an optional questions_pathname argument.\n        b. Validate\
    \ the question file provided by the questions_pathname.\n        c. Return the\
    \ questions from the provided questions_pathname if valid.\n        d. Return\
    \ default questions if the questions_pathname is not provided or invalid.\n[req05]\
    \ The `instantiate_model` function shall:\n        a. Accept a model_config dictionary\
    \ as an argument.\n        b. Import the specified module and class from the model_config.\n\
    \        c. Instantiate and return the model using the provided configuration.\n\
    [req06] The `get_model` function shall:\n        a. Accept an optional model_config_pathname\
    \ argument.\n        b. Validate the model config file provided by the model_config_pathname.\n\
    \        c. Return an instantiated model and a prompt template based on the provided\
    \ configuration.\n        d. Return an instantiated model and a prompt template\
    \ based on the default model configuration if the model_config_pathname is not\
    \ provided or invalid.\n[req07] The `write_questions_file` function shall:\n \
    \       a. Accept an optional output_dir argument.\n        b. Write the default\
    \ questions to the QUESTIONS_FILE in the specified directory.\n        c. Write\
    \ the default questions to the QUESTIONS_FILE in the current working directory\
    \ if the output_dir argument is not provided or invalid.\n[req08] The `write_model_config_file`\
    \ function shall:\n        a. Accept an optional output_dir argument.\n      \
    \  b. Write the default model configuration to the MODEL_CONFIG_FILE in the specified\
    \ directory.\n        c. Write the default model configuration to the MODEL_CONFIG_FILE\
    \ in the current working directory if the output_dir argument is not provided\
    \ or invalid.\n\"\"\"\n\nimport os\nimport json\nimport logging\nimport yaml\n\
    import importlib\nfrom typing import Dict, List \nfrom pathlib import Path\n\n\
    # Setting up a basic logger\nlogging.basicConfig(level=logging.INFO)\n\nQUESTIONS_FILE\
    \ = 'py2dataset_questions.json'\nMODEL_CONFIG_FILE = 'py2dataset_model_config.yaml'\n\
    OUTPUT_DIR = 'datasets'\n\ndef get_default_questions() -> List[Dict]:\n    \"\"\
    \"Return default question list\"\"\"\n    questions = [\n        {\n         \
    \   \"id\": \"file_dependencies\",\n            \"text\": \"What are the dependencies\
    \ of the Python file: '{filename}'?\",\n            \"type\": \"file\"\n     \
    \   },\n        {\n            \"id\": \"internal_code_graph\",\n            \"\
    text\": \"What are the structural relationships between the functions and classes\
    \ defined in the Python file: '{filename}'?\",\n            \"type\": \"file\"\
    \n        },\n        {\n            \"id\": \"entire_code_graph\",\n        \
    \    \"text\": \"What are the structural relationships between the functions and\
    \ classes defined and used in the Python file: '{filename}'?\",\n            \"\
    type\": \"file\"\n        },\n        {\n            \"id\": \"file_functions\"\
    ,\n            \"text\": \"What functions are defined in the Python file: '{filename}'?\"\
    ,\n            \"type\": \"file\"\n        },      \n        {\n            \"\
    id\": \"file_classes\",\n            \"text\": \"What classes are defined in the\
    \ Python file: '{filename}'?\",\n            \"type\": \"file\"\n        },\n\
    \        {\n            \"id\": \"file_control_flow\",\n            \"text\":\
    \ \"What is the control flow of the Python file: '{filename}'?\",\n          \
    \  \"type\": \"file\"\n        },\n        {\n            \"id\": \"function_inputs\"\
    ,\n            \"text\": \"What are the inputs to the function: '{function_name}'\
    \ in the Python file: '{filename}'?\",\n            \"type\": \"function\"\n \
    \       },\n        {\n            \"id\": \"function_docstring\",\n         \
    \   \"text\": \"What is the docstring of the function: '{function_name}' in the\
    \ Python file: '{filename}'?\",\n            \"type\": \"function\"\n        },\n\
    \        {\n            \"id\": \"function_calls\",\n            \"text\": \"\
    What calls are made in the function: '{function_name}' in the Python file: '{filename}'?\"\
    ,\n            \"type\": \"function\"\n        },\n        {\n            \"id\"\
    : \"function_variables\",\n            \"text\": \"What variables are defined\
    \ in the function: '{function_name}' in the Python file: '{filename}'?\",\n  \
    \          \"type\": \"function\"\n        }, \n        {\n            \"id\"\
    : \"function_returns\",\n            \"text\": \"What are the returned items from\
    \ the function: '{function_name}' in the Python file: '{filename}'?\",\n     \
    \       \"type\": \"function\"\n        },\n        {\n            \"id\": \"\
    class_methods\",\n            \"text\": \"What are the methods defined within\
    \ the class: '{class_name}' in the Python file: '{filename}'?\",\n           \
    \ \"type\": \"class\"\n        },\n        {\n            \"id\": \"class_docstring\"\
    ,\n            \"text\": \"What is the docstring of the class: '{class_name}'\
    \ in the Python file: '{filename}'?\",\n            \"type\": \"class\"\n    \
    \    },\n        {\n            \"id\": \"class_attributes\",\n            \"\
    text\": \"What are the attributes of the class: '{class_name}' in the Python file:\
    \ '{filename}'?\",\n            \"type\": \"class\"\n        },\n        {\n \
    \           \"id\": \"class_variables\",\n            \"text\": \"What variables\
    \ are defined in the class: '{class_name}' in the Python file: '{filename}'?\"\
    ,\n            \"type\": \"class\"\n        },\n        {\n            \"id\"\
    : \"class_inheritance\",\n            \"text\": \"What is the Inheritance of the\
    \ class: '{class_name}' in the Python file: '{filename}'?\",\n            \"type\"\
    : \"class\"\n        },\n        {\n            \"id\": \"method_inputs\",\n \
    \           \"text\": \"What are the inputs to method: '{method_name}' in the\
    \ class: '{class_name}' in the Python file: '{filename}'?\",\n            \"type\"\
    : \"method\"\n        },\n        {\n            \"id\": \"method_docstring\"\
    ,\n            \"text\": \"What is the docstring of the method: '{method_name}'\
    \ in the class: '{class_name}' in the Python file: '{filename}'?\",\n        \
    \    \"type\": \"method\"\n        },\n        {\n            \"id\": \"method_calls\"\
    ,\n            \"text\": \"What calls are made in the method: '{method_name}'\
    \ in the class: '{class_name}' in the Python file: '{filename}'?\",\n        \
    \    \"type\": \"method\"\n        },\n        {\n            \"id\": \"method_returns\"\
    ,\n            \"text\": \"What are the returns from the method: '{method_name}'\
    \ in the class: '{class_name}' in the Python file: '{filename}'?\",\n        \
    \    \"type\": \"method\"\n        },\n        {   \n            \"id\": \"file_purpose\"\
    ,\n            \"text\": \"What is the purpose and processing summary of the Python\
    \ file: '{filename}'?\",\n            \"type\": \"file\"\n        },\n       \
    \ {\n            \"id\": \"function_purpose\",\n            \"text\": \"What is\
    \ the purpose and processing summary of the function: '{function_name}' defined\
    \ in the Python file: '{filename}'?\",\n            \"type\": \"function\"\n \
    \       },\n        {\n            \"id\": \"class_purpose\",\n            \"\
    text\": \"What is the purpose and processing summary of the class: '{class_name}'\
    \ defined in the Python file: '{filename}'?\",\n            \"type\": \"class\"\
    \n        },\n        {\n            \"id\": \"method_purpose\",\n           \
    \ \"text\": \"What is the purpose and processing summary of the method: '{method_name}'\
    \ defined in the class: '{class_name}' in the Python file: '{filename}'?\",\n\
    \            \"type\": \"method\"\n        },\n        {\n            \"id\":\
    \ \"function_variable_purpose\",\n            \"text\": \"What is the purpose\
    \ and usage of each of these variables: '{function_variables}' defined in the\
    \ function: '{function_name}' in the Python file: '{filename}'?\",\n         \
    \   \"type\": \"function\"\n        },       \n        {\n            \"id\":\
    \ \"class_variable_purpose\",\n            \"text\": \"What is the purpose and\
    \ usage of each of these variables: '{class_variables}' defined in the class:\
    \ '{class_name}' in the Python file: '{filename}'?\",\n            \"type\": \"\
    class\"\n        }      \n    ]\n    \n    return questions\n\n\ndef get_default_model_config()\
    \ -> Dict:\n    \"\"\"Return default model config dict\"\"\"\n    model_config\
    \ = {\n        \"prompt_template\": \"Your response will be used to train AI language\
    \ models. Provide semantic meaning for the given context by providing a concise\
    \ and comprhensive answer to the related question.\\n{context}\\n### Instruction:\\\
    nGiven this context:\\n'{context}'\\nAnswer the following question and provide\
    \ your reasoning: {query}\\n### Response:\",\n        \"inference_model\": {\n\
    \            \"model_import_path\": \"ctransformers.AutoModelForCausalLM\",\n\
    \            \"model_params\": {\n                \"model_path\": \"TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML\"\
    ,  \n                \"model_type\": \"starcoder\",\n                \"local_files_only\"\
    : False,\n                \"lib\": \"avx2\",\n                \"threads\": 16,\n\
    \                \"batch_size\": 16,\n                \"max_new_tokens\": 2048,\n\
    \                \"gpu_layers\": 24,\n                \"reset\": True\n      \
    \      }\n        }\n    }\n    return model_config\n\n\ndef get_output_dir(output_dir:\
    \ str='') -> str:\n    \"\"\"Returns the appropriate output directory.\"\"\" \
    \  \n    if output_dir: # Check if the directory exists and create it if not\n\
    \        output_dir = os.path.abspath(output_dir)\n    else: # Default to OUTPUT_DIR\
    \ at the current working directory\n        output_dir = os.path.join(os.getcwd(),\
    \ OUTPUT_DIR)\n    if not Path(output_dir).is_dir(): #create output_dir if it\
    \ doesn't exist\n        os.makedirs(output_dir, exist_ok=True)\n    logging.info(f'Using\
    \ output directory: {output_dir}')\n    return output_dir\n\n\ndef get_questions(questions_pathname:\
    \ str) -> List[Dict]:\n    \"\"\"Get questions from file or default\"\"\"\n  \
    \  # check if questions_pathname is an empty string\n    if not questions_pathname:\n\
    \        questions_pathname = os.path.join(os.getcwd(), QUESTIONS_FILE)    \n\n\
    \    # verify if questions_pathname is a valid file\n    if not Path(questions_pathname).is_file():\n\
    \        logging.info(f'Questions file {questions_pathname} not found. Using default\
    \ questions')\n        questions = get_default_questions()\n        return questions\n\
    \n    # verify if questions_pathname is a valid json questions file\n    try:\n\
    \        with open(questions_pathname, 'r') as f:\n            questions = json.load(f)\n\
    \    except:\n        logging.info(f'Questions file not valid: {questions_pathname}\
    \ Using default questions')\n        questions = get_default_questions()\n   \
    \     return questions  \n\n    logging.info(f'Using questions from file: {questions_pathname}')\n\
    \    return questions\n\n\ndef instantiate_model(model_config: Dict) -> object:\n\
    \    \"\"\"\n    Imports and instantiates a model based on the provided configuration.\n\
    \    Args:\n        model_config (dict): A dictionary containing the configuration\
    \ for the\n            model. It should include the import path for the model\
    \ class and\n            parameters for instantiation.\n        user_config (dict):\
    \ A dictionary containing user-provided configurations.\n            If provided,\
    \ these configurations will override the defaults.\n    Returns:\n        object:\
    \ An instance of the specified model class, or None if there was\n           \
    \ an error.\n    \"\"\"\n    model = None\n    try:\n        module_name, class_name\
    \ = model_config['model_import_path'].rsplit('.', 1)\n        module = importlib.import_module(module_name)\n\
    \    except ImportError as e:\n        print(f\"Failed to import module {module_name}.\
    \ Error: {e}\")\n        return model\n    try:\n        ModelClass = getattr(module,\
    \ class_name)\n    except AttributeError as e:\n        print(f\"Module {module_name}\
    \ does not have a class named {class_name}. Error: {e}\")\n        return model\n\
    \    \n    model_params = model_config['model_params']\n    try:\n        model\
    \ = ModelClass.from_pretrained(model_params.pop('model_path'), **model_params)\n\
    \    except Exception as e:\n        print(f\"Failed to instantiate the model\
    \ with the provided parameters. Error: {e}\")\n        return model\n\n    return\
    \ model\n\n\ndef get_model(model_config_pathname: str):\n    \"\"\"\n    Agrs:\n\
    \        model_config_pathname (str): The pathname of the model config file\n\
    \    Returns:\n        Tuple[object, str]: The instantiated model and prompt template\
    \ \n    \"\"\"\n    # check if model_config_pathname is an empty string\n    if\
    \ not model_config_pathname:\n        model_config_pathname = os.path.join(os.getcwd(),\
    \ MODEL_CONFIG_FILE)\n    \n    # verify if model_config_pathname is a valid file\n\
    \    if not Path(model_config_pathname).is_file():\n        logging.info(f'Model\
    \ config file not found: {model_config_pathname} Using default model config')\n\
    \        model_config = get_default_model_config()\n        return instantiate_model(model_config['inference_model']),\
    \ model_config['prompt_template']\n    try:\n        with open(model_config_pathname,\
    \ 'r') as config_file:\n            model_config = yaml.safe_load(config_file)\n\
    \    except:\n        logging.info(f'Model config file not valid: {model_config_pathname}\
    \ Using default model config')\n        model_config = get_default_model_config()\n\
    \        return instantiate_model(model_config['inference_model']), model_config['prompt_template']\n\
    \n    logging.info(f'Using model config from file: {model_config_pathname}')\n\
    \    return instantiate_model(model_config['inference_model']), model_config['prompt_template']\n\
    \n\ndef write_questions_file(output_dir: str='') -> None:\n    \"\"\"\n    Writes\
    \ the default questions to a file in JSON format.\n    \"\"\"\n    questions =\
    \ get_default_questions()\n    if not output_dir or not Path(output_dir).is_dir():\n\
    \        output_dir = os.getcwd()\n    with open(os.path.join(output_dir, QUESTIONS_FILE),\
    \ 'w') as file:\n        json.dump(questions, file, indent=4)\n\n\ndef write_model_config_file(output_dir:\
    \ str='') -> None:\n    \"\"\"\n    Writes the default model config to a file\
    \ in YAML format.\n    \"\"\"\n    model_config = get_default_model_config()\n\
    \    if not output_dir or not Path(output_dir).is_dir():\n        output_dir =\
    \ os.getcwd()\n    with open(os.path.join(output_dir, MODEL_CONFIG_FILE), 'w')\
    \ as file:\n        yaml.dump(model_config, file)\n"
  file_ast: 'Module(body=[Expr(value=Constant(value=''\nObtain data parameter and
    model from the py2dataset functions.\nRequirements:\n[req01] The `get_default_questions`
    function shall:\n        a. Return a list of default questions.\n        b. Ensure
    each question in the list is a dictionary.\n        c. Ensure each dictionary
    has the keys: id, text, and type.\n[req02] The `get_default_model_config` function
    shall:\n        a. Return a dictionary representing the default model configuration.\n        b.
    Include keys: prompt_template and inference_model.\n        c. Ensure the inference_model
    key contains a model_import_path and model_params.\n[req03] The `get_output_dir`
    function shall:\n        a. Accept an optional output_dir argument.\n        b.
    Return the absolute path of the provided output_dir if it exists or can be created.\n        c.
    Return the default OUTPUT_DIR if the provided output_dir argument is not provided
    or invalid.\n[req04] The `get_questions` function shall:\n        a. Accept an
    optional questions_pathname argument.\n        b. Validate the question file provided
    by the questions_pathname.\n        c. Return the questions from the provided
    questions_pathname if valid.\n        d. Return default questions if the questions_pathname
    is not provided or invalid.\n[req05] The `instantiate_model` function shall:\n        a.
    Accept a model_config dictionary as an argument.\n        b. Import the specified
    module and class from the model_config.\n        c. Instantiate and return the
    model using the provided configuration.\n[req06] The `get_model` function shall:\n        a.
    Accept an optional model_config_pathname argument.\n        b. Validate the model
    config file provided by the model_config_pathname.\n        c. Return an instantiated
    model and a prompt template based on the provided configuration.\n        d. Return
    an instantiated model and a prompt template based on the default model configuration
    if the model_config_pathname is not provided or invalid.\n[req07] The `write_questions_file`
    function shall:\n        a. Accept an optional output_dir argument.\n        b.
    Write the default questions to the QUESTIONS_FILE in the specified directory.\n        c.
    Write the default questions to the QUESTIONS_FILE in the current working directory
    if the output_dir argument is not provided or invalid.\n[req08] The `write_model_config_file`
    function shall:\n        a. Accept an optional output_dir argument.\n        b.
    Write the default model configuration to the MODEL_CONFIG_FILE in the specified
    directory.\n        c. Write the default model configuration to the MODEL_CONFIG_FILE
    in the current working directory if the output_dir argument is not provided or
    invalid.\n'')), Import(names=[alias(name=''os'')]), Import(names=[alias(name=''json'')]),
    Import(names=[alias(name=''logging'')]), Import(names=[alias(name=''yaml'')]),
    Import(names=[alias(name=''importlib'')]), ImportFrom(module=''typing'', names=[alias(name=''Dict''),
    alias(name=''List'')], level=0), ImportFrom(module=''pathlib'', names=[alias(name=''Path'')],
    level=0), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''basicConfig'', ctx=Load()), args=[], keywords=[keyword(arg=''level'', value=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''INFO'', ctx=Load()))])), Assign(targets=[Name(id=''QUESTIONS_FILE'',
    ctx=Store())], value=Constant(value=''py2dataset_questions.json'')), Assign(targets=[Name(id=''MODEL_CONFIG_FILE'',
    ctx=Store())], value=Constant(value=''py2dataset_model_config.yaml'')), Assign(targets=[Name(id=''OUTPUT_DIR'',
    ctx=Store())], value=Constant(value=''datasets'')), FunctionDef(name=''get_default_questions'',
    args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''Return default question list'')), Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=List(elts=[Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''file_dependencies''), Constant(value="What
    are the dependencies of the Python file: ''{filename}''?"), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''internal_code_graph''), Constant(value="What are the
    structural relationships between the functions and classes defined in the Python
    file: ''{filename}''?"), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''entire_code_graph''),
    Constant(value="What are the structural relationships between the functions and
    classes defined and used in the Python file: ''{filename}''?"), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''file_functions''), Constant(value="What functions are
    defined in the Python file: ''{filename}''?"), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''file_classes''),
    Constant(value="What classes are defined in the Python file: ''{filename}''?"),
    Constant(value=''file'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''file_control_flow''), Constant(value="What
    is the control flow of the Python file: ''{filename}''?"), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_inputs''), Constant(value="What are the inputs
    to the function: ''{function_name}'' in the Python file: ''{filename}''?"), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_docstring''), Constant(value="What is the docstring
    of the function: ''{function_name}'' in the Python file: ''{filename}''?"), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_calls''), Constant(value="What calls are made
    in the function: ''{function_name}'' in the Python file: ''{filename}''?"), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_variables''), Constant(value="What variables
    are defined in the function: ''{function_name}'' in the Python file: ''{filename}''?"),
    Constant(value=''function'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''function_returns''), Constant(value="What
    are the returned items from the function: ''{function_name}'' in the Python file:
    ''{filename}''?"), Constant(value=''function'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_methods''),
    Constant(value="What are the methods defined within the class: ''{class_name}''
    in the Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_docstring''),
    Constant(value="What is the docstring of the class: ''{class_name}'' in the Python
    file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_attributes''),
    Constant(value="What are the attributes of the class: ''{class_name}'' in the
    Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_variables''),
    Constant(value="What variables are defined in the class: ''{class_name}'' in the
    Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_inheritance''),
    Constant(value="What is the Inheritance of the class: ''{class_name}'' in the
    Python file: ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''method_inputs''),
    Constant(value="What are the inputs to method: ''{method_name}'' in the class:
    ''{class_name}'' in the Python file: ''{filename}''?"), Constant(value=''method'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''method_docstring''), Constant(value="What is the docstring
    of the method: ''{method_name}'' in the class: ''{class_name}'' in the Python
    file: ''{filename}''?"), Constant(value=''method'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''method_calls''),
    Constant(value="What calls are made in the method: ''{method_name}'' in the class:
    ''{class_name}'' in the Python file: ''{filename}''?"), Constant(value=''method'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''method_returns''), Constant(value="What are the returns
    from the method: ''{method_name}'' in the class: ''{class_name}'' in the Python
    file: ''{filename}''?"), Constant(value=''method'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''file_purpose''),
    Constant(value="What is the purpose and processing summary of the Python file:
    ''{filename}''?"), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''function_purpose''),
    Constant(value="What is the purpose and processing summary of the function: ''{function_name}''
    defined in the Python file: ''{filename}''?"), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''class_purpose''), Constant(value="What is the purpose
    and processing summary of the class: ''{class_name}'' defined in the Python file:
    ''{filename}''?"), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''method_purpose''),
    Constant(value="What is the purpose and processing summary of the method: ''{method_name}''
    defined in the class: ''{class_name}'' in the Python file: ''{filename}''?"),
    Constant(value=''method'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''function_variable_purpose''),
    Constant(value="What is the purpose and usage of each of these variables: ''{function_variables}''
    defined in the function: ''{function_name}'' in the Python file: ''{filename}''?"),
    Constant(value=''function'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''class_variable_purpose''),
    Constant(value="What is the purpose and usage of each of these variables: ''{class_variables}''
    defined in the class: ''{class_name}'' in the Python file: ''{filename}''?"),
    Constant(value=''class'')])], ctx=Load())), Return(value=Name(id=''questions'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''get_default_model_config'',
    args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''Return default model config dict'')), Assign(targets=[Name(id=''model_config'',
    ctx=Store())], value=Dict(keys=[Constant(value=''prompt_template''), Constant(value=''inference_model'')],
    values=[Constant(value="Your response will be used to train AI language models.
    Provide semantic meaning for the given context by providing a concise and comprhensive
    answer to the related question.\n{context}\n### Instruction:\nGiven this context:\n''{context}''\nAnswer
    the following question and provide your reasoning: {query}\n### Response:"), Dict(keys=[Constant(value=''model_import_path''),
    Constant(value=''model_params'')], values=[Constant(value=''ctransformers.AutoModelForCausalLM''),
    Dict(keys=[Constant(value=''model_path''), Constant(value=''model_type''), Constant(value=''local_files_only''),
    Constant(value=''lib''), Constant(value=''threads''), Constant(value=''batch_size''),
    Constant(value=''max_new_tokens''), Constant(value=''gpu_layers''), Constant(value=''reset'')],
    values=[Constant(value=''TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML''), Constant(value=''starcoder''),
    Constant(value=False), Constant(value=''avx2''), Constant(value=16), Constant(value=16),
    Constant(value=2048), Constant(value=24), Constant(value=True)])])])), Return(value=Name(id=''model_config'',
    ctx=Load()))], decorator_list=[], returns=Name(id=''Dict'', ctx=Load())), FunctionDef(name=''get_output_dir'',
    args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''Returns the appropriate output directory.'')),
    If(test=Name(id=''output_dir'', ctx=Load()), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''abspath'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''OUTPUT_DIR'',
    ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[]), attr=''is_dir'',
    ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''makedirs'', ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())],
    keywords=[keyword(arg=''exist_ok'', value=Constant(value=True))]))], orelse=[]),
    Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''info'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using output directory:
    ''), FormattedValue(value=Name(id=''output_dir'', ctx=Load()), conversion=-1)])],
    keywords=[])), Return(value=Name(id=''output_dir'', ctx=Load()))], decorator_list=[],
    returns=Name(id=''str'', ctx=Load())), FunctionDef(name=''get_questions'', args=arguments(posonlyargs=[],
    args=[arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''Get
    questions from file or default'')), If(test=UnaryOp(op=Not(), operand=Name(id=''questions_pathname'',
    ctx=Load())), body=[Assign(targets=[Name(id=''questions_pathname'', ctx=Store())],
    value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()), attr=''path'',
    ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''QUESTIONS_FILE'',
    ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''questions_pathname'', ctx=Load())], keywords=[]),
    attr=''is_file'', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Questions
    file ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()), conversion=-1),
    Constant(value='' not found. Using default questions'')])], keywords=[])), Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=Call(func=Name(id=''get_default_questions'', ctx=Load()),
    args=[], keywords=[])), Return(value=Name(id=''questions'', ctx=Load()))], orelse=[]),
    Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'', ctx=Load()),
    args=[Name(id=''questions_pathname'', ctx=Load()), Constant(value=''r'')], keywords=[]),
    optional_vars=Name(id=''f'', ctx=Store()))], body=[Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''json'', ctx=Load()),
    attr=''load'', ctx=Load()), args=[Name(id=''f'', ctx=Load())], keywords=[]))])],
    handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Questions
    file not valid: ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()),
    conversion=-1), Constant(value='' Using default questions'')])], keywords=[])),
    Assign(targets=[Name(id=''questions'', ctx=Store())], value=Call(func=Name(id=''get_default_questions'',
    ctx=Load()), args=[], keywords=[])), Return(value=Name(id=''questions'', ctx=Load()))])],
    orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using
    questions from file: ''), FormattedValue(value=Name(id=''questions_pathname'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id=''questions'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''instantiate_model'',
    args=arguments(posonlyargs=[], args=[arg(arg=''model_config'', annotation=Name(id=''Dict'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Imports
    and instantiates a model based on the provided configuration.\n    Args:\n        model_config
    (dict): A dictionary containing the configuration for the\n            model.
    It should include the import path for the model class and\n            parameters
    for instantiation.\n        user_config (dict): A dictionary containing user-provided
    configurations.\n            If provided, these configurations will override the
    defaults.\n    Returns:\n        object: An instance of the specified model class,
    or None if there was\n            an error.\n    '')), Assign(targets=[Name(id=''model'',
    ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
    ctx=Store()), Name(id=''class_name'', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_import_path''), ctx=Load()), attr=''rsplit'',
    ctx=Load()), args=[Constant(value=''.''), Constant(value=1)], keywords=[])), Assign(targets=[Name(id=''module'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''importlib'', ctx=Load()),
    attr=''import_module'', ctx=Load()), args=[Name(id=''module_name'', ctx=Load())],
    keywords=[]))], handlers=[ExceptHandler(type=Name(id=''ImportError'', ctx=Load()),
    name=''e'', body=[Expr(value=Call(func=Name(id=''print'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed
    to import module ''), FormattedValue(value=Name(id=''module_name'', ctx=Load()),
    conversion=-1), Constant(value=''. Error: ''), FormattedValue(value=Name(id=''e'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id=''model'',
    ctx=Load()))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id=''ModelClass'',
    ctx=Store())], value=Call(func=Name(id=''getattr'', ctx=Load()), args=[Name(id=''module'',
    ctx=Load()), Name(id=''class_name'', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id=''AttributeError'',
    ctx=Load()), name=''e'', body=[Expr(value=Call(func=Name(id=''print'', ctx=Load()),
    args=[JoinedStr(values=[Constant(value=''Module ''), FormattedValue(value=Name(id=''module_name'',
    ctx=Load()), conversion=-1), Constant(value='' does not have a class named ''),
    FormattedValue(value=Name(id=''class_name'', ctx=Load()), conversion=-1), Constant(value=''.
    Error: ''), FormattedValue(value=Name(id=''e'', ctx=Load()), conversion=-1)])],
    keywords=[])), Return(value=Name(id=''model'', ctx=Load()))])], orelse=[], finalbody=[]),
    Assign(targets=[Name(id=''model_params'', ctx=Store())], value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_params''), ctx=Load())), Try(body=[Assign(targets=[Name(id=''model'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''ModelClass'', ctx=Load()),
    attr=''from_pretrained'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''model_params'',
    ctx=Load()), attr=''pop'', ctx=Load()), args=[Constant(value=''model_path'')],
    keywords=[])], keywords=[keyword(value=Name(id=''model_params'', ctx=Load()))]))],
    handlers=[ExceptHandler(type=Name(id=''Exception'', ctx=Load()), name=''e'', body=[Expr(value=Call(func=Name(id=''print'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed to instantiate the
    model with the provided parameters. Error: ''), FormattedValue(value=Name(id=''e'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id=''model'',
    ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id=''model'', ctx=Load()))],
    decorator_list=[], returns=Name(id=''object'', ctx=Load())), FunctionDef(name=''get_model'',
    args=arguments(posonlyargs=[], args=[arg(arg=''model_config_pathname'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Agrs:\n        model_config_pathname
    (str): The pathname of the model config file\n    Returns:\n        Tuple[object,
    str]: The instantiated model and prompt template \n    '')), If(test=UnaryOp(op=Not(),
    operand=Name(id=''model_config_pathname'', ctx=Load())), body=[Assign(targets=[Name(id=''model_config_pathname'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''MODEL_CONFIG_FILE'',
    ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''model_config_pathname'', ctx=Load())], keywords=[]),
    attr=''is_file'', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Model
    config file not found: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1), Constant(value='' Using default model config'')])],
    keywords=[])), Assign(targets=[Name(id=''model_config'', ctx=Store())], value=Call(func=Name(id=''get_default_model_config'',
    ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
    ctx=Load()), args=[Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''inference_model''),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''model_config'', ctx=Load()),
    slice=Constant(value=''prompt_template''), ctx=Load())], ctx=Load()))], orelse=[]),
    Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'', ctx=Load()),
    args=[Name(id=''model_config_pathname'', ctx=Load()), Constant(value=''r'')],
    keywords=[]), optional_vars=Name(id=''config_file'', ctx=Store()))], body=[Assign(targets=[Name(id=''model_config'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load()),
    attr=''safe_load'', ctx=Load()), args=[Name(id=''config_file'', ctx=Load())],
    keywords=[]))])], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Model
    config file not valid: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1), Constant(value='' Using default model config'')])],
    keywords=[])), Assign(targets=[Name(id=''model_config'', ctx=Store())], value=Call(func=Name(id=''get_default_model_config'',
    ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
    ctx=Load()), args=[Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''inference_model''),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''model_config'', ctx=Load()),
    slice=Constant(value=''prompt_template''), ctx=Load())], ctx=Load()))])], orelse=[],
    finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using model
    config from file: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
    ctx=Load()), args=[Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''inference_model''),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''model_config'', ctx=Load()),
    slice=Constant(value=''prompt_template''), ctx=Load())], ctx=Load()))], decorator_list=[]),
    FunctionDef(name=''write_questions_file'', args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'',
    annotation=Name(id=''str'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''\n    Writes the default questions to a file
    in JSON format.\n    '')), Assign(targets=[Name(id=''questions'', ctx=Store())],
    value=Call(func=Name(id=''get_default_questions'', ctx=Load()), args=[], keywords=[])),
    If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id=''output_dir'',
    ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[]), attr=''is_dir'',
    ctx=Load()), args=[], keywords=[]))]), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''os'', ctx=Load()), attr=''getcwd'',
    ctx=Load()), args=[], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load()), Name(id=''QUESTIONS_FILE'', ctx=Load())], keywords=[]), Constant(value=''w'')],
    keywords=[]), optional_vars=Name(id=''file'', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''questions'', ctx=Load()),
    Name(id=''file'', ctx=Load())], keywords=[keyword(arg=''indent'', value=Constant(value=4))]))])],
    decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''write_model_config_file'',
    args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''\n    Writes the default model config to a file
    in YAML format.\n    '')), Assign(targets=[Name(id=''model_config'', ctx=Store())],
    value=Call(func=Name(id=''get_default_model_config'', ctx=Load()), args=[], keywords=[])),
    If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id=''output_dir'',
    ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[]), attr=''is_dir'',
    ctx=Load()), args=[], keywords=[]))]), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''os'', ctx=Load()), attr=''getcwd'',
    ctx=Load()), args=[], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load()), Name(id=''MODEL_CONFIG_FILE'', ctx=Load())], keywords=[]), Constant(value=''w'')],
    keywords=[]), optional_vars=Name(id=''file'', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id=''yaml'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''model_config'', ctx=Load()),
    Name(id=''file'', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))],
    type_ignores=[])'
  file_dependencies:
  - pathlib
  - typing
  - logging
  - yaml
  - os
  - json
  - importlib
  file_functions:
  - get_default_questions
  - get_default_model_config
  - get_output_dir
  - get_questions
  - instantiate_model
  - get_model
  - write_questions_file
  - write_model_config_file
  file_classes: []
  file_control_flow: module -> def get_default_questions -> def get_default_model_config
    -> def get_output_dir -> if -> if -> def get_questions -> if -> if -> try -> with
    -> except -> def instantiate_model -> try -> except -> try -> except -> try ->
    except -> def get_model -> if -> if -> try -> with -> except -> def write_questions_file
    -> if -> with -> def write_model_config_file -> if -> with
  file_summary: '{dependencies: [pathlib, typing, logging, yaml, os, json, importlib],
    function_defs: [{get_default_questions: {inputs: [], calls: [], returns: [questions]}},
    {get_default_model_config: {inputs: [], calls: [], returns: [model_config]}},
    {get_output_dir: {inputs: [output_dir], calls: [Path, logging.info, os.path.join,
    os.getcwd, Path(output_dir).is_dir, os.makedirs, os.path.abspath], returns: [output_dir]}},
    {get_questions: {inputs: [questions_pathname], calls: [Path, logging.info, json.load,
    get_default_questions, os.path.join, os.getcwd, Path(questions_pathname).is_file,
    open], returns: [questions, questions, questions]}}, {instantiate_model: {inputs:
    [model_config], calls: [model_params.pop, importlib.import_module, model_config[''model_import_path''].rsplit,
    ModelClass.from_pretrained, print, getattr], returns: [model, model, model, model]}},
    {get_model: {inputs: [model_config_pathname], calls: [Path, logging.info, Path(model_config_pathname).is_file,
    os.path.join, get_default_model_config, os.getcwd, instantiate_model, yaml.safe_load,
    open], returns: [(instantiate_model(model_config[''inference_model'']), model_config[''prompt_template'']),
    (instantiate_model(model_config[''inference_model'']), model_config[''prompt_template'']),
    (instantiate_model(model_config[''inference_model'']), model_config[''prompt_template''])]}},
    {write_questions_file: {inputs: [output_dir], calls: [Path, get_default_questions,
    os.path.join, os.getcwd, Path(output_dir).is_dir, json.dump, open], returns: []}},
    {write_model_config_file: {inputs: [output_dir], calls: [Path, os.path.join, get_default_model_config,
    os.getcwd, yaml.dump, Path(output_dir).is_dir, open], returns: []}}], class_defs:
    []}'
  internal_code_graph:
    nodes:
    - get_default_questions
    - get_default_model_config
    - get_output_dir
    - get_questions
    - instantiate_model
    - get_model
    - write_questions_file
    - write_model_config_file
    edges:
    - source: get_questions
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: get_model
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: get_model
      target: instantiate_model
      target_inputs:
      - model_config
      target_returns:
      - model
    - source: write_questions_file
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: write_model_config_file
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
  entire_code_graph:
    nodes:
    - get_default_questions
    - get_default_model_config
    - get_output_dir
    - get_questions
    - instantiate_model
    - get_model
    - write_questions_file
    - write_model_config_file
    - Path
    - logging.info
    - os.path.join
    - os.getcwd
    - Path(output_dir).is_dir
    - os.makedirs
    - os.path.abspath
    - json.load
    - Path(questions_pathname).is_file
    - open
    - model_params.pop
    - importlib.import_module
    - model_config['model_import_path'].rsplit
    - ModelClass.from_pretrained
    - print
    - getattr
    - Path(model_config_pathname).is_file
    - yaml.safe_load
    - json.dump
    - yaml.dump
    edges:
    - source: get_output_dir
      target: Path
    - source: get_output_dir
      target: logging.info
    - source: get_output_dir
      target: os.path.join
    - source: get_output_dir
      target: os.getcwd
    - source: get_output_dir
      target: Path(output_dir).is_dir
    - source: get_output_dir
      target: os.makedirs
    - source: get_output_dir
      target: os.path.abspath
    - source: get_questions
      target: Path
    - source: get_questions
      target: logging.info
    - source: get_questions
      target: json.load
    - source: get_questions
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: get_questions
      target: os.path.join
    - source: get_questions
      target: os.getcwd
    - source: get_questions
      target: Path(questions_pathname).is_file
    - source: get_questions
      target: open
    - source: instantiate_model
      target: model_params.pop
    - source: instantiate_model
      target: importlib.import_module
    - source: instantiate_model
      target: model_config['model_import_path'].rsplit
    - source: instantiate_model
      target: ModelClass.from_pretrained
    - source: instantiate_model
      target: print
    - source: instantiate_model
      target: getattr
    - source: get_model
      target: Path
    - source: get_model
      target: logging.info
    - source: get_model
      target: Path(model_config_pathname).is_file
    - source: get_model
      target: os.path.join
    - source: get_model
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: get_model
      target: os.getcwd
    - source: get_model
      target: instantiate_model
      target_inputs:
      - model_config
      target_returns:
      - model
    - source: get_model
      target: yaml.safe_load
    - source: get_model
      target: open
    - source: write_questions_file
      target: Path
    - source: write_questions_file
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: write_questions_file
      target: os.path.join
    - source: write_questions_file
      target: os.getcwd
    - source: write_questions_file
      target: Path(output_dir).is_dir
    - source: write_questions_file
      target: json.dump
    - source: write_questions_file
      target: open
    - source: write_model_config_file
      target: Path
    - source: write_model_config_file
      target: os.path.join
    - source: write_model_config_file
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: write_model_config_file
      target: os.getcwd
    - source: write_model_config_file
      target: yaml.dump
    - source: write_model_config_file
      target: Path(output_dir).is_dir
    - source: write_model_config_file
      target: open
functions:
  get_default_questions:
    function_name: get_default_questions
    function_code: "def get_default_questions() -> List[Dict]:\n    \"\"\"Return default\
      \ question list\"\"\"\n    questions = [{'id': 'file_dependencies', 'text':\
      \ \"What are the dependencies of the Python file: '{filename}'?\", 'type': 'file'},\
      \ {'id': 'internal_code_graph', 'text': \"What are the structural relationships\
      \ between the functions and classes defined in the Python file: '{filename}'?\"\
      , 'type': 'file'}, {'id': 'entire_code_graph', 'text': \"What are the structural\
      \ relationships between the functions and classes defined and used in the Python\
      \ file: '{filename}'?\", 'type': 'file'}, {'id': 'file_functions', 'text': \"\
      What functions are defined in the Python file: '{filename}'?\", 'type': 'file'},\
      \ {'id': 'file_classes', 'text': \"What classes are defined in the Python file:\
      \ '{filename}'?\", 'type': 'file'}, {'id': 'file_control_flow', 'text': \"What\
      \ is the control flow of the Python file: '{filename}'?\", 'type': 'file'},\
      \ {'id': 'function_inputs', 'text': \"What are the inputs to the function: '{function_name}'\
      \ in the Python file: '{filename}'?\", 'type': 'function'}, {'id': 'function_docstring',\
      \ 'text': \"What is the docstring of the function: '{function_name}' in the\
      \ Python file: '{filename}'?\", 'type': 'function'}, {'id': 'function_calls',\
      \ 'text': \"What calls are made in the function: '{function_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'function'}, {'id': 'function_variables', 'text':\
      \ \"What variables are defined in the function: '{function_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'function'}, {'id': 'function_returns', 'text':\
      \ \"What are the returned items from the function: '{function_name}' in the\
      \ Python file: '{filename}'?\", 'type': 'function'}, {'id': 'class_methods',\
      \ 'text': \"What are the methods defined within the class: '{class_name}' in\
      \ the Python file: '{filename}'?\", 'type': 'class'}, {'id': 'class_docstring',\
      \ 'text': \"What is the docstring of the class: '{class_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'class'}, {'id': 'class_attributes', 'text':\
      \ \"What are the attributes of the class: '{class_name}' in the Python file:\
      \ '{filename}'?\", 'type': 'class'}, {'id': 'class_variables', 'text': \"What\
      \ variables are defined in the class: '{class_name}' in the Python file: '{filename}'?\"\
      , 'type': 'class'}, {'id': 'class_inheritance', 'text': \"What is the Inheritance\
      \ of the class: '{class_name}' in the Python file: '{filename}'?\", 'type':\
      \ 'class'}, {'id': 'method_inputs', 'text': \"What are the inputs to method:\
      \ '{method_name}' in the class: '{class_name}' in the Python file: '{filename}'?\"\
      , 'type': 'method'}, {'id': 'method_docstring', 'text': \"What is the docstring\
      \ of the method: '{method_name}' in the class: '{class_name}' in the Python\
      \ file: '{filename}'?\", 'type': 'method'}, {'id': 'method_calls', 'text': \"\
      What calls are made in the method: '{method_name}' in the class: '{class_name}'\
      \ in the Python file: '{filename}'?\", 'type': 'method'}, {'id': 'method_returns',\
      \ 'text': \"What are the returns from the method: '{method_name}' in the class:\
      \ '{class_name}' in the Python file: '{filename}'?\", 'type': 'method'}, {'id':\
      \ 'file_purpose', 'text': \"What is the purpose and processing summary of the\
      \ Python file: '{filename}'?\", 'type': 'file'}, {'id': 'function_purpose',\
      \ 'text': \"What is the purpose and processing summary of the function: '{function_name}'\
      \ defined in the Python file: '{filename}'?\", 'type': 'function'}, {'id': 'class_purpose',\
      \ 'text': \"What is the purpose and processing summary of the class: '{class_name}'\
      \ defined in the Python file: '{filename}'?\", 'type': 'class'}, {'id': 'method_purpose',\
      \ 'text': \"What is the purpose and processing summary of the method: '{method_name}'\
      \ defined in the class: '{class_name}' in the Python file: '{filename}'?\",\
      \ 'type': 'method'}, {'id': 'function_variable_purpose', 'text': \"What is the\
      \ purpose and usage of each of these variables: '{function_variables}' defined\
      \ in the function: '{function_name}' in the Python file: '{filename}'?\", 'type':\
      \ 'function'}, {'id': 'class_variable_purpose', 'text': \"What is the purpose\
      \ and usage of each of these variables: '{class_variables}' defined in the class:\
      \ '{class_name}' in the Python file: '{filename}'?\", 'type': 'class'}]\n  \
      \  return questions"
    function_ast: 'FunctionDef(name=''get_default_questions'', args=arguments(posonlyargs=[],
      args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''Return
      default question list'', lineno=56, col_offset=4, end_lineno=56, end_col_offset=38),
      lineno=56, col_offset=4, end_lineno=56, end_col_offset=38), Assign(targets=[Name(id=''questions'',
      ctx=Store(), lineno=57, col_offset=4, end_lineno=57, end_col_offset=13)], value=List(elts=[Dict(keys=[Constant(value=''id'',
      lineno=59, col_offset=12, end_lineno=59, end_col_offset=16), Constant(value=''text'',
      lineno=60, col_offset=12, end_lineno=60, end_col_offset=18), Constant(value=''type'',
      lineno=61, col_offset=12, end_lineno=61, end_col_offset=18)], values=[Constant(value=''file_dependencies'',
      lineno=59, col_offset=18, end_lineno=59, end_col_offset=37), Constant(value="What
      are the dependencies of the Python file: ''{filename}''?", lineno=60, col_offset=20,
      end_lineno=60, end_col_offset=81), Constant(value=''file'', lineno=61, col_offset=20,
      end_lineno=61, end_col_offset=26)], lineno=58, col_offset=8, end_lineno=62,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=64, col_offset=12,
      end_lineno=64, end_col_offset=16), Constant(value=''text'', lineno=65, col_offset=12,
      end_lineno=65, end_col_offset=18), Constant(value=''type'', lineno=66, col_offset=12,
      end_lineno=66, end_col_offset=18)], values=[Constant(value=''internal_code_graph'',
      lineno=64, col_offset=18, end_lineno=64, end_col_offset=39), Constant(value="What
      are the structural relationships between the functions and classes defined in
      the Python file: ''{filename}''?", lineno=65, col_offset=20, end_lineno=65,
      end_col_offset=135), Constant(value=''file'', lineno=66, col_offset=20, end_lineno=66,
      end_col_offset=26)], lineno=63, col_offset=8, end_lineno=67, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=69, col_offset=12, end_lineno=69, end_col_offset=16),
      Constant(value=''text'', lineno=70, col_offset=12, end_lineno=70, end_col_offset=18),
      Constant(value=''type'', lineno=71, col_offset=12, end_lineno=71, end_col_offset=18)],
      values=[Constant(value=''entire_code_graph'', lineno=69, col_offset=18, end_lineno=69,
      end_col_offset=37), Constant(value="What are the structural relationships between
      the functions and classes defined and used in the Python file: ''{filename}''?",
      lineno=70, col_offset=20, end_lineno=70, end_col_offset=144), Constant(value=''file'',
      lineno=71, col_offset=20, end_lineno=71, end_col_offset=26)], lineno=68, col_offset=8,
      end_lineno=72, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=74,
      col_offset=12, end_lineno=74, end_col_offset=16), Constant(value=''text'', lineno=75,
      col_offset=12, end_lineno=75, end_col_offset=18), Constant(value=''type'', lineno=76,
      col_offset=12, end_lineno=76, end_col_offset=18)], values=[Constant(value=''file_functions'',
      lineno=74, col_offset=18, end_lineno=74, end_col_offset=34), Constant(value="What
      functions are defined in the Python file: ''{filename}''?", lineno=75, col_offset=20,
      end_lineno=75, end_col_offset=82), Constant(value=''file'', lineno=76, col_offset=20,
      end_lineno=76, end_col_offset=26)], lineno=73, col_offset=8, end_lineno=77,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=79, col_offset=12,
      end_lineno=79, end_col_offset=16), Constant(value=''text'', lineno=80, col_offset=12,
      end_lineno=80, end_col_offset=18), Constant(value=''type'', lineno=81, col_offset=12,
      end_lineno=81, end_col_offset=18)], values=[Constant(value=''file_classes'',
      lineno=79, col_offset=18, end_lineno=79, end_col_offset=32), Constant(value="What
      classes are defined in the Python file: ''{filename}''?", lineno=80, col_offset=20,
      end_lineno=80, end_col_offset=80), Constant(value=''file'', lineno=81, col_offset=20,
      end_lineno=81, end_col_offset=26)], lineno=78, col_offset=8, end_lineno=82,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=84, col_offset=12,
      end_lineno=84, end_col_offset=16), Constant(value=''text'', lineno=85, col_offset=12,
      end_lineno=85, end_col_offset=18), Constant(value=''type'', lineno=86, col_offset=12,
      end_lineno=86, end_col_offset=18)], values=[Constant(value=''file_control_flow'',
      lineno=84, col_offset=18, end_lineno=84, end_col_offset=37), Constant(value="What
      is the control flow of the Python file: ''{filename}''?", lineno=85, col_offset=20,
      end_lineno=85, end_col_offset=80), Constant(value=''file'', lineno=86, col_offset=20,
      end_lineno=86, end_col_offset=26)], lineno=83, col_offset=8, end_lineno=87,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=89, col_offset=12,
      end_lineno=89, end_col_offset=16), Constant(value=''text'', lineno=90, col_offset=12,
      end_lineno=90, end_col_offset=18), Constant(value=''type'', lineno=91, col_offset=12,
      end_lineno=91, end_col_offset=18)], values=[Constant(value=''function_inputs'',
      lineno=89, col_offset=18, end_lineno=89, end_col_offset=35), Constant(value="What
      are the inputs to the function: ''{function_name}'' in the Python file: ''{filename}''?",
      lineno=90, col_offset=20, end_lineno=90, end_col_offset=110), Constant(value=''function'',
      lineno=91, col_offset=20, end_lineno=91, end_col_offset=30)], lineno=88, col_offset=8,
      end_lineno=92, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=94,
      col_offset=12, end_lineno=94, end_col_offset=16), Constant(value=''text'', lineno=95,
      col_offset=12, end_lineno=95, end_col_offset=18), Constant(value=''type'', lineno=96,
      col_offset=12, end_lineno=96, end_col_offset=18)], values=[Constant(value=''function_docstring'',
      lineno=94, col_offset=18, end_lineno=94, end_col_offset=38), Constant(value="What
      is the docstring of the function: ''{function_name}'' in the Python file: ''{filename}''?",
      lineno=95, col_offset=20, end_lineno=95, end_col_offset=112), Constant(value=''function'',
      lineno=96, col_offset=20, end_lineno=96, end_col_offset=30)], lineno=93, col_offset=8,
      end_lineno=97, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=99,
      col_offset=12, end_lineno=99, end_col_offset=16), Constant(value=''text'', lineno=100,
      col_offset=12, end_lineno=100, end_col_offset=18), Constant(value=''type'',
      lineno=101, col_offset=12, end_lineno=101, end_col_offset=18)], values=[Constant(value=''function_calls'',
      lineno=99, col_offset=18, end_lineno=99, end_col_offset=34), Constant(value="What
      calls are made in the function: ''{function_name}'' in the Python file: ''{filename}''?",
      lineno=100, col_offset=20, end_lineno=100, end_col_offset=110), Constant(value=''function'',
      lineno=101, col_offset=20, end_lineno=101, end_col_offset=30)], lineno=98, col_offset=8,
      end_lineno=102, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=104,
      col_offset=12, end_lineno=104, end_col_offset=16), Constant(value=''text'',
      lineno=105, col_offset=12, end_lineno=105, end_col_offset=18), Constant(value=''type'',
      lineno=106, col_offset=12, end_lineno=106, end_col_offset=18)], values=[Constant(value=''function_variables'',
      lineno=104, col_offset=18, end_lineno=104, end_col_offset=38), Constant(value="What
      variables are defined in the function: ''{function_name}'' in the Python file:
      ''{filename}''?", lineno=105, col_offset=20, end_lineno=105, end_col_offset=117),
      Constant(value=''function'', lineno=106, col_offset=20, end_lineno=106, end_col_offset=30)],
      lineno=103, col_offset=8, end_lineno=107, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=109, col_offset=12, end_lineno=109, end_col_offset=16), Constant(value=''text'',
      lineno=110, col_offset=12, end_lineno=110, end_col_offset=18), Constant(value=''type'',
      lineno=111, col_offset=12, end_lineno=111, end_col_offset=18)], values=[Constant(value=''function_returns'',
      lineno=109, col_offset=18, end_lineno=109, end_col_offset=36), Constant(value="What
      are the returned items from the function: ''{function_name}'' in the Python
      file: ''{filename}''?", lineno=110, col_offset=20, end_lineno=110, end_col_offset=120),
      Constant(value=''function'', lineno=111, col_offset=20, end_lineno=111, end_col_offset=30)],
      lineno=108, col_offset=8, end_lineno=112, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=114, col_offset=12, end_lineno=114, end_col_offset=16), Constant(value=''text'',
      lineno=115, col_offset=12, end_lineno=115, end_col_offset=18), Constant(value=''type'',
      lineno=116, col_offset=12, end_lineno=116, end_col_offset=18)], values=[Constant(value=''class_methods'',
      lineno=114, col_offset=18, end_lineno=114, end_col_offset=33), Constant(value="What
      are the methods defined within the class: ''{class_name}'' in the Python file:
      ''{filename}''?", lineno=115, col_offset=20, end_lineno=115, end_col_offset=117),
      Constant(value=''class'', lineno=116, col_offset=20, end_lineno=116, end_col_offset=27)],
      lineno=113, col_offset=8, end_lineno=117, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=119, col_offset=12, end_lineno=119, end_col_offset=16), Constant(value=''text'',
      lineno=120, col_offset=12, end_lineno=120, end_col_offset=18), Constant(value=''type'',
      lineno=121, col_offset=12, end_lineno=121, end_col_offset=18)], values=[Constant(value=''class_docstring'',
      lineno=119, col_offset=18, end_lineno=119, end_col_offset=35), Constant(value="What
      is the docstring of the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=120, col_offset=20, end_lineno=120, end_col_offset=106), Constant(value=''class'',
      lineno=121, col_offset=20, end_lineno=121, end_col_offset=27)], lineno=118,
      col_offset=8, end_lineno=122, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=124, col_offset=12, end_lineno=124, end_col_offset=16), Constant(value=''text'',
      lineno=125, col_offset=12, end_lineno=125, end_col_offset=18), Constant(value=''type'',
      lineno=126, col_offset=12, end_lineno=126, end_col_offset=18)], values=[Constant(value=''class_attributes'',
      lineno=124, col_offset=18, end_lineno=124, end_col_offset=36), Constant(value="What
      are the attributes of the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=125, col_offset=20, end_lineno=125, end_col_offset=108), Constant(value=''class'',
      lineno=126, col_offset=20, end_lineno=126, end_col_offset=27)], lineno=123,
      col_offset=8, end_lineno=127, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=129, col_offset=12, end_lineno=129, end_col_offset=16), Constant(value=''text'',
      lineno=130, col_offset=12, end_lineno=130, end_col_offset=18), Constant(value=''type'',
      lineno=131, col_offset=12, end_lineno=131, end_col_offset=18)], values=[Constant(value=''class_variables'',
      lineno=129, col_offset=18, end_lineno=129, end_col_offset=35), Constant(value="What
      variables are defined in the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=130, col_offset=20, end_lineno=130, end_col_offset=111), Constant(value=''class'',
      lineno=131, col_offset=20, end_lineno=131, end_col_offset=27)], lineno=128,
      col_offset=8, end_lineno=132, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=134, col_offset=12, end_lineno=134, end_col_offset=16), Constant(value=''text'',
      lineno=135, col_offset=12, end_lineno=135, end_col_offset=18), Constant(value=''type'',
      lineno=136, col_offset=12, end_lineno=136, end_col_offset=18)], values=[Constant(value=''class_inheritance'',
      lineno=134, col_offset=18, end_lineno=134, end_col_offset=37), Constant(value="What
      is the Inheritance of the class: ''{class_name}'' in the Python file: ''{filename}''?",
      lineno=135, col_offset=20, end_lineno=135, end_col_offset=108), Constant(value=''class'',
      lineno=136, col_offset=20, end_lineno=136, end_col_offset=27)], lineno=133,
      col_offset=8, end_lineno=137, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=139, col_offset=12, end_lineno=139, end_col_offset=16), Constant(value=''text'',
      lineno=140, col_offset=12, end_lineno=140, end_col_offset=18), Constant(value=''type'',
      lineno=141, col_offset=12, end_lineno=141, end_col_offset=18)], values=[Constant(value=''method_inputs'',
      lineno=139, col_offset=18, end_lineno=139, end_col_offset=33), Constant(value="What
      are the inputs to method: ''{method_name}'' in the class: ''{class_name}'' in
      the Python file: ''{filename}''?", lineno=140, col_offset=20, end_lineno=140,
      end_col_offset=131), Constant(value=''method'', lineno=141, col_offset=20, end_lineno=141,
      end_col_offset=28)], lineno=138, col_offset=8, end_lineno=142, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=144, col_offset=12, end_lineno=144,
      end_col_offset=16), Constant(value=''text'', lineno=145, col_offset=12, end_lineno=145,
      end_col_offset=18), Constant(value=''type'', lineno=146, col_offset=12, end_lineno=146,
      end_col_offset=18)], values=[Constant(value=''method_docstring'', lineno=144,
      col_offset=18, end_lineno=144, end_col_offset=36), Constant(value="What is the
      docstring of the method: ''{method_name}'' in the class: ''{class_name}'' in
      the Python file: ''{filename}''?", lineno=145, col_offset=20, end_lineno=145,
      end_col_offset=137), Constant(value=''method'', lineno=146, col_offset=20, end_lineno=146,
      end_col_offset=28)], lineno=143, col_offset=8, end_lineno=147, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=149, col_offset=12, end_lineno=149,
      end_col_offset=16), Constant(value=''text'', lineno=150, col_offset=12, end_lineno=150,
      end_col_offset=18), Constant(value=''type'', lineno=151, col_offset=12, end_lineno=151,
      end_col_offset=18)], values=[Constant(value=''method_calls'', lineno=149, col_offset=18,
      end_lineno=149, end_col_offset=32), Constant(value="What calls are made in the
      method: ''{method_name}'' in the class: ''{class_name}'' in the Python file:
      ''{filename}''?", lineno=150, col_offset=20, end_lineno=150, end_col_offset=135),
      Constant(value=''method'', lineno=151, col_offset=20, end_lineno=151, end_col_offset=28)],
      lineno=148, col_offset=8, end_lineno=152, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=154, col_offset=12, end_lineno=154, end_col_offset=16), Constant(value=''text'',
      lineno=155, col_offset=12, end_lineno=155, end_col_offset=18), Constant(value=''type'',
      lineno=156, col_offset=12, end_lineno=156, end_col_offset=18)], values=[Constant(value=''method_returns'',
      lineno=154, col_offset=18, end_lineno=154, end_col_offset=34), Constant(value="What
      are the returns from the method: ''{method_name}'' in the class: ''{class_name}''
      in the Python file: ''{filename}''?", lineno=155, col_offset=20, end_lineno=155,
      end_col_offset=138), Constant(value=''method'', lineno=156, col_offset=20, end_lineno=156,
      end_col_offset=28)], lineno=153, col_offset=8, end_lineno=157, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=159, col_offset=12, end_lineno=159,
      end_col_offset=16), Constant(value=''text'', lineno=160, col_offset=12, end_lineno=160,
      end_col_offset=18), Constant(value=''type'', lineno=161, col_offset=12, end_lineno=161,
      end_col_offset=18)], values=[Constant(value=''file_purpose'', lineno=159, col_offset=18,
      end_lineno=159, end_col_offset=32), Constant(value="What is the purpose and
      processing summary of the Python file: ''{filename}''?", lineno=160, col_offset=20,
      end_lineno=160, end_col_offset=98), Constant(value=''file'', lineno=161, col_offset=20,
      end_lineno=161, end_col_offset=26)], lineno=158, col_offset=8, end_lineno=162,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=164, col_offset=12,
      end_lineno=164, end_col_offset=16), Constant(value=''text'', lineno=165, col_offset=12,
      end_lineno=165, end_col_offset=18), Constant(value=''type'', lineno=166, col_offset=12,
      end_lineno=166, end_col_offset=18)], values=[Constant(value=''function_purpose'',
      lineno=164, col_offset=18, end_lineno=164, end_col_offset=36), Constant(value="What
      is the purpose and processing summary of the function: ''{function_name}'' defined
      in the Python file: ''{filename}''?", lineno=165, col_offset=20, end_lineno=165,
      end_col_offset=141), Constant(value=''function'', lineno=166, col_offset=20,
      end_lineno=166, end_col_offset=30)], lineno=163, col_offset=8, end_lineno=167,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=169, col_offset=12,
      end_lineno=169, end_col_offset=16), Constant(value=''text'', lineno=170, col_offset=12,
      end_lineno=170, end_col_offset=18), Constant(value=''type'', lineno=171, col_offset=12,
      end_lineno=171, end_col_offset=18)], values=[Constant(value=''class_purpose'',
      lineno=169, col_offset=18, end_lineno=169, end_col_offset=33), Constant(value="What
      is the purpose and processing summary of the class: ''{class_name}'' defined
      in the Python file: ''{filename}''?", lineno=170, col_offset=20, end_lineno=170,
      end_col_offset=135), Constant(value=''class'', lineno=171, col_offset=20, end_lineno=171,
      end_col_offset=27)], lineno=168, col_offset=8, end_lineno=172, end_col_offset=9),
      Dict(keys=[Constant(value=''id'', lineno=174, col_offset=12, end_lineno=174,
      end_col_offset=16), Constant(value=''text'', lineno=175, col_offset=12, end_lineno=175,
      end_col_offset=18), Constant(value=''type'', lineno=176, col_offset=12, end_lineno=176,
      end_col_offset=18)], values=[Constant(value=''method_purpose'', lineno=174,
      col_offset=18, end_lineno=174, end_col_offset=34), Constant(value="What is the
      purpose and processing summary of the method: ''{method_name}'' defined in the
      class: ''{class_name}'' in the Python file: ''{filename}''?", lineno=175, col_offset=20,
      end_lineno=175, end_col_offset=166), Constant(value=''method'', lineno=176,
      col_offset=20, end_lineno=176, end_col_offset=28)], lineno=173, col_offset=8,
      end_lineno=177, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=179,
      col_offset=12, end_lineno=179, end_col_offset=16), Constant(value=''text'',
      lineno=180, col_offset=12, end_lineno=180, end_col_offset=18), Constant(value=''type'',
      lineno=181, col_offset=12, end_lineno=181, end_col_offset=18)], values=[Constant(value=''function_variable_purpose'',
      lineno=179, col_offset=18, end_lineno=179, end_col_offset=45), Constant(value="What
      is the purpose and usage of each of these variables: ''{function_variables}''
      defined in the function: ''{function_name}'' in the Python file: ''{filename}''?",
      lineno=180, col_offset=20, end_lineno=180, end_col_offset=179), Constant(value=''function'',
      lineno=181, col_offset=20, end_lineno=181, end_col_offset=30)], lineno=178,
      col_offset=8, end_lineno=182, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=184, col_offset=12, end_lineno=184, end_col_offset=16), Constant(value=''text'',
      lineno=185, col_offset=12, end_lineno=185, end_col_offset=18), Constant(value=''type'',
      lineno=186, col_offset=12, end_lineno=186, end_col_offset=18)], values=[Constant(value=''class_variable_purpose'',
      lineno=184, col_offset=18, end_lineno=184, end_col_offset=42), Constant(value="What
      is the purpose and usage of each of these variables: ''{class_variables}'' defined
      in the class: ''{class_name}'' in the Python file: ''{filename}''?", lineno=185,
      col_offset=20, end_lineno=185, end_col_offset=170), Constant(value=''class'',
      lineno=186, col_offset=20, end_lineno=186, end_col_offset=27)], lineno=183,
      col_offset=8, end_lineno=187, end_col_offset=9)], ctx=Load(), lineno=57, col_offset=16,
      end_lineno=188, end_col_offset=5), lineno=57, col_offset=4, end_lineno=188,
      end_col_offset=5), Return(value=Name(id=''questions'', ctx=Load(), lineno=190,
      col_offset=11, end_lineno=190, end_col_offset=20), lineno=190, col_offset=4,
      end_lineno=190, end_col_offset=20)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=55, col_offset=31, end_lineno=55, end_col_offset=35), slice=Name(id=''Dict'',
      ctx=Load(), lineno=55, col_offset=36, end_lineno=55, end_col_offset=40), ctx=Load(),
      lineno=55, col_offset=31, end_lineno=55, end_col_offset=41), lineno=55, col_offset=0,
      end_lineno=190, end_col_offset=20)'
    function_docstring: Return default question list
    function_inputs: []
    function_defaults: []
    function_returns:
    - questions
    function_calls: []
    function_variables:
    - questions
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_default_model_config:
    function_name: get_default_model_config
    function_code: "def get_default_model_config() -> Dict:\n    \"\"\"Return default\
      \ model config dict\"\"\"\n    model_config = {'prompt_template': \"Your response\
      \ will be used to train AI language models. Provide semantic meaning for the\
      \ given context by providing a concise and comprhensive answer to the related\
      \ question.\\n{context}\\n### Instruction:\\nGiven this context:\\n'{context}'\\\
      nAnswer the following question and provide your reasoning: {query}\\n### Response:\"\
      , 'inference_model': {'model_import_path': 'ctransformers.AutoModelForCausalLM',\
      \ 'model_params': {'model_path': 'TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML',\
      \ 'model_type': 'starcoder', 'local_files_only': False, 'lib': 'avx2', 'threads':\
      \ 16, 'batch_size': 16, 'max_new_tokens': 2048, 'gpu_layers': 24, 'reset': True}}}\n\
      \    return model_config"
    function_ast: 'FunctionDef(name=''get_default_model_config'', args=arguments(posonlyargs=[],
      args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''Return
      default model config dict'', lineno=194, col_offset=4, end_lineno=194, end_col_offset=42),
      lineno=194, col_offset=4, end_lineno=194, end_col_offset=42), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=195, col_offset=4, end_lineno=195, end_col_offset=16)],
      value=Dict(keys=[Constant(value=''prompt_template'', lineno=196, col_offset=8,
      end_lineno=196, end_col_offset=25), Constant(value=''inference_model'', lineno=197,
      col_offset=8, end_lineno=197, end_col_offset=25)], values=[Constant(value="Your
      response will be used to train AI language models. Provide semantic meaning
      for the given context by providing a concise and comprhensive answer to the
      related question.\n{context}\n### Instruction:\nGiven this context:\n''{context}''\nAnswer
      the following question and provide your reasoning: {query}\n### Response:",
      lineno=196, col_offset=27, end_lineno=196, end_col_offset=348), Dict(keys=[Constant(value=''model_import_path'',
      lineno=198, col_offset=12, end_lineno=198, end_col_offset=31), Constant(value=''model_params'',
      lineno=199, col_offset=12, end_lineno=199, end_col_offset=26)], values=[Constant(value=''ctransformers.AutoModelForCausalLM'',
      lineno=198, col_offset=33, end_lineno=198, end_col_offset=69), Dict(keys=[Constant(value=''model_path'',
      lineno=200, col_offset=16, end_lineno=200, end_col_offset=28), Constant(value=''model_type'',
      lineno=201, col_offset=16, end_lineno=201, end_col_offset=28), Constant(value=''local_files_only'',
      lineno=202, col_offset=16, end_lineno=202, end_col_offset=34), Constant(value=''lib'',
      lineno=203, col_offset=16, end_lineno=203, end_col_offset=21), Constant(value=''threads'',
      lineno=204, col_offset=16, end_lineno=204, end_col_offset=25), Constant(value=''batch_size'',
      lineno=205, col_offset=16, end_lineno=205, end_col_offset=28), Constant(value=''max_new_tokens'',
      lineno=206, col_offset=16, end_lineno=206, end_col_offset=32), Constant(value=''gpu_layers'',
      lineno=207, col_offset=16, end_lineno=207, end_col_offset=28), Constant(value=''reset'',
      lineno=208, col_offset=16, end_lineno=208, end_col_offset=23)], values=[Constant(value=''TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML'',
      lineno=200, col_offset=30, end_lineno=200, end_col_offset=74), Constant(value=''starcoder'',
      lineno=201, col_offset=30, end_lineno=201, end_col_offset=41), Constant(value=False,
      lineno=202, col_offset=36, end_lineno=202, end_col_offset=41), Constant(value=''avx2'',
      lineno=203, col_offset=23, end_lineno=203, end_col_offset=29), Constant(value=16,
      lineno=204, col_offset=27, end_lineno=204, end_col_offset=29), Constant(value=16,
      lineno=205, col_offset=30, end_lineno=205, end_col_offset=32), Constant(value=2048,
      lineno=206, col_offset=34, end_lineno=206, end_col_offset=38), Constant(value=24,
      lineno=207, col_offset=30, end_lineno=207, end_col_offset=32), Constant(value=True,
      lineno=208, col_offset=25, end_lineno=208, end_col_offset=29)], lineno=199,
      col_offset=28, end_lineno=209, end_col_offset=13)], lineno=197, col_offset=27,
      end_lineno=210, end_col_offset=9)], lineno=195, col_offset=19, end_lineno=211,
      end_col_offset=5), lineno=195, col_offset=4, end_lineno=211, end_col_offset=5),
      Return(value=Name(id=''model_config'', ctx=Load(), lineno=212, col_offset=11,
      end_lineno=212, end_col_offset=23), lineno=212, col_offset=4, end_lineno=212,
      end_col_offset=23)], decorator_list=[], returns=Name(id=''Dict'', ctx=Load(),
      lineno=193, col_offset=34, end_lineno=193, end_col_offset=38), lineno=193, col_offset=0,
      end_lineno=212, end_col_offset=23)'
    function_docstring: Return default model config dict
    function_inputs: []
    function_defaults: []
    function_returns:
    - model_config
    function_calls: []
    function_variables:
    - model_config
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_output_dir:
    function_name: get_output_dir
    function_code: "def get_output_dir(output_dir: str='') -> str:\n    \"\"\"Returns\
      \ the appropriate output directory.\"\"\"\n    if output_dir:\n        output_dir\
      \ = os.path.abspath(output_dir)\n    else:\n        output_dir = os.path.join(os.getcwd(),\
      \ OUTPUT_DIR)\n    if not Path(output_dir).is_dir():\n        os.makedirs(output_dir,\
      \ exist_ok=True)\n    logging.info(f'Using output directory: {output_dir}')\n\
      \    return output_dir"
    function_ast: 'FunctionDef(name=''get_output_dir'', args=arguments(posonlyargs=[],
      args=[arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load(), lineno=215,
      col_offset=31, end_lineno=215, end_col_offset=34), lineno=215, col_offset=19,
      end_lineno=215, end_col_offset=34)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''',
      lineno=215, col_offset=35, end_lineno=215, end_col_offset=37)]), body=[Expr(value=Constant(value=''Returns
      the appropriate output directory.'', lineno=216, col_offset=4, end_lineno=216,
      end_col_offset=51), lineno=216, col_offset=4, end_lineno=216, end_col_offset=51),
      If(test=Name(id=''output_dir'', ctx=Load(), lineno=217, col_offset=7, end_lineno=217,
      end_col_offset=17), body=[Assign(targets=[Name(id=''output_dir'', ctx=Store(),
      lineno=218, col_offset=8, end_lineno=218, end_col_offset=18)], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=218, col_offset=21, end_lineno=218, end_col_offset=23), attr=''path'',
      ctx=Load(), lineno=218, col_offset=21, end_lineno=218, end_col_offset=28), attr=''abspath'',
      ctx=Load(), lineno=218, col_offset=21, end_lineno=218, end_col_offset=36), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=218, col_offset=37, end_lineno=218, end_col_offset=47)],
      keywords=[], lineno=218, col_offset=21, end_lineno=218, end_col_offset=48),
      lineno=218, col_offset=8, end_lineno=218, end_col_offset=48)], orelse=[Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=220, col_offset=8, end_lineno=220, end_col_offset=18)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=220, col_offset=21, end_lineno=220, end_col_offset=23), attr=''path'',
      ctx=Load(), lineno=220, col_offset=21, end_lineno=220, end_col_offset=28), attr=''join'',
      ctx=Load(), lineno=220, col_offset=21, end_lineno=220, end_col_offset=33), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=220, col_offset=34, end_lineno=220, end_col_offset=36), attr=''getcwd'',
      ctx=Load(), lineno=220, col_offset=34, end_lineno=220, end_col_offset=43), args=[],
      keywords=[], lineno=220, col_offset=34, end_lineno=220, end_col_offset=45),
      Name(id=''OUTPUT_DIR'', ctx=Load(), lineno=220, col_offset=47, end_lineno=220,
      end_col_offset=57)], keywords=[], lineno=220, col_offset=21, end_lineno=220,
      end_col_offset=58), lineno=220, col_offset=8, end_lineno=220, end_col_offset=58)],
      lineno=217, col_offset=4, end_lineno=220, end_col_offset=58), If(test=UnaryOp(op=Not(),
      operand=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=221,
      col_offset=11, end_lineno=221, end_col_offset=15), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=221, col_offset=16, end_lineno=221, end_col_offset=26)],
      keywords=[], lineno=221, col_offset=11, end_lineno=221, end_col_offset=27),
      attr=''is_dir'', ctx=Load(), lineno=221, col_offset=11, end_lineno=221, end_col_offset=34),
      args=[], keywords=[], lineno=221, col_offset=11, end_lineno=221, end_col_offset=36),
      lineno=221, col_offset=7, end_lineno=221, end_col_offset=36), body=[Expr(value=Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=222, col_offset=8, end_lineno=222, end_col_offset=10), attr=''makedirs'',
      ctx=Load(), lineno=222, col_offset=8, end_lineno=222, end_col_offset=19), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=222, col_offset=20, end_lineno=222, end_col_offset=30)],
      keywords=[keyword(arg=''exist_ok'', value=Constant(value=True, lineno=222, col_offset=41,
      end_lineno=222, end_col_offset=45), lineno=222, col_offset=32, end_lineno=222,
      end_col_offset=45)], lineno=222, col_offset=8, end_lineno=222, end_col_offset=46),
      lineno=222, col_offset=8, end_lineno=222, end_col_offset=46)], orelse=[], lineno=221,
      col_offset=4, end_lineno=222, end_col_offset=46), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=223, col_offset=4, end_lineno=223, end_col_offset=11), attr=''info'',
      ctx=Load(), lineno=223, col_offset=4, end_lineno=223, end_col_offset=16), args=[JoinedStr(values=[Constant(value=''Using
      output directory: '', lineno=223, col_offset=17, end_lineno=223, end_col_offset=56),
      FormattedValue(value=Name(id=''output_dir'', ctx=Load(), lineno=223, col_offset=44,
      end_lineno=223, end_col_offset=54), conversion=-1, lineno=223, col_offset=17,
      end_lineno=223, end_col_offset=56)], lineno=223, col_offset=17, end_lineno=223,
      end_col_offset=56)], keywords=[], lineno=223, col_offset=4, end_lineno=223,
      end_col_offset=57), lineno=223, col_offset=4, end_lineno=223, end_col_offset=57),
      Return(value=Name(id=''output_dir'', ctx=Load(), lineno=224, col_offset=11,
      end_lineno=224, end_col_offset=21), lineno=224, col_offset=4, end_lineno=224,
      end_col_offset=21)], decorator_list=[], returns=Name(id=''str'', ctx=Load(),
      lineno=215, col_offset=42, end_lineno=215, end_col_offset=45), lineno=215, col_offset=0,
      end_lineno=224, end_col_offset=21)'
    function_docstring: Returns the appropriate output directory.
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns:
    - output_dir
    function_calls:
    - Path
    - logging.info
    - os.path.join
    - os.getcwd
    - Path(output_dir).is_dir
    - os.makedirs
    - os.path.abspath
    function_variables:
    - output_dir
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_questions:
    function_name: get_questions
    function_code: "def get_questions(questions_pathname: str) -> List[Dict]:\n  \
      \  \"\"\"Get questions from file or default\"\"\"\n    if not questions_pathname:\n\
      \        questions_pathname = os.path.join(os.getcwd(), QUESTIONS_FILE)\n  \
      \  if not Path(questions_pathname).is_file():\n        logging.info(f'Questions\
      \ file {questions_pathname} not found. Using default questions')\n        questions\
      \ = get_default_questions()\n        return questions\n    try:\n        with\
      \ open(questions_pathname, 'r') as f:\n            questions = json.load(f)\n\
      \    except:\n        logging.info(f'Questions file not valid: {questions_pathname}\
      \ Using default questions')\n        questions = get_default_questions()\n \
      \       return questions\n    logging.info(f'Using questions from file: {questions_pathname}')\n\
      \    return questions"
    function_ast: 'FunctionDef(name=''get_questions'', args=arguments(posonlyargs=[],
      args=[arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load(),
      lineno=227, col_offset=38, end_lineno=227, end_col_offset=41), lineno=227, col_offset=18,
      end_lineno=227, end_col_offset=41)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''Get questions from file or default'', lineno=228,
      col_offset=4, end_lineno=228, end_col_offset=44), lineno=228, col_offset=4,
      end_lineno=228, end_col_offset=44), If(test=UnaryOp(op=Not(), operand=Name(id=''questions_pathname'',
      ctx=Load(), lineno=230, col_offset=11, end_lineno=230, end_col_offset=29), lineno=230,
      col_offset=7, end_lineno=230, end_col_offset=29), body=[Assign(targets=[Name(id=''questions_pathname'',
      ctx=Store(), lineno=231, col_offset=8, end_lineno=231, end_col_offset=26)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=231, col_offset=29, end_lineno=231, end_col_offset=31), attr=''path'',
      ctx=Load(), lineno=231, col_offset=29, end_lineno=231, end_col_offset=36), attr=''join'',
      ctx=Load(), lineno=231, col_offset=29, end_lineno=231, end_col_offset=41), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=231, col_offset=42, end_lineno=231, end_col_offset=44), attr=''getcwd'',
      ctx=Load(), lineno=231, col_offset=42, end_lineno=231, end_col_offset=51), args=[],
      keywords=[], lineno=231, col_offset=42, end_lineno=231, end_col_offset=53),
      Name(id=''QUESTIONS_FILE'', ctx=Load(), lineno=231, col_offset=55, end_lineno=231,
      end_col_offset=69)], keywords=[], lineno=231, col_offset=29, end_lineno=231,
      end_col_offset=70), lineno=231, col_offset=8, end_lineno=231, end_col_offset=70)],
      orelse=[], lineno=230, col_offset=4, end_lineno=231, end_col_offset=70), If(test=UnaryOp(op=Not(),
      operand=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=234,
      col_offset=11, end_lineno=234, end_col_offset=15), args=[Name(id=''questions_pathname'',
      ctx=Load(), lineno=234, col_offset=16, end_lineno=234, end_col_offset=34)],
      keywords=[], lineno=234, col_offset=11, end_lineno=234, end_col_offset=35),
      attr=''is_file'', ctx=Load(), lineno=234, col_offset=11, end_lineno=234, end_col_offset=43),
      args=[], keywords=[], lineno=234, col_offset=11, end_lineno=234, end_col_offset=45),
      lineno=234, col_offset=7, end_lineno=234, end_col_offset=45), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=235, col_offset=8, end_lineno=235, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=235, col_offset=8, end_lineno=235, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Questions
      file '', lineno=235, col_offset=21, end_lineno=235, end_col_offset=94), FormattedValue(value=Name(id=''questions_pathname'',
      ctx=Load(), lineno=235, col_offset=39, end_lineno=235, end_col_offset=57), conversion=-1,
      lineno=235, col_offset=21, end_lineno=235, end_col_offset=94), Constant(value=''
      not found. Using default questions'', lineno=235, col_offset=21, end_lineno=235,
      end_col_offset=94)], lineno=235, col_offset=21, end_lineno=235, end_col_offset=94)],
      keywords=[], lineno=235, col_offset=8, end_lineno=235, end_col_offset=95), lineno=235,
      col_offset=8, end_lineno=235, end_col_offset=95), Assign(targets=[Name(id=''questions'',
      ctx=Store(), lineno=236, col_offset=8, end_lineno=236, end_col_offset=17)],
      value=Call(func=Name(id=''get_default_questions'', ctx=Load(), lineno=236, col_offset=20,
      end_lineno=236, end_col_offset=41), args=[], keywords=[], lineno=236, col_offset=20,
      end_lineno=236, end_col_offset=43), lineno=236, col_offset=8, end_lineno=236,
      end_col_offset=43), Return(value=Name(id=''questions'', ctx=Load(), lineno=237,
      col_offset=15, end_lineno=237, end_col_offset=24), lineno=237, col_offset=8,
      end_lineno=237, end_col_offset=24)], orelse=[], lineno=234, col_offset=4, end_lineno=237,
      end_col_offset=24), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=241, col_offset=13, end_lineno=241, end_col_offset=17), args=[Name(id=''questions_pathname'',
      ctx=Load(), lineno=241, col_offset=18, end_lineno=241, end_col_offset=36), Constant(value=''r'',
      lineno=241, col_offset=38, end_lineno=241, end_col_offset=41)], keywords=[],
      lineno=241, col_offset=13, end_lineno=241, end_col_offset=42), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=241, col_offset=46, end_lineno=241, end_col_offset=47))],
      body=[Assign(targets=[Name(id=''questions'', ctx=Store(), lineno=242, col_offset=12,
      end_lineno=242, end_col_offset=21)], value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=242, col_offset=24, end_lineno=242, end_col_offset=28), attr=''load'',
      ctx=Load(), lineno=242, col_offset=24, end_lineno=242, end_col_offset=33), args=[Name(id=''f'',
      ctx=Load(), lineno=242, col_offset=34, end_lineno=242, end_col_offset=35)],
      keywords=[], lineno=242, col_offset=24, end_lineno=242, end_col_offset=36),
      lineno=242, col_offset=12, end_lineno=242, end_col_offset=36)], lineno=241,
      col_offset=8, end_lineno=242, end_col_offset=36)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=244, col_offset=8, end_lineno=244, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=244, col_offset=8, end_lineno=244, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Questions
      file not valid: '', lineno=244, col_offset=21, end_lineno=244, end_col_offset=94),
      FormattedValue(value=Name(id=''questions_pathname'', ctx=Load(), lineno=244,
      col_offset=50, end_lineno=244, end_col_offset=68), conversion=-1, lineno=244,
      col_offset=21, end_lineno=244, end_col_offset=94), Constant(value='' Using default
      questions'', lineno=244, col_offset=21, end_lineno=244, end_col_offset=94)],
      lineno=244, col_offset=21, end_lineno=244, end_col_offset=94)], keywords=[],
      lineno=244, col_offset=8, end_lineno=244, end_col_offset=95), lineno=244, col_offset=8,
      end_lineno=244, end_col_offset=95), Assign(targets=[Name(id=''questions'', ctx=Store(),
      lineno=245, col_offset=8, end_lineno=245, end_col_offset=17)], value=Call(func=Name(id=''get_default_questions'',
      ctx=Load(), lineno=245, col_offset=20, end_lineno=245, end_col_offset=41), args=[],
      keywords=[], lineno=245, col_offset=20, end_lineno=245, end_col_offset=43),
      lineno=245, col_offset=8, end_lineno=245, end_col_offset=43), Return(value=Name(id=''questions'',
      ctx=Load(), lineno=246, col_offset=15, end_lineno=246, end_col_offset=24), lineno=246,
      col_offset=8, end_lineno=246, end_col_offset=24)], lineno=243, col_offset=4,
      end_lineno=246, end_col_offset=24)], orelse=[], finalbody=[], lineno=240, col_offset=4,
      end_lineno=246, end_col_offset=24), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=248, col_offset=4, end_lineno=248, end_col_offset=11), attr=''info'',
      ctx=Load(), lineno=248, col_offset=4, end_lineno=248, end_col_offset=16), args=[JoinedStr(values=[Constant(value=''Using
      questions from file: '', lineno=248, col_offset=17, end_lineno=248, end_col_offset=67),
      FormattedValue(value=Name(id=''questions_pathname'', ctx=Load(), lineno=248,
      col_offset=47, end_lineno=248, end_col_offset=65), conversion=-1, lineno=248,
      col_offset=17, end_lineno=248, end_col_offset=67)], lineno=248, col_offset=17,
      end_lineno=248, end_col_offset=67)], keywords=[], lineno=248, col_offset=4,
      end_lineno=248, end_col_offset=68), lineno=248, col_offset=4, end_lineno=248,
      end_col_offset=68), Return(value=Name(id=''questions'', ctx=Load(), lineno=249,
      col_offset=11, end_lineno=249, end_col_offset=20), lineno=249, col_offset=4,
      end_lineno=249, end_col_offset=20)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=227, col_offset=46, end_lineno=227, end_col_offset=50), slice=Name(id=''Dict'',
      ctx=Load(), lineno=227, col_offset=51, end_lineno=227, end_col_offset=55), ctx=Load(),
      lineno=227, col_offset=46, end_lineno=227, end_col_offset=56), lineno=227, col_offset=0,
      end_lineno=249, end_col_offset=20)'
    function_docstring: Get questions from file or default
    function_inputs:
    - questions_pathname
    function_defaults: []
    function_returns:
    - questions
    - questions
    - questions
    function_calls:
    - Path
    - logging.info
    - json.load
    - get_default_questions
    - os.path.join
    - os.getcwd
    - Path(questions_pathname).is_file
    - open
    function_variables:
    - questions
    - questions_pathname
    function_decorators: []
    function_annotations: []
    function_properties: []
  instantiate_model:
    function_name: instantiate_model
    function_code: "def instantiate_model(model_config: Dict) -> object:\n    \"\"\
      \"\n    Imports and instantiates a model based on the provided configuration.\n\
      \    Args:\n        model_config (dict): A dictionary containing the configuration\
      \ for the\n            model. It should include the import path for the model\
      \ class and\n            parameters for instantiation.\n        user_config\
      \ (dict): A dictionary containing user-provided configurations.\n          \
      \  If provided, these configurations will override the defaults.\n    Returns:\n\
      \        object: An instance of the specified model class, or None if there\
      \ was\n            an error.\n    \"\"\"\n    model = None\n    try:\n     \
      \   module_name, class_name = model_config['model_import_path'].rsplit('.',\
      \ 1)\n        module = importlib.import_module(module_name)\n    except ImportError\
      \ as e:\n        print(f'Failed to import module {module_name}. Error: {e}')\n\
      \        return model\n    try:\n        ModelClass = getattr(module, class_name)\n\
      \    except AttributeError as e:\n        print(f'Module {module_name} does\
      \ not have a class named {class_name}. Error: {e}')\n        return model\n\
      \    model_params = model_config['model_params']\n    try:\n        model =\
      \ ModelClass.from_pretrained(model_params.pop('model_path'), **model_params)\n\
      \    except Exception as e:\n        print(f'Failed to instantiate the model\
      \ with the provided parameters. Error: {e}')\n        return model\n    return\
      \ model"
    function_ast: 'FunctionDef(name=''instantiate_model'', args=arguments(posonlyargs=[],
      args=[arg(arg=''model_config'', annotation=Name(id=''Dict'', ctx=Load(), lineno=252,
      col_offset=36, end_lineno=252, end_col_offset=40), lineno=252, col_offset=22,
      end_lineno=252, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Imports and instantiates a model based
      on the provided configuration.\n    Args:\n        model_config (dict): A dictionary
      containing the configuration for the\n            model. It should include the
      import path for the model class and\n            parameters for instantiation.\n        user_config
      (dict): A dictionary containing user-provided configurations.\n            If
      provided, these configurations will override the defaults.\n    Returns:\n        object:
      An instance of the specified model class, or None if there was\n            an
      error.\n    '', lineno=253, col_offset=4, end_lineno=264, end_col_offset=7),
      lineno=253, col_offset=4, end_lineno=264, end_col_offset=7), Assign(targets=[Name(id=''model'',
      ctx=Store(), lineno=265, col_offset=4, end_lineno=265, end_col_offset=9)], value=Constant(value=None,
      lineno=265, col_offset=12, end_lineno=265, end_col_offset=16), lineno=265, col_offset=4,
      end_lineno=265, end_col_offset=16), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
      ctx=Store(), lineno=267, col_offset=8, end_lineno=267, end_col_offset=19), Name(id=''class_name'',
      ctx=Store(), lineno=267, col_offset=21, end_lineno=267, end_col_offset=31)],
      ctx=Store(), lineno=267, col_offset=8, end_lineno=267, end_col_offset=31)],
      value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'', ctx=Load(),
      lineno=267, col_offset=34, end_lineno=267, end_col_offset=46), slice=Constant(value=''model_import_path'',
      lineno=267, col_offset=47, end_lineno=267, end_col_offset=66), ctx=Load(), lineno=267,
      col_offset=34, end_lineno=267, end_col_offset=67), attr=''rsplit'', ctx=Load(),
      lineno=267, col_offset=34, end_lineno=267, end_col_offset=74), args=[Constant(value=''.'',
      lineno=267, col_offset=75, end_lineno=267, end_col_offset=78), Constant(value=1,
      lineno=267, col_offset=80, end_lineno=267, end_col_offset=81)], keywords=[],
      lineno=267, col_offset=34, end_lineno=267, end_col_offset=82), lineno=267, col_offset=8,
      end_lineno=267, end_col_offset=82), Assign(targets=[Name(id=''module'', ctx=Store(),
      lineno=268, col_offset=8, end_lineno=268, end_col_offset=14)], value=Call(func=Attribute(value=Name(id=''importlib'',
      ctx=Load(), lineno=268, col_offset=17, end_lineno=268, end_col_offset=26), attr=''import_module'',
      ctx=Load(), lineno=268, col_offset=17, end_lineno=268, end_col_offset=40), args=[Name(id=''module_name'',
      ctx=Load(), lineno=268, col_offset=41, end_lineno=268, end_col_offset=52)],
      keywords=[], lineno=268, col_offset=17, end_lineno=268, end_col_offset=53),
      lineno=268, col_offset=8, end_lineno=268, end_col_offset=53)], handlers=[ExceptHandler(type=Name(id=''ImportError'',
      ctx=Load(), lineno=269, col_offset=11, end_lineno=269, end_col_offset=22), name=''e'',
      body=[Expr(value=Call(func=Name(id=''print'', ctx=Load(), lineno=270, col_offset=8,
      end_lineno=270, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Failed
      to import module '', lineno=270, col_offset=14, end_lineno=270, end_col_offset=66),
      FormattedValue(value=Name(id=''module_name'', ctx=Load(), lineno=270, col_offset=41,
      end_lineno=270, end_col_offset=52), conversion=-1, lineno=270, col_offset=14,
      end_lineno=270, end_col_offset=66), Constant(value=''. Error: '', lineno=270,
      col_offset=14, end_lineno=270, end_col_offset=66), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=270, col_offset=63, end_lineno=270, end_col_offset=64), conversion=-1,
      lineno=270, col_offset=14, end_lineno=270, end_col_offset=66)], lineno=270,
      col_offset=14, end_lineno=270, end_col_offset=66)], keywords=[], lineno=270,
      col_offset=8, end_lineno=270, end_col_offset=67), lineno=270, col_offset=8,
      end_lineno=270, end_col_offset=67), Return(value=Name(id=''model'', ctx=Load(),
      lineno=271, col_offset=15, end_lineno=271, end_col_offset=20), lineno=271, col_offset=8,
      end_lineno=271, end_col_offset=20)], lineno=269, col_offset=4, end_lineno=271,
      end_col_offset=20)], orelse=[], finalbody=[], lineno=266, col_offset=4, end_lineno=271,
      end_col_offset=20), Try(body=[Assign(targets=[Name(id=''ModelClass'', ctx=Store(),
      lineno=273, col_offset=8, end_lineno=273, end_col_offset=18)], value=Call(func=Name(id=''getattr'',
      ctx=Load(), lineno=273, col_offset=21, end_lineno=273, end_col_offset=28), args=[Name(id=''module'',
      ctx=Load(), lineno=273, col_offset=29, end_lineno=273, end_col_offset=35), Name(id=''class_name'',
      ctx=Load(), lineno=273, col_offset=37, end_lineno=273, end_col_offset=47)],
      keywords=[], lineno=273, col_offset=21, end_lineno=273, end_col_offset=48),
      lineno=273, col_offset=8, end_lineno=273, end_col_offset=48)], handlers=[ExceptHandler(type=Name(id=''AttributeError'',
      ctx=Load(), lineno=274, col_offset=11, end_lineno=274, end_col_offset=25), name=''e'',
      body=[Expr(value=Call(func=Name(id=''print'', ctx=Load(), lineno=275, col_offset=8,
      end_lineno=275, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Module
      '', lineno=275, col_offset=14, end_lineno=275, end_col_offset=90), FormattedValue(value=Name(id=''module_name'',
      ctx=Load(), lineno=275, col_offset=24, end_lineno=275, end_col_offset=35), conversion=-1,
      lineno=275, col_offset=14, end_lineno=275, end_col_offset=90), Constant(value=''
      does not have a class named '', lineno=275, col_offset=14, end_lineno=275, end_col_offset=90),
      FormattedValue(value=Name(id=''class_name'', ctx=Load(), lineno=275, col_offset=66,
      end_lineno=275, end_col_offset=76), conversion=-1, lineno=275, col_offset=14,
      end_lineno=275, end_col_offset=90), Constant(value=''. Error: '', lineno=275,
      col_offset=14, end_lineno=275, end_col_offset=90), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=275, col_offset=87, end_lineno=275, end_col_offset=88), conversion=-1,
      lineno=275, col_offset=14, end_lineno=275, end_col_offset=90)], lineno=275,
      col_offset=14, end_lineno=275, end_col_offset=90)], keywords=[], lineno=275,
      col_offset=8, end_lineno=275, end_col_offset=91), lineno=275, col_offset=8,
      end_lineno=275, end_col_offset=91), Return(value=Name(id=''model'', ctx=Load(),
      lineno=276, col_offset=15, end_lineno=276, end_col_offset=20), lineno=276, col_offset=8,
      end_lineno=276, end_col_offset=20)], lineno=274, col_offset=4, end_lineno=276,
      end_col_offset=20)], orelse=[], finalbody=[], lineno=272, col_offset=4, end_lineno=276,
      end_col_offset=20), Assign(targets=[Name(id=''model_params'', ctx=Store(), lineno=278,
      col_offset=4, end_lineno=278, end_col_offset=16)], value=Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=278, col_offset=19, end_lineno=278, end_col_offset=31), slice=Constant(value=''model_params'',
      lineno=278, col_offset=32, end_lineno=278, end_col_offset=46), ctx=Load(), lineno=278,
      col_offset=19, end_lineno=278, end_col_offset=47), lineno=278, col_offset=4,
      end_lineno=278, end_col_offset=47), Try(body=[Assign(targets=[Name(id=''model'',
      ctx=Store(), lineno=280, col_offset=8, end_lineno=280, end_col_offset=13)],
      value=Call(func=Attribute(value=Name(id=''ModelClass'', ctx=Load(), lineno=280,
      col_offset=16, end_lineno=280, end_col_offset=26), attr=''from_pretrained'',
      ctx=Load(), lineno=280, col_offset=16, end_lineno=280, end_col_offset=42), args=[Call(func=Attribute(value=Name(id=''model_params'',
      ctx=Load(), lineno=280, col_offset=43, end_lineno=280, end_col_offset=55), attr=''pop'',
      ctx=Load(), lineno=280, col_offset=43, end_lineno=280, end_col_offset=59), args=[Constant(value=''model_path'',
      lineno=280, col_offset=60, end_lineno=280, end_col_offset=72)], keywords=[],
      lineno=280, col_offset=43, end_lineno=280, end_col_offset=73)], keywords=[keyword(value=Name(id=''model_params'',
      ctx=Load(), lineno=280, col_offset=77, end_lineno=280, end_col_offset=89), lineno=280,
      col_offset=75, end_lineno=280, end_col_offset=89)], lineno=280, col_offset=16,
      end_lineno=280, end_col_offset=90), lineno=280, col_offset=8, end_lineno=280,
      end_col_offset=90)], handlers=[ExceptHandler(type=Name(id=''Exception'', ctx=Load(),
      lineno=281, col_offset=11, end_lineno=281, end_col_offset=20), name=''e'', body=[Expr(value=Call(func=Name(id=''print'',
      ctx=Load(), lineno=282, col_offset=8, end_lineno=282, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Failed
      to instantiate the model with the provided parameters. Error: '', lineno=282,
      col_offset=14, end_lineno=282, end_col_offset=89), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=282, col_offset=86, end_lineno=282, end_col_offset=87), conversion=-1,
      lineno=282, col_offset=14, end_lineno=282, end_col_offset=89)], lineno=282,
      col_offset=14, end_lineno=282, end_col_offset=89)], keywords=[], lineno=282,
      col_offset=8, end_lineno=282, end_col_offset=90), lineno=282, col_offset=8,
      end_lineno=282, end_col_offset=90), Return(value=Name(id=''model'', ctx=Load(),
      lineno=283, col_offset=15, end_lineno=283, end_col_offset=20), lineno=283, col_offset=8,
      end_lineno=283, end_col_offset=20)], lineno=281, col_offset=4, end_lineno=283,
      end_col_offset=20)], orelse=[], finalbody=[], lineno=279, col_offset=4, end_lineno=283,
      end_col_offset=20), Return(value=Name(id=''model'', ctx=Load(), lineno=285,
      col_offset=11, end_lineno=285, end_col_offset=16), lineno=285, col_offset=4,
      end_lineno=285, end_col_offset=16)], decorator_list=[], returns=Name(id=''object'',
      ctx=Load(), lineno=252, col_offset=45, end_lineno=252, end_col_offset=51), lineno=252,
      col_offset=0, end_lineno=285, end_col_offset=16)'
    function_docstring: "Imports and instantiates a model based on the provided configuration.\n\
      Args:\n    model_config (dict): A dictionary containing the configuration for\
      \ the\n        model. It should include the import path for the model class\
      \ and\n        parameters for instantiation.\n    user_config (dict): A dictionary\
      \ containing user-provided configurations.\n        If provided, these configurations\
      \ will override the defaults.\nReturns:\n    object: An instance of the specified\
      \ model class, or None if there was\n        an error."
    function_inputs:
    - model_config
    function_defaults: []
    function_returns:
    - model
    - model
    - model
    - model
    function_calls:
    - model_params.pop
    - importlib.import_module
    - model_config['model_import_path'].rsplit
    - ModelClass.from_pretrained
    - print
    - getattr
    function_variables:
    - model
    - ModelClass
    - module
    - model_params
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_model:
    function_name: get_model
    function_code: "def get_model(model_config_pathname: str):\n    \"\"\"\n    Agrs:\n\
      \        model_config_pathname (str): The pathname of the model config file\n\
      \    Returns:\n        Tuple[object, str]: The instantiated model and prompt\
      \ template \n    \"\"\"\n    if not model_config_pathname:\n        model_config_pathname\
      \ = os.path.join(os.getcwd(), MODEL_CONFIG_FILE)\n    if not Path(model_config_pathname).is_file():\n\
      \        logging.info(f'Model config file not found: {model_config_pathname}\
      \ Using default model config')\n        model_config = get_default_model_config()\n\
      \        return (instantiate_model(model_config['inference_model']), model_config['prompt_template'])\n\
      \    try:\n        with open(model_config_pathname, 'r') as config_file:\n \
      \           model_config = yaml.safe_load(config_file)\n    except:\n      \
      \  logging.info(f'Model config file not valid: {model_config_pathname} Using\
      \ default model config')\n        model_config = get_default_model_config()\n\
      \        return (instantiate_model(model_config['inference_model']), model_config['prompt_template'])\n\
      \    logging.info(f'Using model config from file: {model_config_pathname}')\n\
      \    return (instantiate_model(model_config['inference_model']), model_config['prompt_template'])"
    function_ast: 'FunctionDef(name=''get_model'', args=arguments(posonlyargs=[],
      args=[arg(arg=''model_config_pathname'', annotation=Name(id=''str'', ctx=Load(),
      lineno=288, col_offset=37, end_lineno=288, end_col_offset=40), lineno=288, col_offset=14,
      end_lineno=288, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Agrs:\n        model_config_pathname
      (str): The pathname of the model config file\n    Returns:\n        Tuple[object,
      str]: The instantiated model and prompt template \n    '', lineno=289, col_offset=4,
      end_lineno=294, end_col_offset=7), lineno=289, col_offset=4, end_lineno=294,
      end_col_offset=7), If(test=UnaryOp(op=Not(), operand=Name(id=''model_config_pathname'',
      ctx=Load(), lineno=296, col_offset=11, end_lineno=296, end_col_offset=32), lineno=296,
      col_offset=7, end_lineno=296, end_col_offset=32), body=[Assign(targets=[Name(id=''model_config_pathname'',
      ctx=Store(), lineno=297, col_offset=8, end_lineno=297, end_col_offset=29)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=297, col_offset=32, end_lineno=297, end_col_offset=34), attr=''path'',
      ctx=Load(), lineno=297, col_offset=32, end_lineno=297, end_col_offset=39), attr=''join'',
      ctx=Load(), lineno=297, col_offset=32, end_lineno=297, end_col_offset=44), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=297, col_offset=45, end_lineno=297, end_col_offset=47), attr=''getcwd'',
      ctx=Load(), lineno=297, col_offset=45, end_lineno=297, end_col_offset=54), args=[],
      keywords=[], lineno=297, col_offset=45, end_lineno=297, end_col_offset=56),
      Name(id=''MODEL_CONFIG_FILE'', ctx=Load(), lineno=297, col_offset=58, end_lineno=297,
      end_col_offset=75)], keywords=[], lineno=297, col_offset=32, end_lineno=297,
      end_col_offset=76), lineno=297, col_offset=8, end_lineno=297, end_col_offset=76)],
      orelse=[], lineno=296, col_offset=4, end_lineno=297, end_col_offset=76), If(test=UnaryOp(op=Not(),
      operand=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=300,
      col_offset=11, end_lineno=300, end_col_offset=15), args=[Name(id=''model_config_pathname'',
      ctx=Load(), lineno=300, col_offset=16, end_lineno=300, end_col_offset=37)],
      keywords=[], lineno=300, col_offset=11, end_lineno=300, end_col_offset=38),
      attr=''is_file'', ctx=Load(), lineno=300, col_offset=11, end_lineno=300, end_col_offset=46),
      args=[], keywords=[], lineno=300, col_offset=11, end_lineno=300, end_col_offset=48),
      lineno=300, col_offset=7, end_lineno=300, end_col_offset=48), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=301, col_offset=8, end_lineno=301, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=301, col_offset=8, end_lineno=301, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Model
      config file not found: '', lineno=301, col_offset=21, end_lineno=301, end_col_offset=103),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=301,
      col_offset=53, end_lineno=301, end_col_offset=74), conversion=-1, lineno=301,
      col_offset=21, end_lineno=301, end_col_offset=103), Constant(value='' Using
      default model config'', lineno=301, col_offset=21, end_lineno=301, end_col_offset=103)],
      lineno=301, col_offset=21, end_lineno=301, end_col_offset=103)], keywords=[],
      lineno=301, col_offset=8, end_lineno=301, end_col_offset=104), lineno=301, col_offset=8,
      end_lineno=301, end_col_offset=104), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=302, col_offset=8, end_lineno=302, end_col_offset=20)],
      value=Call(func=Name(id=''get_default_model_config'', ctx=Load(), lineno=302,
      col_offset=23, end_lineno=302, end_col_offset=47), args=[], keywords=[], lineno=302,
      col_offset=23, end_lineno=302, end_col_offset=49), lineno=302, col_offset=8,
      end_lineno=302, end_col_offset=49), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
      ctx=Load(), lineno=303, col_offset=15, end_lineno=303, end_col_offset=32), args=[Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=303, col_offset=33, end_lineno=303, end_col_offset=45), slice=Constant(value=''inference_model'',
      lineno=303, col_offset=46, end_lineno=303, end_col_offset=63), ctx=Load(), lineno=303,
      col_offset=33, end_lineno=303, end_col_offset=64)], keywords=[], lineno=303,
      col_offset=15, end_lineno=303, end_col_offset=65), Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=303, col_offset=67, end_lineno=303, end_col_offset=79), slice=Constant(value=''prompt_template'',
      lineno=303, col_offset=80, end_lineno=303, end_col_offset=97), ctx=Load(), lineno=303,
      col_offset=67, end_lineno=303, end_col_offset=98)], ctx=Load(), lineno=303,
      col_offset=15, end_lineno=303, end_col_offset=98), lineno=303, col_offset=8,
      end_lineno=303, end_col_offset=98)], orelse=[], lineno=300, col_offset=4, end_lineno=303,
      end_col_offset=98), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=305, col_offset=13, end_lineno=305, end_col_offset=17), args=[Name(id=''model_config_pathname'',
      ctx=Load(), lineno=305, col_offset=18, end_lineno=305, end_col_offset=39), Constant(value=''r'',
      lineno=305, col_offset=41, end_lineno=305, end_col_offset=44)], keywords=[],
      lineno=305, col_offset=13, end_lineno=305, end_col_offset=45), optional_vars=Name(id=''config_file'',
      ctx=Store(), lineno=305, col_offset=49, end_lineno=305, end_col_offset=60))],
      body=[Assign(targets=[Name(id=''model_config'', ctx=Store(), lineno=306, col_offset=12,
      end_lineno=306, end_col_offset=24)], value=Call(func=Attribute(value=Name(id=''yaml'',
      ctx=Load(), lineno=306, col_offset=27, end_lineno=306, end_col_offset=31), attr=''safe_load'',
      ctx=Load(), lineno=306, col_offset=27, end_lineno=306, end_col_offset=41), args=[Name(id=''config_file'',
      ctx=Load(), lineno=306, col_offset=42, end_lineno=306, end_col_offset=53)],
      keywords=[], lineno=306, col_offset=27, end_lineno=306, end_col_offset=54),
      lineno=306, col_offset=12, end_lineno=306, end_col_offset=54)], lineno=305,
      col_offset=8, end_lineno=306, end_col_offset=54)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=308, col_offset=8, end_lineno=308, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=308, col_offset=8, end_lineno=308, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Model
      config file not valid: '', lineno=308, col_offset=21, end_lineno=308, end_col_offset=103),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=308,
      col_offset=53, end_lineno=308, end_col_offset=74), conversion=-1, lineno=308,
      col_offset=21, end_lineno=308, end_col_offset=103), Constant(value='' Using
      default model config'', lineno=308, col_offset=21, end_lineno=308, end_col_offset=103)],
      lineno=308, col_offset=21, end_lineno=308, end_col_offset=103)], keywords=[],
      lineno=308, col_offset=8, end_lineno=308, end_col_offset=104), lineno=308, col_offset=8,
      end_lineno=308, end_col_offset=104), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=309, col_offset=8, end_lineno=309, end_col_offset=20)],
      value=Call(func=Name(id=''get_default_model_config'', ctx=Load(), lineno=309,
      col_offset=23, end_lineno=309, end_col_offset=47), args=[], keywords=[], lineno=309,
      col_offset=23, end_lineno=309, end_col_offset=49), lineno=309, col_offset=8,
      end_lineno=309, end_col_offset=49), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
      ctx=Load(), lineno=310, col_offset=15, end_lineno=310, end_col_offset=32), args=[Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=310, col_offset=33, end_lineno=310, end_col_offset=45), slice=Constant(value=''inference_model'',
      lineno=310, col_offset=46, end_lineno=310, end_col_offset=63), ctx=Load(), lineno=310,
      col_offset=33, end_lineno=310, end_col_offset=64)], keywords=[], lineno=310,
      col_offset=15, end_lineno=310, end_col_offset=65), Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=310, col_offset=67, end_lineno=310, end_col_offset=79), slice=Constant(value=''prompt_template'',
      lineno=310, col_offset=80, end_lineno=310, end_col_offset=97), ctx=Load(), lineno=310,
      col_offset=67, end_lineno=310, end_col_offset=98)], ctx=Load(), lineno=310,
      col_offset=15, end_lineno=310, end_col_offset=98), lineno=310, col_offset=8,
      end_lineno=310, end_col_offset=98)], lineno=307, col_offset=4, end_lineno=310,
      end_col_offset=98)], orelse=[], finalbody=[], lineno=304, col_offset=4, end_lineno=310,
      end_col_offset=98), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=312, col_offset=4, end_lineno=312, end_col_offset=11), attr=''info'',
      ctx=Load(), lineno=312, col_offset=4, end_lineno=312, end_col_offset=16), args=[JoinedStr(values=[Constant(value=''Using
      model config from file: '', lineno=312, col_offset=17, end_lineno=312, end_col_offset=73),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=312,
      col_offset=50, end_lineno=312, end_col_offset=71), conversion=-1, lineno=312,
      col_offset=17, end_lineno=312, end_col_offset=73)], lineno=312, col_offset=17,
      end_lineno=312, end_col_offset=73)], keywords=[], lineno=312, col_offset=4,
      end_lineno=312, end_col_offset=74), lineno=312, col_offset=4, end_lineno=312,
      end_col_offset=74), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
      ctx=Load(), lineno=313, col_offset=11, end_lineno=313, end_col_offset=28), args=[Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=313, col_offset=29, end_lineno=313, end_col_offset=41), slice=Constant(value=''inference_model'',
      lineno=313, col_offset=42, end_lineno=313, end_col_offset=59), ctx=Load(), lineno=313,
      col_offset=29, end_lineno=313, end_col_offset=60)], keywords=[], lineno=313,
      col_offset=11, end_lineno=313, end_col_offset=61), Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=313, col_offset=63, end_lineno=313, end_col_offset=75), slice=Constant(value=''prompt_template'',
      lineno=313, col_offset=76, end_lineno=313, end_col_offset=93), ctx=Load(), lineno=313,
      col_offset=63, end_lineno=313, end_col_offset=94)], ctx=Load(), lineno=313,
      col_offset=11, end_lineno=313, end_col_offset=94), lineno=313, col_offset=4,
      end_lineno=313, end_col_offset=94)], decorator_list=[], lineno=288, col_offset=0,
      end_lineno=313, end_col_offset=94)'
    function_docstring: "Agrs:\n    model_config_pathname (str): The pathname of the\
      \ model config file\nReturns:\n    Tuple[object, str]: The instantiated model\
      \ and prompt template "
    function_inputs:
    - model_config_pathname
    function_defaults: []
    function_returns:
    - (instantiate_model(model_config['inference_model']), model_config['prompt_template'])
    - (instantiate_model(model_config['inference_model']), model_config['prompt_template'])
    - (instantiate_model(model_config['inference_model']), model_config['prompt_template'])
    function_calls:
    - Path
    - logging.info
    - Path(model_config_pathname).is_file
    - os.path.join
    - get_default_model_config
    - os.getcwd
    - instantiate_model
    - yaml.safe_load
    - open
    function_variables:
    - model_config
    - model_config_pathname
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_questions_file:
    function_name: write_questions_file
    function_code: "def write_questions_file(output_dir: str='') -> None:\n    \"\"\
      \"\n    Writes the default questions to a file in JSON format.\n    \"\"\"\n\
      \    questions = get_default_questions()\n    if not output_dir or not Path(output_dir).is_dir():\n\
      \        output_dir = os.getcwd()\n    with open(os.path.join(output_dir, QUESTIONS_FILE),\
      \ 'w') as file:\n        json.dump(questions, file, indent=4)"
    function_ast: FunctionDef(name='write_questions_file', args=arguments(posonlyargs=[],
      args=[arg(arg='output_dir', annotation=Name(id='str', ctx=Load(), lineno=316,
      col_offset=37, end_lineno=316, end_col_offset=40), lineno=316, col_offset=25,
      end_lineno=316, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='',
      lineno=316, col_offset=41, end_lineno=316, end_col_offset=43)]), body=[Expr(value=Constant(value='\n    Writes
      the default questions to a file in JSON format.\n    ', lineno=317, col_offset=4,
      end_lineno=319, end_col_offset=7), lineno=317, col_offset=4, end_lineno=319,
      end_col_offset=7), Assign(targets=[Name(id='questions', ctx=Store(), lineno=320,
      col_offset=4, end_lineno=320, end_col_offset=13)], value=Call(func=Name(id='get_default_questions',
      ctx=Load(), lineno=320, col_offset=16, end_lineno=320, end_col_offset=37), args=[],
      keywords=[], lineno=320, col_offset=16, end_lineno=320, end_col_offset=39),
      lineno=320, col_offset=4, end_lineno=320, end_col_offset=39), If(test=BoolOp(op=Or(),
      values=[UnaryOp(op=Not(), operand=Name(id='output_dir', ctx=Load(), lineno=321,
      col_offset=11, end_lineno=321, end_col_offset=21), lineno=321, col_offset=7,
      end_lineno=321, end_col_offset=21), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id='Path',
      ctx=Load(), lineno=321, col_offset=29, end_lineno=321, end_col_offset=33), args=[Name(id='output_dir',
      ctx=Load(), lineno=321, col_offset=34, end_lineno=321, end_col_offset=44)],
      keywords=[], lineno=321, col_offset=29, end_lineno=321, end_col_offset=45),
      attr='is_dir', ctx=Load(), lineno=321, col_offset=29, end_lineno=321, end_col_offset=52),
      args=[], keywords=[], lineno=321, col_offset=29, end_lineno=321, end_col_offset=54),
      lineno=321, col_offset=25, end_lineno=321, end_col_offset=54)], lineno=321,
      col_offset=7, end_lineno=321, end_col_offset=54), body=[Assign(targets=[Name(id='output_dir',
      ctx=Store(), lineno=322, col_offset=8, end_lineno=322, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id='os', ctx=Load(), lineno=322, col_offset=21,
      end_lineno=322, end_col_offset=23), attr='getcwd', ctx=Load(), lineno=322, col_offset=21,
      end_lineno=322, end_col_offset=30), args=[], keywords=[], lineno=322, col_offset=21,
      end_lineno=322, end_col_offset=32), lineno=322, col_offset=8, end_lineno=322,
      end_col_offset=32)], orelse=[], lineno=321, col_offset=4, end_lineno=322, end_col_offset=32),
      With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load(), lineno=323,
      col_offset=9, end_lineno=323, end_col_offset=13), args=[Call(func=Attribute(value=Attribute(value=Name(id='os',
      ctx=Load(), lineno=323, col_offset=14, end_lineno=323, end_col_offset=16), attr='path',
      ctx=Load(), lineno=323, col_offset=14, end_lineno=323, end_col_offset=21), attr='join',
      ctx=Load(), lineno=323, col_offset=14, end_lineno=323, end_col_offset=26), args=[Name(id='output_dir',
      ctx=Load(), lineno=323, col_offset=27, end_lineno=323, end_col_offset=37), Name(id='QUESTIONS_FILE',
      ctx=Load(), lineno=323, col_offset=39, end_lineno=323, end_col_offset=53)],
      keywords=[], lineno=323, col_offset=14, end_lineno=323, end_col_offset=54),
      Constant(value='w', lineno=323, col_offset=56, end_lineno=323, end_col_offset=59)],
      keywords=[], lineno=323, col_offset=9, end_lineno=323, end_col_offset=60), optional_vars=Name(id='file',
      ctx=Store(), lineno=323, col_offset=64, end_lineno=323, end_col_offset=68))],
      body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load(), lineno=324,
      col_offset=8, end_lineno=324, end_col_offset=12), attr='dump', ctx=Load(), lineno=324,
      col_offset=8, end_lineno=324, end_col_offset=17), args=[Name(id='questions',
      ctx=Load(), lineno=324, col_offset=18, end_lineno=324, end_col_offset=27), Name(id='file',
      ctx=Load(), lineno=324, col_offset=29, end_lineno=324, end_col_offset=33)],
      keywords=[keyword(arg='indent', value=Constant(value=4, lineno=324, col_offset=42,
      end_lineno=324, end_col_offset=43), lineno=324, col_offset=35, end_lineno=324,
      end_col_offset=43)], lineno=324, col_offset=8, end_lineno=324, end_col_offset=44),
      lineno=324, col_offset=8, end_lineno=324, end_col_offset=44)], lineno=323, col_offset=4,
      end_lineno=324, end_col_offset=44)], decorator_list=[], returns=Constant(value=None,
      lineno=316, col_offset=48, end_lineno=316, end_col_offset=52), lineno=316, col_offset=0,
      end_lineno=324, end_col_offset=44)
    function_docstring: Writes the default questions to a file in JSON format.
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns: []
    function_calls:
    - Path
    - get_default_questions
    - os.path.join
    - os.getcwd
    - Path(output_dir).is_dir
    - json.dump
    - open
    function_variables:
    - questions
    - output_dir
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_model_config_file:
    function_name: write_model_config_file
    function_code: "def write_model_config_file(output_dir: str='') -> None:\n   \
      \ \"\"\"\n    Writes the default model config to a file in YAML format.\n  \
      \  \"\"\"\n    model_config = get_default_model_config()\n    if not output_dir\
      \ or not Path(output_dir).is_dir():\n        output_dir = os.getcwd()\n    with\
      \ open(os.path.join(output_dir, MODEL_CONFIG_FILE), 'w') as file:\n        yaml.dump(model_config,\
      \ file)"
    function_ast: FunctionDef(name='write_model_config_file', args=arguments(posonlyargs=[],
      args=[arg(arg='output_dir', annotation=Name(id='str', ctx=Load(), lineno=327,
      col_offset=40, end_lineno=327, end_col_offset=43), lineno=327, col_offset=28,
      end_lineno=327, end_col_offset=43)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='',
      lineno=327, col_offset=44, end_lineno=327, end_col_offset=46)]), body=[Expr(value=Constant(value='\n    Writes
      the default model config to a file in YAML format.\n    ', lineno=328, col_offset=4,
      end_lineno=330, end_col_offset=7), lineno=328, col_offset=4, end_lineno=330,
      end_col_offset=7), Assign(targets=[Name(id='model_config', ctx=Store(), lineno=331,
      col_offset=4, end_lineno=331, end_col_offset=16)], value=Call(func=Name(id='get_default_model_config',
      ctx=Load(), lineno=331, col_offset=19, end_lineno=331, end_col_offset=43), args=[],
      keywords=[], lineno=331, col_offset=19, end_lineno=331, end_col_offset=45),
      lineno=331, col_offset=4, end_lineno=331, end_col_offset=45), If(test=BoolOp(op=Or(),
      values=[UnaryOp(op=Not(), operand=Name(id='output_dir', ctx=Load(), lineno=332,
      col_offset=11, end_lineno=332, end_col_offset=21), lineno=332, col_offset=7,
      end_lineno=332, end_col_offset=21), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id='Path',
      ctx=Load(), lineno=332, col_offset=29, end_lineno=332, end_col_offset=33), args=[Name(id='output_dir',
      ctx=Load(), lineno=332, col_offset=34, end_lineno=332, end_col_offset=44)],
      keywords=[], lineno=332, col_offset=29, end_lineno=332, end_col_offset=45),
      attr='is_dir', ctx=Load(), lineno=332, col_offset=29, end_lineno=332, end_col_offset=52),
      args=[], keywords=[], lineno=332, col_offset=29, end_lineno=332, end_col_offset=54),
      lineno=332, col_offset=25, end_lineno=332, end_col_offset=54)], lineno=332,
      col_offset=7, end_lineno=332, end_col_offset=54), body=[Assign(targets=[Name(id='output_dir',
      ctx=Store(), lineno=333, col_offset=8, end_lineno=333, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id='os', ctx=Load(), lineno=333, col_offset=21,
      end_lineno=333, end_col_offset=23), attr='getcwd', ctx=Load(), lineno=333, col_offset=21,
      end_lineno=333, end_col_offset=30), args=[], keywords=[], lineno=333, col_offset=21,
      end_lineno=333, end_col_offset=32), lineno=333, col_offset=8, end_lineno=333,
      end_col_offset=32)], orelse=[], lineno=332, col_offset=4, end_lineno=333, end_col_offset=32),
      With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load(), lineno=334,
      col_offset=9, end_lineno=334, end_col_offset=13), args=[Call(func=Attribute(value=Attribute(value=Name(id='os',
      ctx=Load(), lineno=334, col_offset=14, end_lineno=334, end_col_offset=16), attr='path',
      ctx=Load(), lineno=334, col_offset=14, end_lineno=334, end_col_offset=21), attr='join',
      ctx=Load(), lineno=334, col_offset=14, end_lineno=334, end_col_offset=26), args=[Name(id='output_dir',
      ctx=Load(), lineno=334, col_offset=27, end_lineno=334, end_col_offset=37), Name(id='MODEL_CONFIG_FILE',
      ctx=Load(), lineno=334, col_offset=39, end_lineno=334, end_col_offset=56)],
      keywords=[], lineno=334, col_offset=14, end_lineno=334, end_col_offset=57),
      Constant(value='w', lineno=334, col_offset=59, end_lineno=334, end_col_offset=62)],
      keywords=[], lineno=334, col_offset=9, end_lineno=334, end_col_offset=63), optional_vars=Name(id='file',
      ctx=Store(), lineno=334, col_offset=67, end_lineno=334, end_col_offset=71))],
      body=[Expr(value=Call(func=Attribute(value=Name(id='yaml', ctx=Load(), lineno=335,
      col_offset=8, end_lineno=335, end_col_offset=12), attr='dump', ctx=Load(), lineno=335,
      col_offset=8, end_lineno=335, end_col_offset=17), args=[Name(id='model_config',
      ctx=Load(), lineno=335, col_offset=18, end_lineno=335, end_col_offset=30), Name(id='file',
      ctx=Load(), lineno=335, col_offset=32, end_lineno=335, end_col_offset=36)],
      keywords=[], lineno=335, col_offset=8, end_lineno=335, end_col_offset=37), lineno=335,
      col_offset=8, end_lineno=335, end_col_offset=37)], lineno=334, col_offset=4,
      end_lineno=335, end_col_offset=37)], decorator_list=[], returns=Constant(value=None,
      lineno=327, col_offset=51, end_lineno=327, end_col_offset=55), lineno=327, col_offset=0,
      end_lineno=335, end_col_offset=37)
    function_docstring: Writes the default model config to a file in YAML format.
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns: []
    function_calls:
    - Path
    - os.path.join
    - get_default_model_config
    - os.getcwd
    - yaml.dump
    - Path(output_dir).is_dir
    - open
    function_variables:
    - output_dir
    - model_config
    function_decorators: []
    function_annotations: []
    function_properties: []
classes: {}
