file_info:
  file_code: "import os\nimport json\nimport logging\nimport yaml\nimport importlib\n\
    from typing import Dict, List \nfrom pathlib import Path\n\n# Setting up a basic\
    \ logger\nlogging.basicConfig(level=logging.INFO)\n\nQUESTIONS_FILE = 'py2dataset_questions.json'\n\
    MODEL_CONFIG_FILE = 'py2dataset_model_config.yaml'\nOUTPUT_DIR = 'datasets'\n\n\
    \ndef get_default_questions() -> List[Dict]:\n    \"\"\"Returns default question\
    \ list\"\"\"\n    questions = [\n        {\n            \"id\": \"file_dependencies\"\
    ,\n            \"text\": \"Dependencies of file: ({filename})?\",\n          \
    \  \"type\": \"file\"\n        },\n        {\n            \"id\": \"internal_code_graph\"\
    ,\n            \"text\": \"Structural graph of the relationships between the functions\
    \ and classes defined in file: ({filename})?\",\n            \"type\": \"file\"\
    \n        },\n        {\n            \"id\": \"entire_code_graph\",\n        \
    \    \"text\": \"Structural graph of the relationships between the functions and\
    \ classes defined and used in file: ({filename})?\",\n            \"type\": \"\
    file\"\n        },\n        {\n            \"id\": \"file_functions\",\n     \
    \       \"text\": \"Funtions in file: ({filename})?\",\n            \"type\":\
    \ \"file\"\n        },      \n        {\n            \"id\": \"file_classes\"\
    ,\n            \"text\": \"Classes in file: ({filename})?\",\n            \"type\"\
    : \"file\"\n        },\n        {\n            \"id\": \"file_control_flow\",\n\
    \            \"text\": \"Control Flow in file: ({filename})?\",\n            \"\
    type\": \"file\"\n        },\n        {\n            \"id\": \"function_inputs\"\
    ,\n            \"text\": \"Inputs to function: ({function_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"function\"\n        },\n        {\n            \"id\"\
    : \"function_docstring\",\n            \"text\": \"Docstring of function: ({function_name})\
    \ in file: ({filename})?\",\n            \"type\": \"function\"\n        },\n\
    \        {\n            \"id\": \"function_calls\",\n            \"text\": \"\
    Calls in function: ({function_name}) in file: ({filename})?\",\n            \"\
    type\": \"function\"\n        },\n        {\n            \"id\": \"function_variables\"\
    ,\n            \"text\": \"Variables in function: ({function_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"function\"\n        }, \n        {\n            \"\
    id\": \"function_returns\",\n            \"text\": \"Returns from function: ({function_name})\
    \ in file: ({filename})?\",\n            \"type\": \"function\"\n        },\n\
    \        {\n            \"id\": \"class_methods\",\n            \"text\": \"Methods\
    \ in class: ({class_name}) in file: ({filename})?\",\n            \"type\": \"\
    class\"\n        },\n        {\n            \"id\": \"class_docstring\",\n   \
    \         \"text\": \"Docstring of class: ({class_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"class\"\n        },\n        {\n            \"id\"\
    : \"class_attributes\",\n            \"text\": \"Attributes of class: ({class_name})\
    \ in file: ({filename})?\",\n            \"type\": \"class\"\n        },\n   \
    \     {\n            \"id\": \"class_variables\",\n            \"text\": \"Variables\
    \ in class: ({class_name}) in file: ({filename})?\",\n            \"type\": \"\
    class\"\n        },\n        {\n            \"id\": \"class_inheritance\",\n \
    \           \"text\": \"Inheritance of class: ({class_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"class\"\n        },\n        {\n            \"id\"\
    : \"method_inputs\",\n            \"text\": \"Inputs to method: ({method_name})\
    \ in class: ({class_name}) in file: ({filename})?\",\n            \"type\": \"\
    method\"\n        },\n        {\n            \"id\": \"method_docstring\",\n \
    \           \"text\": \"Docstring of method: ({method_name}) in class: ({class_name})\
    \ in file: ({filename})?\",\n            \"type\": \"method\"\n        },\n  \
    \      {\n            \"id\": \"method_calls\",\n            \"text\": \"Calls\
    \ in method: ({method_name}) in class: ({class_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"method\"\n        },\n        {\n            \"id\"\
    : \"method_returns\",\n            \"text\": \"Returns from method: ({method_name})\
    \ in class: ({class_name}) in file: ({filename})?\",\n            \"type\": \"\
    method\"\n        },\n        {   \n            \"id\": \"file_purpose\",\n  \
    \          \"text\": \"Purpose of file: ({filename})?\",\n            \"type\"\
    : \"file\"\n        },\n        {\n            \"id\": \"function_purpose\",\n\
    \            \"text\": \"Purpose of function: ({function_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"function\"\n        },\n        {\n            \"id\"\
    : \"class_purpose\",\n            \"text\": \"Purpose of class: ({class_name})\
    \ in file: ({filename})?\",\n            \"type\": \"class\"\n        },\n   \
    \     {\n            \"id\": \"method_purpose\",\n            \"text\": \"Purpose\
    \ of method: ({method_name}) in class: ({class_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"method\"\n        },\n        {\n            \"id\"\
    : \"function_variable_purpose\",\n            \"text\": \"Purpose of variable:\
    \ ({function_variable}) in function: ({function_name}) in file: ({filename})?\"\
    ,\n            \"type\": \"function\"\n        },       \n        {\n        \
    \    \"id\": \"class_variable_purpose\",\n            \"text\": \"Purpose of variable:\
    \ ({class_variable}) in class: ({class_name}) in file: ({filename})?\",\n    \
    \        \"type\": \"class\"\n        }\n    ]\n    return questions\n\n\ndef\
    \ get_default_model_config() -> Dict:\n    \"\"\"Returns default model config\
    \ dict\"\"\"\n    model_config = {\n        \"prompt_template\": \"Provide a concise\
    \ and comprehensive Response to the Instruction considering the given Context\
    \ and include your reasoning. \\n### Context:\\n{context}\\n### Instruction:\\\
    n{query}\\n### Response:\",\n        \"inference_model\": {\n            \"model_import_path\"\
    : \"ctransformers.AutoModelForCausalLM\",\n            \"model_params\": {\n \
    \               \"model_path\": \"TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML\"\
    ,  \n                \"model_type\": \"starcoder\",\n                \"local_files_only\"\
    : False,\n                \"lib\": \"avx2\",\n                \"threads\": 30,\n\
    \                \"batch_size\": 32,\n                \"max_new_tokens\": 2048,\n\
    \                \"gpu_layers\": 24,\n                \"reset\": True\n      \
    \      }\n        }\n    }\n    return model_config\n\n\ndef get_output_dir(output_dir:\
    \ str='') -> str:\n    \"\"\"Returns the appropriate output directory.\"\"\" \
    \  \n    if output_dir: # Check if the directory exists and create it if not\n\
    \        output_dir = os.path.abspath(output_dir)\n    else: # Default to OUTPUT_DIR\
    \ at the current working directory\n        output_dir = os.path.join(os.getcwd(),\
    \ OUTPUT_DIR)\n    if not Path(output_dir).is_dir(): #create output_dir if it\
    \ doesn't exist\n        os.makedirs(output_dir, exist_ok=True)\n    logging.info(f'Using\
    \ output directory: {output_dir}')\n    return output_dir\n\n\ndef get_questions(questions_pathname:\
    \ str) -> List[Dict]:\n    \"\"\"Get questions from file or default\"\"\"\n  \
    \  # check if questions_pathname is an empty string\n    if not questions_pathname:\n\
    \        questions_pathname = os.path.join(os.getcwd(), QUESTIONS_FILE)    \n\n\
    \    # verify if questions_pathname is a valid file\n    if not Path(questions_pathname).is_file():\n\
    \        logging.info(f'Questions file {questions_pathname} not found. Using default\
    \ questions')\n        questions = get_default_questions()\n        return questions\n\
    \n    # verify if questions_pathname is a valid json questions file\n    try:\n\
    \        with open(questions_pathname, 'r') as f:\n            questions = json.load(f)\n\
    \    except:\n        logging.info(f'Questions file not valid: {questions_pathname}\
    \ Using default questions')\n        questions = get_default_questions()\n   \
    \     return questions  \n\n    # check for 'id', 'text', and 'type' keys in each\
    \ question\n    for question in questions:\n        if not all(key in question\
    \ for key in ['id', 'text', 'type']):\n            logging.info(f'Questions file\
    \ not valid: {questions_pathname} Using default questions')\n            questions\
    \ = get_default_questions()\n            return questions \n\n    logging.info(f'Using\
    \ questions from file: {questions_pathname}')\n    return questions\n\n\ndef instantiate_model(model_config:\
    \ Dict) -> object:\n    \"\"\"\n    Imports and instantiates a model based on\
    \ the provided configuration.\n    Args:\n        model_config (dict): A dictionary\
    \ containing the configuration for the\n            model. It should include the\
    \ import path for the model class and\n            parameters for instantiation.\n\
    \        user_config (dict): A dictionary containing user-provided configurations.\n\
    \            If provided, these configurations will override the defaults.\n \
    \   Returns:\n        object: An instance of the specified model class, or None\
    \ if there was\n            an error.\n    \"\"\"\n    model = None\n    try:\n\
    \        module_name, class_name = model_config['model_import_path'].rsplit('.',\
    \ 1)\n        module = importlib.import_module(module_name)\n    except ImportError\
    \ as e:\n        print(f\"Failed to import module {module_name}. Error: {e}\"\
    )\n        return model\n    try:\n        ModelClass = getattr(module, class_name)\n\
    \    except AttributeError as e:\n        print(f\"Module {module_name} does not\
    \ have a class named {class_name}. Error: {e}\")\n        return model\n    \n\
    \    model_params = model_config['model_params']\n    try:\n        model = ModelClass.from_pretrained(model_params.pop('model_path'),\
    \ **model_params)\n    except Exception as e:\n        print(f\"Failed to instantiate\
    \ the model with the provided parameters. Error: {e}\")\n        return model\n\
    \n    return model\n\n\ndef get_model(model_config_pathname: str):\n    \"\"\"\
    \n    Agrs:\n        model_config_pathname (str): The pathname of the model config\
    \ file\n    Returns:\n        Tuple[object, str]: The instantiated model and prompt\
    \ template \n    \"\"\"\n    # check if model_config_pathname is an empty string\n\
    \    if not model_config_pathname:\n        model_config_pathname = os.path.join(os.getcwd(),\
    \ MODEL_CONFIG_FILE)\n    \n    # verify if model_config_pathname is a valid file\n\
    \    if not Path(model_config_pathname).is_file():\n        logging.info(f'Model\
    \ config file not found: {model_config_pathname} Using default model config')\n\
    \        model_config = get_default_model_config()\n        return instantiate_model(model_config['inference_model']),\
    \ model_config['prompt_template']\n\n     # verify if model_config_pathname is\
    \ a valid json model config file\n    try:\n        # Load model configuration\
    \ from the YAML file\n        with open(model_config_pathname, 'r') as config_file:\n\
    \            model_config = yaml.safe_load(config_file)\n    except:\n       \
    \ logging.info(f'Model config file not valid: {model_config_pathname} Using default\
    \ model config')\n        model_config = get_default_model_config()\n        return\
    \ instantiate_model(model_config['inference_model']), model_config['prompt_template']\n\
    \n    logging.info(f'Using model config from file: {model_config_pathname}')\n\
    \    return instantiate_model(model_config['inference_model']), model_config['prompt_template']\n\
    \n\ndef write_questions_file(output_dir: str='') -> None:\n    \"\"\"\n    Writes\
    \ the default questions to a file in JSON format.\n    \"\"\"\n    questions =\
    \ get_default_questions()\n    if not output_dir or not Path(output_dir).is_dir():\n\
    \        output_dir = os.getcwd()\n    with open(os.path.join(output_dir, QUESTIONS_FILE),\
    \ 'w') as file:\n        json.dump(questions, file, indent=4)\n\n\ndef write_model_config_file(output_dir:\
    \ str='') -> None:\n    \"\"\"\n    Writes the default model config to a file\
    \ in YAML format.\n    \"\"\"\n    model_config = get_default_model_config()\n\
    \    if not output_dir or not Path(output_dir).is_dir():\n        output_dir =\
    \ os.getcwd()\n    with open(os.path.join(output_dir, MODEL_CONFIG_FILE), 'w')\
    \ as file:\n        yaml.dump(model_config, file)\n"
  file_ast: 'Module(body=[Import(names=[alias(name=''os'')]), Import(names=[alias(name=''json'')]),
    Import(names=[alias(name=''logging'')]), Import(names=[alias(name=''yaml'')]),
    Import(names=[alias(name=''importlib'')]), ImportFrom(module=''typing'', names=[alias(name=''Dict''),
    alias(name=''List'')], level=0), ImportFrom(module=''pathlib'', names=[alias(name=''Path'')],
    level=0), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''basicConfig'', ctx=Load()), args=[], keywords=[keyword(arg=''level'', value=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''INFO'', ctx=Load()))])), Assign(targets=[Name(id=''QUESTIONS_FILE'',
    ctx=Store())], value=Constant(value=''py2dataset_questions.json'')), Assign(targets=[Name(id=''MODEL_CONFIG_FILE'',
    ctx=Store())], value=Constant(value=''py2dataset_model_config.yaml'')), Assign(targets=[Name(id=''OUTPUT_DIR'',
    ctx=Store())], value=Constant(value=''datasets'')), FunctionDef(name=''get_default_questions'',
    args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''Returns default question list'')), Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=List(elts=[Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''file_dependencies''), Constant(value=''Dependencies
    of file: ({filename})?''), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''internal_code_graph''),
    Constant(value=''Structural graph of the relationships between the functions and
    classes defined in file: ({filename})?''), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''entire_code_graph''),
    Constant(value=''Structural graph of the relationships between the functions and
    classes defined and used in file: ({filename})?''), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''file_functions''), Constant(value=''Funtions in file:
    ({filename})?''), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''file_classes''),
    Constant(value=''Classes in file: ({filename})?''), Constant(value=''file'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''file_control_flow''), Constant(value=''Control Flow in
    file: ({filename})?''), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''function_inputs''),
    Constant(value=''Inputs to function: ({function_name}) in file: ({filename})?''),
    Constant(value=''function'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''function_docstring''), Constant(value=''Docstring
    of function: ({function_name}) in file: ({filename})?''), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_calls''), Constant(value=''Calls in function:
    ({function_name}) in file: ({filename})?''), Constant(value=''function'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''function_variables''),
    Constant(value=''Variables in function: ({function_name}) in file: ({filename})?''),
    Constant(value=''function'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''function_returns''), Constant(value=''Returns
    from function: ({function_name}) in file: ({filename})?''), Constant(value=''function'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''class_methods''), Constant(value=''Methods in class:
    ({class_name}) in file: ({filename})?''), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_docstring''),
    Constant(value=''Docstring of class: ({class_name}) in file: ({filename})?''),
    Constant(value=''class'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''class_attributes''), Constant(value=''Attributes
    of class: ({class_name}) in file: ({filename})?''), Constant(value=''class'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''class_variables''), Constant(value=''Variables in class:
    ({class_name}) in file: ({filename})?''), Constant(value=''class'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''class_inheritance''),
    Constant(value=''Inheritance of class: ({class_name}) in file: ({filename})?''),
    Constant(value=''class'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''method_inputs''), Constant(value=''Inputs
    to method: ({method_name}) in class: ({class_name}) in file: ({filename})?''),
    Constant(value=''method'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''method_docstring''), Constant(value=''Docstring
    of method: ({method_name}) in class: ({class_name}) in file: ({filename})?''),
    Constant(value=''method'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''method_calls''), Constant(value=''Calls
    in method: ({method_name}) in class: ({class_name}) in file: ({filename})?''),
    Constant(value=''method'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''method_returns''), Constant(value=''Returns
    from method: ({method_name}) in class: ({class_name}) in file: ({filename})?''),
    Constant(value=''method'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''file_purpose''), Constant(value=''Purpose
    of file: ({filename})?''), Constant(value=''file'')]), Dict(keys=[Constant(value=''id''),
    Constant(value=''text''), Constant(value=''type'')], values=[Constant(value=''function_purpose''),
    Constant(value=''Purpose of function: ({function_name}) in file: ({filename})?''),
    Constant(value=''function'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''class_purpose''), Constant(value=''Purpose
    of class: ({class_name}) in file: ({filename})?''), Constant(value=''class'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''method_purpose''), Constant(value=''Purpose of method:
    ({method_name}) in class: ({class_name}) in file: ({filename})?''), Constant(value=''method'')]),
    Dict(keys=[Constant(value=''id''), Constant(value=''text''), Constant(value=''type'')],
    values=[Constant(value=''function_variable_purpose''), Constant(value=''Purpose
    of variable: ({function_variable}) in function: ({function_name}) in file: ({filename})?''),
    Constant(value=''function'')]), Dict(keys=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], values=[Constant(value=''class_variable_purpose''),
    Constant(value=''Purpose of variable: ({class_variable}) in class: ({class_name})
    in file: ({filename})?''), Constant(value=''class'')])], ctx=Load())), Return(value=Name(id=''questions'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''get_default_model_config'',
    args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''Returns default model config dict'')), Assign(targets=[Name(id=''model_config'',
    ctx=Store())], value=Dict(keys=[Constant(value=''prompt_template''), Constant(value=''inference_model'')],
    values=[Constant(value=''Provide a concise and comprehensive Response to the Instruction
    considering the given Context and include your reasoning. \n### Context:\n{context}\n###
    Instruction:\n{query}\n### Response:''), Dict(keys=[Constant(value=''model_import_path''),
    Constant(value=''model_params'')], values=[Constant(value=''ctransformers.AutoModelForCausalLM''),
    Dict(keys=[Constant(value=''model_path''), Constant(value=''model_type''), Constant(value=''local_files_only''),
    Constant(value=''lib''), Constant(value=''threads''), Constant(value=''batch_size''),
    Constant(value=''max_new_tokens''), Constant(value=''gpu_layers''), Constant(value=''reset'')],
    values=[Constant(value=''TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML''), Constant(value=''starcoder''),
    Constant(value=False), Constant(value=''avx2''), Constant(value=30), Constant(value=32),
    Constant(value=2048), Constant(value=24), Constant(value=True)])])])), Return(value=Name(id=''model_config'',
    ctx=Load()))], decorator_list=[], returns=Name(id=''Dict'', ctx=Load())), FunctionDef(name=''get_output_dir'',
    args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''Returns the appropriate output directory.'')),
    If(test=Name(id=''output_dir'', ctx=Load()), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''abspath'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''OUTPUT_DIR'',
    ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[]), attr=''is_dir'',
    ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''makedirs'', ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())],
    keywords=[keyword(arg=''exist_ok'', value=Constant(value=True))]))], orelse=[]),
    Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''info'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using output directory:
    ''), FormattedValue(value=Name(id=''output_dir'', ctx=Load()), conversion=-1)])],
    keywords=[])), Return(value=Name(id=''output_dir'', ctx=Load()))], decorator_list=[],
    returns=Name(id=''str'', ctx=Load())), FunctionDef(name=''get_questions'', args=arguments(posonlyargs=[],
    args=[arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''Get
    questions from file or default'')), If(test=UnaryOp(op=Not(), operand=Name(id=''questions_pathname'',
    ctx=Load())), body=[Assign(targets=[Name(id=''questions_pathname'', ctx=Store())],
    value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()), attr=''path'',
    ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''QUESTIONS_FILE'',
    ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''questions_pathname'', ctx=Load())], keywords=[]),
    attr=''is_file'', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Questions
    file ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()), conversion=-1),
    Constant(value='' not found. Using default questions'')])], keywords=[])), Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=Call(func=Name(id=''get_default_questions'', ctx=Load()),
    args=[], keywords=[])), Return(value=Name(id=''questions'', ctx=Load()))], orelse=[]),
    Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'', ctx=Load()),
    args=[Name(id=''questions_pathname'', ctx=Load()), Constant(value=''r'')], keywords=[]),
    optional_vars=Name(id=''f'', ctx=Store()))], body=[Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''json'', ctx=Load()),
    attr=''load'', ctx=Load()), args=[Name(id=''f'', ctx=Load())], keywords=[]))])],
    handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Questions
    file not valid: ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()),
    conversion=-1), Constant(value='' Using default questions'')])], keywords=[])),
    Assign(targets=[Name(id=''questions'', ctx=Store())], value=Call(func=Name(id=''get_default_questions'',
    ctx=Load()), args=[], keywords=[])), Return(value=Name(id=''questions'', ctx=Load()))])],
    orelse=[], finalbody=[]), For(target=Name(id=''question'', ctx=Store()), iter=Name(id=''questions'',
    ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id=''all'',
    ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id=''key'', ctx=Load()),
    ops=[In()], comparators=[Name(id=''question'', ctx=Load())]), generators=[comprehension(target=Name(id=''key'',
    ctx=Store()), iter=List(elts=[Constant(value=''id''), Constant(value=''text''),
    Constant(value=''type'')], ctx=Load()), ifs=[], is_async=0)])], keywords=[])),
    body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''info'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Questions file not valid:
    ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()), conversion=-1),
    Constant(value='' Using default questions'')])], keywords=[])), Assign(targets=[Name(id=''questions'',
    ctx=Store())], value=Call(func=Name(id=''get_default_questions'', ctx=Load()),
    args=[], keywords=[])), Return(value=Name(id=''questions'', ctx=Load()))], orelse=[])],
    orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using questions
    from file: ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()),
    conversion=-1)])], keywords=[])), Return(value=Name(id=''questions'', ctx=Load()))],
    decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''Dict'',
    ctx=Load()), ctx=Load())), FunctionDef(name=''instantiate_model'', args=arguments(posonlyargs=[],
    args=[arg(arg=''model_config'', annotation=Name(id=''Dict'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Imports
    and instantiates a model based on the provided configuration.\n    Args:\n        model_config
    (dict): A dictionary containing the configuration for the\n            model.
    It should include the import path for the model class and\n            parameters
    for instantiation.\n        user_config (dict): A dictionary containing user-provided
    configurations.\n            If provided, these configurations will override the
    defaults.\n    Returns:\n        object: An instance of the specified model class,
    or None if there was\n            an error.\n    '')), Assign(targets=[Name(id=''model'',
    ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
    ctx=Store()), Name(id=''class_name'', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_import_path''), ctx=Load()), attr=''rsplit'',
    ctx=Load()), args=[Constant(value=''.''), Constant(value=1)], keywords=[])), Assign(targets=[Name(id=''module'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''importlib'', ctx=Load()),
    attr=''import_module'', ctx=Load()), args=[Name(id=''module_name'', ctx=Load())],
    keywords=[]))], handlers=[ExceptHandler(type=Name(id=''ImportError'', ctx=Load()),
    name=''e'', body=[Expr(value=Call(func=Name(id=''print'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed
    to import module ''), FormattedValue(value=Name(id=''module_name'', ctx=Load()),
    conversion=-1), Constant(value=''. Error: ''), FormattedValue(value=Name(id=''e'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id=''model'',
    ctx=Load()))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id=''ModelClass'',
    ctx=Store())], value=Call(func=Name(id=''getattr'', ctx=Load()), args=[Name(id=''module'',
    ctx=Load()), Name(id=''class_name'', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id=''AttributeError'',
    ctx=Load()), name=''e'', body=[Expr(value=Call(func=Name(id=''print'', ctx=Load()),
    args=[JoinedStr(values=[Constant(value=''Module ''), FormattedValue(value=Name(id=''module_name'',
    ctx=Load()), conversion=-1), Constant(value='' does not have a class named ''),
    FormattedValue(value=Name(id=''class_name'', ctx=Load()), conversion=-1), Constant(value=''.
    Error: ''), FormattedValue(value=Name(id=''e'', ctx=Load()), conversion=-1)])],
    keywords=[])), Return(value=Name(id=''model'', ctx=Load()))])], orelse=[], finalbody=[]),
    Assign(targets=[Name(id=''model_params'', ctx=Store())], value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_params''), ctx=Load())), Try(body=[Assign(targets=[Name(id=''model'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''ModelClass'', ctx=Load()),
    attr=''from_pretrained'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''model_params'',
    ctx=Load()), attr=''pop'', ctx=Load()), args=[Constant(value=''model_path'')],
    keywords=[])], keywords=[keyword(value=Name(id=''model_params'', ctx=Load()))]))],
    handlers=[ExceptHandler(type=Name(id=''Exception'', ctx=Load()), name=''e'', body=[Expr(value=Call(func=Name(id=''print'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed to instantiate the
    model with the provided parameters. Error: ''), FormattedValue(value=Name(id=''e'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id=''model'',
    ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id=''model'', ctx=Load()))],
    decorator_list=[], returns=Name(id=''object'', ctx=Load())), FunctionDef(name=''get_model'',
    args=arguments(posonlyargs=[], args=[arg(arg=''model_config_pathname'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Agrs:\n        model_config_pathname
    (str): The pathname of the model config file\n    Returns:\n        Tuple[object,
    str]: The instantiated model and prompt template \n    '')), If(test=UnaryOp(op=Not(),
    operand=Name(id=''model_config_pathname'', ctx=Load())), body=[Assign(targets=[Name(id=''model_config_pathname'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''getcwd'', ctx=Load()), args=[], keywords=[]), Name(id=''MODEL_CONFIG_FILE'',
    ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''model_config_pathname'', ctx=Load())], keywords=[]),
    attr=''is_file'', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Model
    config file not found: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1), Constant(value='' Using default model config'')])],
    keywords=[])), Assign(targets=[Name(id=''model_config'', ctx=Store())], value=Call(func=Name(id=''get_default_model_config'',
    ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
    ctx=Load()), args=[Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''inference_model''),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''model_config'', ctx=Load()),
    slice=Constant(value=''prompt_template''), ctx=Load())], ctx=Load()))], orelse=[]),
    Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'', ctx=Load()),
    args=[Name(id=''model_config_pathname'', ctx=Load()), Constant(value=''r'')],
    keywords=[]), optional_vars=Name(id=''config_file'', ctx=Store()))], body=[Assign(targets=[Name(id=''model_config'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load()),
    attr=''safe_load'', ctx=Load()), args=[Name(id=''config_file'', ctx=Load())],
    keywords=[]))])], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Model
    config file not valid: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1), Constant(value='' Using default model config'')])],
    keywords=[])), Assign(targets=[Name(id=''model_config'', ctx=Store())], value=Call(func=Name(id=''get_default_model_config'',
    ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
    ctx=Load()), args=[Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''inference_model''),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''model_config'', ctx=Load()),
    slice=Constant(value=''prompt_template''), ctx=Load())], ctx=Load()))])], orelse=[],
    finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Using model
    config from file: ''), FormattedValue(value=Name(id=''model_config_pathname'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
    ctx=Load()), args=[Subscript(value=Name(id=''model_config'', ctx=Load()), slice=Constant(value=''inference_model''),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''model_config'', ctx=Load()),
    slice=Constant(value=''prompt_template''), ctx=Load())], ctx=Load()))], decorator_list=[]),
    FunctionDef(name=''write_questions_file'', args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'',
    annotation=Name(id=''str'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''\n    Writes the default questions to a file
    in JSON format.\n    '')), Assign(targets=[Name(id=''questions'', ctx=Store())],
    value=Call(func=Name(id=''get_default_questions'', ctx=Load()), args=[], keywords=[])),
    If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id=''output_dir'',
    ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[]), attr=''is_dir'',
    ctx=Load()), args=[], keywords=[]))]), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''os'', ctx=Load()), attr=''getcwd'',
    ctx=Load()), args=[], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load()), Name(id=''QUESTIONS_FILE'', ctx=Load())], keywords=[]), Constant(value=''w'')],
    keywords=[]), optional_vars=Name(id=''file'', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''questions'', ctx=Load()),
    Name(id=''file'', ctx=Load())], keywords=[keyword(arg=''indent'', value=Constant(value=4))]))])],
    decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''write_model_config_file'',
    args=arguments(posonlyargs=[], args=[arg(arg=''output_dir'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''')]),
    body=[Expr(value=Constant(value=''\n    Writes the default model config to a file
    in YAML format.\n    '')), Assign(targets=[Name(id=''model_config'', ctx=Store())],
    value=Call(func=Name(id=''get_default_model_config'', ctx=Load()), args=[], keywords=[])),
    If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id=''output_dir'',
    ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[]), attr=''is_dir'',
    ctx=Load()), args=[], keywords=[]))]), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''os'', ctx=Load()), attr=''getcwd'',
    ctx=Load()), args=[], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''path'', ctx=Load()), attr=''join'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load()), Name(id=''MODEL_CONFIG_FILE'', ctx=Load())], keywords=[]), Constant(value=''w'')],
    keywords=[]), optional_vars=Name(id=''file'', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id=''yaml'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''model_config'', ctx=Load()),
    Name(id=''file'', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))],
    type_ignores=[])'
  file_dependencies:
  - importlib
  - os
  - logging
  - pathlib
  - typing
  - yaml
  - json
  file_functions:
  - get_default_questions
  - get_default_model_config
  - get_output_dir
  - get_questions
  - instantiate_model
  - get_model
  - write_questions_file
  - write_model_config_file
  file_classes: []
  file_control_flow: module -> def get_default_questions -> def get_default_model_config
    -> def get_output_dir -> if -> if -> def get_questions -> if -> if -> try -> with
    -> except -> for -> if -> def instantiate_model -> try -> except -> try -> except
    -> try -> except -> def get_model -> if -> if -> try -> with -> except -> def
    write_questions_file -> if -> with -> def write_model_config_file -> if -> with
  file_summary: '{dependencies: [importlib, os, logging, pathlib, typing, yaml, json],
    function_defs: [{get_default_questions: {inputs: [], calls: [], returns: [questions]}},
    {get_default_model_config: {inputs: [], calls: [], returns: [model_config]}},
    {get_output_dir: {inputs: [output_dir], calls: [Path, logging.info, os.path.abspath,
    os.path.join, os.getcwd, os.makedirs, Path(output_dir).is_dir], returns: [output_dir]}},
    {get_questions: {inputs: [questions_pathname], calls: [Path, logging.info, open,
    os.path.join, get_default_questions, json.load, all, os.getcwd, Path(questions_pathname).is_file],
    returns: [questions, questions, questions, questions]}}, {instantiate_model: {inputs:
    [model_config], calls: [print, importlib.import_module, model_params.pop, ModelClass.from_pretrained,
    model_config[''model_import_path''].rsplit, getattr], returns: [model, model,
    model, model]}}, {get_model: {inputs: [model_config_pathname], calls: [Path(model_config_pathname).is_file,
    Path, logging.info, instantiate_model, open, os.path.join, os.getcwd, get_default_model_config,
    yaml.safe_load], returns: [(instantiate_model(model_config[''inference_model'']),
    model_config[''prompt_template'']), (instantiate_model(model_config[''inference_model'']),
    model_config[''prompt_template'']), (instantiate_model(model_config[''inference_model'']),
    model_config[''prompt_template''])]}}, {write_questions_file: {inputs: [output_dir],
    calls: [Path, open, get_default_questions, os.path.join, os.getcwd, json.dump,
    Path(output_dir).is_dir], returns: []}}, {write_model_config_file: {inputs: [output_dir],
    calls: [Path, yaml.dump, open, os.path.join, os.getcwd, get_default_model_config,
    Path(output_dir).is_dir], returns: []}}], class_defs: []}'
  internal_code_graph:
    nodes:
    - get_default_questions
    - get_default_model_config
    - get_output_dir
    - get_questions
    - instantiate_model
    - get_model
    - write_questions_file
    - write_model_config_file
    edges:
    - source: get_questions
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: get_model
      target: instantiate_model
      target_inputs:
      - model_config
      target_returns:
      - model
    - source: get_model
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: write_questions_file
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: write_model_config_file
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
  entire_code_graph:
    nodes:
    - get_default_questions
    - get_default_model_config
    - get_output_dir
    - get_questions
    - instantiate_model
    - get_model
    - write_questions_file
    - write_model_config_file
    - Path
    - logging.info
    - os.path.abspath
    - os.path.join
    - os.getcwd
    - os.makedirs
    - Path(output_dir).is_dir
    - open
    - json.load
    - all
    - Path(questions_pathname).is_file
    - print
    - importlib.import_module
    - model_params.pop
    - ModelClass.from_pretrained
    - model_config['model_import_path'].rsplit
    - getattr
    - Path(model_config_pathname).is_file
    - yaml.safe_load
    - json.dump
    - yaml.dump
    edges:
    - source: get_output_dir
      target: Path
    - source: get_output_dir
      target: logging.info
    - source: get_output_dir
      target: os.path.abspath
    - source: get_output_dir
      target: os.path.join
    - source: get_output_dir
      target: os.getcwd
    - source: get_output_dir
      target: os.makedirs
    - source: get_output_dir
      target: Path(output_dir).is_dir
    - source: get_questions
      target: Path
    - source: get_questions
      target: logging.info
    - source: get_questions
      target: open
    - source: get_questions
      target: os.path.join
    - source: get_questions
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: get_questions
      target: json.load
    - source: get_questions
      target: all
    - source: get_questions
      target: os.getcwd
    - source: get_questions
      target: Path(questions_pathname).is_file
    - source: instantiate_model
      target: print
    - source: instantiate_model
      target: importlib.import_module
    - source: instantiate_model
      target: model_params.pop
    - source: instantiate_model
      target: ModelClass.from_pretrained
    - source: instantiate_model
      target: model_config['model_import_path'].rsplit
    - source: instantiate_model
      target: getattr
    - source: get_model
      target: Path(model_config_pathname).is_file
    - source: get_model
      target: Path
    - source: get_model
      target: logging.info
    - source: get_model
      target: instantiate_model
      target_inputs:
      - model_config
      target_returns:
      - model
    - source: get_model
      target: open
    - source: get_model
      target: os.path.join
    - source: get_model
      target: os.getcwd
    - source: get_model
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: get_model
      target: yaml.safe_load
    - source: write_questions_file
      target: Path
    - source: write_questions_file
      target: open
    - source: write_questions_file
      target: get_default_questions
      target_inputs: []
      target_returns:
      - questions
    - source: write_questions_file
      target: os.path.join
    - source: write_questions_file
      target: os.getcwd
    - source: write_questions_file
      target: json.dump
    - source: write_questions_file
      target: Path(output_dir).is_dir
    - source: write_model_config_file
      target: Path
    - source: write_model_config_file
      target: yaml.dump
    - source: write_model_config_file
      target: open
    - source: write_model_config_file
      target: os.path.join
    - source: write_model_config_file
      target: os.getcwd
    - source: write_model_config_file
      target: get_default_model_config
      target_inputs: []
      target_returns:
      - model_config
    - source: write_model_config_file
      target: Path(output_dir).is_dir
functions:
  get_default_questions:
    function_name: get_default_questions
    function_code: "def get_default_questions() -> List[Dict]:\n    \"\"\"Returns\
      \ default question list\"\"\"\n    questions = [{'id': 'file_dependencies',\
      \ 'text': 'Dependencies of file: ({filename})?', 'type': 'file'}, {'id': 'internal_code_graph',\
      \ 'text': 'Structural graph of the relationships between the functions and classes\
      \ defined in file: ({filename})?', 'type': 'file'}, {'id': 'entire_code_graph',\
      \ 'text': 'Structural graph of the relationships between the functions and classes\
      \ defined and used in file: ({filename})?', 'type': 'file'}, {'id': 'file_functions',\
      \ 'text': 'Funtions in file: ({filename})?', 'type': 'file'}, {'id': 'file_classes',\
      \ 'text': 'Classes in file: ({filename})?', 'type': 'file'}, {'id': 'file_control_flow',\
      \ 'text': 'Control Flow in file: ({filename})?', 'type': 'file'}, {'id': 'function_inputs',\
      \ 'text': 'Inputs to function: ({function_name}) in file: ({filename})?', 'type':\
      \ 'function'}, {'id': 'function_docstring', 'text': 'Docstring of function:\
      \ ({function_name}) in file: ({filename})?', 'type': 'function'}, {'id': 'function_calls',\
      \ 'text': 'Calls in function: ({function_name}) in file: ({filename})?', 'type':\
      \ 'function'}, {'id': 'function_variables', 'text': 'Variables in function:\
      \ ({function_name}) in file: ({filename})?', 'type': 'function'}, {'id': 'function_returns',\
      \ 'text': 'Returns from function: ({function_name}) in file: ({filename})?',\
      \ 'type': 'function'}, {'id': 'class_methods', 'text': 'Methods in class: ({class_name})\
      \ in file: ({filename})?', 'type': 'class'}, {'id': 'class_docstring', 'text':\
      \ 'Docstring of class: ({class_name}) in file: ({filename})?', 'type': 'class'},\
      \ {'id': 'class_attributes', 'text': 'Attributes of class: ({class_name}) in\
      \ file: ({filename})?', 'type': 'class'}, {'id': 'class_variables', 'text':\
      \ 'Variables in class: ({class_name}) in file: ({filename})?', 'type': 'class'},\
      \ {'id': 'class_inheritance', 'text': 'Inheritance of class: ({class_name})\
      \ in file: ({filename})?', 'type': 'class'}, {'id': 'method_inputs', 'text':\
      \ 'Inputs to method: ({method_name}) in class: ({class_name}) in file: ({filename})?',\
      \ 'type': 'method'}, {'id': 'method_docstring', 'text': 'Docstring of method:\
      \ ({method_name}) in class: ({class_name}) in file: ({filename})?', 'type':\
      \ 'method'}, {'id': 'method_calls', 'text': 'Calls in method: ({method_name})\
      \ in class: ({class_name}) in file: ({filename})?', 'type': 'method'}, {'id':\
      \ 'method_returns', 'text': 'Returns from method: ({method_name}) in class:\
      \ ({class_name}) in file: ({filename})?', 'type': 'method'}, {'id': 'file_purpose',\
      \ 'text': 'Purpose of file: ({filename})?', 'type': 'file'}, {'id': 'function_purpose',\
      \ 'text': 'Purpose of function: ({function_name}) in file: ({filename})?', 'type':\
      \ 'function'}, {'id': 'class_purpose', 'text': 'Purpose of class: ({class_name})\
      \ in file: ({filename})?', 'type': 'class'}, {'id': 'method_purpose', 'text':\
      \ 'Purpose of method: ({method_name}) in class: ({class_name}) in file: ({filename})?',\
      \ 'type': 'method'}, {'id': 'function_variable_purpose', 'text': 'Purpose of\
      \ variable: ({function_variable}) in function: ({function_name}) in file: ({filename})?',\
      \ 'type': 'function'}, {'id': 'class_variable_purpose', 'text': 'Purpose of\
      \ variable: ({class_variable}) in class: ({class_name}) in file: ({filename})?',\
      \ 'type': 'class'}]\n    return questions"
    function_ast: 'FunctionDef(name=''get_default_questions'', args=arguments(posonlyargs=[],
      args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''Returns
      default question list'', lineno=18, col_offset=4, end_lineno=18, end_col_offset=39),
      lineno=18, col_offset=4, end_lineno=18, end_col_offset=39), Assign(targets=[Name(id=''questions'',
      ctx=Store(), lineno=19, col_offset=4, end_lineno=19, end_col_offset=13)], value=List(elts=[Dict(keys=[Constant(value=''id'',
      lineno=21, col_offset=12, end_lineno=21, end_col_offset=16), Constant(value=''text'',
      lineno=22, col_offset=12, end_lineno=22, end_col_offset=18), Constant(value=''type'',
      lineno=23, col_offset=12, end_lineno=23, end_col_offset=18)], values=[Constant(value=''file_dependencies'',
      lineno=21, col_offset=18, end_lineno=21, end_col_offset=37), Constant(value=''Dependencies
      of file: ({filename})?'', lineno=22, col_offset=20, end_lineno=22, end_col_offset=57),
      Constant(value=''file'', lineno=23, col_offset=20, end_lineno=23, end_col_offset=26)],
      lineno=20, col_offset=8, end_lineno=24, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=26, col_offset=12, end_lineno=26, end_col_offset=16), Constant(value=''text'',
      lineno=27, col_offset=12, end_lineno=27, end_col_offset=18), Constant(value=''type'',
      lineno=28, col_offset=12, end_lineno=28, end_col_offset=18)], values=[Constant(value=''internal_code_graph'',
      lineno=26, col_offset=18, end_lineno=26, end_col_offset=39), Constant(value=''Structural
      graph of the relationships between the functions and classes defined in file:
      ({filename})?'', lineno=27, col_offset=20, end_lineno=27, end_col_offset=124),
      Constant(value=''file'', lineno=28, col_offset=20, end_lineno=28, end_col_offset=26)],
      lineno=25, col_offset=8, end_lineno=29, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=31, col_offset=12, end_lineno=31, end_col_offset=16), Constant(value=''text'',
      lineno=32, col_offset=12, end_lineno=32, end_col_offset=18), Constant(value=''type'',
      lineno=33, col_offset=12, end_lineno=33, end_col_offset=18)], values=[Constant(value=''entire_code_graph'',
      lineno=31, col_offset=18, end_lineno=31, end_col_offset=37), Constant(value=''Structural
      graph of the relationships between the functions and classes defined and used
      in file: ({filename})?'', lineno=32, col_offset=20, end_lineno=32, end_col_offset=133),
      Constant(value=''file'', lineno=33, col_offset=20, end_lineno=33, end_col_offset=26)],
      lineno=30, col_offset=8, end_lineno=34, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=36, col_offset=12, end_lineno=36, end_col_offset=16), Constant(value=''text'',
      lineno=37, col_offset=12, end_lineno=37, end_col_offset=18), Constant(value=''type'',
      lineno=38, col_offset=12, end_lineno=38, end_col_offset=18)], values=[Constant(value=''file_functions'',
      lineno=36, col_offset=18, end_lineno=36, end_col_offset=34), Constant(value=''Funtions
      in file: ({filename})?'', lineno=37, col_offset=20, end_lineno=37, end_col_offset=53),
      Constant(value=''file'', lineno=38, col_offset=20, end_lineno=38, end_col_offset=26)],
      lineno=35, col_offset=8, end_lineno=39, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=41, col_offset=12, end_lineno=41, end_col_offset=16), Constant(value=''text'',
      lineno=42, col_offset=12, end_lineno=42, end_col_offset=18), Constant(value=''type'',
      lineno=43, col_offset=12, end_lineno=43, end_col_offset=18)], values=[Constant(value=''file_classes'',
      lineno=41, col_offset=18, end_lineno=41, end_col_offset=32), Constant(value=''Classes
      in file: ({filename})?'', lineno=42, col_offset=20, end_lineno=42, end_col_offset=52),
      Constant(value=''file'', lineno=43, col_offset=20, end_lineno=43, end_col_offset=26)],
      lineno=40, col_offset=8, end_lineno=44, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=46, col_offset=12, end_lineno=46, end_col_offset=16), Constant(value=''text'',
      lineno=47, col_offset=12, end_lineno=47, end_col_offset=18), Constant(value=''type'',
      lineno=48, col_offset=12, end_lineno=48, end_col_offset=18)], values=[Constant(value=''file_control_flow'',
      lineno=46, col_offset=18, end_lineno=46, end_col_offset=37), Constant(value=''Control
      Flow in file: ({filename})?'', lineno=47, col_offset=20, end_lineno=47, end_col_offset=57),
      Constant(value=''file'', lineno=48, col_offset=20, end_lineno=48, end_col_offset=26)],
      lineno=45, col_offset=8, end_lineno=49, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=51, col_offset=12, end_lineno=51, end_col_offset=16), Constant(value=''text'',
      lineno=52, col_offset=12, end_lineno=52, end_col_offset=18), Constant(value=''type'',
      lineno=53, col_offset=12, end_lineno=53, end_col_offset=18)], values=[Constant(value=''function_inputs'',
      lineno=51, col_offset=18, end_lineno=51, end_col_offset=35), Constant(value=''Inputs
      to function: ({function_name}) in file: ({filename})?'', lineno=52, col_offset=20,
      end_lineno=52, end_col_offset=82), Constant(value=''function'', lineno=53, col_offset=20,
      end_lineno=53, end_col_offset=30)], lineno=50, col_offset=8, end_lineno=54,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=56, col_offset=12,
      end_lineno=56, end_col_offset=16), Constant(value=''text'', lineno=57, col_offset=12,
      end_lineno=57, end_col_offset=18), Constant(value=''type'', lineno=58, col_offset=12,
      end_lineno=58, end_col_offset=18)], values=[Constant(value=''function_docstring'',
      lineno=56, col_offset=18, end_lineno=56, end_col_offset=38), Constant(value=''Docstring
      of function: ({function_name}) in file: ({filename})?'', lineno=57, col_offset=20,
      end_lineno=57, end_col_offset=85), Constant(value=''function'', lineno=58, col_offset=20,
      end_lineno=58, end_col_offset=30)], lineno=55, col_offset=8, end_lineno=59,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=61, col_offset=12,
      end_lineno=61, end_col_offset=16), Constant(value=''text'', lineno=62, col_offset=12,
      end_lineno=62, end_col_offset=18), Constant(value=''type'', lineno=63, col_offset=12,
      end_lineno=63, end_col_offset=18)], values=[Constant(value=''function_calls'',
      lineno=61, col_offset=18, end_lineno=61, end_col_offset=34), Constant(value=''Calls
      in function: ({function_name}) in file: ({filename})?'', lineno=62, col_offset=20,
      end_lineno=62, end_col_offset=81), Constant(value=''function'', lineno=63, col_offset=20,
      end_lineno=63, end_col_offset=30)], lineno=60, col_offset=8, end_lineno=64,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=66, col_offset=12,
      end_lineno=66, end_col_offset=16), Constant(value=''text'', lineno=67, col_offset=12,
      end_lineno=67, end_col_offset=18), Constant(value=''type'', lineno=68, col_offset=12,
      end_lineno=68, end_col_offset=18)], values=[Constant(value=''function_variables'',
      lineno=66, col_offset=18, end_lineno=66, end_col_offset=38), Constant(value=''Variables
      in function: ({function_name}) in file: ({filename})?'', lineno=67, col_offset=20,
      end_lineno=67, end_col_offset=85), Constant(value=''function'', lineno=68, col_offset=20,
      end_lineno=68, end_col_offset=30)], lineno=65, col_offset=8, end_lineno=69,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=71, col_offset=12,
      end_lineno=71, end_col_offset=16), Constant(value=''text'', lineno=72, col_offset=12,
      end_lineno=72, end_col_offset=18), Constant(value=''type'', lineno=73, col_offset=12,
      end_lineno=73, end_col_offset=18)], values=[Constant(value=''function_returns'',
      lineno=71, col_offset=18, end_lineno=71, end_col_offset=36), Constant(value=''Returns
      from function: ({function_name}) in file: ({filename})?'', lineno=72, col_offset=20,
      end_lineno=72, end_col_offset=85), Constant(value=''function'', lineno=73, col_offset=20,
      end_lineno=73, end_col_offset=30)], lineno=70, col_offset=8, end_lineno=74,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=76, col_offset=12,
      end_lineno=76, end_col_offset=16), Constant(value=''text'', lineno=77, col_offset=12,
      end_lineno=77, end_col_offset=18), Constant(value=''type'', lineno=78, col_offset=12,
      end_lineno=78, end_col_offset=18)], values=[Constant(value=''class_methods'',
      lineno=76, col_offset=18, end_lineno=76, end_col_offset=33), Constant(value=''Methods
      in class: ({class_name}) in file: ({filename})?'', lineno=77, col_offset=20,
      end_lineno=77, end_col_offset=77), Constant(value=''class'', lineno=78, col_offset=20,
      end_lineno=78, end_col_offset=27)], lineno=75, col_offset=8, end_lineno=79,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=81, col_offset=12,
      end_lineno=81, end_col_offset=16), Constant(value=''text'', lineno=82, col_offset=12,
      end_lineno=82, end_col_offset=18), Constant(value=''type'', lineno=83, col_offset=12,
      end_lineno=83, end_col_offset=18)], values=[Constant(value=''class_docstring'',
      lineno=81, col_offset=18, end_lineno=81, end_col_offset=35), Constant(value=''Docstring
      of class: ({class_name}) in file: ({filename})?'', lineno=82, col_offset=20,
      end_lineno=82, end_col_offset=79), Constant(value=''class'', lineno=83, col_offset=20,
      end_lineno=83, end_col_offset=27)], lineno=80, col_offset=8, end_lineno=84,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=86, col_offset=12,
      end_lineno=86, end_col_offset=16), Constant(value=''text'', lineno=87, col_offset=12,
      end_lineno=87, end_col_offset=18), Constant(value=''type'', lineno=88, col_offset=12,
      end_lineno=88, end_col_offset=18)], values=[Constant(value=''class_attributes'',
      lineno=86, col_offset=18, end_lineno=86, end_col_offset=36), Constant(value=''Attributes
      of class: ({class_name}) in file: ({filename})?'', lineno=87, col_offset=20,
      end_lineno=87, end_col_offset=80), Constant(value=''class'', lineno=88, col_offset=20,
      end_lineno=88, end_col_offset=27)], lineno=85, col_offset=8, end_lineno=89,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=91, col_offset=12,
      end_lineno=91, end_col_offset=16), Constant(value=''text'', lineno=92, col_offset=12,
      end_lineno=92, end_col_offset=18), Constant(value=''type'', lineno=93, col_offset=12,
      end_lineno=93, end_col_offset=18)], values=[Constant(value=''class_variables'',
      lineno=91, col_offset=18, end_lineno=91, end_col_offset=35), Constant(value=''Variables
      in class: ({class_name}) in file: ({filename})?'', lineno=92, col_offset=20,
      end_lineno=92, end_col_offset=79), Constant(value=''class'', lineno=93, col_offset=20,
      end_lineno=93, end_col_offset=27)], lineno=90, col_offset=8, end_lineno=94,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=96, col_offset=12,
      end_lineno=96, end_col_offset=16), Constant(value=''text'', lineno=97, col_offset=12,
      end_lineno=97, end_col_offset=18), Constant(value=''type'', lineno=98, col_offset=12,
      end_lineno=98, end_col_offset=18)], values=[Constant(value=''class_inheritance'',
      lineno=96, col_offset=18, end_lineno=96, end_col_offset=37), Constant(value=''Inheritance
      of class: ({class_name}) in file: ({filename})?'', lineno=97, col_offset=20,
      end_lineno=97, end_col_offset=81), Constant(value=''class'', lineno=98, col_offset=20,
      end_lineno=98, end_col_offset=27)], lineno=95, col_offset=8, end_lineno=99,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=101, col_offset=12,
      end_lineno=101, end_col_offset=16), Constant(value=''text'', lineno=102, col_offset=12,
      end_lineno=102, end_col_offset=18), Constant(value=''type'', lineno=103, col_offset=12,
      end_lineno=103, end_col_offset=18)], values=[Constant(value=''method_inputs'',
      lineno=101, col_offset=18, end_lineno=101, end_col_offset=33), Constant(value=''Inputs
      to method: ({method_name}) in class: ({class_name}) in file: ({filename})?'',
      lineno=102, col_offset=20, end_lineno=102, end_col_offset=103), Constant(value=''method'',
      lineno=103, col_offset=20, end_lineno=103, end_col_offset=28)], lineno=100,
      col_offset=8, end_lineno=104, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=106, col_offset=12, end_lineno=106, end_col_offset=16), Constant(value=''text'',
      lineno=107, col_offset=12, end_lineno=107, end_col_offset=18), Constant(value=''type'',
      lineno=108, col_offset=12, end_lineno=108, end_col_offset=18)], values=[Constant(value=''method_docstring'',
      lineno=106, col_offset=18, end_lineno=106, end_col_offset=36), Constant(value=''Docstring
      of method: ({method_name}) in class: ({class_name}) in file: ({filename})?'',
      lineno=107, col_offset=20, end_lineno=107, end_col_offset=106), Constant(value=''method'',
      lineno=108, col_offset=20, end_lineno=108, end_col_offset=28)], lineno=105,
      col_offset=8, end_lineno=109, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=111, col_offset=12, end_lineno=111, end_col_offset=16), Constant(value=''text'',
      lineno=112, col_offset=12, end_lineno=112, end_col_offset=18), Constant(value=''type'',
      lineno=113, col_offset=12, end_lineno=113, end_col_offset=18)], values=[Constant(value=''method_calls'',
      lineno=111, col_offset=18, end_lineno=111, end_col_offset=32), Constant(value=''Calls
      in method: ({method_name}) in class: ({class_name}) in file: ({filename})?'',
      lineno=112, col_offset=20, end_lineno=112, end_col_offset=102), Constant(value=''method'',
      lineno=113, col_offset=20, end_lineno=113, end_col_offset=28)], lineno=110,
      col_offset=8, end_lineno=114, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=116, col_offset=12, end_lineno=116, end_col_offset=16), Constant(value=''text'',
      lineno=117, col_offset=12, end_lineno=117, end_col_offset=18), Constant(value=''type'',
      lineno=118, col_offset=12, end_lineno=118, end_col_offset=18)], values=[Constant(value=''method_returns'',
      lineno=116, col_offset=18, end_lineno=116, end_col_offset=34), Constant(value=''Returns
      from method: ({method_name}) in class: ({class_name}) in file: ({filename})?'',
      lineno=117, col_offset=20, end_lineno=117, end_col_offset=106), Constant(value=''method'',
      lineno=118, col_offset=20, end_lineno=118, end_col_offset=28)], lineno=115,
      col_offset=8, end_lineno=119, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=121, col_offset=12, end_lineno=121, end_col_offset=16), Constant(value=''text'',
      lineno=122, col_offset=12, end_lineno=122, end_col_offset=18), Constant(value=''type'',
      lineno=123, col_offset=12, end_lineno=123, end_col_offset=18)], values=[Constant(value=''file_purpose'',
      lineno=121, col_offset=18, end_lineno=121, end_col_offset=32), Constant(value=''Purpose
      of file: ({filename})?'', lineno=122, col_offset=20, end_lineno=122, end_col_offset=52),
      Constant(value=''file'', lineno=123, col_offset=20, end_lineno=123, end_col_offset=26)],
      lineno=120, col_offset=8, end_lineno=124, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=126, col_offset=12, end_lineno=126, end_col_offset=16), Constant(value=''text'',
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=18), Constant(value=''type'',
      lineno=128, col_offset=12, end_lineno=128, end_col_offset=18)], values=[Constant(value=''function_purpose'',
      lineno=126, col_offset=18, end_lineno=126, end_col_offset=36), Constant(value=''Purpose
      of function: ({function_name}) in file: ({filename})?'', lineno=127, col_offset=20,
      end_lineno=127, end_col_offset=83), Constant(value=''function'', lineno=128,
      col_offset=20, end_lineno=128, end_col_offset=30)], lineno=125, col_offset=8,
      end_lineno=129, end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=131,
      col_offset=12, end_lineno=131, end_col_offset=16), Constant(value=''text'',
      lineno=132, col_offset=12, end_lineno=132, end_col_offset=18), Constant(value=''type'',
      lineno=133, col_offset=12, end_lineno=133, end_col_offset=18)], values=[Constant(value=''class_purpose'',
      lineno=131, col_offset=18, end_lineno=131, end_col_offset=33), Constant(value=''Purpose
      of class: ({class_name}) in file: ({filename})?'', lineno=132, col_offset=20,
      end_lineno=132, end_col_offset=77), Constant(value=''class'', lineno=133, col_offset=20,
      end_lineno=133, end_col_offset=27)], lineno=130, col_offset=8, end_lineno=134,
      end_col_offset=9), Dict(keys=[Constant(value=''id'', lineno=136, col_offset=12,
      end_lineno=136, end_col_offset=16), Constant(value=''text'', lineno=137, col_offset=12,
      end_lineno=137, end_col_offset=18), Constant(value=''type'', lineno=138, col_offset=12,
      end_lineno=138, end_col_offset=18)], values=[Constant(value=''method_purpose'',
      lineno=136, col_offset=18, end_lineno=136, end_col_offset=34), Constant(value=''Purpose
      of method: ({method_name}) in class: ({class_name}) in file: ({filename})?'',
      lineno=137, col_offset=20, end_lineno=137, end_col_offset=104), Constant(value=''method'',
      lineno=138, col_offset=20, end_lineno=138, end_col_offset=28)], lineno=135,
      col_offset=8, end_lineno=139, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=141, col_offset=12, end_lineno=141, end_col_offset=16), Constant(value=''text'',
      lineno=142, col_offset=12, end_lineno=142, end_col_offset=18), Constant(value=''type'',
      lineno=143, col_offset=12, end_lineno=143, end_col_offset=18)], values=[Constant(value=''function_variable_purpose'',
      lineno=141, col_offset=18, end_lineno=141, end_col_offset=45), Constant(value=''Purpose
      of variable: ({function_variable}) in function: ({function_name}) in file: ({filename})?'',
      lineno=142, col_offset=20, end_lineno=142, end_col_offset=118), Constant(value=''function'',
      lineno=143, col_offset=20, end_lineno=143, end_col_offset=30)], lineno=140,
      col_offset=8, end_lineno=144, end_col_offset=9), Dict(keys=[Constant(value=''id'',
      lineno=146, col_offset=12, end_lineno=146, end_col_offset=16), Constant(value=''text'',
      lineno=147, col_offset=12, end_lineno=147, end_col_offset=18), Constant(value=''type'',
      lineno=148, col_offset=12, end_lineno=148, end_col_offset=18)], values=[Constant(value=''class_variable_purpose'',
      lineno=146, col_offset=18, end_lineno=146, end_col_offset=42), Constant(value=''Purpose
      of variable: ({class_variable}) in class: ({class_name}) in file: ({filename})?'',
      lineno=147, col_offset=20, end_lineno=147, end_col_offset=109), Constant(value=''class'',
      lineno=148, col_offset=20, end_lineno=148, end_col_offset=27)], lineno=145,
      col_offset=8, end_lineno=149, end_col_offset=9)], ctx=Load(), lineno=19, col_offset=16,
      end_lineno=150, end_col_offset=5), lineno=19, col_offset=4, end_lineno=150,
      end_col_offset=5), Return(value=Name(id=''questions'', ctx=Load(), lineno=151,
      col_offset=11, end_lineno=151, end_col_offset=20), lineno=151, col_offset=4,
      end_lineno=151, end_col_offset=20)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=17, col_offset=31, end_lineno=17, end_col_offset=35), slice=Name(id=''Dict'',
      ctx=Load(), lineno=17, col_offset=36, end_lineno=17, end_col_offset=40), ctx=Load(),
      lineno=17, col_offset=31, end_lineno=17, end_col_offset=41), lineno=17, col_offset=0,
      end_lineno=151, end_col_offset=20)'
    function_docstring: Returns default question list
    function_inputs: []
    function_defaults: []
    function_returns:
    - questions
    function_calls: []
    function_variables:
    - questions
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_default_model_config:
    function_name: get_default_model_config
    function_code: "def get_default_model_config() -> Dict:\n    \"\"\"Returns default\
      \ model config dict\"\"\"\n    model_config = {'prompt_template': 'Provide a\
      \ concise and comprehensive Response to the Instruction considering the given\
      \ Context and include your reasoning. \\n### Context:\\n{context}\\n### Instruction:\\\
      n{query}\\n### Response:', 'inference_model': {'model_import_path': 'ctransformers.AutoModelForCausalLM',\
      \ 'model_params': {'model_path': 'TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML',\
      \ 'model_type': 'starcoder', 'local_files_only': False, 'lib': 'avx2', 'threads':\
      \ 30, 'batch_size': 32, 'max_new_tokens': 2048, 'gpu_layers': 24, 'reset': True}}}\n\
      \    return model_config"
    function_ast: FunctionDef(name='get_default_model_config', args=arguments(posonlyargs=[],
      args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns
      default model config dict', lineno=155, col_offset=4, end_lineno=155, end_col_offset=43),
      lineno=155, col_offset=4, end_lineno=155, end_col_offset=43), Assign(targets=[Name(id='model_config',
      ctx=Store(), lineno=156, col_offset=4, end_lineno=156, end_col_offset=16)],
      value=Dict(keys=[Constant(value='prompt_template', lineno=157, col_offset=8,
      end_lineno=157, end_col_offset=25), Constant(value='inference_model', lineno=158,
      col_offset=8, end_lineno=158, end_col_offset=25)], values=[Constant(value='Provide
      a concise and comprehensive Response to the Instruction considering the given
      Context and include your reasoning. \n### Context:\n{context}\n### Instruction:\n{query}\n###
      Response:', lineno=157, col_offset=27, end_lineno=157, end_col_offset=218),
      Dict(keys=[Constant(value='model_import_path', lineno=159, col_offset=12, end_lineno=159,
      end_col_offset=31), Constant(value='model_params', lineno=160, col_offset=12,
      end_lineno=160, end_col_offset=26)], values=[Constant(value='ctransformers.AutoModelForCausalLM',
      lineno=159, col_offset=33, end_lineno=159, end_col_offset=69), Dict(keys=[Constant(value='model_path',
      lineno=161, col_offset=16, end_lineno=161, end_col_offset=28), Constant(value='model_type',
      lineno=162, col_offset=16, end_lineno=162, end_col_offset=28), Constant(value='local_files_only',
      lineno=163, col_offset=16, end_lineno=163, end_col_offset=34), Constant(value='lib',
      lineno=164, col_offset=16, end_lineno=164, end_col_offset=21), Constant(value='threads',
      lineno=165, col_offset=16, end_lineno=165, end_col_offset=25), Constant(value='batch_size',
      lineno=166, col_offset=16, end_lineno=166, end_col_offset=28), Constant(value='max_new_tokens',
      lineno=167, col_offset=16, end_lineno=167, end_col_offset=32), Constant(value='gpu_layers',
      lineno=168, col_offset=16, end_lineno=168, end_col_offset=28), Constant(value='reset',
      lineno=169, col_offset=16, end_lineno=169, end_col_offset=23)], values=[Constant(value='TheBloke/WizardCoder-Guanaco-15B-V1.1-GGML',
      lineno=161, col_offset=30, end_lineno=161, end_col_offset=74), Constant(value='starcoder',
      lineno=162, col_offset=30, end_lineno=162, end_col_offset=41), Constant(value=False,
      lineno=163, col_offset=36, end_lineno=163, end_col_offset=41), Constant(value='avx2',
      lineno=164, col_offset=23, end_lineno=164, end_col_offset=29), Constant(value=30,
      lineno=165, col_offset=27, end_lineno=165, end_col_offset=29), Constant(value=32,
      lineno=166, col_offset=30, end_lineno=166, end_col_offset=32), Constant(value=2048,
      lineno=167, col_offset=34, end_lineno=167, end_col_offset=38), Constant(value=24,
      lineno=168, col_offset=30, end_lineno=168, end_col_offset=32), Constant(value=True,
      lineno=169, col_offset=25, end_lineno=169, end_col_offset=29)], lineno=160,
      col_offset=28, end_lineno=170, end_col_offset=13)], lineno=158, col_offset=27,
      end_lineno=171, end_col_offset=9)], lineno=156, col_offset=19, end_lineno=172,
      end_col_offset=5), lineno=156, col_offset=4, end_lineno=172, end_col_offset=5),
      Return(value=Name(id='model_config', ctx=Load(), lineno=173, col_offset=11,
      end_lineno=173, end_col_offset=23), lineno=173, col_offset=4, end_lineno=173,
      end_col_offset=23)], decorator_list=[], returns=Name(id='Dict', ctx=Load(),
      lineno=154, col_offset=34, end_lineno=154, end_col_offset=38), lineno=154, col_offset=0,
      end_lineno=173, end_col_offset=23)
    function_docstring: Returns default model config dict
    function_inputs: []
    function_defaults: []
    function_returns:
    - model_config
    function_calls: []
    function_variables:
    - model_config
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_output_dir:
    function_name: get_output_dir
    function_code: "def get_output_dir(output_dir: str='') -> str:\n    \"\"\"Returns\
      \ the appropriate output directory.\"\"\"\n    if output_dir:\n        output_dir\
      \ = os.path.abspath(output_dir)\n    else:\n        output_dir = os.path.join(os.getcwd(),\
      \ OUTPUT_DIR)\n    if not Path(output_dir).is_dir():\n        os.makedirs(output_dir,\
      \ exist_ok=True)\n    logging.info(f'Using output directory: {output_dir}')\n\
      \    return output_dir"
    function_ast: 'FunctionDef(name=''get_output_dir'', args=arguments(posonlyargs=[],
      args=[arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load(), lineno=176,
      col_offset=31, end_lineno=176, end_col_offset=34), lineno=176, col_offset=19,
      end_lineno=176, end_col_offset=34)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''',
      lineno=176, col_offset=35, end_lineno=176, end_col_offset=37)]), body=[Expr(value=Constant(value=''Returns
      the appropriate output directory.'', lineno=177, col_offset=4, end_lineno=177,
      end_col_offset=51), lineno=177, col_offset=4, end_lineno=177, end_col_offset=51),
      If(test=Name(id=''output_dir'', ctx=Load(), lineno=178, col_offset=7, end_lineno=178,
      end_col_offset=17), body=[Assign(targets=[Name(id=''output_dir'', ctx=Store(),
      lineno=179, col_offset=8, end_lineno=179, end_col_offset=18)], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=179, col_offset=21, end_lineno=179, end_col_offset=23), attr=''path'',
      ctx=Load(), lineno=179, col_offset=21, end_lineno=179, end_col_offset=28), attr=''abspath'',
      ctx=Load(), lineno=179, col_offset=21, end_lineno=179, end_col_offset=36), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=179, col_offset=37, end_lineno=179, end_col_offset=47)],
      keywords=[], lineno=179, col_offset=21, end_lineno=179, end_col_offset=48),
      lineno=179, col_offset=8, end_lineno=179, end_col_offset=48)], orelse=[Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=181, col_offset=8, end_lineno=181, end_col_offset=18)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=181, col_offset=21, end_lineno=181, end_col_offset=23), attr=''path'',
      ctx=Load(), lineno=181, col_offset=21, end_lineno=181, end_col_offset=28), attr=''join'',
      ctx=Load(), lineno=181, col_offset=21, end_lineno=181, end_col_offset=33), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=181, col_offset=34, end_lineno=181, end_col_offset=36), attr=''getcwd'',
      ctx=Load(), lineno=181, col_offset=34, end_lineno=181, end_col_offset=43), args=[],
      keywords=[], lineno=181, col_offset=34, end_lineno=181, end_col_offset=45),
      Name(id=''OUTPUT_DIR'', ctx=Load(), lineno=181, col_offset=47, end_lineno=181,
      end_col_offset=57)], keywords=[], lineno=181, col_offset=21, end_lineno=181,
      end_col_offset=58), lineno=181, col_offset=8, end_lineno=181, end_col_offset=58)],
      lineno=178, col_offset=4, end_lineno=181, end_col_offset=58), If(test=UnaryOp(op=Not(),
      operand=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=182,
      col_offset=11, end_lineno=182, end_col_offset=15), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=182, col_offset=16, end_lineno=182, end_col_offset=26)],
      keywords=[], lineno=182, col_offset=11, end_lineno=182, end_col_offset=27),
      attr=''is_dir'', ctx=Load(), lineno=182, col_offset=11, end_lineno=182, end_col_offset=34),
      args=[], keywords=[], lineno=182, col_offset=11, end_lineno=182, end_col_offset=36),
      lineno=182, col_offset=7, end_lineno=182, end_col_offset=36), body=[Expr(value=Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=183, col_offset=8, end_lineno=183, end_col_offset=10), attr=''makedirs'',
      ctx=Load(), lineno=183, col_offset=8, end_lineno=183, end_col_offset=19), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=183, col_offset=20, end_lineno=183, end_col_offset=30)],
      keywords=[keyword(arg=''exist_ok'', value=Constant(value=True, lineno=183, col_offset=41,
      end_lineno=183, end_col_offset=45), lineno=183, col_offset=32, end_lineno=183,
      end_col_offset=45)], lineno=183, col_offset=8, end_lineno=183, end_col_offset=46),
      lineno=183, col_offset=8, end_lineno=183, end_col_offset=46)], orelse=[], lineno=182,
      col_offset=4, end_lineno=183, end_col_offset=46), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=184, col_offset=4, end_lineno=184, end_col_offset=11), attr=''info'',
      ctx=Load(), lineno=184, col_offset=4, end_lineno=184, end_col_offset=16), args=[JoinedStr(values=[Constant(value=''Using
      output directory: '', lineno=184, col_offset=17, end_lineno=184, end_col_offset=56),
      FormattedValue(value=Name(id=''output_dir'', ctx=Load(), lineno=184, col_offset=44,
      end_lineno=184, end_col_offset=54), conversion=-1, lineno=184, col_offset=17,
      end_lineno=184, end_col_offset=56)], lineno=184, col_offset=17, end_lineno=184,
      end_col_offset=56)], keywords=[], lineno=184, col_offset=4, end_lineno=184,
      end_col_offset=57), lineno=184, col_offset=4, end_lineno=184, end_col_offset=57),
      Return(value=Name(id=''output_dir'', ctx=Load(), lineno=185, col_offset=11,
      end_lineno=185, end_col_offset=21), lineno=185, col_offset=4, end_lineno=185,
      end_col_offset=21)], decorator_list=[], returns=Name(id=''str'', ctx=Load(),
      lineno=176, col_offset=42, end_lineno=176, end_col_offset=45), lineno=176, col_offset=0,
      end_lineno=185, end_col_offset=21)'
    function_docstring: Returns the appropriate output directory.
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns:
    - output_dir
    function_calls:
    - Path
    - logging.info
    - os.path.abspath
    - os.path.join
    - os.getcwd
    - os.makedirs
    - Path(output_dir).is_dir
    function_variables:
    - output_dir
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_questions:
    function_name: get_questions
    function_code: "def get_questions(questions_pathname: str) -> List[Dict]:\n  \
      \  \"\"\"Get questions from file or default\"\"\"\n    if not questions_pathname:\n\
      \        questions_pathname = os.path.join(os.getcwd(), QUESTIONS_FILE)\n  \
      \  if not Path(questions_pathname).is_file():\n        logging.info(f'Questions\
      \ file {questions_pathname} not found. Using default questions')\n        questions\
      \ = get_default_questions()\n        return questions\n    try:\n        with\
      \ open(questions_pathname, 'r') as f:\n            questions = json.load(f)\n\
      \    except:\n        logging.info(f'Questions file not valid: {questions_pathname}\
      \ Using default questions')\n        questions = get_default_questions()\n \
      \       return questions\n    for question in questions:\n        if not all((key\
      \ in question for key in ['id', 'text', 'type'])):\n            logging.info(f'Questions\
      \ file not valid: {questions_pathname} Using default questions')\n         \
      \   questions = get_default_questions()\n            return questions\n    logging.info(f'Using\
      \ questions from file: {questions_pathname}')\n    return questions"
    function_ast: 'FunctionDef(name=''get_questions'', args=arguments(posonlyargs=[],
      args=[arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load(),
      lineno=188, col_offset=38, end_lineno=188, end_col_offset=41), lineno=188, col_offset=18,
      end_lineno=188, end_col_offset=41)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''Get questions from file or default'', lineno=189,
      col_offset=4, end_lineno=189, end_col_offset=44), lineno=189, col_offset=4,
      end_lineno=189, end_col_offset=44), If(test=UnaryOp(op=Not(), operand=Name(id=''questions_pathname'',
      ctx=Load(), lineno=191, col_offset=11, end_lineno=191, end_col_offset=29), lineno=191,
      col_offset=7, end_lineno=191, end_col_offset=29), body=[Assign(targets=[Name(id=''questions_pathname'',
      ctx=Store(), lineno=192, col_offset=8, end_lineno=192, end_col_offset=26)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=192, col_offset=29, end_lineno=192, end_col_offset=31), attr=''path'',
      ctx=Load(), lineno=192, col_offset=29, end_lineno=192, end_col_offset=36), attr=''join'',
      ctx=Load(), lineno=192, col_offset=29, end_lineno=192, end_col_offset=41), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=192, col_offset=42, end_lineno=192, end_col_offset=44), attr=''getcwd'',
      ctx=Load(), lineno=192, col_offset=42, end_lineno=192, end_col_offset=51), args=[],
      keywords=[], lineno=192, col_offset=42, end_lineno=192, end_col_offset=53),
      Name(id=''QUESTIONS_FILE'', ctx=Load(), lineno=192, col_offset=55, end_lineno=192,
      end_col_offset=69)], keywords=[], lineno=192, col_offset=29, end_lineno=192,
      end_col_offset=70), lineno=192, col_offset=8, end_lineno=192, end_col_offset=70)],
      orelse=[], lineno=191, col_offset=4, end_lineno=192, end_col_offset=70), If(test=UnaryOp(op=Not(),
      operand=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=195,
      col_offset=11, end_lineno=195, end_col_offset=15), args=[Name(id=''questions_pathname'',
      ctx=Load(), lineno=195, col_offset=16, end_lineno=195, end_col_offset=34)],
      keywords=[], lineno=195, col_offset=11, end_lineno=195, end_col_offset=35),
      attr=''is_file'', ctx=Load(), lineno=195, col_offset=11, end_lineno=195, end_col_offset=43),
      args=[], keywords=[], lineno=195, col_offset=11, end_lineno=195, end_col_offset=45),
      lineno=195, col_offset=7, end_lineno=195, end_col_offset=45), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=196, col_offset=8, end_lineno=196, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=196, col_offset=8, end_lineno=196, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Questions
      file '', lineno=196, col_offset=21, end_lineno=196, end_col_offset=94), FormattedValue(value=Name(id=''questions_pathname'',
      ctx=Load(), lineno=196, col_offset=39, end_lineno=196, end_col_offset=57), conversion=-1,
      lineno=196, col_offset=21, end_lineno=196, end_col_offset=94), Constant(value=''
      not found. Using default questions'', lineno=196, col_offset=21, end_lineno=196,
      end_col_offset=94)], lineno=196, col_offset=21, end_lineno=196, end_col_offset=94)],
      keywords=[], lineno=196, col_offset=8, end_lineno=196, end_col_offset=95), lineno=196,
      col_offset=8, end_lineno=196, end_col_offset=95), Assign(targets=[Name(id=''questions'',
      ctx=Store(), lineno=197, col_offset=8, end_lineno=197, end_col_offset=17)],
      value=Call(func=Name(id=''get_default_questions'', ctx=Load(), lineno=197, col_offset=20,
      end_lineno=197, end_col_offset=41), args=[], keywords=[], lineno=197, col_offset=20,
      end_lineno=197, end_col_offset=43), lineno=197, col_offset=8, end_lineno=197,
      end_col_offset=43), Return(value=Name(id=''questions'', ctx=Load(), lineno=198,
      col_offset=15, end_lineno=198, end_col_offset=24), lineno=198, col_offset=8,
      end_lineno=198, end_col_offset=24)], orelse=[], lineno=195, col_offset=4, end_lineno=198,
      end_col_offset=24), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=202, col_offset=13, end_lineno=202, end_col_offset=17), args=[Name(id=''questions_pathname'',
      ctx=Load(), lineno=202, col_offset=18, end_lineno=202, end_col_offset=36), Constant(value=''r'',
      lineno=202, col_offset=38, end_lineno=202, end_col_offset=41)], keywords=[],
      lineno=202, col_offset=13, end_lineno=202, end_col_offset=42), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=202, col_offset=46, end_lineno=202, end_col_offset=47))],
      body=[Assign(targets=[Name(id=''questions'', ctx=Store(), lineno=203, col_offset=12,
      end_lineno=203, end_col_offset=21)], value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=203, col_offset=24, end_lineno=203, end_col_offset=28), attr=''load'',
      ctx=Load(), lineno=203, col_offset=24, end_lineno=203, end_col_offset=33), args=[Name(id=''f'',
      ctx=Load(), lineno=203, col_offset=34, end_lineno=203, end_col_offset=35)],
      keywords=[], lineno=203, col_offset=24, end_lineno=203, end_col_offset=36),
      lineno=203, col_offset=12, end_lineno=203, end_col_offset=36)], lineno=202,
      col_offset=8, end_lineno=203, end_col_offset=36)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=205, col_offset=8, end_lineno=205, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=205, col_offset=8, end_lineno=205, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Questions
      file not valid: '', lineno=205, col_offset=21, end_lineno=205, end_col_offset=94),
      FormattedValue(value=Name(id=''questions_pathname'', ctx=Load(), lineno=205,
      col_offset=50, end_lineno=205, end_col_offset=68), conversion=-1, lineno=205,
      col_offset=21, end_lineno=205, end_col_offset=94), Constant(value='' Using default
      questions'', lineno=205, col_offset=21, end_lineno=205, end_col_offset=94)],
      lineno=205, col_offset=21, end_lineno=205, end_col_offset=94)], keywords=[],
      lineno=205, col_offset=8, end_lineno=205, end_col_offset=95), lineno=205, col_offset=8,
      end_lineno=205, end_col_offset=95), Assign(targets=[Name(id=''questions'', ctx=Store(),
      lineno=206, col_offset=8, end_lineno=206, end_col_offset=17)], value=Call(func=Name(id=''get_default_questions'',
      ctx=Load(), lineno=206, col_offset=20, end_lineno=206, end_col_offset=41), args=[],
      keywords=[], lineno=206, col_offset=20, end_lineno=206, end_col_offset=43),
      lineno=206, col_offset=8, end_lineno=206, end_col_offset=43), Return(value=Name(id=''questions'',
      ctx=Load(), lineno=207, col_offset=15, end_lineno=207, end_col_offset=24), lineno=207,
      col_offset=8, end_lineno=207, end_col_offset=24)], lineno=204, col_offset=4,
      end_lineno=207, end_col_offset=24)], orelse=[], finalbody=[], lineno=201, col_offset=4,
      end_lineno=207, end_col_offset=24), For(target=Name(id=''question'', ctx=Store(),
      lineno=210, col_offset=8, end_lineno=210, end_col_offset=16), iter=Name(id=''questions'',
      ctx=Load(), lineno=210, col_offset=20, end_lineno=210, end_col_offset=29), body=[If(test=UnaryOp(op=Not(),
      operand=Call(func=Name(id=''all'', ctx=Load(), lineno=211, col_offset=15, end_lineno=211,
      end_col_offset=18), args=[GeneratorExp(elt=Compare(left=Name(id=''key'', ctx=Load(),
      lineno=211, col_offset=19, end_lineno=211, end_col_offset=22), ops=[In()], comparators=[Name(id=''question'',
      ctx=Load(), lineno=211, col_offset=26, end_lineno=211, end_col_offset=34)],
      lineno=211, col_offset=19, end_lineno=211, end_col_offset=34), generators=[comprehension(target=Name(id=''key'',
      ctx=Store(), lineno=211, col_offset=39, end_lineno=211, end_col_offset=42),
      iter=List(elts=[Constant(value=''id'', lineno=211, col_offset=47, end_lineno=211,
      end_col_offset=51), Constant(value=''text'', lineno=211, col_offset=53, end_lineno=211,
      end_col_offset=59), Constant(value=''type'', lineno=211, col_offset=61, end_lineno=211,
      end_col_offset=67)], ctx=Load(), lineno=211, col_offset=46, end_lineno=211,
      end_col_offset=68), ifs=[], is_async=0)], lineno=211, col_offset=18, end_lineno=211,
      end_col_offset=69)], keywords=[], lineno=211, col_offset=15, end_lineno=211,
      end_col_offset=69), lineno=211, col_offset=11, end_lineno=211, end_col_offset=69),
      body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load(),
      lineno=212, col_offset=12, end_lineno=212, end_col_offset=19), attr=''info'',
      ctx=Load(), lineno=212, col_offset=12, end_lineno=212, end_col_offset=24), args=[JoinedStr(values=[Constant(value=''Questions
      file not valid: '', lineno=212, col_offset=25, end_lineno=212, end_col_offset=98),
      FormattedValue(value=Name(id=''questions_pathname'', ctx=Load(), lineno=212,
      col_offset=54, end_lineno=212, end_col_offset=72), conversion=-1, lineno=212,
      col_offset=25, end_lineno=212, end_col_offset=98), Constant(value='' Using default
      questions'', lineno=212, col_offset=25, end_lineno=212, end_col_offset=98)],
      lineno=212, col_offset=25, end_lineno=212, end_col_offset=98)], keywords=[],
      lineno=212, col_offset=12, end_lineno=212, end_col_offset=99), lineno=212, col_offset=12,
      end_lineno=212, end_col_offset=99), Assign(targets=[Name(id=''questions'', ctx=Store(),
      lineno=213, col_offset=12, end_lineno=213, end_col_offset=21)], value=Call(func=Name(id=''get_default_questions'',
      ctx=Load(), lineno=213, col_offset=24, end_lineno=213, end_col_offset=45), args=[],
      keywords=[], lineno=213, col_offset=24, end_lineno=213, end_col_offset=47),
      lineno=213, col_offset=12, end_lineno=213, end_col_offset=47), Return(value=Name(id=''questions'',
      ctx=Load(), lineno=214, col_offset=19, end_lineno=214, end_col_offset=28), lineno=214,
      col_offset=12, end_lineno=214, end_col_offset=28)], orelse=[], lineno=211, col_offset=8,
      end_lineno=214, end_col_offset=28)], orelse=[], lineno=210, col_offset=4, end_lineno=214,
      end_col_offset=28), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=216, col_offset=4, end_lineno=216, end_col_offset=11), attr=''info'',
      ctx=Load(), lineno=216, col_offset=4, end_lineno=216, end_col_offset=16), args=[JoinedStr(values=[Constant(value=''Using
      questions from file: '', lineno=216, col_offset=17, end_lineno=216, end_col_offset=67),
      FormattedValue(value=Name(id=''questions_pathname'', ctx=Load(), lineno=216,
      col_offset=47, end_lineno=216, end_col_offset=65), conversion=-1, lineno=216,
      col_offset=17, end_lineno=216, end_col_offset=67)], lineno=216, col_offset=17,
      end_lineno=216, end_col_offset=67)], keywords=[], lineno=216, col_offset=4,
      end_lineno=216, end_col_offset=68), lineno=216, col_offset=4, end_lineno=216,
      end_col_offset=68), Return(value=Name(id=''questions'', ctx=Load(), lineno=217,
      col_offset=11, end_lineno=217, end_col_offset=20), lineno=217, col_offset=4,
      end_lineno=217, end_col_offset=20)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=188, col_offset=46, end_lineno=188, end_col_offset=50), slice=Name(id=''Dict'',
      ctx=Load(), lineno=188, col_offset=51, end_lineno=188, end_col_offset=55), ctx=Load(),
      lineno=188, col_offset=46, end_lineno=188, end_col_offset=56), lineno=188, col_offset=0,
      end_lineno=217, end_col_offset=20)'
    function_docstring: Get questions from file or default
    function_inputs:
    - questions_pathname
    function_defaults: []
    function_returns:
    - questions
    - questions
    - questions
    - questions
    function_calls:
    - Path
    - logging.info
    - open
    - os.path.join
    - get_default_questions
    - json.load
    - all
    - os.getcwd
    - Path(questions_pathname).is_file
    function_variables:
    - questions_pathname
    - questions
    function_decorators: []
    function_annotations: []
    function_properties: []
  instantiate_model:
    function_name: instantiate_model
    function_code: "def instantiate_model(model_config: Dict) -> object:\n    \"\"\
      \"\n    Imports and instantiates a model based on the provided configuration.\n\
      \    Args:\n        model_config (dict): A dictionary containing the configuration\
      \ for the\n            model. It should include the import path for the model\
      \ class and\n            parameters for instantiation.\n        user_config\
      \ (dict): A dictionary containing user-provided configurations.\n          \
      \  If provided, these configurations will override the defaults.\n    Returns:\n\
      \        object: An instance of the specified model class, or None if there\
      \ was\n            an error.\n    \"\"\"\n    model = None\n    try:\n     \
      \   module_name, class_name = model_config['model_import_path'].rsplit('.',\
      \ 1)\n        module = importlib.import_module(module_name)\n    except ImportError\
      \ as e:\n        print(f'Failed to import module {module_name}. Error: {e}')\n\
      \        return model\n    try:\n        ModelClass = getattr(module, class_name)\n\
      \    except AttributeError as e:\n        print(f'Module {module_name} does\
      \ not have a class named {class_name}. Error: {e}')\n        return model\n\
      \    model_params = model_config['model_params']\n    try:\n        model =\
      \ ModelClass.from_pretrained(model_params.pop('model_path'), **model_params)\n\
      \    except Exception as e:\n        print(f'Failed to instantiate the model\
      \ with the provided parameters. Error: {e}')\n        return model\n    return\
      \ model"
    function_ast: 'FunctionDef(name=''instantiate_model'', args=arguments(posonlyargs=[],
      args=[arg(arg=''model_config'', annotation=Name(id=''Dict'', ctx=Load(), lineno=220,
      col_offset=36, end_lineno=220, end_col_offset=40), lineno=220, col_offset=22,
      end_lineno=220, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Imports and instantiates a model based
      on the provided configuration.\n    Args:\n        model_config (dict): A dictionary
      containing the configuration for the\n            model. It should include the
      import path for the model class and\n            parameters for instantiation.\n        user_config
      (dict): A dictionary containing user-provided configurations.\n            If
      provided, these configurations will override the defaults.\n    Returns:\n        object:
      An instance of the specified model class, or None if there was\n            an
      error.\n    '', lineno=221, col_offset=4, end_lineno=232, end_col_offset=7),
      lineno=221, col_offset=4, end_lineno=232, end_col_offset=7), Assign(targets=[Name(id=''model'',
      ctx=Store(), lineno=233, col_offset=4, end_lineno=233, end_col_offset=9)], value=Constant(value=None,
      lineno=233, col_offset=12, end_lineno=233, end_col_offset=16), lineno=233, col_offset=4,
      end_lineno=233, end_col_offset=16), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
      ctx=Store(), lineno=235, col_offset=8, end_lineno=235, end_col_offset=19), Name(id=''class_name'',
      ctx=Store(), lineno=235, col_offset=21, end_lineno=235, end_col_offset=31)],
      ctx=Store(), lineno=235, col_offset=8, end_lineno=235, end_col_offset=31)],
      value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'', ctx=Load(),
      lineno=235, col_offset=34, end_lineno=235, end_col_offset=46), slice=Constant(value=''model_import_path'',
      lineno=235, col_offset=47, end_lineno=235, end_col_offset=66), ctx=Load(), lineno=235,
      col_offset=34, end_lineno=235, end_col_offset=67), attr=''rsplit'', ctx=Load(),
      lineno=235, col_offset=34, end_lineno=235, end_col_offset=74), args=[Constant(value=''.'',
      lineno=235, col_offset=75, end_lineno=235, end_col_offset=78), Constant(value=1,
      lineno=235, col_offset=80, end_lineno=235, end_col_offset=81)], keywords=[],
      lineno=235, col_offset=34, end_lineno=235, end_col_offset=82), lineno=235, col_offset=8,
      end_lineno=235, end_col_offset=82), Assign(targets=[Name(id=''module'', ctx=Store(),
      lineno=236, col_offset=8, end_lineno=236, end_col_offset=14)], value=Call(func=Attribute(value=Name(id=''importlib'',
      ctx=Load(), lineno=236, col_offset=17, end_lineno=236, end_col_offset=26), attr=''import_module'',
      ctx=Load(), lineno=236, col_offset=17, end_lineno=236, end_col_offset=40), args=[Name(id=''module_name'',
      ctx=Load(), lineno=236, col_offset=41, end_lineno=236, end_col_offset=52)],
      keywords=[], lineno=236, col_offset=17, end_lineno=236, end_col_offset=53),
      lineno=236, col_offset=8, end_lineno=236, end_col_offset=53)], handlers=[ExceptHandler(type=Name(id=''ImportError'',
      ctx=Load(), lineno=237, col_offset=11, end_lineno=237, end_col_offset=22), name=''e'',
      body=[Expr(value=Call(func=Name(id=''print'', ctx=Load(), lineno=238, col_offset=8,
      end_lineno=238, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Failed
      to import module '', lineno=238, col_offset=14, end_lineno=238, end_col_offset=66),
      FormattedValue(value=Name(id=''module_name'', ctx=Load(), lineno=238, col_offset=41,
      end_lineno=238, end_col_offset=52), conversion=-1, lineno=238, col_offset=14,
      end_lineno=238, end_col_offset=66), Constant(value=''. Error: '', lineno=238,
      col_offset=14, end_lineno=238, end_col_offset=66), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=238, col_offset=63, end_lineno=238, end_col_offset=64), conversion=-1,
      lineno=238, col_offset=14, end_lineno=238, end_col_offset=66)], lineno=238,
      col_offset=14, end_lineno=238, end_col_offset=66)], keywords=[], lineno=238,
      col_offset=8, end_lineno=238, end_col_offset=67), lineno=238, col_offset=8,
      end_lineno=238, end_col_offset=67), Return(value=Name(id=''model'', ctx=Load(),
      lineno=239, col_offset=15, end_lineno=239, end_col_offset=20), lineno=239, col_offset=8,
      end_lineno=239, end_col_offset=20)], lineno=237, col_offset=4, end_lineno=239,
      end_col_offset=20)], orelse=[], finalbody=[], lineno=234, col_offset=4, end_lineno=239,
      end_col_offset=20), Try(body=[Assign(targets=[Name(id=''ModelClass'', ctx=Store(),
      lineno=241, col_offset=8, end_lineno=241, end_col_offset=18)], value=Call(func=Name(id=''getattr'',
      ctx=Load(), lineno=241, col_offset=21, end_lineno=241, end_col_offset=28), args=[Name(id=''module'',
      ctx=Load(), lineno=241, col_offset=29, end_lineno=241, end_col_offset=35), Name(id=''class_name'',
      ctx=Load(), lineno=241, col_offset=37, end_lineno=241, end_col_offset=47)],
      keywords=[], lineno=241, col_offset=21, end_lineno=241, end_col_offset=48),
      lineno=241, col_offset=8, end_lineno=241, end_col_offset=48)], handlers=[ExceptHandler(type=Name(id=''AttributeError'',
      ctx=Load(), lineno=242, col_offset=11, end_lineno=242, end_col_offset=25), name=''e'',
      body=[Expr(value=Call(func=Name(id=''print'', ctx=Load(), lineno=243, col_offset=8,
      end_lineno=243, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Module
      '', lineno=243, col_offset=14, end_lineno=243, end_col_offset=90), FormattedValue(value=Name(id=''module_name'',
      ctx=Load(), lineno=243, col_offset=24, end_lineno=243, end_col_offset=35), conversion=-1,
      lineno=243, col_offset=14, end_lineno=243, end_col_offset=90), Constant(value=''
      does not have a class named '', lineno=243, col_offset=14, end_lineno=243, end_col_offset=90),
      FormattedValue(value=Name(id=''class_name'', ctx=Load(), lineno=243, col_offset=66,
      end_lineno=243, end_col_offset=76), conversion=-1, lineno=243, col_offset=14,
      end_lineno=243, end_col_offset=90), Constant(value=''. Error: '', lineno=243,
      col_offset=14, end_lineno=243, end_col_offset=90), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=243, col_offset=87, end_lineno=243, end_col_offset=88), conversion=-1,
      lineno=243, col_offset=14, end_lineno=243, end_col_offset=90)], lineno=243,
      col_offset=14, end_lineno=243, end_col_offset=90)], keywords=[], lineno=243,
      col_offset=8, end_lineno=243, end_col_offset=91), lineno=243, col_offset=8,
      end_lineno=243, end_col_offset=91), Return(value=Name(id=''model'', ctx=Load(),
      lineno=244, col_offset=15, end_lineno=244, end_col_offset=20), lineno=244, col_offset=8,
      end_lineno=244, end_col_offset=20)], lineno=242, col_offset=4, end_lineno=244,
      end_col_offset=20)], orelse=[], finalbody=[], lineno=240, col_offset=4, end_lineno=244,
      end_col_offset=20), Assign(targets=[Name(id=''model_params'', ctx=Store(), lineno=246,
      col_offset=4, end_lineno=246, end_col_offset=16)], value=Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=246, col_offset=19, end_lineno=246, end_col_offset=31), slice=Constant(value=''model_params'',
      lineno=246, col_offset=32, end_lineno=246, end_col_offset=46), ctx=Load(), lineno=246,
      col_offset=19, end_lineno=246, end_col_offset=47), lineno=246, col_offset=4,
      end_lineno=246, end_col_offset=47), Try(body=[Assign(targets=[Name(id=''model'',
      ctx=Store(), lineno=248, col_offset=8, end_lineno=248, end_col_offset=13)],
      value=Call(func=Attribute(value=Name(id=''ModelClass'', ctx=Load(), lineno=248,
      col_offset=16, end_lineno=248, end_col_offset=26), attr=''from_pretrained'',
      ctx=Load(), lineno=248, col_offset=16, end_lineno=248, end_col_offset=42), args=[Call(func=Attribute(value=Name(id=''model_params'',
      ctx=Load(), lineno=248, col_offset=43, end_lineno=248, end_col_offset=55), attr=''pop'',
      ctx=Load(), lineno=248, col_offset=43, end_lineno=248, end_col_offset=59), args=[Constant(value=''model_path'',
      lineno=248, col_offset=60, end_lineno=248, end_col_offset=72)], keywords=[],
      lineno=248, col_offset=43, end_lineno=248, end_col_offset=73)], keywords=[keyword(value=Name(id=''model_params'',
      ctx=Load(), lineno=248, col_offset=77, end_lineno=248, end_col_offset=89), lineno=248,
      col_offset=75, end_lineno=248, end_col_offset=89)], lineno=248, col_offset=16,
      end_lineno=248, end_col_offset=90), lineno=248, col_offset=8, end_lineno=248,
      end_col_offset=90)], handlers=[ExceptHandler(type=Name(id=''Exception'', ctx=Load(),
      lineno=249, col_offset=11, end_lineno=249, end_col_offset=20), name=''e'', body=[Expr(value=Call(func=Name(id=''print'',
      ctx=Load(), lineno=250, col_offset=8, end_lineno=250, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Failed
      to instantiate the model with the provided parameters. Error: '', lineno=250,
      col_offset=14, end_lineno=250, end_col_offset=89), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=250, col_offset=86, end_lineno=250, end_col_offset=87), conversion=-1,
      lineno=250, col_offset=14, end_lineno=250, end_col_offset=89)], lineno=250,
      col_offset=14, end_lineno=250, end_col_offset=89)], keywords=[], lineno=250,
      col_offset=8, end_lineno=250, end_col_offset=90), lineno=250, col_offset=8,
      end_lineno=250, end_col_offset=90), Return(value=Name(id=''model'', ctx=Load(),
      lineno=251, col_offset=15, end_lineno=251, end_col_offset=20), lineno=251, col_offset=8,
      end_lineno=251, end_col_offset=20)], lineno=249, col_offset=4, end_lineno=251,
      end_col_offset=20)], orelse=[], finalbody=[], lineno=247, col_offset=4, end_lineno=251,
      end_col_offset=20), Return(value=Name(id=''model'', ctx=Load(), lineno=253,
      col_offset=11, end_lineno=253, end_col_offset=16), lineno=253, col_offset=4,
      end_lineno=253, end_col_offset=16)], decorator_list=[], returns=Name(id=''object'',
      ctx=Load(), lineno=220, col_offset=45, end_lineno=220, end_col_offset=51), lineno=220,
      col_offset=0, end_lineno=253, end_col_offset=16)'
    function_docstring: "Imports and instantiates a model based on the provided configuration.\n\
      Args:\n    model_config (dict): A dictionary containing the configuration for\
      \ the\n        model. It should include the import path for the model class\
      \ and\n        parameters for instantiation.\n    user_config (dict): A dictionary\
      \ containing user-provided configurations.\n        If provided, these configurations\
      \ will override the defaults.\nReturns:\n    object: An instance of the specified\
      \ model class, or None if there was\n        an error."
    function_inputs:
    - model_config
    function_defaults: []
    function_returns:
    - model
    - model
    - model
    - model
    function_calls:
    - print
    - importlib.import_module
    - model_params.pop
    - ModelClass.from_pretrained
    - model_config['model_import_path'].rsplit
    - getattr
    function_variables:
    - model_params
    - model
    - ModelClass
    - module
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_model:
    function_name: get_model
    function_code: "def get_model(model_config_pathname: str):\n    \"\"\"\n    Agrs:\n\
      \        model_config_pathname (str): The pathname of the model config file\n\
      \    Returns:\n        Tuple[object, str]: The instantiated model and prompt\
      \ template \n    \"\"\"\n    if not model_config_pathname:\n        model_config_pathname\
      \ = os.path.join(os.getcwd(), MODEL_CONFIG_FILE)\n    if not Path(model_config_pathname).is_file():\n\
      \        logging.info(f'Model config file not found: {model_config_pathname}\
      \ Using default model config')\n        model_config = get_default_model_config()\n\
      \        return (instantiate_model(model_config['inference_model']), model_config['prompt_template'])\n\
      \    try:\n        with open(model_config_pathname, 'r') as config_file:\n \
      \           model_config = yaml.safe_load(config_file)\n    except:\n      \
      \  logging.info(f'Model config file not valid: {model_config_pathname} Using\
      \ default model config')\n        model_config = get_default_model_config()\n\
      \        return (instantiate_model(model_config['inference_model']), model_config['prompt_template'])\n\
      \    logging.info(f'Using model config from file: {model_config_pathname}')\n\
      \    return (instantiate_model(model_config['inference_model']), model_config['prompt_template'])"
    function_ast: 'FunctionDef(name=''get_model'', args=arguments(posonlyargs=[],
      args=[arg(arg=''model_config_pathname'', annotation=Name(id=''str'', ctx=Load(),
      lineno=256, col_offset=37, end_lineno=256, end_col_offset=40), lineno=256, col_offset=14,
      end_lineno=256, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Agrs:\n        model_config_pathname
      (str): The pathname of the model config file\n    Returns:\n        Tuple[object,
      str]: The instantiated model and prompt template \n    '', lineno=257, col_offset=4,
      end_lineno=262, end_col_offset=7), lineno=257, col_offset=4, end_lineno=262,
      end_col_offset=7), If(test=UnaryOp(op=Not(), operand=Name(id=''model_config_pathname'',
      ctx=Load(), lineno=264, col_offset=11, end_lineno=264, end_col_offset=32), lineno=264,
      col_offset=7, end_lineno=264, end_col_offset=32), body=[Assign(targets=[Name(id=''model_config_pathname'',
      ctx=Store(), lineno=265, col_offset=8, end_lineno=265, end_col_offset=29)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=265, col_offset=32, end_lineno=265, end_col_offset=34), attr=''path'',
      ctx=Load(), lineno=265, col_offset=32, end_lineno=265, end_col_offset=39), attr=''join'',
      ctx=Load(), lineno=265, col_offset=32, end_lineno=265, end_col_offset=44), args=[Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=265, col_offset=45, end_lineno=265, end_col_offset=47), attr=''getcwd'',
      ctx=Load(), lineno=265, col_offset=45, end_lineno=265, end_col_offset=54), args=[],
      keywords=[], lineno=265, col_offset=45, end_lineno=265, end_col_offset=56),
      Name(id=''MODEL_CONFIG_FILE'', ctx=Load(), lineno=265, col_offset=58, end_lineno=265,
      end_col_offset=75)], keywords=[], lineno=265, col_offset=32, end_lineno=265,
      end_col_offset=76), lineno=265, col_offset=8, end_lineno=265, end_col_offset=76)],
      orelse=[], lineno=264, col_offset=4, end_lineno=265, end_col_offset=76), If(test=UnaryOp(op=Not(),
      operand=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=268,
      col_offset=11, end_lineno=268, end_col_offset=15), args=[Name(id=''model_config_pathname'',
      ctx=Load(), lineno=268, col_offset=16, end_lineno=268, end_col_offset=37)],
      keywords=[], lineno=268, col_offset=11, end_lineno=268, end_col_offset=38),
      attr=''is_file'', ctx=Load(), lineno=268, col_offset=11, end_lineno=268, end_col_offset=46),
      args=[], keywords=[], lineno=268, col_offset=11, end_lineno=268, end_col_offset=48),
      lineno=268, col_offset=7, end_lineno=268, end_col_offset=48), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=269, col_offset=8, end_lineno=269, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=269, col_offset=8, end_lineno=269, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Model
      config file not found: '', lineno=269, col_offset=21, end_lineno=269, end_col_offset=103),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=269,
      col_offset=53, end_lineno=269, end_col_offset=74), conversion=-1, lineno=269,
      col_offset=21, end_lineno=269, end_col_offset=103), Constant(value='' Using
      default model config'', lineno=269, col_offset=21, end_lineno=269, end_col_offset=103)],
      lineno=269, col_offset=21, end_lineno=269, end_col_offset=103)], keywords=[],
      lineno=269, col_offset=8, end_lineno=269, end_col_offset=104), lineno=269, col_offset=8,
      end_lineno=269, end_col_offset=104), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=270, col_offset=8, end_lineno=270, end_col_offset=20)],
      value=Call(func=Name(id=''get_default_model_config'', ctx=Load(), lineno=270,
      col_offset=23, end_lineno=270, end_col_offset=47), args=[], keywords=[], lineno=270,
      col_offset=23, end_lineno=270, end_col_offset=49), lineno=270, col_offset=8,
      end_lineno=270, end_col_offset=49), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
      ctx=Load(), lineno=271, col_offset=15, end_lineno=271, end_col_offset=32), args=[Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=271, col_offset=33, end_lineno=271, end_col_offset=45), slice=Constant(value=''inference_model'',
      lineno=271, col_offset=46, end_lineno=271, end_col_offset=63), ctx=Load(), lineno=271,
      col_offset=33, end_lineno=271, end_col_offset=64)], keywords=[], lineno=271,
      col_offset=15, end_lineno=271, end_col_offset=65), Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=271, col_offset=67, end_lineno=271, end_col_offset=79), slice=Constant(value=''prompt_template'',
      lineno=271, col_offset=80, end_lineno=271, end_col_offset=97), ctx=Load(), lineno=271,
      col_offset=67, end_lineno=271, end_col_offset=98)], ctx=Load(), lineno=271,
      col_offset=15, end_lineno=271, end_col_offset=98), lineno=271, col_offset=8,
      end_lineno=271, end_col_offset=98)], orelse=[], lineno=268, col_offset=4, end_lineno=271,
      end_col_offset=98), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=276, col_offset=13, end_lineno=276, end_col_offset=17), args=[Name(id=''model_config_pathname'',
      ctx=Load(), lineno=276, col_offset=18, end_lineno=276, end_col_offset=39), Constant(value=''r'',
      lineno=276, col_offset=41, end_lineno=276, end_col_offset=44)], keywords=[],
      lineno=276, col_offset=13, end_lineno=276, end_col_offset=45), optional_vars=Name(id=''config_file'',
      ctx=Store(), lineno=276, col_offset=49, end_lineno=276, end_col_offset=60))],
      body=[Assign(targets=[Name(id=''model_config'', ctx=Store(), lineno=277, col_offset=12,
      end_lineno=277, end_col_offset=24)], value=Call(func=Attribute(value=Name(id=''yaml'',
      ctx=Load(), lineno=277, col_offset=27, end_lineno=277, end_col_offset=31), attr=''safe_load'',
      ctx=Load(), lineno=277, col_offset=27, end_lineno=277, end_col_offset=41), args=[Name(id=''config_file'',
      ctx=Load(), lineno=277, col_offset=42, end_lineno=277, end_col_offset=53)],
      keywords=[], lineno=277, col_offset=27, end_lineno=277, end_col_offset=54),
      lineno=277, col_offset=12, end_lineno=277, end_col_offset=54)], lineno=276,
      col_offset=8, end_lineno=277, end_col_offset=54)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=279, col_offset=8, end_lineno=279, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=279, col_offset=8, end_lineno=279, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Model
      config file not valid: '', lineno=279, col_offset=21, end_lineno=279, end_col_offset=103),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=279,
      col_offset=53, end_lineno=279, end_col_offset=74), conversion=-1, lineno=279,
      col_offset=21, end_lineno=279, end_col_offset=103), Constant(value='' Using
      default model config'', lineno=279, col_offset=21, end_lineno=279, end_col_offset=103)],
      lineno=279, col_offset=21, end_lineno=279, end_col_offset=103)], keywords=[],
      lineno=279, col_offset=8, end_lineno=279, end_col_offset=104), lineno=279, col_offset=8,
      end_lineno=279, end_col_offset=104), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=280, col_offset=8, end_lineno=280, end_col_offset=20)],
      value=Call(func=Name(id=''get_default_model_config'', ctx=Load(), lineno=280,
      col_offset=23, end_lineno=280, end_col_offset=47), args=[], keywords=[], lineno=280,
      col_offset=23, end_lineno=280, end_col_offset=49), lineno=280, col_offset=8,
      end_lineno=280, end_col_offset=49), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
      ctx=Load(), lineno=281, col_offset=15, end_lineno=281, end_col_offset=32), args=[Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=281, col_offset=33, end_lineno=281, end_col_offset=45), slice=Constant(value=''inference_model'',
      lineno=281, col_offset=46, end_lineno=281, end_col_offset=63), ctx=Load(), lineno=281,
      col_offset=33, end_lineno=281, end_col_offset=64)], keywords=[], lineno=281,
      col_offset=15, end_lineno=281, end_col_offset=65), Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=281, col_offset=67, end_lineno=281, end_col_offset=79), slice=Constant(value=''prompt_template'',
      lineno=281, col_offset=80, end_lineno=281, end_col_offset=97), ctx=Load(), lineno=281,
      col_offset=67, end_lineno=281, end_col_offset=98)], ctx=Load(), lineno=281,
      col_offset=15, end_lineno=281, end_col_offset=98), lineno=281, col_offset=8,
      end_lineno=281, end_col_offset=98)], lineno=278, col_offset=4, end_lineno=281,
      end_col_offset=98)], orelse=[], finalbody=[], lineno=274, col_offset=4, end_lineno=281,
      end_col_offset=98), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=283, col_offset=4, end_lineno=283, end_col_offset=11), attr=''info'',
      ctx=Load(), lineno=283, col_offset=4, end_lineno=283, end_col_offset=16), args=[JoinedStr(values=[Constant(value=''Using
      model config from file: '', lineno=283, col_offset=17, end_lineno=283, end_col_offset=73),
      FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load(), lineno=283,
      col_offset=50, end_lineno=283, end_col_offset=71), conversion=-1, lineno=283,
      col_offset=17, end_lineno=283, end_col_offset=73)], lineno=283, col_offset=17,
      end_lineno=283, end_col_offset=73)], keywords=[], lineno=283, col_offset=4,
      end_lineno=283, end_col_offset=74), lineno=283, col_offset=4, end_lineno=283,
      end_col_offset=74), Return(value=Tuple(elts=[Call(func=Name(id=''instantiate_model'',
      ctx=Load(), lineno=284, col_offset=11, end_lineno=284, end_col_offset=28), args=[Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=284, col_offset=29, end_lineno=284, end_col_offset=41), slice=Constant(value=''inference_model'',
      lineno=284, col_offset=42, end_lineno=284, end_col_offset=59), ctx=Load(), lineno=284,
      col_offset=29, end_lineno=284, end_col_offset=60)], keywords=[], lineno=284,
      col_offset=11, end_lineno=284, end_col_offset=61), Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=284, col_offset=63, end_lineno=284, end_col_offset=75), slice=Constant(value=''prompt_template'',
      lineno=284, col_offset=76, end_lineno=284, end_col_offset=93), ctx=Load(), lineno=284,
      col_offset=63, end_lineno=284, end_col_offset=94)], ctx=Load(), lineno=284,
      col_offset=11, end_lineno=284, end_col_offset=94), lineno=284, col_offset=4,
      end_lineno=284, end_col_offset=94)], decorator_list=[], lineno=256, col_offset=0,
      end_lineno=284, end_col_offset=94)'
    function_docstring: "Agrs:\n    model_config_pathname (str): The pathname of the\
      \ model config file\nReturns:\n    Tuple[object, str]: The instantiated model\
      \ and prompt template "
    function_inputs:
    - model_config_pathname
    function_defaults: []
    function_returns:
    - (instantiate_model(model_config['inference_model']), model_config['prompt_template'])
    - (instantiate_model(model_config['inference_model']), model_config['prompt_template'])
    - (instantiate_model(model_config['inference_model']), model_config['prompt_template'])
    function_calls:
    - Path(model_config_pathname).is_file
    - Path
    - logging.info
    - instantiate_model
    - open
    - os.path.join
    - os.getcwd
    - get_default_model_config
    - yaml.safe_load
    function_variables:
    - model_config
    - model_config_pathname
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_questions_file:
    function_name: write_questions_file
    function_code: "def write_questions_file(output_dir: str='') -> None:\n    \"\"\
      \"\n    Writes the default questions to a file in JSON format.\n    \"\"\"\n\
      \    questions = get_default_questions()\n    if not output_dir or not Path(output_dir).is_dir():\n\
      \        output_dir = os.getcwd()\n    with open(os.path.join(output_dir, QUESTIONS_FILE),\
      \ 'w') as file:\n        json.dump(questions, file, indent=4)"
    function_ast: FunctionDef(name='write_questions_file', args=arguments(posonlyargs=[],
      args=[arg(arg='output_dir', annotation=Name(id='str', ctx=Load(), lineno=287,
      col_offset=37, end_lineno=287, end_col_offset=40), lineno=287, col_offset=25,
      end_lineno=287, end_col_offset=40)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='',
      lineno=287, col_offset=41, end_lineno=287, end_col_offset=43)]), body=[Expr(value=Constant(value='\n    Writes
      the default questions to a file in JSON format.\n    ', lineno=288, col_offset=4,
      end_lineno=290, end_col_offset=7), lineno=288, col_offset=4, end_lineno=290,
      end_col_offset=7), Assign(targets=[Name(id='questions', ctx=Store(), lineno=291,
      col_offset=4, end_lineno=291, end_col_offset=13)], value=Call(func=Name(id='get_default_questions',
      ctx=Load(), lineno=291, col_offset=16, end_lineno=291, end_col_offset=37), args=[],
      keywords=[], lineno=291, col_offset=16, end_lineno=291, end_col_offset=39),
      lineno=291, col_offset=4, end_lineno=291, end_col_offset=39), If(test=BoolOp(op=Or(),
      values=[UnaryOp(op=Not(), operand=Name(id='output_dir', ctx=Load(), lineno=292,
      col_offset=11, end_lineno=292, end_col_offset=21), lineno=292, col_offset=7,
      end_lineno=292, end_col_offset=21), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id='Path',
      ctx=Load(), lineno=292, col_offset=29, end_lineno=292, end_col_offset=33), args=[Name(id='output_dir',
      ctx=Load(), lineno=292, col_offset=34, end_lineno=292, end_col_offset=44)],
      keywords=[], lineno=292, col_offset=29, end_lineno=292, end_col_offset=45),
      attr='is_dir', ctx=Load(), lineno=292, col_offset=29, end_lineno=292, end_col_offset=52),
      args=[], keywords=[], lineno=292, col_offset=29, end_lineno=292, end_col_offset=54),
      lineno=292, col_offset=25, end_lineno=292, end_col_offset=54)], lineno=292,
      col_offset=7, end_lineno=292, end_col_offset=54), body=[Assign(targets=[Name(id='output_dir',
      ctx=Store(), lineno=293, col_offset=8, end_lineno=293, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id='os', ctx=Load(), lineno=293, col_offset=21,
      end_lineno=293, end_col_offset=23), attr='getcwd', ctx=Load(), lineno=293, col_offset=21,
      end_lineno=293, end_col_offset=30), args=[], keywords=[], lineno=293, col_offset=21,
      end_lineno=293, end_col_offset=32), lineno=293, col_offset=8, end_lineno=293,
      end_col_offset=32)], orelse=[], lineno=292, col_offset=4, end_lineno=293, end_col_offset=32),
      With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load(), lineno=294,
      col_offset=9, end_lineno=294, end_col_offset=13), args=[Call(func=Attribute(value=Attribute(value=Name(id='os',
      ctx=Load(), lineno=294, col_offset=14, end_lineno=294, end_col_offset=16), attr='path',
      ctx=Load(), lineno=294, col_offset=14, end_lineno=294, end_col_offset=21), attr='join',
      ctx=Load(), lineno=294, col_offset=14, end_lineno=294, end_col_offset=26), args=[Name(id='output_dir',
      ctx=Load(), lineno=294, col_offset=27, end_lineno=294, end_col_offset=37), Name(id='QUESTIONS_FILE',
      ctx=Load(), lineno=294, col_offset=39, end_lineno=294, end_col_offset=53)],
      keywords=[], lineno=294, col_offset=14, end_lineno=294, end_col_offset=54),
      Constant(value='w', lineno=294, col_offset=56, end_lineno=294, end_col_offset=59)],
      keywords=[], lineno=294, col_offset=9, end_lineno=294, end_col_offset=60), optional_vars=Name(id='file',
      ctx=Store(), lineno=294, col_offset=64, end_lineno=294, end_col_offset=68))],
      body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load(), lineno=295,
      col_offset=8, end_lineno=295, end_col_offset=12), attr='dump', ctx=Load(), lineno=295,
      col_offset=8, end_lineno=295, end_col_offset=17), args=[Name(id='questions',
      ctx=Load(), lineno=295, col_offset=18, end_lineno=295, end_col_offset=27), Name(id='file',
      ctx=Load(), lineno=295, col_offset=29, end_lineno=295, end_col_offset=33)],
      keywords=[keyword(arg='indent', value=Constant(value=4, lineno=295, col_offset=42,
      end_lineno=295, end_col_offset=43), lineno=295, col_offset=35, end_lineno=295,
      end_col_offset=43)], lineno=295, col_offset=8, end_lineno=295, end_col_offset=44),
      lineno=295, col_offset=8, end_lineno=295, end_col_offset=44)], lineno=294, col_offset=4,
      end_lineno=295, end_col_offset=44)], decorator_list=[], returns=Constant(value=None,
      lineno=287, col_offset=48, end_lineno=287, end_col_offset=52), lineno=287, col_offset=0,
      end_lineno=295, end_col_offset=44)
    function_docstring: Writes the default questions to a file in JSON format.
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns: []
    function_calls:
    - Path
    - open
    - get_default_questions
    - os.path.join
    - os.getcwd
    - json.dump
    - Path(output_dir).is_dir
    function_variables:
    - output_dir
    - questions
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_model_config_file:
    function_name: write_model_config_file
    function_code: "def write_model_config_file(output_dir: str='') -> None:\n   \
      \ \"\"\"\n    Writes the default model config to a file in YAML format.\n  \
      \  \"\"\"\n    model_config = get_default_model_config()\n    if not output_dir\
      \ or not Path(output_dir).is_dir():\n        output_dir = os.getcwd()\n    with\
      \ open(os.path.join(output_dir, MODEL_CONFIG_FILE), 'w') as file:\n        yaml.dump(model_config,\
      \ file)"
    function_ast: FunctionDef(name='write_model_config_file', args=arguments(posonlyargs=[],
      args=[arg(arg='output_dir', annotation=Name(id='str', ctx=Load(), lineno=298,
      col_offset=40, end_lineno=298, end_col_offset=43), lineno=298, col_offset=28,
      end_lineno=298, end_col_offset=43)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='',
      lineno=298, col_offset=44, end_lineno=298, end_col_offset=46)]), body=[Expr(value=Constant(value='\n    Writes
      the default model config to a file in YAML format.\n    ', lineno=299, col_offset=4,
      end_lineno=301, end_col_offset=7), lineno=299, col_offset=4, end_lineno=301,
      end_col_offset=7), Assign(targets=[Name(id='model_config', ctx=Store(), lineno=302,
      col_offset=4, end_lineno=302, end_col_offset=16)], value=Call(func=Name(id='get_default_model_config',
      ctx=Load(), lineno=302, col_offset=19, end_lineno=302, end_col_offset=43), args=[],
      keywords=[], lineno=302, col_offset=19, end_lineno=302, end_col_offset=45),
      lineno=302, col_offset=4, end_lineno=302, end_col_offset=45), If(test=BoolOp(op=Or(),
      values=[UnaryOp(op=Not(), operand=Name(id='output_dir', ctx=Load(), lineno=303,
      col_offset=11, end_lineno=303, end_col_offset=21), lineno=303, col_offset=7,
      end_lineno=303, end_col_offset=21), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id='Path',
      ctx=Load(), lineno=303, col_offset=29, end_lineno=303, end_col_offset=33), args=[Name(id='output_dir',
      ctx=Load(), lineno=303, col_offset=34, end_lineno=303, end_col_offset=44)],
      keywords=[], lineno=303, col_offset=29, end_lineno=303, end_col_offset=45),
      attr='is_dir', ctx=Load(), lineno=303, col_offset=29, end_lineno=303, end_col_offset=52),
      args=[], keywords=[], lineno=303, col_offset=29, end_lineno=303, end_col_offset=54),
      lineno=303, col_offset=25, end_lineno=303, end_col_offset=54)], lineno=303,
      col_offset=7, end_lineno=303, end_col_offset=54), body=[Assign(targets=[Name(id='output_dir',
      ctx=Store(), lineno=304, col_offset=8, end_lineno=304, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id='os', ctx=Load(), lineno=304, col_offset=21,
      end_lineno=304, end_col_offset=23), attr='getcwd', ctx=Load(), lineno=304, col_offset=21,
      end_lineno=304, end_col_offset=30), args=[], keywords=[], lineno=304, col_offset=21,
      end_lineno=304, end_col_offset=32), lineno=304, col_offset=8, end_lineno=304,
      end_col_offset=32)], orelse=[], lineno=303, col_offset=4, end_lineno=304, end_col_offset=32),
      With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load(), lineno=305,
      col_offset=9, end_lineno=305, end_col_offset=13), args=[Call(func=Attribute(value=Attribute(value=Name(id='os',
      ctx=Load(), lineno=305, col_offset=14, end_lineno=305, end_col_offset=16), attr='path',
      ctx=Load(), lineno=305, col_offset=14, end_lineno=305, end_col_offset=21), attr='join',
      ctx=Load(), lineno=305, col_offset=14, end_lineno=305, end_col_offset=26), args=[Name(id='output_dir',
      ctx=Load(), lineno=305, col_offset=27, end_lineno=305, end_col_offset=37), Name(id='MODEL_CONFIG_FILE',
      ctx=Load(), lineno=305, col_offset=39, end_lineno=305, end_col_offset=56)],
      keywords=[], lineno=305, col_offset=14, end_lineno=305, end_col_offset=57),
      Constant(value='w', lineno=305, col_offset=59, end_lineno=305, end_col_offset=62)],
      keywords=[], lineno=305, col_offset=9, end_lineno=305, end_col_offset=63), optional_vars=Name(id='file',
      ctx=Store(), lineno=305, col_offset=67, end_lineno=305, end_col_offset=71))],
      body=[Expr(value=Call(func=Attribute(value=Name(id='yaml', ctx=Load(), lineno=306,
      col_offset=8, end_lineno=306, end_col_offset=12), attr='dump', ctx=Load(), lineno=306,
      col_offset=8, end_lineno=306, end_col_offset=17), args=[Name(id='model_config',
      ctx=Load(), lineno=306, col_offset=18, end_lineno=306, end_col_offset=30), Name(id='file',
      ctx=Load(), lineno=306, col_offset=32, end_lineno=306, end_col_offset=36)],
      keywords=[], lineno=306, col_offset=8, end_lineno=306, end_col_offset=37), lineno=306,
      col_offset=8, end_lineno=306, end_col_offset=37)], lineno=305, col_offset=4,
      end_lineno=306, end_col_offset=37)], decorator_list=[], returns=Constant(value=None,
      lineno=298, col_offset=51, end_lineno=298, end_col_offset=55), lineno=298, col_offset=0,
      end_lineno=306, end_col_offset=37)
    function_docstring: Writes the default model config to a file in YAML format.
    function_inputs:
    - output_dir
    function_defaults:
    - ''''''
    function_returns: []
    function_calls:
    - Path
    - yaml.dump
    - open
    - os.path.join
    - os.getcwd
    - get_default_model_config
    - Path(output_dir).is_dir
    function_variables:
    - output_dir
    - model_config
    function_decorators: []
    function_annotations: []
    function_properties: []
classes: {}
