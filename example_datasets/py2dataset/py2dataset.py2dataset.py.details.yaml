file_info:
  file_code: "\"\"\"\nFor each Python files within given directory, generate qa and\
    \ instruct json\nfiles that address the questions in the questions.json file.\
    \ Combine these to \ncreate a composite qa.json and instruct.json file that includes\
    \ all of the \ndata filues stored in the output_dir (./datasets by default)\n\
    Requirements:\n[req01] The read_file function shall accept a file path as an argument\
    \ and\n        return its contents as a dictionary. This function requires the\
    \ 'json'\n        and 'yaml' libraries for reading JSON and YAML files respectively.\n\
    [req02] The write_file function shall accept a dictionary and a file path as\n\
    \        arguments, and write the dictionary to the file in JSON or YAML format.\n\
    \        This function requires the 'json' and 'yaml' libraries for writing JSON\n\
    \        and YAML files respectively.\n[req03] The combine_json_files function\
    \ shall accept a directory path as an \n        argument, merge all JSON files\
    \ in the directory into 'qa.json' and \n        'instruct.json', remove duplicates,\
    \ and replace duplicate inputs with\n        an empty string. This function requires\
    \ the 'json' and 'os' libraries.\n[req04] The create_code_graph function shall\
    \ accept a directory path, a\n        dictionary of questions, a boolean flag\
    \ indicating whether to use a\n        large language model (LLM), and an output\
    \ directory path as arguments.\n        This function requires the 'matplotlib.pyplot'\
    \ and 'networkx' libraries\n        to create and display graphs.\n[req05] The\
    \ process_python_directories function shall accept a directory path,\n       \
    \ a dictionary of questions, a boolean flag indicating whether to use a\n    \
    \    large language model (LLM), and an output directory path as arguments.\n\
    \        This function requires the 'os', 'json', 'yaml', \n        'get_python_file_details',\
    \ and 'get_python_datasets' libraries.\n[req06] The main function shall call the\
    \ py2dataset function with appropriate\n        arguments. This function requires\
    \ the 'sys' library to access command\n        line arguments.\n\"\"\"\nimport\
    \ sys\nimport os\nimport re\nimport json\nimport logging\nimport yaml\nimport\
    \ matplotlib.pyplot as plt\nimport networkx as nx\nfrom pathlib import Path\n\
    from typing import Dict, List, Union\nfrom get_python_file_details import get_python_file_details\n\
    from get_python_datasets import get_python_datasets\nfrom get_py2dataset_params\
    \ import get_questions, get_model, get_output_dir\n\ndef read_file(file_path:\
    \ Path) -> Dict:\n    \"\"\"\n    Reads a JSON or YAML file and returns its contents\
    \ as a dictionary.\n    Args:\n        file_path (Path): The path to the file.\n\
    \    Returns:\n        The contents of the file as a dictionary.\n    \"\"\"\n\
    \    file_type = file_path.suffix[1:]\n    with file_path.open() as f:\n     \
    \   if file_type == 'json':\n            return json.load(f)\n        elif file_type\
    \ == 'yaml':\n            return yaml.load(f)\n\n\ndef write_file(data: Dict,\
    \ file_path: Path) -> None:\n    \"\"\"\n    Writes a dictionary to a JSON or\
    \ YAML file. \n    Args:\n        data (Dict): The data to write to the file.\n\
    \        file_path (Path): The path to the file.\n    \"\"\"\n    file_type =\
    \ file_path.suffix[1:]\n    with file_path.open('w') as f:\n        if file_type\
    \ == 'json':\n            json.dump(data, f, indent=4)\n        elif file_type\
    \ == 'yaml':\n            yaml.SafeDumper.ignore_aliases = lambda *args: True\n\
    \            yaml.dump(data, f, Dumper=yaml.SafeDumper, sort_keys=False)\n\n\n\
    def combine_json_files(directory) -> Dict[str, List[Dict]]:\n    \"\"\"\n    Combine\
    \ all JSON files in the output directory into 'qa.json' and \n    'instruct.json',\
    \ and then remove duplicates.\n    Args:\n        directory (str): The directory\
    \ where the output files are located.\n    \"\"\"\n    file_names = ['qa.json',\
    \ 'instruct.json']\n    keys = ['question', 'instruction']\n    combined_data\
    \ = []\n    for file in file_names:\n        file_path = Path(directory) / file\n\
    \        if file_path.exists():\n            combined_data = read_file(file_path)\n\
    \        for json_file in Path(directory).rglob(f'*.{file}'):\n            combined_data.extend(read_file(json_file))\n\
    \        combined_data = list({i[keys[file_names.index(file)]]: i for i in combined_data}.values())\n\
    \        write_file(combined_data, file_path)\n        if file == 'instruct.json':\n\
    \            instruct_combined_data = combined_data.copy()\n        combined_data\
    \ = []  \n\n    # remove duplicate inputs from instruct.json to make a cleaned_instruct.json\n\
    \    seen_inputs = set()\n    for item in instruct_combined_data:\n        if\
    \ item['input'] in seen_inputs:\n            item['input'] = ''\n        else:\n\
    \            seen_inputs.add(item['input'])\n    cleaned_instruct_file_path =\
    \ Path(directory) / 'cleaned_instruct.json'\n    write_file(instruct_combined_data,\
    \ cleaned_instruct_file_path)\n\n    # create a qa_purpose.json, qa_instruct.jaon,\
    \ and qa_cleaned_instruct.json\n    file_names = ['qa.json', 'instruct.json',\
    \ 'cleaned_instruct.json']\n    keys = ['question', 'instruction', 'instruction']\n\
    \    for file in file_names:\n        purpose_data = []\n        nquestion = 0\n\
    \        dataset = read_file(Path(directory) / file)\n        for item in dataset:\n\
    \            if item[keys[file_names.index(file)]].startswith('Purpose of'):\n\
    \                purpose_data.append(item)\n                nquestion += 1\n \
    \       if nquestion > 0:\n            # base = file without extension\n     \
    \       base = file.split(\".\")[0]\n            purpose_filepath = Path(directory)\
    \ / f'{base}_purpose.json'\n            write_file(purpose_data, purpose_filepath)\n\
    \        if file == 'qa.json':\n            qa_list = dataset.copy()\n       \
    \ if file == 'instruct.json':\n            instruct_list = dataset.copy()\n  \
    \  return {'qa_list': qa_list, 'instruct_list': instruct_list}\n       \n\ndef\
    \ create_code_graph(file_details: Dict, base_name: str, output_subdir: Path) ->\
    \ None:\n    \"\"\"\n    Generate graphs from the file_details and save them as\
    \ PNG images.\n    Args:\n        file_details (dict): The details extracted from\
    \ the Python file.\n        base_name (str): The base name of the output files.\n\
    \        output_subdir (Path): The subdirectory where the output files will be\n\
    \            saved.\n    \"\"\"\n    for graph_type in ['internal_code_graph',\
    \ 'entire_code_graph']:\n        # Create graphs\n        output_file = output_subdir\
    \ / f'{base_name}.{graph_type}.png'  \n        G = nx.DiGraph()\n        for node_name\
    \ in file_details['file_info'][graph_type]['nodes']:\n            G.add_node(node_name)\n\
    \        # Add edges\n        for edge in file_details['file_info'][graph_type]['edges']:\n\
    \            source = edge['source']\n            target = edge['target']\n  \
    \          if source in G.nodes and target in G.nodes:\n                edge_data\
    \ = {}\n                if 'target_inputs' in edge:\n                    edge_data['target_inputs']\
    \ = edge['target_inputs']\n                if 'target_returns' in edge:\n    \
    \                edge_data['target_returns'] = edge['target_returns']\n      \
    \          G.add_edge(source, target, **edge_data)\n            \n        # Save\
    \ code graph as png\n        plt.figure(figsize=(20, 20))\n        pos = nx.spring_layout(G)\n\
    \        nx.draw(G, pos, with_labels=True, font_weight='bold', font_size = 8,\
    \ node_shape='s', node_size=500, width=1, arrowsize=12)\n        edge_labels =\
    \ {}\n        for edge in G.edges(data=True):\n            label = []\n      \
    \      if 'target_inputs' in edge[2] and edge[2]['target_inputs']:\n         \
    \       label.append(f\"Inputs: {', '.join(edge[2]['target_inputs'])}\")\n   \
    \         if 'target_returns' in edge[2] and edge[2]['target_returns']:\n    \
    \            label.append(f\"\\nReturns: {', '.join(edge[2]['target_returns'])}\"\
    )\n            edge_labels[(edge[0], edge[1])] = '\\n'.join(label)\n        nx.draw_networkx_edge_labels(G,\
    \ pos, edge_labels=edge_labels, font_size=6)\n        plt.savefig(output_file)\n\
    \        plt.close()  # Close the figure\n\n\ndef process_python_directories(start_path:\
    \ str, output_dir: str, questions: Dict, llm, prompt, use_llm: bool, use_summary:\
    \ bool, graph: bool) -> Dict[str, List[Dict]]:\n    \"\"\"\n    Processes all\
    \ Python files in a given directory and its subdirectories.\n    Args:\n     \
    \   start_path (str): The directory to start the search for Python files.\n  \
    \      output_dir (str): The directory where the output files should be\n    \
    \        written.\n        questions (Dict): The set of questions to answer about\
    \ each Python \n            file.\n        model_config (Dict): The configuration\
    \ for the model.\n        use_llm (bool): Whether to use the LLM model to generate\
    \ answers for\n            json.\n        use_summary (bool): Whether to use the\
    \ summary of the code to reduce \n            dataset context length\n       \
    \ graph (bool): Whether to generate graphs for the code.\n    \"\"\"\n    python_files\
    \ = [p for p in Path(start_path).rglob('[!_]*.py') if p.is_file()]\n\n    for\
    \ file_path in python_files:\n        logging.info(f'Processing: {file_path}')\n\
    \        relative_path = Path(file_path).relative_to(start_path)\n        base_name\
    \ = '.'.join(part for part in relative_path.parts)\n\n        # use AST to get\
    \ python file details\n        file_details = get_python_file_details(file_path)\n\
    \        if file_details is None or isinstance(file_details, tuple):\n       \
    \     continue\n\n        # get lists for qa.json and intruct.json for python\
    \ file\n        qa_list, instruct_list = get_python_datasets(file_path, file_details,\
    \ base_name, questions, llm, prompt, use_llm, use_summary)\n        if not qa_list:\n\
    \            continue\n\n        output_subdir = Path(output_dir) / relative_path.parts[0]\n\
    \        output_subdir.mkdir(parents=True, exist_ok=True)\n\n        # write qa.json\
    \ and instrunct.json files\n        file_names = [f'{base_name}.qa.json', f'{base_name}.instruct.json',\
    \ f'{base_name}.details.yaml']\n        contents = [qa_list, instruct_list, file_details]\n\
    \        for file_name, content in zip(file_names, contents):\n            write_file(content,\
    \ output_subdir / file_name)\n\n        # Create code graph images\n        if\
    \ graph:\n            # add error handling if anything goes wrong with creating\
    \ or saving the graph\n            try:\n                create_code_graph(file_details,\
    \ base_name, output_subdir)\n            except:\n                logging.info(f'Error\
    \ creating graph for {file_path}')\n                continue\n\n    # combine\
    \ all of the qa.json and instruct.json files together\n    datasets = combine_json_files(output_dir)\n\
    \    return datasets\n\n\ndef py2dataset(start_path: str='', use_llm: bool=False,\
    \ use_summary: bool=False, graph: bool=False, output_dir: str='', model_config_pathname:\
    \ str='', questions_pathname: str='') -> Dict[str, List[Dict]]:\n    \"\"\"\n\
    \    Process Python files within the specified directory and its \n    subdirectories,\
    \ to generating question-answer pairs and instructions for\n    each file. The\
    \ results are written to JSON and YAML files in the specified\n    output directory.\n\
    \    Args:\n        start_path (str, optional): Path to the directory to start\
    \ the search for Python\n            files.\n        use_llm (bool, optional):\
    \ If True, use a large language model to\n            generate answers for JSON.\
    \ Defaults to False.\n        graph (bool, optional): If True, generate graphs\
    \ from the file details. \n              Defaults to False.\n        output_dir\
    \ (str, optional): Path to the directory where the output\n            files should\
    \ be written. \n        model_config_pathname (str, optional): Path to the model\
    \ configuration\n            file. \n    Raises:\n        ValueError: If the provided\
    \ directory does not exist.\n    \"\"\"\n    sys.setrecursionlimit(3000)  # Increase\
    \ the recursion limit for AST\n    \n    # if start path is empty or not a valid\
    \ directory, use current working directory\n    if start_path == '' or not os.path.isdir(start_path):\n\
    \        logging.info('No valid start path provided. Using current working directory.')\n\
    \        start_path = os.getcwd()\n    \n    output_dir = get_output_dir(output_dir)\n\
    \    questions = get_questions(questions_pathname)\n    \n    llm = None\n   \
    \ model_config = None\n    prompt = ''\n    if use_llm:\n        llm, prompt =\
    \ get_model(model_config_pathname)\n\n    datasets = process_python_directories(start_path,\
    \ output_dir, questions, llm, prompt, use_llm, use_summary, graph)\n    return\
    \ datasets\n\n\ndef main():\n    \"\"\"\n    Command line function called function\
    \ to process Python files within the \n    specified directory and its subdirectories,\
    \ to generating question-answer\n    pairs and instructions for each file. The\
    \ results are written to JSON and\n    YAML files in the specified output directory.\n\
    \    Args:\n        start_path (str, optional): Path to the directory to start\
    \ the search for Python\n            files.\n        use_llm (bool, optional):\
    \ If True, use a large language model to\n            generate answers for JSON.\
    \ Defaults to False.\n        graph (bool, optional): If True, generate graphs\
    \ from the file details.\n                Defaults to False.\n        output_dir\
    \ (str, optional): Path to the directory where the output\n            files should\
    \ be written. If not provided, writes the files to the\n            'datasets'\
    \ directory in the current working directory.\n        model_config_pathname (str,\
    \ optional): Path to the model configuration file.\n            If not provided,\
    \ defaults tO local 'py2dataset_model_config.yaml'\n        questions_pathname\
    \ (str, optional): Path to the questions file.\n    Raises: ValueError: If the\
    \ provided directory does not exist.\n    \"\"\"\n    arg_string = ' '.join(sys.argv[1:])\n\
    \    start_path = ''\n    use_llm = False\n    use_summary = False\n    quiet\
    \ = False\n    graph = False\n    output_dir = ''\n    questions_pathname = ''\n\
    \    model_config_pathname = ''\n    if '--start_path' in arg_string:\n      \
    \  start_path = arg_string.split('--start_path ')[1].split(' ')[0]\n        arg_string\
    \ = arg_string.replace(f'--start_path {start_path}', '')\n    if '--use_llm' in\
    \ arg_string:\n        use_llm = True\n        arg_string = arg_string.replace('--use_llm',\
    \ '')\n    if '--use_summary' in arg_string:\n        use_summary = True\n   \
    \     arg_string = arg_string.replace('--use_summary', '')\n    if '--quiet' in\
    \ arg_string:\n        quiet = True\n        arg_string = arg_string.replace('--quiet',\
    \ '')\n    if '--graph' in arg_string:\n        graph = True\n        arg_string\
    \ = arg_string.replace('--graph', '')\n    if '--output_dir' in arg_string:\n\
    \        output_dir = arg_string.split('--output_dir ')[1].split(' ')[0]\n   \
    \     arg_string = arg_string.replace(f'--output_dir {output_dir}', '')\n    if\
    \ '--model_config_pathname' in arg_string:\n        model_config_pathname = arg_string.split('--model_config_pathname\
    \ ')[1].split(' ')[0]\n        arg_string = arg_string.replace(f'--model_config_pathname\
    \ {model_config_pathname}', '')\n    if '--questions_pathname' in arg_string:\n\
    \        questions_pathname = arg_string.split('--questions_pathname ')[1].split('\
    \ ')[0]\n        arg_string = arg_string.replace(f'--questions_pathname {questions_pathname}',\
    \ '') \n\n    if quiet:\n        logging.getLogger().setLevel(logging.WARNING)\n\
    \    else:\n        logging.getLogger().setLevel(logging.INFO)\n\n    py2dataset(start_path,\
    \ use_llm, use_summary, graph, output_dir, model_config_pathname, questions_pathname)\n\
    \nif __name__ == \"__main__\":\n    main()"
  file_ast: 'Module(body=[Expr(value=Constant(value="\nFor each Python files within
    given directory, generate qa and instruct json\nfiles that address the questions
    in the questions.json file. Combine these to \ncreate a composite qa.json and
    instruct.json file that includes all of the \ndata filues stored in the output_dir
    (./datasets by default)\nRequirements:\n[req01] The read_file function shall accept
    a file path as an argument and\n        return its contents as a dictionary. This
    function requires the ''json''\n        and ''yaml'' libraries for reading JSON
    and YAML files respectively.\n[req02] The write_file function shall accept a dictionary
    and a file path as\n        arguments, and write the dictionary to the file in
    JSON or YAML format.\n        This function requires the ''json'' and ''yaml''
    libraries for writing JSON\n        and YAML files respectively.\n[req03] The
    combine_json_files function shall accept a directory path as an \n        argument,
    merge all JSON files in the directory into ''qa.json'' and \n        ''instruct.json'',
    remove duplicates, and replace duplicate inputs with\n        an empty string.
    This function requires the ''json'' and ''os'' libraries.\n[req04] The create_code_graph
    function shall accept a directory path, a\n        dictionary of questions, a
    boolean flag indicating whether to use a\n        large language model (LLM),
    and an output directory path as arguments.\n        This function requires the
    ''matplotlib.pyplot'' and ''networkx'' libraries\n        to create and display
    graphs.\n[req05] The process_python_directories function shall accept a directory
    path,\n        a dictionary of questions, a boolean flag indicating whether to
    use a\n        large language model (LLM), and an output directory path as arguments.\n        This
    function requires the ''os'', ''json'', ''yaml'', \n        ''get_python_file_details'',
    and ''get_python_datasets'' libraries.\n[req06] The main function shall call the
    py2dataset function with appropriate\n        arguments. This function requires
    the ''sys'' library to access command\n        line arguments.\n")), Import(names=[alias(name=''sys'')]),
    Import(names=[alias(name=''os'')]), Import(names=[alias(name=''re'')]), Import(names=[alias(name=''json'')]),
    Import(names=[alias(name=''logging'')]), Import(names=[alias(name=''yaml'')]),
    Import(names=[alias(name=''matplotlib.pyplot'', asname=''plt'')]), Import(names=[alias(name=''networkx'',
    asname=''nx'')]), ImportFrom(module=''pathlib'', names=[alias(name=''Path'')],
    level=0), ImportFrom(module=''typing'', names=[alias(name=''Dict''), alias(name=''List''),
    alias(name=''Union'')], level=0), ImportFrom(module=''get_python_file_details'',
    names=[alias(name=''get_python_file_details'')], level=0), ImportFrom(module=''get_python_datasets'',
    names=[alias(name=''get_python_datasets'')], level=0), ImportFrom(module=''get_py2dataset_params'',
    names=[alias(name=''get_questions''), alias(name=''get_model''), alias(name=''get_output_dir'')],
    level=0), FunctionDef(name=''read_file'', args=arguments(posonlyargs=[], args=[arg(arg=''file_path'',
    annotation=Name(id=''Path'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''\n    Reads a JSON or YAML file and returns
    its contents as a dictionary.\n    Args:\n        file_path (Path): The path to
    the file.\n    Returns:\n        The contents of the file as a dictionary.\n    '')),
    Assign(targets=[Name(id=''file_type'', ctx=Store())], value=Subscript(value=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''suffix'', ctx=Load()), slice=Slice(lower=Constant(value=1)),
    ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''open'', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id=''f'',
    ctx=Store()))], body=[If(test=Compare(left=Name(id=''file_type'', ctx=Load()),
    ops=[Eq()], comparators=[Constant(value=''json'')]), body=[Return(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''load'', ctx=Load()), args=[Name(id=''f'', ctx=Load())], keywords=[]))],
    orelse=[If(test=Compare(left=Name(id=''file_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''yaml'')]),
    body=[Return(value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load()), attr=''load'',
    ctx=Load()), args=[Name(id=''f'', ctx=Load())], keywords=[]))], orelse=[])])])],
    decorator_list=[], returns=Name(id=''Dict'', ctx=Load())), FunctionDef(name=''write_file'',
    args=arguments(posonlyargs=[], args=[arg(arg=''data'', annotation=Name(id=''Dict'',
    ctx=Load())), arg(arg=''file_path'', annotation=Name(id=''Path'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Writes
    a dictionary to a JSON or YAML file. \n    Args:\n        data (Dict): The data
    to write to the file.\n        file_path (Path): The path to the file.\n    '')),
    Assign(targets=[Name(id=''file_type'', ctx=Store())], value=Subscript(value=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''suffix'', ctx=Load()), slice=Slice(lower=Constant(value=1)),
    ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''open'', ctx=Load()), args=[Constant(value=''w'')], keywords=[]),
    optional_vars=Name(id=''f'', ctx=Store()))], body=[If(test=Compare(left=Name(id=''file_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''json'')]), body=[Expr(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''data'', ctx=Load()),
    Name(id=''f'', ctx=Load())], keywords=[keyword(arg=''indent'', value=Constant(value=4))]))],
    orelse=[If(test=Compare(left=Name(id=''file_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''yaml'')]),
    body=[Assign(targets=[Attribute(value=Attribute(value=Name(id=''yaml'', ctx=Load()),
    attr=''SafeDumper'', ctx=Load()), attr=''ignore_aliases'', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[],
    args=[], vararg=arg(arg=''args''), kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=Constant(value=True))), Expr(value=Call(func=Attribute(value=Name(id=''yaml'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''data'', ctx=Load()),
    Name(id=''f'', ctx=Load())], keywords=[keyword(arg=''Dumper'', value=Attribute(value=Name(id=''yaml'',
    ctx=Load()), attr=''SafeDumper'', ctx=Load())), keyword(arg=''sort_keys'', value=Constant(value=False))]))],
    orelse=[])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''combine_json_files'',
    args=arguments(posonlyargs=[], args=[arg(arg=''directory'')], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Expr(value=Constant(value="\n    Combine all JSON files in
    the output directory into ''qa.json'' and \n    ''instruct.json'', and then remove
    duplicates.\n    Args:\n        directory (str): The directory where the output
    files are located.\n    ")), Assign(targets=[Name(id=''file_names'', ctx=Store())],
    value=List(elts=[Constant(value=''qa.json''), Constant(value=''instruct.json'')],
    ctx=Load())), Assign(targets=[Name(id=''keys'', ctx=Store())], value=List(elts=[Constant(value=''question''),
    Constant(value=''instruction'')], ctx=Load())), Assign(targets=[Name(id=''combined_data'',
    ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id=''file'',
    ctx=Store()), iter=Name(id=''file_names'', ctx=Load()), body=[Assign(targets=[Name(id=''file_path'',
    ctx=Store())], value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), op=Div(), right=Name(id=''file'', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''exists'', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id=''combined_data'',
    ctx=Store())], value=Call(func=Name(id=''read_file'', ctx=Load()), args=[Name(id=''file_path'',
    ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id=''json_file'', ctx=Store()),
    iter=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), attr=''rglob'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''*.''),
    FormattedValue(value=Name(id=''file'', ctx=Load()), conversion=-1)])], keywords=[]),
    body=[Expr(value=Call(func=Attribute(value=Name(id=''combined_data'', ctx=Load()),
    attr=''extend'', ctx=Load()), args=[Call(func=Name(id=''read_file'', ctx=Load()),
    args=[Name(id=''json_file'', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]),
    Assign(targets=[Name(id=''combined_data'', ctx=Store())], value=Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Attribute(value=DictComp(key=Subscript(value=Name(id=''i'',
    ctx=Load()), slice=Subscript(value=Name(id=''keys'', ctx=Load()), slice=Call(func=Attribute(value=Name(id=''file_names'',
    ctx=Load()), attr=''index'', ctx=Load()), args=[Name(id=''file'', ctx=Load())],
    keywords=[]), ctx=Load()), ctx=Load()), value=Name(id=''i'', ctx=Load()), generators=[comprehension(target=Name(id=''i'',
    ctx=Store()), iter=Name(id=''combined_data'', ctx=Load()), ifs=[], is_async=0)]),
    attr=''values'', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id=''write_file'',
    ctx=Load()), args=[Name(id=''combined_data'', ctx=Load()), Name(id=''file_path'',
    ctx=Load())], keywords=[])), If(test=Compare(left=Name(id=''file'', ctx=Load()),
    ops=[Eq()], comparators=[Constant(value=''instruct.json'')]), body=[Assign(targets=[Name(id=''instruct_combined_data'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''combined_data'', ctx=Load()),
    attr=''copy'', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id=''combined_data'',
    ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id=''seen_inputs'',
    ctx=Store())], value=Call(func=Name(id=''set'', ctx=Load()), args=[], keywords=[])),
    For(target=Name(id=''item'', ctx=Store()), iter=Name(id=''instruct_combined_data'',
    ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id=''item'', ctx=Load()),
    slice=Constant(value=''input''), ctx=Load()), ops=[In()], comparators=[Name(id=''seen_inputs'',
    ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id=''item'', ctx=Load()),
    slice=Constant(value=''input''), ctx=Store())], value=Constant(value=''''))],
    orelse=[Expr(value=Call(func=Attribute(value=Name(id=''seen_inputs'', ctx=Load()),
    attr=''add'', ctx=Load()), args=[Subscript(value=Name(id=''item'', ctx=Load()),
    slice=Constant(value=''input''), ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id=''cleaned_instruct_file_path'',
    ctx=Store())], value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), op=Div(), right=Constant(value=''cleaned_instruct.json''))),
    Expr(value=Call(func=Name(id=''write_file'', ctx=Load()), args=[Name(id=''instruct_combined_data'',
    ctx=Load()), Name(id=''cleaned_instruct_file_path'', ctx=Load())], keywords=[])),
    Assign(targets=[Name(id=''file_names'', ctx=Store())], value=List(elts=[Constant(value=''qa.json''),
    Constant(value=''instruct.json''), Constant(value=''cleaned_instruct.json'')],
    ctx=Load())), Assign(targets=[Name(id=''keys'', ctx=Store())], value=List(elts=[Constant(value=''question''),
    Constant(value=''instruction''), Constant(value=''instruction'')], ctx=Load())),
    For(target=Name(id=''file'', ctx=Store()), iter=Name(id=''file_names'', ctx=Load()),
    body=[Assign(targets=[Name(id=''purpose_data'', ctx=Store())], value=List(elts=[],
    ctx=Load())), Assign(targets=[Name(id=''nquestion'', ctx=Store())], value=Constant(value=0)),
    Assign(targets=[Name(id=''dataset'', ctx=Store())], value=Call(func=Name(id=''read_file'',
    ctx=Load()), args=[BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), op=Div(), right=Name(id=''file'', ctx=Load()))], keywords=[])),
    For(target=Name(id=''item'', ctx=Store()), iter=Name(id=''dataset'', ctx=Load()),
    body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id=''item'', ctx=Load()),
    slice=Subscript(value=Name(id=''keys'', ctx=Load()), slice=Call(func=Attribute(value=Name(id=''file_names'',
    ctx=Load()), attr=''index'', ctx=Load()), args=[Name(id=''file'', ctx=Load())],
    keywords=[]), ctx=Load()), ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''Purpose
    of'')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''purpose_data'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[Name(id=''item'', ctx=Load())],
    keywords=[])), AugAssign(target=Name(id=''nquestion'', ctx=Store()), op=Add(),
    value=Constant(value=1))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id=''nquestion'',
    ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id=''base'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id=''file'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''.'')], keywords=[]),
    slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id=''purpose_filepath'',
    ctx=Store())], value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), op=Div(), right=JoinedStr(values=[FormattedValue(value=Name(id=''base'',
    ctx=Load()), conversion=-1), Constant(value=''_purpose.json'')]))), Expr(value=Call(func=Name(id=''write_file'',
    ctx=Load()), args=[Name(id=''purpose_data'', ctx=Load()), Name(id=''purpose_filepath'',
    ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id=''file'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''qa.json'')]), body=[Assign(targets=[Name(id=''qa_list'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''dataset'', ctx=Load()),
    attr=''copy'', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id=''file'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''instruct.json'')]), body=[Assign(targets=[Name(id=''instruct_list'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''dataset'', ctx=Load()),
    attr=''copy'', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]),
    Return(value=Dict(keys=[Constant(value=''qa_list''), Constant(value=''instruct_list'')],
    values=[Name(id=''qa_list'', ctx=Load()), Name(id=''instruct_list'', ctx=Load())]))],
    decorator_list=[], returns=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''Dict'',
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name=''create_code_graph'',
    args=arguments(posonlyargs=[], args=[arg(arg=''file_details'', annotation=Name(id=''Dict'',
    ctx=Load())), arg(arg=''base_name'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''output_subdir'', annotation=Name(id=''Path'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Generate
    graphs from the file_details and save them as PNG images.\n    Args:\n        file_details
    (dict): The details extracted from the Python file.\n        base_name (str):
    The base name of the output files.\n        output_subdir (Path): The subdirectory
    where the output files will be\n            saved.\n    '')), For(target=Name(id=''graph_type'',
    ctx=Store()), iter=List(elts=[Constant(value=''internal_code_graph''), Constant(value=''entire_code_graph'')],
    ctx=Load()), body=[Assign(targets=[Name(id=''output_file'', ctx=Store())], value=BinOp(left=Name(id=''output_subdir'',
    ctx=Load()), op=Div(), right=JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.''), FormattedValue(value=Name(id=''graph_type'',
    ctx=Load()), conversion=-1), Constant(value=''.png'')]))), Assign(targets=[Name(id=''G'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load()), attr=''DiGraph'',
    ctx=Load()), args=[], keywords=[])), For(target=Name(id=''node_name'', ctx=Store()),
    iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Name(id=''graph_type'',
    ctx=Load()), ctx=Load()), slice=Constant(value=''nodes''), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''node_name'', ctx=Load())],
    keywords=[]))], orelse=[]), For(target=Name(id=''edge'', ctx=Store()), iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Name(id=''graph_type'',
    ctx=Load()), ctx=Load()), slice=Constant(value=''edges''), ctx=Load()), body=[Assign(targets=[Name(id=''source'',
    ctx=Store())], value=Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=''source''),
    ctx=Load())), Assign(targets=[Name(id=''target'', ctx=Store())], value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=''target''), ctx=Load())), If(test=BoolOp(op=And(),
    values=[Compare(left=Name(id=''source'', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''nodes'', ctx=Load())]), Compare(left=Name(id=''target'', ctx=Load()),
    ops=[In()], comparators=[Attribute(value=Name(id=''G'', ctx=Load()), attr=''nodes'',
    ctx=Load())])]), body=[Assign(targets=[Name(id=''edge_data'', ctx=Store())], value=Dict(keys=[],
    values=[])), If(test=Compare(left=Constant(value=''target_inputs''), ops=[In()],
    comparators=[Name(id=''edge'', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
    ctx=Load()), slice=Constant(value=''target_inputs''), ctx=Store())], value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=''target_inputs''), ctx=Load()))], orelse=[]),
    If(test=Compare(left=Constant(value=''target_returns''), ops=[In()], comparators=[Name(id=''edge'',
    ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'', ctx=Load()),
    slice=Constant(value=''target_returns''), ctx=Store())], value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=''target_returns''), ctx=Load()))], orelse=[]),
    Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load()), attr=''add_edge'',
    ctx=Load()), args=[Name(id=''source'', ctx=Load()), Name(id=''target'', ctx=Load())],
    keywords=[keyword(value=Name(id=''edge_data'', ctx=Load()))]))], orelse=[])],
    orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''plt'', ctx=Load()),
    attr=''figure'', ctx=Load()), args=[], keywords=[keyword(arg=''figsize'', value=Tuple(elts=[Constant(value=20),
    Constant(value=20)], ctx=Load()))])), Assign(targets=[Name(id=''pos'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load()), attr=''spring_layout'',
    ctx=Load()), args=[Name(id=''G'', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''nx'',
    ctx=Load()), attr=''draw'', ctx=Load()), args=[Name(id=''G'', ctx=Load()), Name(id=''pos'',
    ctx=Load())], keywords=[keyword(arg=''with_labels'', value=Constant(value=True)),
    keyword(arg=''font_weight'', value=Constant(value=''bold'')), keyword(arg=''font_size'',
    value=Constant(value=8)), keyword(arg=''node_shape'', value=Constant(value=''s'')),
    keyword(arg=''node_size'', value=Constant(value=500)), keyword(arg=''width'',
    value=Constant(value=1)), keyword(arg=''arrowsize'', value=Constant(value=12))])),
    Assign(targets=[Name(id=''edge_labels'', ctx=Store())], value=Dict(keys=[], values=[])),
    For(target=Name(id=''edge'', ctx=Store()), iter=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''edges'', ctx=Load()), args=[], keywords=[keyword(arg=''data'',
    value=Constant(value=True))]), body=[Assign(targets=[Name(id=''label'', ctx=Store())],
    value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=''target_inputs''),
    ops=[In()], comparators=[Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=2),
    ctx=Load())]), Subscript(value=Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_inputs''),
    ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Inputs:
    ''), FormattedValue(value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_inputs''),
    ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(),
    values=[Compare(left=Constant(value=''target_returns''), ops=[In()], comparators=[Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=2), ctx=Load())]), Subscript(value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_returns''),
    ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''\nReturns:
    ''), FormattedValue(value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_returns''),
    ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id=''edge_labels'',
    ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=1), ctx=Load())], ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Constant(value=''\n''),
    attr=''join'', ctx=Load()), args=[Name(id=''label'', ctx=Load())], keywords=[]))],
    orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load()),
    attr=''draw_networkx_edge_labels'', ctx=Load()), args=[Name(id=''G'', ctx=Load()),
    Name(id=''pos'', ctx=Load())], keywords=[keyword(arg=''edge_labels'', value=Name(id=''edge_labels'',
    ctx=Load())), keyword(arg=''font_size'', value=Constant(value=6))])), Expr(value=Call(func=Attribute(value=Name(id=''plt'',
    ctx=Load()), attr=''savefig'', ctx=Load()), args=[Name(id=''output_file'', ctx=Load())],
    keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''plt'', ctx=Load()),
    attr=''close'', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[],
    returns=Constant(value=None)), FunctionDef(name=''process_python_directories'',
    args=arguments(posonlyargs=[], args=[arg(arg=''start_path'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''questions'', annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''llm''),
    arg(arg=''prompt''), arg(arg=''use_llm'', annotation=Name(id=''bool'', ctx=Load())),
    arg(arg=''use_summary'', annotation=Name(id=''bool'', ctx=Load())), arg(arg=''graph'',
    annotation=Name(id=''bool'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''\n    Processes all Python files in a given
    directory and its subdirectories.\n    Args:\n        start_path (str): The directory
    to start the search for Python files.\n        output_dir (str): The directory
    where the output files should be\n            written.\n        questions (Dict):
    The set of questions to answer about each Python \n            file.\n        model_config
    (Dict): The configuration for the model.\n        use_llm (bool): Whether to use
    the LLM model to generate answers for\n            json.\n        use_summary
    (bool): Whether to use the summary of the code to reduce \n            dataset
    context length\n        graph (bool): Whether to generate graphs for the code.\n    '')),
    Assign(targets=[Name(id=''python_files'', ctx=Store())], value=ListComp(elt=Name(id=''p'',
    ctx=Load()), generators=[comprehension(target=Name(id=''p'', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''start_path'', ctx=Load())], keywords=[]), attr=''rglob'',
    ctx=Load()), args=[Constant(value=''[!_]*.py'')], keywords=[]), ifs=[Call(func=Attribute(value=Name(id=''p'',
    ctx=Load()), attr=''is_file'', ctx=Load()), args=[], keywords=[])], is_async=0)])),
    For(target=Name(id=''file_path'', ctx=Store()), iter=Name(id=''python_files'',
    ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Processing:
    ''), FormattedValue(value=Name(id=''file_path'', ctx=Load()), conversion=-1)])],
    keywords=[])), Assign(targets=[Name(id=''relative_path'', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''file_path'', ctx=Load())], keywords=[]), attr=''relative_to'',
    ctx=Load()), args=[Name(id=''start_path'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''base_name'',
    ctx=Store())], value=Call(func=Attribute(value=Constant(value=''.''), attr=''join'',
    ctx=Load()), args=[GeneratorExp(elt=Name(id=''part'', ctx=Load()), generators=[comprehension(target=Name(id=''part'',
    ctx=Store()), iter=Attribute(value=Name(id=''relative_path'', ctx=Load()), attr=''parts'',
    ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id=''file_details'',
    ctx=Store())], value=Call(func=Name(id=''get_python_file_details'', ctx=Load()),
    args=[Name(id=''file_path'', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(),
    values=[Compare(left=Name(id=''file_details'', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]),
    Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''file_details'',
    ctx=Load()), Name(id=''tuple'', ctx=Load())], keywords=[])]), body=[Continue()],
    orelse=[]), Assign(targets=[Tuple(elts=[Name(id=''qa_list'', ctx=Store()), Name(id=''instruct_list'',
    ctx=Store())], ctx=Store())], value=Call(func=Name(id=''get_python_datasets'',
    ctx=Load()), args=[Name(id=''file_path'', ctx=Load()), Name(id=''file_details'',
    ctx=Load()), Name(id=''base_name'', ctx=Load()), Name(id=''questions'', ctx=Load()),
    Name(id=''llm'', ctx=Load()), Name(id=''prompt'', ctx=Load()), Name(id=''use_llm'',
    ctx=Load()), Name(id=''use_summary'', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(),
    operand=Name(id=''qa_list'', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id=''output_subdir'',
    ctx=Store())], value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[]), op=Div(), right=Subscript(value=Attribute(value=Name(id=''relative_path'',
    ctx=Load()), attr=''parts'', ctx=Load()), slice=Constant(value=0), ctx=Load()))),
    Expr(value=Call(func=Attribute(value=Name(id=''output_subdir'', ctx=Load()), attr=''mkdir'',
    ctx=Load()), args=[], keywords=[keyword(arg=''parents'', value=Constant(value=True)),
    keyword(arg=''exist_ok'', value=Constant(value=True))])), Assign(targets=[Name(id=''file_names'',
    ctx=Store())], value=List(elts=[JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.qa.json'')]), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.instruct.json'')]), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.details.yaml'')])], ctx=Load())),
    Assign(targets=[Name(id=''contents'', ctx=Store())], value=List(elts=[Name(id=''qa_list'',
    ctx=Load()), Name(id=''instruct_list'', ctx=Load()), Name(id=''file_details'',
    ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id=''file_name'', ctx=Store()),
    Name(id=''content'', ctx=Store())], ctx=Store()), iter=Call(func=Name(id=''zip'',
    ctx=Load()), args=[Name(id=''file_names'', ctx=Load()), Name(id=''contents'',
    ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id=''write_file'',
    ctx=Load()), args=[Name(id=''content'', ctx=Load()), BinOp(left=Name(id=''output_subdir'',
    ctx=Load()), op=Div(), right=Name(id=''file_name'', ctx=Load()))], keywords=[]))],
    orelse=[]), If(test=Name(id=''graph'', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Name(id=''create_code_graph'',
    ctx=Load()), args=[Name(id=''file_details'', ctx=Load()), Name(id=''base_name'',
    ctx=Load()), Name(id=''output_subdir'', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Error
    creating graph for ''), FormattedValue(value=Name(id=''file_path'', ctx=Load()),
    conversion=-1)])], keywords=[])), Continue()])], orelse=[], finalbody=[])], orelse=[])],
    orelse=[]), Assign(targets=[Name(id=''datasets'', ctx=Store())], value=Call(func=Name(id=''combine_json_files'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load())], keywords=[])), Return(value=Name(id=''datasets'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''Dict'', ctx=Load()),
    slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())),
    FunctionDef(name=''py2dataset'', args=arguments(posonlyargs=[], args=[arg(arg=''start_path'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''use_llm'', annotation=Name(id=''bool'',
    ctx=Load())), arg(arg=''use_summary'', annotation=Name(id=''bool'', ctx=Load())),
    arg(arg=''graph'', annotation=Name(id=''bool'', ctx=Load())), arg(arg=''output_dir'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''model_config_pathname'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''''), Constant(value=False),
    Constant(value=False), Constant(value=False), Constant(value=''''), Constant(value=''''),
    Constant(value='''')]), body=[Expr(value=Constant(value=''\n    Process Python
    files within the specified directory and its \n    subdirectories, to generating
    question-answer pairs and instructions for\n    each file. The results are written
    to JSON and YAML files in the specified\n    output directory.\n    Args:\n        start_path
    (str, optional): Path to the directory to start the search for Python\n            files.\n        use_llm
    (bool, optional): If True, use a large language model to\n            generate
    answers for JSON. Defaults to False.\n        graph (bool, optional): If True,
    generate graphs from the file details. \n              Defaults to False.\n        output_dir
    (str, optional): Path to the directory where the output\n            files should
    be written. \n        model_config_pathname (str, optional): Path to the model
    configuration\n            file. \n    Raises:\n        ValueError: If the provided
    directory does not exist.\n    '')), Expr(value=Call(func=Attribute(value=Name(id=''sys'',
    ctx=Load()), attr=''setrecursionlimit'', ctx=Load()), args=[Constant(value=3000)],
    keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id=''start_path'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value='''')]), UnaryOp(op=Not(),
    operand=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load()),
    attr=''path'', ctx=Load()), attr=''isdir'', ctx=Load()), args=[Name(id=''start_path'',
    ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[Constant(value=''No valid start
    path provided. Using current working directory.'')], keywords=[])), Assign(targets=[Name(id=''start_path'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''os'', ctx=Load()), attr=''getcwd'',
    ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Call(func=Name(id=''get_output_dir'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''questions'', ctx=Store())],
    value=Call(func=Name(id=''get_questions'', ctx=Load()), args=[Name(id=''questions_pathname'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''llm'', ctx=Store())], value=Constant(value=None)),
    Assign(targets=[Name(id=''model_config'', ctx=Store())], value=Constant(value=None)),
    Assign(targets=[Name(id=''prompt'', ctx=Store())], value=Constant(value='''')),
    If(test=Name(id=''use_llm'', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id=''llm'',
    ctx=Store()), Name(id=''prompt'', ctx=Store())], ctx=Store())], value=Call(func=Name(id=''get_model'',
    ctx=Load()), args=[Name(id=''model_config_pathname'', ctx=Load())], keywords=[]))],
    orelse=[]), Assign(targets=[Name(id=''datasets'', ctx=Store())], value=Call(func=Name(id=''process_python_directories'',
    ctx=Load()), args=[Name(id=''start_path'', ctx=Load()), Name(id=''output_dir'',
    ctx=Load()), Name(id=''questions'', ctx=Load()), Name(id=''llm'', ctx=Load()),
    Name(id=''prompt'', ctx=Load()), Name(id=''use_llm'', ctx=Load()), Name(id=''use_summary'',
    ctx=Load()), Name(id=''graph'', ctx=Load())], keywords=[])), Return(value=Name(id=''datasets'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''Dict'', ctx=Load()),
    slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())),
    FunctionDef(name=''main'', args=arguments(posonlyargs=[], args=[], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Command line
    function called function to process Python files within the \n    specified directory
    and its subdirectories, to generating question-answer\n    pairs and instructions
    for each file. The results are written to JSON and\n    YAML files in the specified
    output directory.\n    Args:\n        start_path (str, optional): Path to the
    directory to start the search for Python\n            files.\n        use_llm
    (bool, optional): If True, use a large language model to\n            generate
    answers for JSON. Defaults to False.\n        graph (bool, optional): If True,
    generate graphs from the file details.\n                Defaults to False.\n        output_dir
    (str, optional): Path to the directory where the output\n            files should
    be written. If not provided, writes the files to the\n            ''datasets''
    directory in the current working directory.\n        model_config_pathname (str,
    optional): Path to the model configuration file.\n            If not provided,
    defaults tO local ''py2dataset_model_config.yaml''\n        questions_pathname
    (str, optional): Path to the questions file.\n    Raises: ValueError: If the provided
    directory does not exist.\n    ")), Assign(targets=[Name(id=''arg_string'', ctx=Store())],
    value=Call(func=Attribute(value=Constant(value='' ''), attr=''join'', ctx=Load()),
    args=[Subscript(value=Attribute(value=Name(id=''sys'', ctx=Load()), attr=''argv'',
    ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])),
    Assign(targets=[Name(id=''start_path'', ctx=Store())], value=Constant(value='''')),
    Assign(targets=[Name(id=''use_llm'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''use_summary'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''quiet'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''graph'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''output_dir'', ctx=Store())], value=Constant(value='''')),
    Assign(targets=[Name(id=''questions_pathname'', ctx=Store())], value=Constant(value='''')),
    Assign(targets=[Name(id=''model_config_pathname'', ctx=Store())], value=Constant(value='''')),
    If(test=Compare(left=Constant(value=''--start_path''), ops=[In()], comparators=[Name(id=''arg_string'',
    ctx=Load())]), body=[Assign(targets=[Name(id=''start_path'', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--start_path
    '')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--start_path
    ''), FormattedValue(value=Name(id=''start_path'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--use_llm''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''use_llm'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--use_llm''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--use_summary''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''use_summary'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--use_summary''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--quiet''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''quiet'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--quiet''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--graph''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''graph'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--graph''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--output_dir''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--output_dir
    '')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--output_dir
    ''), FormattedValue(value=Name(id=''output_dir'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--model_config_pathname''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''model_config_pathname'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--model_config_pathname
    '')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--model_config_pathname
    ''), FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--questions_pathname''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''questions_pathname'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--questions_pathname
    '')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--questions_pathname
    ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Name(id=''quiet'',
    ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[], keywords=[]), attr=''setLevel'',
    ctx=Load()), args=[Attribute(value=Name(id=''logging'', ctx=Load()), attr=''WARNING'',
    ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[], keywords=[]), attr=''setLevel'',
    ctx=Load()), args=[Attribute(value=Name(id=''logging'', ctx=Load()), attr=''INFO'',
    ctx=Load())], keywords=[]))]), Expr(value=Call(func=Name(id=''py2dataset'', ctx=Load()),
    args=[Name(id=''start_path'', ctx=Load()), Name(id=''use_llm'', ctx=Load()), Name(id=''use_summary'',
    ctx=Load()), Name(id=''graph'', ctx=Load()), Name(id=''output_dir'', ctx=Load()),
    Name(id=''model_config_pathname'', ctx=Load()), Name(id=''questions_pathname'',
    ctx=Load())], keywords=[]))], decorator_list=[]), If(test=Compare(left=Name(id=''__name__'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''__main__'')]), body=[Expr(value=Call(func=Name(id=''main'',
    ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])'
  file_dependencies:
  - logging
  - pathlib
  - get_py2dataset_params
  - sys
  - yaml
  - os
  - re
  - networkx
  - get_python_file_details
  - matplotlib.pyplot
  - typing
  - get_python_datasets
  - json
  file_functions:
  - read_file
  - write_file
  - combine_json_files
  - create_code_graph
  - process_python_directories
  - py2dataset
  - main
  file_classes: []
  file_control_flow: module -> def read_file -> with -> if -> if -> def write_file
    -> with -> if -> if -> def combine_json_files -> for -> if -> for -> if -> for
    -> if -> for -> for -> if -> if -> if -> if -> def create_code_graph -> for ->
    for -> for -> if -> if -> if -> for -> if -> if -> def process_python_directories
    -> for -> if -> if -> for -> if -> try -> except -> def py2dataset -> if -> if
    -> def main -> if -> if -> if -> if -> if -> if -> if -> if -> if -> if
  file_summary: '{dependencies: [logging, pathlib, get_py2dataset_params, sys, yaml,
    os, re, networkx, get_python_file_details, matplotlib.pyplot, typing, get_python_datasets,
    json], function_defs: [{read_file: {inputs: [file_path], calls: [file_path.open,
    yaml.load, json.load], returns: [json.load(f), yaml.load(f)]}}, {write_file: {inputs:
    [data, file_path], calls: [json.dump, file_path.open, yaml.dump], returns: []}},
    {combine_json_files: {inputs: [directory], calls: [Path, file_path.exists, {i[keys[file_names.index(file)]]:
    i for i in combined_data}.values, write_file, dataset.copy, set, file.split, file_names.index,
    read_file, combined_data.copy, purpose_data.append, seen_inputs.add, item[keys[file_names.index(file)]].startswith,
    combined_data.extend, list, Path(directory).rglob], returns: [{''qa_list'': qa_list,
    ''instruct_list'': instruct_list}]}}, {create_code_graph: {inputs: [file_details,
    base_name, output_subdir], calls: [label.append, nx.draw_networkx_edge_labels,
    plt.savefig, plt.close, nx.DiGraph, plt.figure, '', ''.join, nx.spring_layout,
    nx.draw, G.add_edge, G.edges, G.add_node, ''\\n''.join], returns: []}}, {process_python_directories:
    {inputs: [start_path, output_dir, questions, llm, prompt, use_llm, use_summary,
    graph], calls: [Path, logging.info, write_file, Path(file_path).relative_to, ''.''.join,
    Path(start_path).rglob, isinstance, p.is_file, get_python_file_details, output_subdir.mkdir,
    create_code_graph, combine_json_files, get_python_datasets, zip], returns: [datasets]}},
    {py2dataset: {inputs: [start_path, use_llm, use_summary, graph, output_dir, model_config_pathname,
    questions_pathname], calls: [sys.setrecursionlimit, logging.info, process_python_directories,
    get_model, os.getcwd, get_output_dir, os.path.isdir, get_questions], returns:
    [datasets]}}, {main: {inputs: [], calls: [arg_string.split(''--model_config_pathname
    '')[1].split, logging.getLogger, arg_string.split(''--start_path '')[1].split,
    arg_string.split, '' ''.join, arg_string.split(''--questions_pathname '')[1].split,
    arg_string.replace, py2dataset, logging.getLogger().setLevel, arg_string.split(''--output_dir
    '')[1].split], returns: []}}], class_defs: []}'
  internal_code_graph:
    nodes:
    - read_file
    - write_file
    - combine_json_files
    - create_code_graph
    - process_python_directories
    - py2dataset
    - main
    edges:
    - source: combine_json_files
      target: write_file
      target_inputs:
      - data
      - file_path
      target_returns: []
    - source: combine_json_files
      target: read_file
      target_inputs:
      - file_path
      target_returns:
      - json.load(f)
      - yaml.load(f)
    - source: process_python_directories
      target: write_file
      target_inputs:
      - data
      - file_path
      target_returns: []
    - source: process_python_directories
      target: create_code_graph
      target_inputs:
      - file_details
      - base_name
      - output_subdir
      target_returns: []
    - source: process_python_directories
      target: combine_json_files
      target_inputs:
      - directory
      target_returns:
      - '{''qa_list'': qa_list, ''instruct_list'': instruct_list}'
    - source: py2dataset
      target: process_python_directories
      target_inputs:
      - start_path
      - output_dir
      - questions
      - llm
      - prompt
      - use_llm
      - use_summary
      - graph
      target_returns:
      - datasets
    - source: main
      target: py2dataset
      target_inputs:
      - start_path
      - use_llm
      - use_summary
      - graph
      - output_dir
      - model_config_pathname
      - questions_pathname
      target_returns:
      - datasets
  entire_code_graph:
    nodes:
    - read_file
    - write_file
    - combine_json_files
    - create_code_graph
    - process_python_directories
    - py2dataset
    - main
    - file_path.open
    - yaml.load
    - json.load
    - json.dump
    - yaml.dump
    - Path
    - file_path.exists
    - '{i[keys[file_names.index(file)]]: i for i in combined_data}.values'
    - dataset.copy
    - set
    - file.split
    - file_names.index
    - combined_data.copy
    - purpose_data.append
    - seen_inputs.add
    - item[keys[file_names.index(file)]].startswith
    - combined_data.extend
    - list
    - Path(directory).rglob
    - label.append
    - nx.draw_networkx_edge_labels
    - plt.savefig
    - plt.close
    - nx.DiGraph
    - plt.figure
    - ''', ''.join'
    - nx.spring_layout
    - nx.draw
    - G.add_edge
    - G.edges
    - G.add_node
    - '''\n''.join'
    - logging.info
    - Path(file_path).relative_to
    - '''.''.join'
    - Path(start_path).rglob
    - isinstance
    - p.is_file
    - get_python_file_details
    - output_subdir.mkdir
    - get_python_datasets
    - zip
    - sys.setrecursionlimit
    - get_model
    - os.getcwd
    - get_output_dir
    - os.path.isdir
    - get_questions
    - arg_string.split('--model_config_pathname ')[1].split
    - logging.getLogger
    - arg_string.split('--start_path ')[1].split
    - arg_string.split
    - ''' ''.join'
    - arg_string.split('--questions_pathname ')[1].split
    - arg_string.replace
    - logging.getLogger().setLevel
    - arg_string.split('--output_dir ')[1].split
    edges:
    - source: read_file
      target: file_path.open
    - source: read_file
      target: yaml.load
    - source: read_file
      target: json.load
    - source: write_file
      target: json.dump
    - source: write_file
      target: file_path.open
    - source: write_file
      target: yaml.dump
    - source: combine_json_files
      target: Path
    - source: combine_json_files
      target: file_path.exists
    - source: combine_json_files
      target: '{i[keys[file_names.index(file)]]: i for i in combined_data}.values'
    - source: combine_json_files
      target: write_file
      target_inputs:
      - data
      - file_path
      target_returns: []
    - source: combine_json_files
      target: dataset.copy
    - source: combine_json_files
      target: set
    - source: combine_json_files
      target: file.split
    - source: combine_json_files
      target: file_names.index
    - source: combine_json_files
      target: read_file
      target_inputs:
      - file_path
      target_returns:
      - json.load(f)
      - yaml.load(f)
    - source: combine_json_files
      target: combined_data.copy
    - source: combine_json_files
      target: purpose_data.append
    - source: combine_json_files
      target: seen_inputs.add
    - source: combine_json_files
      target: item[keys[file_names.index(file)]].startswith
    - source: combine_json_files
      target: combined_data.extend
    - source: combine_json_files
      target: list
    - source: combine_json_files
      target: Path(directory).rglob
    - source: create_code_graph
      target: label.append
    - source: create_code_graph
      target: nx.draw_networkx_edge_labels
    - source: create_code_graph
      target: plt.savefig
    - source: create_code_graph
      target: plt.close
    - source: create_code_graph
      target: nx.DiGraph
    - source: create_code_graph
      target: plt.figure
    - source: create_code_graph
      target: ''', ''.join'
    - source: create_code_graph
      target: nx.spring_layout
    - source: create_code_graph
      target: nx.draw
    - source: create_code_graph
      target: G.add_edge
    - source: create_code_graph
      target: G.edges
    - source: create_code_graph
      target: G.add_node
    - source: create_code_graph
      target: '''\n''.join'
    - source: process_python_directories
      target: Path
    - source: process_python_directories
      target: logging.info
    - source: process_python_directories
      target: write_file
      target_inputs:
      - data
      - file_path
      target_returns: []
    - source: process_python_directories
      target: Path(file_path).relative_to
    - source: process_python_directories
      target: '''.''.join'
    - source: process_python_directories
      target: Path(start_path).rglob
    - source: process_python_directories
      target: isinstance
    - source: process_python_directories
      target: p.is_file
    - source: process_python_directories
      target: get_python_file_details
    - source: process_python_directories
      target: output_subdir.mkdir
    - source: process_python_directories
      target: create_code_graph
      target_inputs:
      - file_details
      - base_name
      - output_subdir
      target_returns: []
    - source: process_python_directories
      target: combine_json_files
      target_inputs:
      - directory
      target_returns:
      - '{''qa_list'': qa_list, ''instruct_list'': instruct_list}'
    - source: process_python_directories
      target: get_python_datasets
    - source: process_python_directories
      target: zip
    - source: py2dataset
      target: sys.setrecursionlimit
    - source: py2dataset
      target: logging.info
    - source: py2dataset
      target: process_python_directories
      target_inputs:
      - start_path
      - output_dir
      - questions
      - llm
      - prompt
      - use_llm
      - use_summary
      - graph
      target_returns:
      - datasets
    - source: py2dataset
      target: get_model
    - source: py2dataset
      target: os.getcwd
    - source: py2dataset
      target: get_output_dir
    - source: py2dataset
      target: os.path.isdir
    - source: py2dataset
      target: get_questions
    - source: main
      target: arg_string.split('--model_config_pathname ')[1].split
    - source: main
      target: logging.getLogger
    - source: main
      target: arg_string.split('--start_path ')[1].split
    - source: main
      target: arg_string.split
    - source: main
      target: ''' ''.join'
    - source: main
      target: arg_string.split('--questions_pathname ')[1].split
    - source: main
      target: arg_string.replace
    - source: main
      target: py2dataset
      target_inputs:
      - start_path
      - use_llm
      - use_summary
      - graph
      - output_dir
      - model_config_pathname
      - questions_pathname
      target_returns:
      - datasets
    - source: main
      target: logging.getLogger().setLevel
    - source: main
      target: arg_string.split('--output_dir ')[1].split
functions:
  read_file:
    function_name: read_file
    function_code: "def read_file(file_path: Path) -> Dict:\n    \"\"\"\n    Reads\
      \ a JSON or YAML file and returns its contents as a dictionary.\n    Args:\n\
      \        file_path (Path): The path to the file.\n    Returns:\n        The\
      \ contents of the file as a dictionary.\n    \"\"\"\n    file_type = file_path.suffix[1:]\n\
      \    with file_path.open() as f:\n        if file_type == 'json':\n        \
      \    return json.load(f)\n        elif file_type == 'yaml':\n            return\
      \ yaml.load(f)"
    function_ast: 'FunctionDef(name=''read_file'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_path'', annotation=Name(id=''Path'', ctx=Load(), lineno=46,
      col_offset=25, end_lineno=46, end_col_offset=29), lineno=46, col_offset=14,
      end_lineno=46, end_col_offset=29)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Reads a JSON or YAML file and returns
      its contents as a dictionary.\n    Args:\n        file_path (Path): The path
      to the file.\n    Returns:\n        The contents of the file as a dictionary.\n    '',
      lineno=47, col_offset=4, end_lineno=53, end_col_offset=7), lineno=47, col_offset=4,
      end_lineno=53, end_col_offset=7), Assign(targets=[Name(id=''file_type'', ctx=Store(),
      lineno=54, col_offset=4, end_lineno=54, end_col_offset=13)], value=Subscript(value=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=54, col_offset=16, end_lineno=54, end_col_offset=25), attr=''suffix'',
      ctx=Load(), lineno=54, col_offset=16, end_lineno=54, end_col_offset=32), slice=Slice(lower=Constant(value=1,
      lineno=54, col_offset=33, end_lineno=54, end_col_offset=34), lineno=54, col_offset=33,
      end_lineno=54, end_col_offset=35), ctx=Load(), lineno=54, col_offset=16, end_lineno=54,
      end_col_offset=36), lineno=54, col_offset=4, end_lineno=54, end_col_offset=36),
      With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=55, col_offset=9, end_lineno=55, end_col_offset=18), attr=''open'',
      ctx=Load(), lineno=55, col_offset=9, end_lineno=55, end_col_offset=23), args=[],
      keywords=[], lineno=55, col_offset=9, end_lineno=55, end_col_offset=25), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=55, col_offset=29, end_lineno=55, end_col_offset=30))],
      body=[If(test=Compare(left=Name(id=''file_type'', ctx=Load(), lineno=56, col_offset=11,
      end_lineno=56, end_col_offset=20), ops=[Eq()], comparators=[Constant(value=''json'',
      lineno=56, col_offset=24, end_lineno=56, end_col_offset=30)], lineno=56, col_offset=11,
      end_lineno=56, end_col_offset=30), body=[Return(value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=57, col_offset=19, end_lineno=57, end_col_offset=23), attr=''load'',
      ctx=Load(), lineno=57, col_offset=19, end_lineno=57, end_col_offset=28), args=[Name(id=''f'',
      ctx=Load(), lineno=57, col_offset=29, end_lineno=57, end_col_offset=30)], keywords=[],
      lineno=57, col_offset=19, end_lineno=57, end_col_offset=31), lineno=57, col_offset=12,
      end_lineno=57, end_col_offset=31)], orelse=[If(test=Compare(left=Name(id=''file_type'',
      ctx=Load(), lineno=58, col_offset=13, end_lineno=58, end_col_offset=22), ops=[Eq()],
      comparators=[Constant(value=''yaml'', lineno=58, col_offset=26, end_lineno=58,
      end_col_offset=32)], lineno=58, col_offset=13, end_lineno=58, end_col_offset=32),
      body=[Return(value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load(), lineno=59,
      col_offset=19, end_lineno=59, end_col_offset=23), attr=''load'', ctx=Load(),
      lineno=59, col_offset=19, end_lineno=59, end_col_offset=28), args=[Name(id=''f'',
      ctx=Load(), lineno=59, col_offset=29, end_lineno=59, end_col_offset=30)], keywords=[],
      lineno=59, col_offset=19, end_lineno=59, end_col_offset=31), lineno=59, col_offset=12,
      end_lineno=59, end_col_offset=31)], orelse=[], lineno=58, col_offset=8, end_lineno=59,
      end_col_offset=31)], lineno=56, col_offset=8, end_lineno=59, end_col_offset=31)],
      lineno=55, col_offset=4, end_lineno=59, end_col_offset=31)], decorator_list=[],
      returns=Name(id=''Dict'', ctx=Load(), lineno=46, col_offset=34, end_lineno=46,
      end_col_offset=38), lineno=46, col_offset=0, end_lineno=59, end_col_offset=31)'
    function_docstring: "Reads a JSON or YAML file and returns its contents as a dictionary.\n\
      Args:\n    file_path (Path): The path to the file.\nReturns:\n    The contents\
      \ of the file as a dictionary."
    function_inputs:
    - file_path
    function_defaults: []
    function_returns:
    - json.load(f)
    - yaml.load(f)
    function_calls:
    - file_path.open
    - yaml.load
    - json.load
    function_variables:
    - file_type
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_file:
    function_name: write_file
    function_code: "def write_file(data: Dict, file_path: Path) -> None:\n    \"\"\
      \"\n    Writes a dictionary to a JSON or YAML file. \n    Args:\n        data\
      \ (Dict): The data to write to the file.\n        file_path (Path): The path\
      \ to the file.\n    \"\"\"\n    file_type = file_path.suffix[1:]\n    with file_path.open('w')\
      \ as f:\n        if file_type == 'json':\n            json.dump(data, f, indent=4)\n\
      \        elif file_type == 'yaml':\n            yaml.SafeDumper.ignore_aliases\
      \ = lambda *args: True\n            yaml.dump(data, f, Dumper=yaml.SafeDumper,\
      \ sort_keys=False)"
    function_ast: 'FunctionDef(name=''write_file'', args=arguments(posonlyargs=[],
      args=[arg(arg=''data'', annotation=Name(id=''Dict'', ctx=Load(), lineno=62,
      col_offset=21, end_lineno=62, end_col_offset=25), lineno=62, col_offset=15,
      end_lineno=62, end_col_offset=25), arg(arg=''file_path'', annotation=Name(id=''Path'',
      ctx=Load(), lineno=62, col_offset=38, end_lineno=62, end_col_offset=42), lineno=62,
      col_offset=27, end_lineno=62, end_col_offset=42)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value=''\n    Writes a dictionary to
      a JSON or YAML file. \n    Args:\n        data (Dict): The data to write to
      the file.\n        file_path (Path): The path to the file.\n    '', lineno=63,
      col_offset=4, end_lineno=68, end_col_offset=7), lineno=63, col_offset=4, end_lineno=68,
      end_col_offset=7), Assign(targets=[Name(id=''file_type'', ctx=Store(), lineno=69,
      col_offset=4, end_lineno=69, end_col_offset=13)], value=Subscript(value=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=69, col_offset=16, end_lineno=69, end_col_offset=25), attr=''suffix'',
      ctx=Load(), lineno=69, col_offset=16, end_lineno=69, end_col_offset=32), slice=Slice(lower=Constant(value=1,
      lineno=69, col_offset=33, end_lineno=69, end_col_offset=34), lineno=69, col_offset=33,
      end_lineno=69, end_col_offset=35), ctx=Load(), lineno=69, col_offset=16, end_lineno=69,
      end_col_offset=36), lineno=69, col_offset=4, end_lineno=69, end_col_offset=36),
      With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=70, col_offset=9, end_lineno=70, end_col_offset=18), attr=''open'',
      ctx=Load(), lineno=70, col_offset=9, end_lineno=70, end_col_offset=23), args=[Constant(value=''w'',
      lineno=70, col_offset=24, end_lineno=70, end_col_offset=27)], keywords=[], lineno=70,
      col_offset=9, end_lineno=70, end_col_offset=28), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=70, col_offset=32, end_lineno=70, end_col_offset=33))],
      body=[If(test=Compare(left=Name(id=''file_type'', ctx=Load(), lineno=71, col_offset=11,
      end_lineno=71, end_col_offset=20), ops=[Eq()], comparators=[Constant(value=''json'',
      lineno=71, col_offset=24, end_lineno=71, end_col_offset=30)], lineno=71, col_offset=11,
      end_lineno=71, end_col_offset=30), body=[Expr(value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=72, col_offset=12, end_lineno=72, end_col_offset=16), attr=''dump'',
      ctx=Load(), lineno=72, col_offset=12, end_lineno=72, end_col_offset=21), args=[Name(id=''data'',
      ctx=Load(), lineno=72, col_offset=22, end_lineno=72, end_col_offset=26), Name(id=''f'',
      ctx=Load(), lineno=72, col_offset=28, end_lineno=72, end_col_offset=29)], keywords=[keyword(arg=''indent'',
      value=Constant(value=4, lineno=72, col_offset=38, end_lineno=72, end_col_offset=39),
      lineno=72, col_offset=31, end_lineno=72, end_col_offset=39)], lineno=72, col_offset=12,
      end_lineno=72, end_col_offset=40), lineno=72, col_offset=12, end_lineno=72,
      end_col_offset=40)], orelse=[If(test=Compare(left=Name(id=''file_type'', ctx=Load(),
      lineno=73, col_offset=13, end_lineno=73, end_col_offset=22), ops=[Eq()], comparators=[Constant(value=''yaml'',
      lineno=73, col_offset=26, end_lineno=73, end_col_offset=32)], lineno=73, col_offset=13,
      end_lineno=73, end_col_offset=32), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id=''yaml'',
      ctx=Load(), lineno=74, col_offset=12, end_lineno=74, end_col_offset=16), attr=''SafeDumper'',
      ctx=Load(), lineno=74, col_offset=12, end_lineno=74, end_col_offset=27), attr=''ignore_aliases'',
      ctx=Store(), lineno=74, col_offset=12, end_lineno=74, end_col_offset=42)], value=Lambda(args=arguments(posonlyargs=[],
      args=[], vararg=arg(arg=''args'', lineno=74, col_offset=53, end_lineno=74, end_col_offset=57),
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True, lineno=74,
      col_offset=59, end_lineno=74, end_col_offset=63), lineno=74, col_offset=45,
      end_lineno=74, end_col_offset=63), lineno=74, col_offset=12, end_lineno=74,
      end_col_offset=63), Expr(value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load(),
      lineno=75, col_offset=12, end_lineno=75, end_col_offset=16), attr=''dump'',
      ctx=Load(), lineno=75, col_offset=12, end_lineno=75, end_col_offset=21), args=[Name(id=''data'',
      ctx=Load(), lineno=75, col_offset=22, end_lineno=75, end_col_offset=26), Name(id=''f'',
      ctx=Load(), lineno=75, col_offset=28, end_lineno=75, end_col_offset=29)], keywords=[keyword(arg=''Dumper'',
      value=Attribute(value=Name(id=''yaml'', ctx=Load(), lineno=75, col_offset=38,
      end_lineno=75, end_col_offset=42), attr=''SafeDumper'', ctx=Load(), lineno=75,
      col_offset=38, end_lineno=75, end_col_offset=53), lineno=75, col_offset=31,
      end_lineno=75, end_col_offset=53), keyword(arg=''sort_keys'', value=Constant(value=False,
      lineno=75, col_offset=65, end_lineno=75, end_col_offset=70), lineno=75, col_offset=55,
      end_lineno=75, end_col_offset=70)], lineno=75, col_offset=12, end_lineno=75,
      end_col_offset=71), lineno=75, col_offset=12, end_lineno=75, end_col_offset=71)],
      orelse=[], lineno=73, col_offset=8, end_lineno=75, end_col_offset=71)], lineno=71,
      col_offset=8, end_lineno=75, end_col_offset=71)], lineno=70, col_offset=4, end_lineno=75,
      end_col_offset=71)], decorator_list=[], returns=Constant(value=None, lineno=62,
      col_offset=47, end_lineno=62, end_col_offset=51), lineno=62, col_offset=0, end_lineno=75,
      end_col_offset=71)'
    function_docstring: "Writes a dictionary to a JSON or YAML file. \nArgs:\n   \
      \ data (Dict): The data to write to the file.\n    file_path (Path): The path\
      \ to the file."
    function_inputs:
    - data
    - file_path
    function_defaults: []
    function_returns: []
    function_calls:
    - json.dump
    - file_path.open
    - yaml.dump
    function_variables:
    - file_type
    function_decorators: []
    function_annotations: []
    function_properties:
    - yaml.SafeDumper.ignore_aliases
  combine_json_files:
    function_name: combine_json_files
    function_code: "def combine_json_files(directory) -> Dict[str, List[Dict]]:\n\
      \    \"\"\"\n    Combine all JSON files in the output directory into 'qa.json'\
      \ and \n    'instruct.json', and then remove duplicates.\n    Args:\n      \
      \  directory (str): The directory where the output files are located.\n    \"\
      \"\"\n    file_names = ['qa.json', 'instruct.json']\n    keys = ['question',\
      \ 'instruction']\n    combined_data = []\n    for file in file_names:\n    \
      \    file_path = Path(directory) / file\n        if file_path.exists():\n  \
      \          combined_data = read_file(file_path)\n        for json_file in Path(directory).rglob(f'*.{file}'):\n\
      \            combined_data.extend(read_file(json_file))\n        combined_data\
      \ = list({i[keys[file_names.index(file)]]: i for i in combined_data}.values())\n\
      \        write_file(combined_data, file_path)\n        if file == 'instruct.json':\n\
      \            instruct_combined_data = combined_data.copy()\n        combined_data\
      \ = []\n    seen_inputs = set()\n    for item in instruct_combined_data:\n \
      \       if item['input'] in seen_inputs:\n            item['input'] = ''\n \
      \       else:\n            seen_inputs.add(item['input'])\n    cleaned_instruct_file_path\
      \ = Path(directory) / 'cleaned_instruct.json'\n    write_file(instruct_combined_data,\
      \ cleaned_instruct_file_path)\n    file_names = ['qa.json', 'instruct.json',\
      \ 'cleaned_instruct.json']\n    keys = ['question', 'instruction', 'instruction']\n\
      \    for file in file_names:\n        purpose_data = []\n        nquestion =\
      \ 0\n        dataset = read_file(Path(directory) / file)\n        for item in\
      \ dataset:\n            if item[keys[file_names.index(file)]].startswith('Purpose\
      \ of'):\n                purpose_data.append(item)\n                nquestion\
      \ += 1\n        if nquestion > 0:\n            base = file.split('.')[0]\n \
      \           purpose_filepath = Path(directory) / f'{base}_purpose.json'\n  \
      \          write_file(purpose_data, purpose_filepath)\n        if file == 'qa.json':\n\
      \            qa_list = dataset.copy()\n        if file == 'instruct.json':\n\
      \            instruct_list = dataset.copy()\n    return {'qa_list': qa_list,\
      \ 'instruct_list': instruct_list}"
    function_ast: 'FunctionDef(name=''combine_json_files'', args=arguments(posonlyargs=[],
      args=[arg(arg=''directory'', lineno=78, col_offset=23, end_lineno=78, end_col_offset=32)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Combine
      all JSON files in the output directory into ''qa.json'' and \n    ''instruct.json'',
      and then remove duplicates.\n    Args:\n        directory (str): The directory
      where the output files are located.\n    ", lineno=79, col_offset=4, end_lineno=84,
      end_col_offset=7), lineno=79, col_offset=4, end_lineno=84, end_col_offset=7),
      Assign(targets=[Name(id=''file_names'', ctx=Store(), lineno=85, col_offset=4,
      end_lineno=85, end_col_offset=14)], value=List(elts=[Constant(value=''qa.json'',
      lineno=85, col_offset=18, end_lineno=85, end_col_offset=27), Constant(value=''instruct.json'',
      lineno=85, col_offset=29, end_lineno=85, end_col_offset=44)], ctx=Load(), lineno=85,
      col_offset=17, end_lineno=85, end_col_offset=45), lineno=85, col_offset=4, end_lineno=85,
      end_col_offset=45), Assign(targets=[Name(id=''keys'', ctx=Store(), lineno=86,
      col_offset=4, end_lineno=86, end_col_offset=8)], value=List(elts=[Constant(value=''question'',
      lineno=86, col_offset=12, end_lineno=86, end_col_offset=22), Constant(value=''instruction'',
      lineno=86, col_offset=24, end_lineno=86, end_col_offset=37)], ctx=Load(), lineno=86,
      col_offset=11, end_lineno=86, end_col_offset=38), lineno=86, col_offset=4, end_lineno=86,
      end_col_offset=38), Assign(targets=[Name(id=''combined_data'', ctx=Store(),
      lineno=87, col_offset=4, end_lineno=87, end_col_offset=17)], value=List(elts=[],
      ctx=Load(), lineno=87, col_offset=20, end_lineno=87, end_col_offset=22), lineno=87,
      col_offset=4, end_lineno=87, end_col_offset=22), For(target=Name(id=''file'',
      ctx=Store(), lineno=88, col_offset=8, end_lineno=88, end_col_offset=12), iter=Name(id=''file_names'',
      ctx=Load(), lineno=88, col_offset=16, end_lineno=88, end_col_offset=26), body=[Assign(targets=[Name(id=''file_path'',
      ctx=Store(), lineno=89, col_offset=8, end_lineno=89, end_col_offset=17)], value=BinOp(left=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=89, col_offset=20, end_lineno=89, end_col_offset=24), args=[Name(id=''directory'',
      ctx=Load(), lineno=89, col_offset=25, end_lineno=89, end_col_offset=34)], keywords=[],
      lineno=89, col_offset=20, end_lineno=89, end_col_offset=35), op=Div(), right=Name(id=''file'',
      ctx=Load(), lineno=89, col_offset=38, end_lineno=89, end_col_offset=42), lineno=89,
      col_offset=20, end_lineno=89, end_col_offset=42), lineno=89, col_offset=8, end_lineno=89,
      end_col_offset=42), If(test=Call(func=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=90, col_offset=11, end_lineno=90, end_col_offset=20), attr=''exists'',
      ctx=Load(), lineno=90, col_offset=11, end_lineno=90, end_col_offset=27), args=[],
      keywords=[], lineno=90, col_offset=11, end_lineno=90, end_col_offset=29), body=[Assign(targets=[Name(id=''combined_data'',
      ctx=Store(), lineno=91, col_offset=12, end_lineno=91, end_col_offset=25)], value=Call(func=Name(id=''read_file'',
      ctx=Load(), lineno=91, col_offset=28, end_lineno=91, end_col_offset=37), args=[Name(id=''file_path'',
      ctx=Load(), lineno=91, col_offset=38, end_lineno=91, end_col_offset=47)], keywords=[],
      lineno=91, col_offset=28, end_lineno=91, end_col_offset=48), lineno=91, col_offset=12,
      end_lineno=91, end_col_offset=48)], orelse=[], lineno=90, col_offset=8, end_lineno=91,
      end_col_offset=48), For(target=Name(id=''json_file'', ctx=Store(), lineno=92,
      col_offset=12, end_lineno=92, end_col_offset=21), iter=Call(func=Attribute(value=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=92, col_offset=25, end_lineno=92, end_col_offset=29), args=[Name(id=''directory'',
      ctx=Load(), lineno=92, col_offset=30, end_lineno=92, end_col_offset=39)], keywords=[],
      lineno=92, col_offset=25, end_lineno=92, end_col_offset=40), attr=''rglob'',
      ctx=Load(), lineno=92, col_offset=25, end_lineno=92, end_col_offset=46), args=[JoinedStr(values=[Constant(value=''*.'',
      lineno=92, col_offset=47, end_lineno=92, end_col_offset=58), FormattedValue(value=Name(id=''file'',
      ctx=Load(), lineno=92, col_offset=52, end_lineno=92, end_col_offset=56), conversion=-1,
      lineno=92, col_offset=47, end_lineno=92, end_col_offset=58)], lineno=92, col_offset=47,
      end_lineno=92, end_col_offset=58)], keywords=[], lineno=92, col_offset=25, end_lineno=92,
      end_col_offset=59), body=[Expr(value=Call(func=Attribute(value=Name(id=''combined_data'',
      ctx=Load(), lineno=93, col_offset=12, end_lineno=93, end_col_offset=25), attr=''extend'',
      ctx=Load(), lineno=93, col_offset=12, end_lineno=93, end_col_offset=32), args=[Call(func=Name(id=''read_file'',
      ctx=Load(), lineno=93, col_offset=33, end_lineno=93, end_col_offset=42), args=[Name(id=''json_file'',
      ctx=Load(), lineno=93, col_offset=43, end_lineno=93, end_col_offset=52)], keywords=[],
      lineno=93, col_offset=33, end_lineno=93, end_col_offset=53)], keywords=[], lineno=93,
      col_offset=12, end_lineno=93, end_col_offset=54), lineno=93, col_offset=12,
      end_lineno=93, end_col_offset=54)], orelse=[], lineno=92, col_offset=8, end_lineno=93,
      end_col_offset=54), Assign(targets=[Name(id=''combined_data'', ctx=Store(),
      lineno=94, col_offset=8, end_lineno=94, end_col_offset=21)], value=Call(func=Name(id=''list'',
      ctx=Load(), lineno=94, col_offset=24, end_lineno=94, end_col_offset=28), args=[Call(func=Attribute(value=DictComp(key=Subscript(value=Name(id=''i'',
      ctx=Load(), lineno=94, col_offset=30, end_lineno=94, end_col_offset=31), slice=Subscript(value=Name(id=''keys'',
      ctx=Load(), lineno=94, col_offset=32, end_lineno=94, end_col_offset=36), slice=Call(func=Attribute(value=Name(id=''file_names'',
      ctx=Load(), lineno=94, col_offset=37, end_lineno=94, end_col_offset=47), attr=''index'',
      ctx=Load(), lineno=94, col_offset=37, end_lineno=94, end_col_offset=53), args=[Name(id=''file'',
      ctx=Load(), lineno=94, col_offset=54, end_lineno=94, end_col_offset=58)], keywords=[],
      lineno=94, col_offset=37, end_lineno=94, end_col_offset=59), ctx=Load(), lineno=94,
      col_offset=32, end_lineno=94, end_col_offset=60), ctx=Load(), lineno=94, col_offset=30,
      end_lineno=94, end_col_offset=61), value=Name(id=''i'', ctx=Load(), lineno=94,
      col_offset=63, end_lineno=94, end_col_offset=64), generators=[comprehension(target=Name(id=''i'',
      ctx=Store(), lineno=94, col_offset=69, end_lineno=94, end_col_offset=70), iter=Name(id=''combined_data'',
      ctx=Load(), lineno=94, col_offset=74, end_lineno=94, end_col_offset=87), ifs=[],
      is_async=0)], lineno=94, col_offset=29, end_lineno=94, end_col_offset=88), attr=''values'',
      ctx=Load(), lineno=94, col_offset=29, end_lineno=94, end_col_offset=95), args=[],
      keywords=[], lineno=94, col_offset=29, end_lineno=94, end_col_offset=97)], keywords=[],
      lineno=94, col_offset=24, end_lineno=94, end_col_offset=98), lineno=94, col_offset=8,
      end_lineno=94, end_col_offset=98), Expr(value=Call(func=Name(id=''write_file'',
      ctx=Load(), lineno=95, col_offset=8, end_lineno=95, end_col_offset=18), args=[Name(id=''combined_data'',
      ctx=Load(), lineno=95, col_offset=19, end_lineno=95, end_col_offset=32), Name(id=''file_path'',
      ctx=Load(), lineno=95, col_offset=34, end_lineno=95, end_col_offset=43)], keywords=[],
      lineno=95, col_offset=8, end_lineno=95, end_col_offset=44), lineno=95, col_offset=8,
      end_lineno=95, end_col_offset=44), If(test=Compare(left=Name(id=''file'', ctx=Load(),
      lineno=96, col_offset=11, end_lineno=96, end_col_offset=15), ops=[Eq()], comparators=[Constant(value=''instruct.json'',
      lineno=96, col_offset=19, end_lineno=96, end_col_offset=34)], lineno=96, col_offset=11,
      end_lineno=96, end_col_offset=34), body=[Assign(targets=[Name(id=''instruct_combined_data'',
      ctx=Store(), lineno=97, col_offset=12, end_lineno=97, end_col_offset=34)], value=Call(func=Attribute(value=Name(id=''combined_data'',
      ctx=Load(), lineno=97, col_offset=37, end_lineno=97, end_col_offset=50), attr=''copy'',
      ctx=Load(), lineno=97, col_offset=37, end_lineno=97, end_col_offset=55), args=[],
      keywords=[], lineno=97, col_offset=37, end_lineno=97, end_col_offset=57), lineno=97,
      col_offset=12, end_lineno=97, end_col_offset=57)], orelse=[], lineno=96, col_offset=8,
      end_lineno=97, end_col_offset=57), Assign(targets=[Name(id=''combined_data'',
      ctx=Store(), lineno=98, col_offset=8, end_lineno=98, end_col_offset=21)], value=List(elts=[],
      ctx=Load(), lineno=98, col_offset=24, end_lineno=98, end_col_offset=26), lineno=98,
      col_offset=8, end_lineno=98, end_col_offset=26)], orelse=[], lineno=88, col_offset=4,
      end_lineno=98, end_col_offset=26), Assign(targets=[Name(id=''seen_inputs'',
      ctx=Store(), lineno=101, col_offset=4, end_lineno=101, end_col_offset=15)],
      value=Call(func=Name(id=''set'', ctx=Load(), lineno=101, col_offset=18, end_lineno=101,
      end_col_offset=21), args=[], keywords=[], lineno=101, col_offset=18, end_lineno=101,
      end_col_offset=23), lineno=101, col_offset=4, end_lineno=101, end_col_offset=23),
      For(target=Name(id=''item'', ctx=Store(), lineno=102, col_offset=8, end_lineno=102,
      end_col_offset=12), iter=Name(id=''instruct_combined_data'', ctx=Load(), lineno=102,
      col_offset=16, end_lineno=102, end_col_offset=38), body=[If(test=Compare(left=Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=103, col_offset=11, end_lineno=103, end_col_offset=15), slice=Constant(value=''input'',
      lineno=103, col_offset=16, end_lineno=103, end_col_offset=23), ctx=Load(), lineno=103,
      col_offset=11, end_lineno=103, end_col_offset=24), ops=[In()], comparators=[Name(id=''seen_inputs'',
      ctx=Load(), lineno=103, col_offset=28, end_lineno=103, end_col_offset=39)],
      lineno=103, col_offset=11, end_lineno=103, end_col_offset=39), body=[Assign(targets=[Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=104, col_offset=12, end_lineno=104, end_col_offset=16), slice=Constant(value=''input'',
      lineno=104, col_offset=17, end_lineno=104, end_col_offset=24), ctx=Store(),
      lineno=104, col_offset=12, end_lineno=104, end_col_offset=25)], value=Constant(value='''',
      lineno=104, col_offset=28, end_lineno=104, end_col_offset=30), lineno=104, col_offset=12,
      end_lineno=104, end_col_offset=30)], orelse=[Expr(value=Call(func=Attribute(value=Name(id=''seen_inputs'',
      ctx=Load(), lineno=106, col_offset=12, end_lineno=106, end_col_offset=23), attr=''add'',
      ctx=Load(), lineno=106, col_offset=12, end_lineno=106, end_col_offset=27), args=[Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=106, col_offset=28, end_lineno=106, end_col_offset=32), slice=Constant(value=''input'',
      lineno=106, col_offset=33, end_lineno=106, end_col_offset=40), ctx=Load(), lineno=106,
      col_offset=28, end_lineno=106, end_col_offset=41)], keywords=[], lineno=106,
      col_offset=12, end_lineno=106, end_col_offset=42), lineno=106, col_offset=12,
      end_lineno=106, end_col_offset=42)], lineno=103, col_offset=8, end_lineno=106,
      end_col_offset=42)], orelse=[], lineno=102, col_offset=4, end_lineno=106, end_col_offset=42),
      Assign(targets=[Name(id=''cleaned_instruct_file_path'', ctx=Store(), lineno=107,
      col_offset=4, end_lineno=107, end_col_offset=30)], value=BinOp(left=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=107, col_offset=33, end_lineno=107, end_col_offset=37), args=[Name(id=''directory'',
      ctx=Load(), lineno=107, col_offset=38, end_lineno=107, end_col_offset=47)],
      keywords=[], lineno=107, col_offset=33, end_lineno=107, end_col_offset=48),
      op=Div(), right=Constant(value=''cleaned_instruct.json'', lineno=107, col_offset=51,
      end_lineno=107, end_col_offset=74), lineno=107, col_offset=33, end_lineno=107,
      end_col_offset=74), lineno=107, col_offset=4, end_lineno=107, end_col_offset=74),
      Expr(value=Call(func=Name(id=''write_file'', ctx=Load(), lineno=108, col_offset=4,
      end_lineno=108, end_col_offset=14), args=[Name(id=''instruct_combined_data'',
      ctx=Load(), lineno=108, col_offset=15, end_lineno=108, end_col_offset=37), Name(id=''cleaned_instruct_file_path'',
      ctx=Load(), lineno=108, col_offset=39, end_lineno=108, end_col_offset=65)],
      keywords=[], lineno=108, col_offset=4, end_lineno=108, end_col_offset=66), lineno=108,
      col_offset=4, end_lineno=108, end_col_offset=66), Assign(targets=[Name(id=''file_names'',
      ctx=Store(), lineno=111, col_offset=4, end_lineno=111, end_col_offset=14)],
      value=List(elts=[Constant(value=''qa.json'', lineno=111, col_offset=18, end_lineno=111,
      end_col_offset=27), Constant(value=''instruct.json'', lineno=111, col_offset=29,
      end_lineno=111, end_col_offset=44), Constant(value=''cleaned_instruct.json'',
      lineno=111, col_offset=46, end_lineno=111, end_col_offset=69)], ctx=Load(),
      lineno=111, col_offset=17, end_lineno=111, end_col_offset=70), lineno=111, col_offset=4,
      end_lineno=111, end_col_offset=70), Assign(targets=[Name(id=''keys'', ctx=Store(),
      lineno=112, col_offset=4, end_lineno=112, end_col_offset=8)], value=List(elts=[Constant(value=''question'',
      lineno=112, col_offset=12, end_lineno=112, end_col_offset=22), Constant(value=''instruction'',
      lineno=112, col_offset=24, end_lineno=112, end_col_offset=37), Constant(value=''instruction'',
      lineno=112, col_offset=39, end_lineno=112, end_col_offset=52)], ctx=Load(),
      lineno=112, col_offset=11, end_lineno=112, end_col_offset=53), lineno=112, col_offset=4,
      end_lineno=112, end_col_offset=53), For(target=Name(id=''file'', ctx=Store(),
      lineno=113, col_offset=8, end_lineno=113, end_col_offset=12), iter=Name(id=''file_names'',
      ctx=Load(), lineno=113, col_offset=16, end_lineno=113, end_col_offset=26), body=[Assign(targets=[Name(id=''purpose_data'',
      ctx=Store(), lineno=114, col_offset=8, end_lineno=114, end_col_offset=20)],
      value=List(elts=[], ctx=Load(), lineno=114, col_offset=23, end_lineno=114, end_col_offset=25),
      lineno=114, col_offset=8, end_lineno=114, end_col_offset=25), Assign(targets=[Name(id=''nquestion'',
      ctx=Store(), lineno=115, col_offset=8, end_lineno=115, end_col_offset=17)],
      value=Constant(value=0, lineno=115, col_offset=20, end_lineno=115, end_col_offset=21),
      lineno=115, col_offset=8, end_lineno=115, end_col_offset=21), Assign(targets=[Name(id=''dataset'',
      ctx=Store(), lineno=116, col_offset=8, end_lineno=116, end_col_offset=15)],
      value=Call(func=Name(id=''read_file'', ctx=Load(), lineno=116, col_offset=18,
      end_lineno=116, end_col_offset=27), args=[BinOp(left=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=116, col_offset=28, end_lineno=116, end_col_offset=32), args=[Name(id=''directory'',
      ctx=Load(), lineno=116, col_offset=33, end_lineno=116, end_col_offset=42)],
      keywords=[], lineno=116, col_offset=28, end_lineno=116, end_col_offset=43),
      op=Div(), right=Name(id=''file'', ctx=Load(), lineno=116, col_offset=46, end_lineno=116,
      end_col_offset=50), lineno=116, col_offset=28, end_lineno=116, end_col_offset=50)],
      keywords=[], lineno=116, col_offset=18, end_lineno=116, end_col_offset=51),
      lineno=116, col_offset=8, end_lineno=116, end_col_offset=51), For(target=Name(id=''item'',
      ctx=Store(), lineno=117, col_offset=12, end_lineno=117, end_col_offset=16),
      iter=Name(id=''dataset'', ctx=Load(), lineno=117, col_offset=20, end_lineno=117,
      end_col_offset=27), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=118, col_offset=15, end_lineno=118, end_col_offset=19), slice=Subscript(value=Name(id=''keys'',
      ctx=Load(), lineno=118, col_offset=20, end_lineno=118, end_col_offset=24), slice=Call(func=Attribute(value=Name(id=''file_names'',
      ctx=Load(), lineno=118, col_offset=25, end_lineno=118, end_col_offset=35), attr=''index'',
      ctx=Load(), lineno=118, col_offset=25, end_lineno=118, end_col_offset=41), args=[Name(id=''file'',
      ctx=Load(), lineno=118, col_offset=42, end_lineno=118, end_col_offset=46)],
      keywords=[], lineno=118, col_offset=25, end_lineno=118, end_col_offset=47),
      ctx=Load(), lineno=118, col_offset=20, end_lineno=118, end_col_offset=48), ctx=Load(),
      lineno=118, col_offset=15, end_lineno=118, end_col_offset=49), attr=''startswith'',
      ctx=Load(), lineno=118, col_offset=15, end_lineno=118, end_col_offset=60), args=[Constant(value=''Purpose
      of'', lineno=118, col_offset=61, end_lineno=118, end_col_offset=73)], keywords=[],
      lineno=118, col_offset=15, end_lineno=118, end_col_offset=74), body=[Expr(value=Call(func=Attribute(value=Name(id=''purpose_data'',
      ctx=Load(), lineno=119, col_offset=16, end_lineno=119, end_col_offset=28), attr=''append'',
      ctx=Load(), lineno=119, col_offset=16, end_lineno=119, end_col_offset=35), args=[Name(id=''item'',
      ctx=Load(), lineno=119, col_offset=36, end_lineno=119, end_col_offset=40)],
      keywords=[], lineno=119, col_offset=16, end_lineno=119, end_col_offset=41),
      lineno=119, col_offset=16, end_lineno=119, end_col_offset=41), AugAssign(target=Name(id=''nquestion'',
      ctx=Store(), lineno=120, col_offset=16, end_lineno=120, end_col_offset=25),
      op=Add(), value=Constant(value=1, lineno=120, col_offset=29, end_lineno=120,
      end_col_offset=30), lineno=120, col_offset=16, end_lineno=120, end_col_offset=30)],
      orelse=[], lineno=118, col_offset=12, end_lineno=120, end_col_offset=30)], orelse=[],
      lineno=117, col_offset=8, end_lineno=120, end_col_offset=30), If(test=Compare(left=Name(id=''nquestion'',
      ctx=Load(), lineno=121, col_offset=11, end_lineno=121, end_col_offset=20), ops=[Gt()],
      comparators=[Constant(value=0, lineno=121, col_offset=23, end_lineno=121, end_col_offset=24)],
      lineno=121, col_offset=11, end_lineno=121, end_col_offset=24), body=[Assign(targets=[Name(id=''base'',
      ctx=Store(), lineno=123, col_offset=12, end_lineno=123, end_col_offset=16)],
      value=Subscript(value=Call(func=Attribute(value=Name(id=''file'', ctx=Load(),
      lineno=123, col_offset=19, end_lineno=123, end_col_offset=23), attr=''split'',
      ctx=Load(), lineno=123, col_offset=19, end_lineno=123, end_col_offset=29), args=[Constant(value=''.'',
      lineno=123, col_offset=30, end_lineno=123, end_col_offset=33)], keywords=[],
      lineno=123, col_offset=19, end_lineno=123, end_col_offset=34), slice=Constant(value=0,
      lineno=123, col_offset=35, end_lineno=123, end_col_offset=36), ctx=Load(), lineno=123,
      col_offset=19, end_lineno=123, end_col_offset=37), lineno=123, col_offset=12,
      end_lineno=123, end_col_offset=37), Assign(targets=[Name(id=''purpose_filepath'',
      ctx=Store(), lineno=124, col_offset=12, end_lineno=124, end_col_offset=28)],
      value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load(), lineno=124, col_offset=31,
      end_lineno=124, end_col_offset=35), args=[Name(id=''directory'', ctx=Load(),
      lineno=124, col_offset=36, end_lineno=124, end_col_offset=45)], keywords=[],
      lineno=124, col_offset=31, end_lineno=124, end_col_offset=46), op=Div(), right=JoinedStr(values=[FormattedValue(value=Name(id=''base'',
      ctx=Load(), lineno=124, col_offset=52, end_lineno=124, end_col_offset=56), conversion=-1,
      lineno=124, col_offset=49, end_lineno=124, end_col_offset=71), Constant(value=''_purpose.json'',
      lineno=124, col_offset=49, end_lineno=124, end_col_offset=71)], lineno=124,
      col_offset=49, end_lineno=124, end_col_offset=71), lineno=124, col_offset=31,
      end_lineno=124, end_col_offset=71), lineno=124, col_offset=12, end_lineno=124,
      end_col_offset=71), Expr(value=Call(func=Name(id=''write_file'', ctx=Load(),
      lineno=125, col_offset=12, end_lineno=125, end_col_offset=22), args=[Name(id=''purpose_data'',
      ctx=Load(), lineno=125, col_offset=23, end_lineno=125, end_col_offset=35), Name(id=''purpose_filepath'',
      ctx=Load(), lineno=125, col_offset=37, end_lineno=125, end_col_offset=53)],
      keywords=[], lineno=125, col_offset=12, end_lineno=125, end_col_offset=54),
      lineno=125, col_offset=12, end_lineno=125, end_col_offset=54)], orelse=[], lineno=121,
      col_offset=8, end_lineno=125, end_col_offset=54), If(test=Compare(left=Name(id=''file'',
      ctx=Load(), lineno=126, col_offset=11, end_lineno=126, end_col_offset=15), ops=[Eq()],
      comparators=[Constant(value=''qa.json'', lineno=126, col_offset=19, end_lineno=126,
      end_col_offset=28)], lineno=126, col_offset=11, end_lineno=126, end_col_offset=28),
      body=[Assign(targets=[Name(id=''qa_list'', ctx=Store(), lineno=127, col_offset=12,
      end_lineno=127, end_col_offset=19)], value=Call(func=Attribute(value=Name(id=''dataset'',
      ctx=Load(), lineno=127, col_offset=22, end_lineno=127, end_col_offset=29), attr=''copy'',
      ctx=Load(), lineno=127, col_offset=22, end_lineno=127, end_col_offset=34), args=[],
      keywords=[], lineno=127, col_offset=22, end_lineno=127, end_col_offset=36),
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=36)], orelse=[], lineno=126,
      col_offset=8, end_lineno=127, end_col_offset=36), If(test=Compare(left=Name(id=''file'',
      ctx=Load(), lineno=128, col_offset=11, end_lineno=128, end_col_offset=15), ops=[Eq()],
      comparators=[Constant(value=''instruct.json'', lineno=128, col_offset=19, end_lineno=128,
      end_col_offset=34)], lineno=128, col_offset=11, end_lineno=128, end_col_offset=34),
      body=[Assign(targets=[Name(id=''instruct_list'', ctx=Store(), lineno=129, col_offset=12,
      end_lineno=129, end_col_offset=25)], value=Call(func=Attribute(value=Name(id=''dataset'',
      ctx=Load(), lineno=129, col_offset=28, end_lineno=129, end_col_offset=35), attr=''copy'',
      ctx=Load(), lineno=129, col_offset=28, end_lineno=129, end_col_offset=40), args=[],
      keywords=[], lineno=129, col_offset=28, end_lineno=129, end_col_offset=42),
      lineno=129, col_offset=12, end_lineno=129, end_col_offset=42)], orelse=[], lineno=128,
      col_offset=8, end_lineno=129, end_col_offset=42)], orelse=[], lineno=113, col_offset=4,
      end_lineno=129, end_col_offset=42), Return(value=Dict(keys=[Constant(value=''qa_list'',
      lineno=130, col_offset=12, end_lineno=130, end_col_offset=21), Constant(value=''instruct_list'',
      lineno=130, col_offset=32, end_lineno=130, end_col_offset=47)], values=[Name(id=''qa_list'',
      ctx=Load(), lineno=130, col_offset=23, end_lineno=130, end_col_offset=30), Name(id=''instruct_list'',
      ctx=Load(), lineno=130, col_offset=49, end_lineno=130, end_col_offset=62)],
      lineno=130, col_offset=11, end_lineno=130, end_col_offset=63), lineno=130, col_offset=4,
      end_lineno=130, end_col_offset=63)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=78, col_offset=37, end_lineno=78, end_col_offset=41), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=78, col_offset=42, end_lineno=78, end_col_offset=45), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=78, col_offset=47, end_lineno=78, end_col_offset=51), slice=Name(id=''Dict'',
      ctx=Load(), lineno=78, col_offset=52, end_lineno=78, end_col_offset=56), ctx=Load(),
      lineno=78, col_offset=47, end_lineno=78, end_col_offset=57)], ctx=Load(), lineno=78,
      col_offset=42, end_lineno=78, end_col_offset=57), ctx=Load(), lineno=78, col_offset=37,
      end_lineno=78, end_col_offset=58), lineno=78, col_offset=0, end_lineno=130,
      end_col_offset=63)'
    function_docstring: "Combine all JSON files in the output directory into 'qa.json'\
      \ and \n'instruct.json', and then remove duplicates.\nArgs:\n    directory (str):\
      \ The directory where the output files are located."
    function_inputs:
    - directory
    function_defaults: []
    function_returns:
    - '{''qa_list'': qa_list, ''instruct_list'': instruct_list}'
    function_calls:
    - Path
    - file_path.exists
    - '{i[keys[file_names.index(file)]]: i for i in combined_data}.values'
    - write_file
    - dataset.copy
    - set
    - file.split
    - file_names.index
    - read_file
    - combined_data.copy
    - purpose_data.append
    - seen_inputs.add
    - item[keys[file_names.index(file)]].startswith
    - combined_data.extend
    - list
    - Path(directory).rglob
    function_variables:
    - keys
    - file_path
    - purpose_filepath
    - file_names
    - seen_inputs
    - instruct_list
    - cleaned_instruct_file_path
    - instruct_combined_data
    - qa_list
    - dataset
    - nquestion
    - purpose_data
    - combined_data
    - base
    function_decorators: []
    function_annotations: []
    function_properties: []
  create_code_graph:
    function_name: create_code_graph
    function_code: "def create_code_graph(file_details: Dict, base_name: str, output_subdir:\
      \ Path) -> None:\n    \"\"\"\n    Generate graphs from the file_details and\
      \ save them as PNG images.\n    Args:\n        file_details (dict): The details\
      \ extracted from the Python file.\n        base_name (str): The base name of\
      \ the output files.\n        output_subdir (Path): The subdirectory where the\
      \ output files will be\n            saved.\n    \"\"\"\n    for graph_type in\
      \ ['internal_code_graph', 'entire_code_graph']:\n        output_file = output_subdir\
      \ / f'{base_name}.{graph_type}.png'\n        G = nx.DiGraph()\n        for node_name\
      \ in file_details['file_info'][graph_type]['nodes']:\n            G.add_node(node_name)\n\
      \        for edge in file_details['file_info'][graph_type]['edges']:\n     \
      \       source = edge['source']\n            target = edge['target']\n     \
      \       if source in G.nodes and target in G.nodes:\n                edge_data\
      \ = {}\n                if 'target_inputs' in edge:\n                    edge_data['target_inputs']\
      \ = edge['target_inputs']\n                if 'target_returns' in edge:\n  \
      \                  edge_data['target_returns'] = edge['target_returns']\n  \
      \              G.add_edge(source, target, **edge_data)\n        plt.figure(figsize=(20,\
      \ 20))\n        pos = nx.spring_layout(G)\n        nx.draw(G, pos, with_labels=True,\
      \ font_weight='bold', font_size=8, node_shape='s', node_size=500, width=1, arrowsize=12)\n\
      \        edge_labels = {}\n        for edge in G.edges(data=True):\n       \
      \     label = []\n            if 'target_inputs' in edge[2] and edge[2]['target_inputs']:\n\
      \                label.append(f\"Inputs: {', '.join(edge[2]['target_inputs'])}\"\
      )\n            if 'target_returns' in edge[2] and edge[2]['target_returns']:\n\
      \                label.append(f\"\\nReturns: {', '.join(edge[2]['target_returns'])}\"\
      )\n            edge_labels[edge[0], edge[1]] = '\\n'.join(label)\n        nx.draw_networkx_edge_labels(G,\
      \ pos, edge_labels=edge_labels, font_size=6)\n        plt.savefig(output_file)\n\
      \        plt.close()"
    function_ast: 'FunctionDef(name=''create_code_graph'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load(), lineno=133,
      col_offset=36, end_lineno=133, end_col_offset=40), lineno=133, col_offset=22,
      end_lineno=133, end_col_offset=40), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=133, col_offset=53, end_lineno=133, end_col_offset=56), lineno=133,
      col_offset=42, end_lineno=133, end_col_offset=56), arg(arg=''output_subdir'',
      annotation=Name(id=''Path'', ctx=Load(), lineno=133, col_offset=73, end_lineno=133,
      end_col_offset=77), lineno=133, col_offset=58, end_lineno=133, end_col_offset=77)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Generate
      graphs from the file_details and save them as PNG images.\n    Args:\n        file_details
      (dict): The details extracted from the Python file.\n        base_name (str):
      The base name of the output files.\n        output_subdir (Path): The subdirectory
      where the output files will be\n            saved.\n    '', lineno=134, col_offset=4,
      end_lineno=141, end_col_offset=7), lineno=134, col_offset=4, end_lineno=141,
      end_col_offset=7), For(target=Name(id=''graph_type'', ctx=Store(), lineno=142,
      col_offset=8, end_lineno=142, end_col_offset=18), iter=List(elts=[Constant(value=''internal_code_graph'',
      lineno=142, col_offset=23, end_lineno=142, end_col_offset=44), Constant(value=''entire_code_graph'',
      lineno=142, col_offset=46, end_lineno=142, end_col_offset=65)], ctx=Load(),
      lineno=142, col_offset=22, end_lineno=142, end_col_offset=66), body=[Assign(targets=[Name(id=''output_file'',
      ctx=Store(), lineno=144, col_offset=8, end_lineno=144, end_col_offset=19)],
      value=BinOp(left=Name(id=''output_subdir'', ctx=Load(), lineno=144, col_offset=22,
      end_lineno=144, end_col_offset=35), op=Div(), right=JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=144, col_offset=41, end_lineno=144, end_col_offset=50), conversion=-1,
      lineno=144, col_offset=38, end_lineno=144, end_col_offset=69), Constant(value=''.'',
      lineno=144, col_offset=38, end_lineno=144, end_col_offset=69), FormattedValue(value=Name(id=''graph_type'',
      ctx=Load(), lineno=144, col_offset=53, end_lineno=144, end_col_offset=63), conversion=-1,
      lineno=144, col_offset=38, end_lineno=144, end_col_offset=69), Constant(value=''.png'',
      lineno=144, col_offset=38, end_lineno=144, end_col_offset=69)], lineno=144,
      col_offset=38, end_lineno=144, end_col_offset=69), lineno=144, col_offset=22,
      end_lineno=144, end_col_offset=69), lineno=144, col_offset=8, end_lineno=144,
      end_col_offset=69), Assign(targets=[Name(id=''G'', ctx=Store(), lineno=145,
      col_offset=8, end_lineno=145, end_col_offset=9)], value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=145, col_offset=12, end_lineno=145, end_col_offset=14), attr=''DiGraph'',
      ctx=Load(), lineno=145, col_offset=12, end_lineno=145, end_col_offset=22), args=[],
      keywords=[], lineno=145, col_offset=12, end_lineno=145, end_col_offset=24),
      lineno=145, col_offset=8, end_lineno=145, end_col_offset=24), For(target=Name(id=''node_name'',
      ctx=Store(), lineno=146, col_offset=12, end_lineno=146, end_col_offset=21),
      iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=146, col_offset=25, end_lineno=146, end_col_offset=37), slice=Constant(value=''file_info'',
      lineno=146, col_offset=38, end_lineno=146, end_col_offset=49), ctx=Load(), lineno=146,
      col_offset=25, end_lineno=146, end_col_offset=50), slice=Name(id=''graph_type'',
      ctx=Load(), lineno=146, col_offset=51, end_lineno=146, end_col_offset=61), ctx=Load(),
      lineno=146, col_offset=25, end_lineno=146, end_col_offset=62), slice=Constant(value=''nodes'',
      lineno=146, col_offset=63, end_lineno=146, end_col_offset=70), ctx=Load(), lineno=146,
      col_offset=25, end_lineno=146, end_col_offset=71), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=147, col_offset=12, end_lineno=147, end_col_offset=13), attr=''add_node'',
      ctx=Load(), lineno=147, col_offset=12, end_lineno=147, end_col_offset=22), args=[Name(id=''node_name'',
      ctx=Load(), lineno=147, col_offset=23, end_lineno=147, end_col_offset=32)],
      keywords=[], lineno=147, col_offset=12, end_lineno=147, end_col_offset=33),
      lineno=147, col_offset=12, end_lineno=147, end_col_offset=33)], orelse=[], lineno=146,
      col_offset=8, end_lineno=147, end_col_offset=33), For(target=Name(id=''edge'',
      ctx=Store(), lineno=149, col_offset=12, end_lineno=149, end_col_offset=16),
      iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=149, col_offset=20, end_lineno=149, end_col_offset=32), slice=Constant(value=''file_info'',
      lineno=149, col_offset=33, end_lineno=149, end_col_offset=44), ctx=Load(), lineno=149,
      col_offset=20, end_lineno=149, end_col_offset=45), slice=Name(id=''graph_type'',
      ctx=Load(), lineno=149, col_offset=46, end_lineno=149, end_col_offset=56), ctx=Load(),
      lineno=149, col_offset=20, end_lineno=149, end_col_offset=57), slice=Constant(value=''edges'',
      lineno=149, col_offset=58, end_lineno=149, end_col_offset=65), ctx=Load(), lineno=149,
      col_offset=20, end_lineno=149, end_col_offset=66), body=[Assign(targets=[Name(id=''source'',
      ctx=Store(), lineno=150, col_offset=12, end_lineno=150, end_col_offset=18)],
      value=Subscript(value=Name(id=''edge'', ctx=Load(), lineno=150, col_offset=21,
      end_lineno=150, end_col_offset=25), slice=Constant(value=''source'', lineno=150,
      col_offset=26, end_lineno=150, end_col_offset=34), ctx=Load(), lineno=150, col_offset=21,
      end_lineno=150, end_col_offset=35), lineno=150, col_offset=12, end_lineno=150,
      end_col_offset=35), Assign(targets=[Name(id=''target'', ctx=Store(), lineno=151,
      col_offset=12, end_lineno=151, end_col_offset=18)], value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=151, col_offset=21, end_lineno=151, end_col_offset=25), slice=Constant(value=''target'',
      lineno=151, col_offset=26, end_lineno=151, end_col_offset=34), ctx=Load(), lineno=151,
      col_offset=21, end_lineno=151, end_col_offset=35), lineno=151, col_offset=12,
      end_lineno=151, end_col_offset=35), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''source'',
      ctx=Load(), lineno=152, col_offset=15, end_lineno=152, end_col_offset=21), ops=[In()],
      comparators=[Attribute(value=Name(id=''G'', ctx=Load(), lineno=152, col_offset=25,
      end_lineno=152, end_col_offset=26), attr=''nodes'', ctx=Load(), lineno=152,
      col_offset=25, end_lineno=152, end_col_offset=32)], lineno=152, col_offset=15,
      end_lineno=152, end_col_offset=32), Compare(left=Name(id=''target'', ctx=Load(),
      lineno=152, col_offset=37, end_lineno=152, end_col_offset=43), ops=[In()], comparators=[Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=152, col_offset=47, end_lineno=152, end_col_offset=48), attr=''nodes'',
      ctx=Load(), lineno=152, col_offset=47, end_lineno=152, end_col_offset=54)],
      lineno=152, col_offset=37, end_lineno=152, end_col_offset=54)], lineno=152,
      col_offset=15, end_lineno=152, end_col_offset=54), body=[Assign(targets=[Name(id=''edge_data'',
      ctx=Store(), lineno=153, col_offset=16, end_lineno=153, end_col_offset=25)],
      value=Dict(keys=[], values=[], lineno=153, col_offset=28, end_lineno=153, end_col_offset=30),
      lineno=153, col_offset=16, end_lineno=153, end_col_offset=30), If(test=Compare(left=Constant(value=''target_inputs'',
      lineno=154, col_offset=19, end_lineno=154, end_col_offset=34), ops=[In()], comparators=[Name(id=''edge'',
      ctx=Load(), lineno=154, col_offset=38, end_lineno=154, end_col_offset=42)],
      lineno=154, col_offset=19, end_lineno=154, end_col_offset=42), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=155, col_offset=20, end_lineno=155, end_col_offset=29), slice=Constant(value=''target_inputs'',
      lineno=155, col_offset=30, end_lineno=155, end_col_offset=45), ctx=Store(),
      lineno=155, col_offset=20, end_lineno=155, end_col_offset=46)], value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=155, col_offset=49, end_lineno=155, end_col_offset=53), slice=Constant(value=''target_inputs'',
      lineno=155, col_offset=54, end_lineno=155, end_col_offset=69), ctx=Load(), lineno=155,
      col_offset=49, end_lineno=155, end_col_offset=70), lineno=155, col_offset=20,
      end_lineno=155, end_col_offset=70)], orelse=[], lineno=154, col_offset=16, end_lineno=155,
      end_col_offset=70), If(test=Compare(left=Constant(value=''target_returns'',
      lineno=156, col_offset=19, end_lineno=156, end_col_offset=35), ops=[In()], comparators=[Name(id=''edge'',
      ctx=Load(), lineno=156, col_offset=39, end_lineno=156, end_col_offset=43)],
      lineno=156, col_offset=19, end_lineno=156, end_col_offset=43), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=157, col_offset=20, end_lineno=157, end_col_offset=29), slice=Constant(value=''target_returns'',
      lineno=157, col_offset=30, end_lineno=157, end_col_offset=46), ctx=Store(),
      lineno=157, col_offset=20, end_lineno=157, end_col_offset=47)], value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=157, col_offset=50, end_lineno=157, end_col_offset=54), slice=Constant(value=''target_returns'',
      lineno=157, col_offset=55, end_lineno=157, end_col_offset=71), ctx=Load(), lineno=157,
      col_offset=50, end_lineno=157, end_col_offset=72), lineno=157, col_offset=20,
      end_lineno=157, end_col_offset=72)], orelse=[], lineno=156, col_offset=16, end_lineno=157,
      end_col_offset=72), Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load(),
      lineno=158, col_offset=16, end_lineno=158, end_col_offset=17), attr=''add_edge'',
      ctx=Load(), lineno=158, col_offset=16, end_lineno=158, end_col_offset=26), args=[Name(id=''source'',
      ctx=Load(), lineno=158, col_offset=27, end_lineno=158, end_col_offset=33), Name(id=''target'',
      ctx=Load(), lineno=158, col_offset=35, end_lineno=158, end_col_offset=41)],
      keywords=[keyword(value=Name(id=''edge_data'', ctx=Load(), lineno=158, col_offset=45,
      end_lineno=158, end_col_offset=54), lineno=158, col_offset=43, end_lineno=158,
      end_col_offset=54)], lineno=158, col_offset=16, end_lineno=158, end_col_offset=55),
      lineno=158, col_offset=16, end_lineno=158, end_col_offset=55)], orelse=[], lineno=152,
      col_offset=12, end_lineno=158, end_col_offset=55)], orelse=[], lineno=149, col_offset=8,
      end_lineno=158, end_col_offset=55), Expr(value=Call(func=Attribute(value=Name(id=''plt'',
      ctx=Load(), lineno=161, col_offset=8, end_lineno=161, end_col_offset=11), attr=''figure'',
      ctx=Load(), lineno=161, col_offset=8, end_lineno=161, end_col_offset=18), args=[],
      keywords=[keyword(arg=''figsize'', value=Tuple(elts=[Constant(value=20, lineno=161,
      col_offset=28, end_lineno=161, end_col_offset=30), Constant(value=20, lineno=161,
      col_offset=32, end_lineno=161, end_col_offset=34)], ctx=Load(), lineno=161,
      col_offset=27, end_lineno=161, end_col_offset=35), lineno=161, col_offset=19,
      end_lineno=161, end_col_offset=35)], lineno=161, col_offset=8, end_lineno=161,
      end_col_offset=36), lineno=161, col_offset=8, end_lineno=161, end_col_offset=36),
      Assign(targets=[Name(id=''pos'', ctx=Store(), lineno=162, col_offset=8, end_lineno=162,
      end_col_offset=11)], value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load(),
      lineno=162, col_offset=14, end_lineno=162, end_col_offset=16), attr=''spring_layout'',
      ctx=Load(), lineno=162, col_offset=14, end_lineno=162, end_col_offset=30), args=[Name(id=''G'',
      ctx=Load(), lineno=162, col_offset=31, end_lineno=162, end_col_offset=32)],
      keywords=[], lineno=162, col_offset=14, end_lineno=162, end_col_offset=33),
      lineno=162, col_offset=8, end_lineno=162, end_col_offset=33), Expr(value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=163, col_offset=8, end_lineno=163, end_col_offset=10), attr=''draw'',
      ctx=Load(), lineno=163, col_offset=8, end_lineno=163, end_col_offset=15), args=[Name(id=''G'',
      ctx=Load(), lineno=163, col_offset=16, end_lineno=163, end_col_offset=17), Name(id=''pos'',
      ctx=Load(), lineno=163, col_offset=19, end_lineno=163, end_col_offset=22)],
      keywords=[keyword(arg=''with_labels'', value=Constant(value=True, lineno=163,
      col_offset=36, end_lineno=163, end_col_offset=40), lineno=163, col_offset=24,
      end_lineno=163, end_col_offset=40), keyword(arg=''font_weight'', value=Constant(value=''bold'',
      lineno=163, col_offset=54, end_lineno=163, end_col_offset=60), lineno=163, col_offset=42,
      end_lineno=163, end_col_offset=60), keyword(arg=''font_size'', value=Constant(value=8,
      lineno=163, col_offset=74, end_lineno=163, end_col_offset=75), lineno=163, col_offset=62,
      end_lineno=163, end_col_offset=75), keyword(arg=''node_shape'', value=Constant(value=''s'',
      lineno=163, col_offset=88, end_lineno=163, end_col_offset=91), lineno=163, col_offset=77,
      end_lineno=163, end_col_offset=91), keyword(arg=''node_size'', value=Constant(value=500,
      lineno=163, col_offset=103, end_lineno=163, end_col_offset=106), lineno=163,
      col_offset=93, end_lineno=163, end_col_offset=106), keyword(arg=''width'', value=Constant(value=1,
      lineno=163, col_offset=114, end_lineno=163, end_col_offset=115), lineno=163,
      col_offset=108, end_lineno=163, end_col_offset=115), keyword(arg=''arrowsize'',
      value=Constant(value=12, lineno=163, col_offset=127, end_lineno=163, end_col_offset=129),
      lineno=163, col_offset=117, end_lineno=163, end_col_offset=129)], lineno=163,
      col_offset=8, end_lineno=163, end_col_offset=130), lineno=163, col_offset=8,
      end_lineno=163, end_col_offset=130), Assign(targets=[Name(id=''edge_labels'',
      ctx=Store(), lineno=164, col_offset=8, end_lineno=164, end_col_offset=19)],
      value=Dict(keys=[], values=[], lineno=164, col_offset=22, end_lineno=164, end_col_offset=24),
      lineno=164, col_offset=8, end_lineno=164, end_col_offset=24), For(target=Name(id=''edge'',
      ctx=Store(), lineno=165, col_offset=12, end_lineno=165, end_col_offset=16),
      iter=Call(func=Attribute(value=Name(id=''G'', ctx=Load(), lineno=165, col_offset=20,
      end_lineno=165, end_col_offset=21), attr=''edges'', ctx=Load(), lineno=165,
      col_offset=20, end_lineno=165, end_col_offset=27), args=[], keywords=[keyword(arg=''data'',
      value=Constant(value=True, lineno=165, col_offset=33, end_lineno=165, end_col_offset=37),
      lineno=165, col_offset=28, end_lineno=165, end_col_offset=37)], lineno=165,
      col_offset=20, end_lineno=165, end_col_offset=38), body=[Assign(targets=[Name(id=''label'',
      ctx=Store(), lineno=166, col_offset=12, end_lineno=166, end_col_offset=17)],
      value=List(elts=[], ctx=Load(), lineno=166, col_offset=20, end_lineno=166, end_col_offset=22),
      lineno=166, col_offset=12, end_lineno=166, end_col_offset=22), If(test=BoolOp(op=And(),
      values=[Compare(left=Constant(value=''target_inputs'', lineno=167, col_offset=15,
      end_lineno=167, end_col_offset=30), ops=[In()], comparators=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=167, col_offset=34, end_lineno=167, end_col_offset=38), slice=Constant(value=2,
      lineno=167, col_offset=39, end_lineno=167, end_col_offset=40), ctx=Load(), lineno=167,
      col_offset=34, end_lineno=167, end_col_offset=41)], lineno=167, col_offset=15,
      end_lineno=167, end_col_offset=41), Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=167, col_offset=46, end_lineno=167, end_col_offset=50), slice=Constant(value=2,
      lineno=167, col_offset=51, end_lineno=167, end_col_offset=52), ctx=Load(), lineno=167,
      col_offset=46, end_lineno=167, end_col_offset=53), slice=Constant(value=''target_inputs'',
      lineno=167, col_offset=54, end_lineno=167, end_col_offset=69), ctx=Load(), lineno=167,
      col_offset=46, end_lineno=167, end_col_offset=70)], lineno=167, col_offset=15,
      end_lineno=167, end_col_offset=70), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'',
      ctx=Load(), lineno=168, col_offset=16, end_lineno=168, end_col_offset=21), attr=''append'',
      ctx=Load(), lineno=168, col_offset=16, end_lineno=168, end_col_offset=28), args=[JoinedStr(values=[Constant(value=''Inputs:
      '', lineno=168, col_offset=29, end_lineno=168, end_col_offset=77), FormattedValue(value=Call(func=Attribute(value=Constant(value='',
      '', lineno=168, col_offset=40, end_lineno=168, end_col_offset=44), attr=''join'',
      ctx=Load(), lineno=168, col_offset=40, end_lineno=168, end_col_offset=49), args=[Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=168, col_offset=50, end_lineno=168, end_col_offset=54), slice=Constant(value=2,
      lineno=168, col_offset=55, end_lineno=168, end_col_offset=56), ctx=Load(), lineno=168,
      col_offset=50, end_lineno=168, end_col_offset=57), slice=Constant(value=''target_inputs'',
      lineno=168, col_offset=58, end_lineno=168, end_col_offset=73), ctx=Load(), lineno=168,
      col_offset=50, end_lineno=168, end_col_offset=74)], keywords=[], lineno=168,
      col_offset=40, end_lineno=168, end_col_offset=75), conversion=-1, lineno=168,
      col_offset=29, end_lineno=168, end_col_offset=77)], lineno=168, col_offset=29,
      end_lineno=168, end_col_offset=77)], keywords=[], lineno=168, col_offset=16,
      end_lineno=168, end_col_offset=78), lineno=168, col_offset=16, end_lineno=168,
      end_col_offset=78)], orelse=[], lineno=167, col_offset=12, end_lineno=168, end_col_offset=78),
      If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=''target_returns'',
      lineno=169, col_offset=15, end_lineno=169, end_col_offset=31), ops=[In()], comparators=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=169, col_offset=35, end_lineno=169, end_col_offset=39), slice=Constant(value=2,
      lineno=169, col_offset=40, end_lineno=169, end_col_offset=41), ctx=Load(), lineno=169,
      col_offset=35, end_lineno=169, end_col_offset=42)], lineno=169, col_offset=15,
      end_lineno=169, end_col_offset=42), Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=169, col_offset=47, end_lineno=169, end_col_offset=51), slice=Constant(value=2,
      lineno=169, col_offset=52, end_lineno=169, end_col_offset=53), ctx=Load(), lineno=169,
      col_offset=47, end_lineno=169, end_col_offset=54), slice=Constant(value=''target_returns'',
      lineno=169, col_offset=55, end_lineno=169, end_col_offset=71), ctx=Load(), lineno=169,
      col_offset=47, end_lineno=169, end_col_offset=72)], lineno=169, col_offset=15,
      end_lineno=169, end_col_offset=72), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'',
      ctx=Load(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=21), attr=''append'',
      ctx=Load(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=28), args=[JoinedStr(values=[Constant(value=''\nReturns:
      '', lineno=170, col_offset=29, end_lineno=170, end_col_offset=81), FormattedValue(value=Call(func=Attribute(value=Constant(value='',
      '', lineno=170, col_offset=43, end_lineno=170, end_col_offset=47), attr=''join'',
      ctx=Load(), lineno=170, col_offset=43, end_lineno=170, end_col_offset=52), args=[Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=170, col_offset=53, end_lineno=170, end_col_offset=57), slice=Constant(value=2,
      lineno=170, col_offset=58, end_lineno=170, end_col_offset=59), ctx=Load(), lineno=170,
      col_offset=53, end_lineno=170, end_col_offset=60), slice=Constant(value=''target_returns'',
      lineno=170, col_offset=61, end_lineno=170, end_col_offset=77), ctx=Load(), lineno=170,
      col_offset=53, end_lineno=170, end_col_offset=78)], keywords=[], lineno=170,
      col_offset=43, end_lineno=170, end_col_offset=79), conversion=-1, lineno=170,
      col_offset=29, end_lineno=170, end_col_offset=81)], lineno=170, col_offset=29,
      end_lineno=170, end_col_offset=81)], keywords=[], lineno=170, col_offset=16,
      end_lineno=170, end_col_offset=82), lineno=170, col_offset=16, end_lineno=170,
      end_col_offset=82)], orelse=[], lineno=169, col_offset=12, end_lineno=170, end_col_offset=82),
      Assign(targets=[Subscript(value=Name(id=''edge_labels'', ctx=Load(), lineno=171,
      col_offset=12, end_lineno=171, end_col_offset=23), slice=Tuple(elts=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=171, col_offset=25, end_lineno=171, end_col_offset=29), slice=Constant(value=0,
      lineno=171, col_offset=30, end_lineno=171, end_col_offset=31), ctx=Load(), lineno=171,
      col_offset=25, end_lineno=171, end_col_offset=32), Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=171, col_offset=34, end_lineno=171, end_col_offset=38), slice=Constant(value=1,
      lineno=171, col_offset=39, end_lineno=171, end_col_offset=40), ctx=Load(), lineno=171,
      col_offset=34, end_lineno=171, end_col_offset=41)], ctx=Load(), lineno=171,
      col_offset=24, end_lineno=171, end_col_offset=42), ctx=Store(), lineno=171,
      col_offset=12, end_lineno=171, end_col_offset=43)], value=Call(func=Attribute(value=Constant(value=''\n'',
      lineno=171, col_offset=46, end_lineno=171, end_col_offset=50), attr=''join'',
      ctx=Load(), lineno=171, col_offset=46, end_lineno=171, end_col_offset=55), args=[Name(id=''label'',
      ctx=Load(), lineno=171, col_offset=56, end_lineno=171, end_col_offset=61)],
      keywords=[], lineno=171, col_offset=46, end_lineno=171, end_col_offset=62),
      lineno=171, col_offset=12, end_lineno=171, end_col_offset=62)], orelse=[], lineno=165,
      col_offset=8, end_lineno=171, end_col_offset=62), Expr(value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=172, col_offset=8, end_lineno=172, end_col_offset=10), attr=''draw_networkx_edge_labels'',
      ctx=Load(), lineno=172, col_offset=8, end_lineno=172, end_col_offset=36), args=[Name(id=''G'',
      ctx=Load(), lineno=172, col_offset=37, end_lineno=172, end_col_offset=38), Name(id=''pos'',
      ctx=Load(), lineno=172, col_offset=40, end_lineno=172, end_col_offset=43)],
      keywords=[keyword(arg=''edge_labels'', value=Name(id=''edge_labels'', ctx=Load(),
      lineno=172, col_offset=57, end_lineno=172, end_col_offset=68), lineno=172, col_offset=45,
      end_lineno=172, end_col_offset=68), keyword(arg=''font_size'', value=Constant(value=6,
      lineno=172, col_offset=80, end_lineno=172, end_col_offset=81), lineno=172, col_offset=70,
      end_lineno=172, end_col_offset=81)], lineno=172, col_offset=8, end_lineno=172,
      end_col_offset=82), lineno=172, col_offset=8, end_lineno=172, end_col_offset=82),
      Expr(value=Call(func=Attribute(value=Name(id=''plt'', ctx=Load(), lineno=173,
      col_offset=8, end_lineno=173, end_col_offset=11), attr=''savefig'', ctx=Load(),
      lineno=173, col_offset=8, end_lineno=173, end_col_offset=19), args=[Name(id=''output_file'',
      ctx=Load(), lineno=173, col_offset=20, end_lineno=173, end_col_offset=31)],
      keywords=[], lineno=173, col_offset=8, end_lineno=173, end_col_offset=32), lineno=173,
      col_offset=8, end_lineno=173, end_col_offset=32), Expr(value=Call(func=Attribute(value=Name(id=''plt'',
      ctx=Load(), lineno=174, col_offset=8, end_lineno=174, end_col_offset=11), attr=''close'',
      ctx=Load(), lineno=174, col_offset=8, end_lineno=174, end_col_offset=17), args=[],
      keywords=[], lineno=174, col_offset=8, end_lineno=174, end_col_offset=19), lineno=174,
      col_offset=8, end_lineno=174, end_col_offset=19)], orelse=[], lineno=142, col_offset=4,
      end_lineno=174, end_col_offset=19)], decorator_list=[], returns=Constant(value=None,
      lineno=133, col_offset=82, end_lineno=133, end_col_offset=86), lineno=133, col_offset=0,
      end_lineno=174, end_col_offset=19)'
    function_docstring: "Generate graphs from the file_details and save them as PNG\
      \ images.\nArgs:\n    file_details (dict): The details extracted from the Python\
      \ file.\n    base_name (str): The base name of the output files.\n    output_subdir\
      \ (Path): The subdirectory where the output files will be\n        saved."
    function_inputs:
    - file_details
    - base_name
    - output_subdir
    function_defaults: []
    function_returns: []
    function_calls:
    - label.append
    - nx.draw_networkx_edge_labels
    - plt.savefig
    - plt.close
    - nx.DiGraph
    - plt.figure
    - ''', ''.join'
    - nx.spring_layout
    - nx.draw
    - G.add_edge
    - G.edges
    - G.add_node
    - '''\n''.join'
    function_variables:
    - edge_data
    - source
    - G
    - target
    - label
    - pos
    - edge_labels
    - output_file
    function_decorators: []
    function_annotations: []
    function_properties: []
  process_python_directories:
    function_name: process_python_directories
    function_code: "def process_python_directories(start_path: str, output_dir: str,\
      \ questions: Dict, llm, prompt, use_llm: bool, use_summary: bool, graph: bool)\
      \ -> Dict[str, List[Dict]]:\n    \"\"\"\n    Processes all Python files in a\
      \ given directory and its subdirectories.\n    Args:\n        start_path (str):\
      \ The directory to start the search for Python files.\n        output_dir (str):\
      \ The directory where the output files should be\n            written.\n   \
      \     questions (Dict): The set of questions to answer about each Python \n\
      \            file.\n        model_config (Dict): The configuration for the model.\n\
      \        use_llm (bool): Whether to use the LLM model to generate answers for\n\
      \            json.\n        use_summary (bool): Whether to use the summary of\
      \ the code to reduce \n            dataset context length\n        graph (bool):\
      \ Whether to generate graphs for the code.\n    \"\"\"\n    python_files = [p\
      \ for p in Path(start_path).rglob('[!_]*.py') if p.is_file()]\n    for file_path\
      \ in python_files:\n        logging.info(f'Processing: {file_path}')\n     \
      \   relative_path = Path(file_path).relative_to(start_path)\n        base_name\
      \ = '.'.join((part for part in relative_path.parts))\n        file_details =\
      \ get_python_file_details(file_path)\n        if file_details is None or isinstance(file_details,\
      \ tuple):\n            continue\n        qa_list, instruct_list = get_python_datasets(file_path,\
      \ file_details, base_name, questions, llm, prompt, use_llm, use_summary)\n \
      \       if not qa_list:\n            continue\n        output_subdir = Path(output_dir)\
      \ / relative_path.parts[0]\n        output_subdir.mkdir(parents=True, exist_ok=True)\n\
      \        file_names = [f'{base_name}.qa.json', f'{base_name}.instruct.json',\
      \ f'{base_name}.details.yaml']\n        contents = [qa_list, instruct_list,\
      \ file_details]\n        for file_name, content in zip(file_names, contents):\n\
      \            write_file(content, output_subdir / file_name)\n        if graph:\n\
      \            try:\n                create_code_graph(file_details, base_name,\
      \ output_subdir)\n            except:\n                logging.info(f'Error\
      \ creating graph for {file_path}')\n                continue\n    datasets =\
      \ combine_json_files(output_dir)\n    return datasets"
    function_ast: 'FunctionDef(name=''process_python_directories'', args=arguments(posonlyargs=[],
      args=[arg(arg=''start_path'', annotation=Name(id=''str'', ctx=Load(), lineno=177,
      col_offset=43, end_lineno=177, end_col_offset=46), lineno=177, col_offset=31,
      end_lineno=177, end_col_offset=46), arg(arg=''output_dir'', annotation=Name(id=''str'',
      ctx=Load(), lineno=177, col_offset=60, end_lineno=177, end_col_offset=63), lineno=177,
      col_offset=48, end_lineno=177, end_col_offset=63), arg(arg=''questions'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=177, col_offset=76, end_lineno=177, end_col_offset=80), lineno=177,
      col_offset=65, end_lineno=177, end_col_offset=80), arg(arg=''llm'', lineno=177,
      col_offset=82, end_lineno=177, end_col_offset=85), arg(arg=''prompt'', lineno=177,
      col_offset=87, end_lineno=177, end_col_offset=93), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=177, col_offset=104, end_lineno=177, end_col_offset=108),
      lineno=177, col_offset=95, end_lineno=177, end_col_offset=108), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=177, col_offset=123, end_lineno=177,
      end_col_offset=127), lineno=177, col_offset=110, end_lineno=177, end_col_offset=127),
      arg(arg=''graph'', annotation=Name(id=''bool'', ctx=Load(), lineno=177, col_offset=136,
      end_lineno=177, end_col_offset=140), lineno=177, col_offset=129, end_lineno=177,
      end_col_offset=140)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Processes
      all Python files in a given directory and its subdirectories.\n    Args:\n        start_path
      (str): The directory to start the search for Python files.\n        output_dir
      (str): The directory where the output files should be\n            written.\n        questions
      (Dict): The set of questions to answer about each Python \n            file.\n        model_config
      (Dict): The configuration for the model.\n        use_llm (bool): Whether to
      use the LLM model to generate answers for\n            json.\n        use_summary
      (bool): Whether to use the summary of the code to reduce \n            dataset
      context length\n        graph (bool): Whether to generate graphs for the code.\n    '',
      lineno=178, col_offset=4, end_lineno=192, end_col_offset=7), lineno=178, col_offset=4,
      end_lineno=192, end_col_offset=7), Assign(targets=[Name(id=''python_files'',
      ctx=Store(), lineno=193, col_offset=4, end_lineno=193, end_col_offset=16)],
      value=ListComp(elt=Name(id=''p'', ctx=Load(), lineno=193, col_offset=20, end_lineno=193,
      end_col_offset=21), generators=[comprehension(target=Name(id=''p'', ctx=Store(),
      lineno=193, col_offset=26, end_lineno=193, end_col_offset=27), iter=Call(func=Attribute(value=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=193, col_offset=31, end_lineno=193, end_col_offset=35), args=[Name(id=''start_path'',
      ctx=Load(), lineno=193, col_offset=36, end_lineno=193, end_col_offset=46)],
      keywords=[], lineno=193, col_offset=31, end_lineno=193, end_col_offset=47),
      attr=''rglob'', ctx=Load(), lineno=193, col_offset=31, end_lineno=193, end_col_offset=53),
      args=[Constant(value=''[!_]*.py'', lineno=193, col_offset=54, end_lineno=193,
      end_col_offset=64)], keywords=[], lineno=193, col_offset=31, end_lineno=193,
      end_col_offset=65), ifs=[Call(func=Attribute(value=Name(id=''p'', ctx=Load(),
      lineno=193, col_offset=69, end_lineno=193, end_col_offset=70), attr=''is_file'',
      ctx=Load(), lineno=193, col_offset=69, end_lineno=193, end_col_offset=78), args=[],
      keywords=[], lineno=193, col_offset=69, end_lineno=193, end_col_offset=80)],
      is_async=0)], lineno=193, col_offset=19, end_lineno=193, end_col_offset=81),
      lineno=193, col_offset=4, end_lineno=193, end_col_offset=81), For(target=Name(id=''file_path'',
      ctx=Store(), lineno=195, col_offset=8, end_lineno=195, end_col_offset=17), iter=Name(id=''python_files'',
      ctx=Load(), lineno=195, col_offset=21, end_lineno=195, end_col_offset=33), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=196, col_offset=8, end_lineno=196, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=196, col_offset=8, end_lineno=196, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Processing:
      '', lineno=196, col_offset=21, end_lineno=196, end_col_offset=47), FormattedValue(value=Name(id=''file_path'',
      ctx=Load(), lineno=196, col_offset=36, end_lineno=196, end_col_offset=45), conversion=-1,
      lineno=196, col_offset=21, end_lineno=196, end_col_offset=47)], lineno=196,
      col_offset=21, end_lineno=196, end_col_offset=47)], keywords=[], lineno=196,
      col_offset=8, end_lineno=196, end_col_offset=48), lineno=196, col_offset=8,
      end_lineno=196, end_col_offset=48), Assign(targets=[Name(id=''relative_path'',
      ctx=Store(), lineno=197, col_offset=8, end_lineno=197, end_col_offset=21)],
      value=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=197,
      col_offset=24, end_lineno=197, end_col_offset=28), args=[Name(id=''file_path'',
      ctx=Load(), lineno=197, col_offset=29, end_lineno=197, end_col_offset=38)],
      keywords=[], lineno=197, col_offset=24, end_lineno=197, end_col_offset=39),
      attr=''relative_to'', ctx=Load(), lineno=197, col_offset=24, end_lineno=197,
      end_col_offset=51), args=[Name(id=''start_path'', ctx=Load(), lineno=197, col_offset=52,
      end_lineno=197, end_col_offset=62)], keywords=[], lineno=197, col_offset=24,
      end_lineno=197, end_col_offset=63), lineno=197, col_offset=8, end_lineno=197,
      end_col_offset=63), Assign(targets=[Name(id=''base_name'', ctx=Store(), lineno=198,
      col_offset=8, end_lineno=198, end_col_offset=17)], value=Call(func=Attribute(value=Constant(value=''.'',
      lineno=198, col_offset=20, end_lineno=198, end_col_offset=23), attr=''join'',
      ctx=Load(), lineno=198, col_offset=20, end_lineno=198, end_col_offset=28), args=[GeneratorExp(elt=Name(id=''part'',
      ctx=Load(), lineno=198, col_offset=29, end_lineno=198, end_col_offset=33), generators=[comprehension(target=Name(id=''part'',
      ctx=Store(), lineno=198, col_offset=38, end_lineno=198, end_col_offset=42),
      iter=Attribute(value=Name(id=''relative_path'', ctx=Load(), lineno=198, col_offset=46,
      end_lineno=198, end_col_offset=59), attr=''parts'', ctx=Load(), lineno=198,
      col_offset=46, end_lineno=198, end_col_offset=65), ifs=[], is_async=0)], lineno=198,
      col_offset=28, end_lineno=198, end_col_offset=66)], keywords=[], lineno=198,
      col_offset=20, end_lineno=198, end_col_offset=66), lineno=198, col_offset=8,
      end_lineno=198, end_col_offset=66), Assign(targets=[Name(id=''file_details'',
      ctx=Store(), lineno=201, col_offset=8, end_lineno=201, end_col_offset=20)],
      value=Call(func=Name(id=''get_python_file_details'', ctx=Load(), lineno=201,
      col_offset=23, end_lineno=201, end_col_offset=46), args=[Name(id=''file_path'',
      ctx=Load(), lineno=201, col_offset=47, end_lineno=201, end_col_offset=56)],
      keywords=[], lineno=201, col_offset=23, end_lineno=201, end_col_offset=57),
      lineno=201, col_offset=8, end_lineno=201, end_col_offset=57), If(test=BoolOp(op=Or(),
      values=[Compare(left=Name(id=''file_details'', ctx=Load(), lineno=202, col_offset=11,
      end_lineno=202, end_col_offset=23), ops=[Is()], comparators=[Constant(value=None,
      lineno=202, col_offset=27, end_lineno=202, end_col_offset=31)], lineno=202,
      col_offset=11, end_lineno=202, end_col_offset=31), Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=202, col_offset=35, end_lineno=202, end_col_offset=45), args=[Name(id=''file_details'',
      ctx=Load(), lineno=202, col_offset=46, end_lineno=202, end_col_offset=58), Name(id=''tuple'',
      ctx=Load(), lineno=202, col_offset=60, end_lineno=202, end_col_offset=65)],
      keywords=[], lineno=202, col_offset=35, end_lineno=202, end_col_offset=66)],
      lineno=202, col_offset=11, end_lineno=202, end_col_offset=66), body=[Continue(lineno=203,
      col_offset=12, end_lineno=203, end_col_offset=20)], orelse=[], lineno=202, col_offset=8,
      end_lineno=203, end_col_offset=20), Assign(targets=[Tuple(elts=[Name(id=''qa_list'',
      ctx=Store(), lineno=206, col_offset=8, end_lineno=206, end_col_offset=15), Name(id=''instruct_list'',
      ctx=Store(), lineno=206, col_offset=17, end_lineno=206, end_col_offset=30)],
      ctx=Store(), lineno=206, col_offset=8, end_lineno=206, end_col_offset=30)],
      value=Call(func=Name(id=''get_python_datasets'', ctx=Load(), lineno=206, col_offset=33,
      end_lineno=206, end_col_offset=52), args=[Name(id=''file_path'', ctx=Load(),
      lineno=206, col_offset=53, end_lineno=206, end_col_offset=62), Name(id=''file_details'',
      ctx=Load(), lineno=206, col_offset=64, end_lineno=206, end_col_offset=76), Name(id=''base_name'',
      ctx=Load(), lineno=206, col_offset=78, end_lineno=206, end_col_offset=87), Name(id=''questions'',
      ctx=Load(), lineno=206, col_offset=89, end_lineno=206, end_col_offset=98), Name(id=''llm'',
      ctx=Load(), lineno=206, col_offset=100, end_lineno=206, end_col_offset=103),
      Name(id=''prompt'', ctx=Load(), lineno=206, col_offset=105, end_lineno=206,
      end_col_offset=111), Name(id=''use_llm'', ctx=Load(), lineno=206, col_offset=113,
      end_lineno=206, end_col_offset=120), Name(id=''use_summary'', ctx=Load(), lineno=206,
      col_offset=122, end_lineno=206, end_col_offset=133)], keywords=[], lineno=206,
      col_offset=33, end_lineno=206, end_col_offset=134), lineno=206, col_offset=8,
      end_lineno=206, end_col_offset=134), If(test=UnaryOp(op=Not(), operand=Name(id=''qa_list'',
      ctx=Load(), lineno=207, col_offset=15, end_lineno=207, end_col_offset=22), lineno=207,
      col_offset=11, end_lineno=207, end_col_offset=22), body=[Continue(lineno=208,
      col_offset=12, end_lineno=208, end_col_offset=20)], orelse=[], lineno=207, col_offset=8,
      end_lineno=208, end_col_offset=20), Assign(targets=[Name(id=''output_subdir'',
      ctx=Store(), lineno=210, col_offset=8, end_lineno=210, end_col_offset=21)],
      value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load(), lineno=210, col_offset=24,
      end_lineno=210, end_col_offset=28), args=[Name(id=''output_dir'', ctx=Load(),
      lineno=210, col_offset=29, end_lineno=210, end_col_offset=39)], keywords=[],
      lineno=210, col_offset=24, end_lineno=210, end_col_offset=40), op=Div(), right=Subscript(value=Attribute(value=Name(id=''relative_path'',
      ctx=Load(), lineno=210, col_offset=43, end_lineno=210, end_col_offset=56), attr=''parts'',
      ctx=Load(), lineno=210, col_offset=43, end_lineno=210, end_col_offset=62), slice=Constant(value=0,
      lineno=210, col_offset=63, end_lineno=210, end_col_offset=64), ctx=Load(), lineno=210,
      col_offset=43, end_lineno=210, end_col_offset=65), lineno=210, col_offset=24,
      end_lineno=210, end_col_offset=65), lineno=210, col_offset=8, end_lineno=210,
      end_col_offset=65), Expr(value=Call(func=Attribute(value=Name(id=''output_subdir'',
      ctx=Load(), lineno=211, col_offset=8, end_lineno=211, end_col_offset=21), attr=''mkdir'',
      ctx=Load(), lineno=211, col_offset=8, end_lineno=211, end_col_offset=27), args=[],
      keywords=[keyword(arg=''parents'', value=Constant(value=True, lineno=211, col_offset=36,
      end_lineno=211, end_col_offset=40), lineno=211, col_offset=28, end_lineno=211,
      end_col_offset=40), keyword(arg=''exist_ok'', value=Constant(value=True, lineno=211,
      col_offset=51, end_lineno=211, end_col_offset=55), lineno=211, col_offset=42,
      end_lineno=211, end_col_offset=55)], lineno=211, col_offset=8, end_lineno=211,
      end_col_offset=56), lineno=211, col_offset=8, end_lineno=211, end_col_offset=56),
      Assign(targets=[Name(id=''file_names'', ctx=Store(), lineno=214, col_offset=8,
      end_lineno=214, end_col_offset=18)], value=List(elts=[JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=214, col_offset=25, end_lineno=214, end_col_offset=34), conversion=-1,
      lineno=214, col_offset=22, end_lineno=214, end_col_offset=44), Constant(value=''.qa.json'',
      lineno=214, col_offset=22, end_lineno=214, end_col_offset=44)], lineno=214,
      col_offset=22, end_lineno=214, end_col_offset=44), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=214, col_offset=49, end_lineno=214, end_col_offset=58), conversion=-1,
      lineno=214, col_offset=46, end_lineno=214, end_col_offset=74), Constant(value=''.instruct.json'',
      lineno=214, col_offset=46, end_lineno=214, end_col_offset=74)], lineno=214,
      col_offset=46, end_lineno=214, end_col_offset=74), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=214, col_offset=79, end_lineno=214, end_col_offset=88), conversion=-1,
      lineno=214, col_offset=76, end_lineno=214, end_col_offset=103), Constant(value=''.details.yaml'',
      lineno=214, col_offset=76, end_lineno=214, end_col_offset=103)], lineno=214,
      col_offset=76, end_lineno=214, end_col_offset=103)], ctx=Load(), lineno=214,
      col_offset=21, end_lineno=214, end_col_offset=104), lineno=214, col_offset=8,
      end_lineno=214, end_col_offset=104), Assign(targets=[Name(id=''contents'', ctx=Store(),
      lineno=215, col_offset=8, end_lineno=215, end_col_offset=16)], value=List(elts=[Name(id=''qa_list'',
      ctx=Load(), lineno=215, col_offset=20, end_lineno=215, end_col_offset=27), Name(id=''instruct_list'',
      ctx=Load(), lineno=215, col_offset=29, end_lineno=215, end_col_offset=42), Name(id=''file_details'',
      ctx=Load(), lineno=215, col_offset=44, end_lineno=215, end_col_offset=56)],
      ctx=Load(), lineno=215, col_offset=19, end_lineno=215, end_col_offset=57), lineno=215,
      col_offset=8, end_lineno=215, end_col_offset=57), For(target=Tuple(elts=[Name(id=''file_name'',
      ctx=Store(), lineno=216, col_offset=12, end_lineno=216, end_col_offset=21),
      Name(id=''content'', ctx=Store(), lineno=216, col_offset=23, end_lineno=216,
      end_col_offset=30)], ctx=Store(), lineno=216, col_offset=12, end_lineno=216,
      end_col_offset=30), iter=Call(func=Name(id=''zip'', ctx=Load(), lineno=216,
      col_offset=34, end_lineno=216, end_col_offset=37), args=[Name(id=''file_names'',
      ctx=Load(), lineno=216, col_offset=38, end_lineno=216, end_col_offset=48), Name(id=''contents'',
      ctx=Load(), lineno=216, col_offset=50, end_lineno=216, end_col_offset=58)],
      keywords=[], lineno=216, col_offset=34, end_lineno=216, end_col_offset=59),
      body=[Expr(value=Call(func=Name(id=''write_file'', ctx=Load(), lineno=217, col_offset=12,
      end_lineno=217, end_col_offset=22), args=[Name(id=''content'', ctx=Load(), lineno=217,
      col_offset=23, end_lineno=217, end_col_offset=30), BinOp(left=Name(id=''output_subdir'',
      ctx=Load(), lineno=217, col_offset=32, end_lineno=217, end_col_offset=45), op=Div(),
      right=Name(id=''file_name'', ctx=Load(), lineno=217, col_offset=48, end_lineno=217,
      end_col_offset=57), lineno=217, col_offset=32, end_lineno=217, end_col_offset=57)],
      keywords=[], lineno=217, col_offset=12, end_lineno=217, end_col_offset=58),
      lineno=217, col_offset=12, end_lineno=217, end_col_offset=58)], orelse=[], lineno=216,
      col_offset=8, end_lineno=217, end_col_offset=58), If(test=Name(id=''graph'',
      ctx=Load(), lineno=220, col_offset=11, end_lineno=220, end_col_offset=16), body=[Try(body=[Expr(value=Call(func=Name(id=''create_code_graph'',
      ctx=Load(), lineno=223, col_offset=16, end_lineno=223, end_col_offset=33), args=[Name(id=''file_details'',
      ctx=Load(), lineno=223, col_offset=34, end_lineno=223, end_col_offset=46), Name(id=''base_name'',
      ctx=Load(), lineno=223, col_offset=48, end_lineno=223, end_col_offset=57), Name(id=''output_subdir'',
      ctx=Load(), lineno=223, col_offset=59, end_lineno=223, end_col_offset=72)],
      keywords=[], lineno=223, col_offset=16, end_lineno=223, end_col_offset=73),
      lineno=223, col_offset=16, end_lineno=223, end_col_offset=73)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=225, col_offset=16, end_lineno=225, end_col_offset=23), attr=''info'',
      ctx=Load(), lineno=225, col_offset=16, end_lineno=225, end_col_offset=28), args=[JoinedStr(values=[Constant(value=''Error
      creating graph for '', lineno=225, col_offset=29, end_lineno=225, end_col_offset=68),
      FormattedValue(value=Name(id=''file_path'', ctx=Load(), lineno=225, col_offset=57,
      end_lineno=225, end_col_offset=66), conversion=-1, lineno=225, col_offset=29,
      end_lineno=225, end_col_offset=68)], lineno=225, col_offset=29, end_lineno=225,
      end_col_offset=68)], keywords=[], lineno=225, col_offset=16, end_lineno=225,
      end_col_offset=69), lineno=225, col_offset=16, end_lineno=225, end_col_offset=69),
      Continue(lineno=226, col_offset=16, end_lineno=226, end_col_offset=24)], lineno=224,
      col_offset=12, end_lineno=226, end_col_offset=24)], orelse=[], finalbody=[],
      lineno=222, col_offset=12, end_lineno=226, end_col_offset=24)], orelse=[], lineno=220,
      col_offset=8, end_lineno=226, end_col_offset=24)], orelse=[], lineno=195, col_offset=4,
      end_lineno=226, end_col_offset=24), Assign(targets=[Name(id=''datasets'', ctx=Store(),
      lineno=229, col_offset=4, end_lineno=229, end_col_offset=12)], value=Call(func=Name(id=''combine_json_files'',
      ctx=Load(), lineno=229, col_offset=15, end_lineno=229, end_col_offset=33), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=229, col_offset=34, end_lineno=229, end_col_offset=44)],
      keywords=[], lineno=229, col_offset=15, end_lineno=229, end_col_offset=45),
      lineno=229, col_offset=4, end_lineno=229, end_col_offset=45), Return(value=Name(id=''datasets'',
      ctx=Load(), lineno=230, col_offset=11, end_lineno=230, end_col_offset=19), lineno=230,
      col_offset=4, end_lineno=230, end_col_offset=19)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=177, col_offset=145, end_lineno=177, end_col_offset=149),
      slice=Tuple(elts=[Name(id=''str'', ctx=Load(), lineno=177, col_offset=150, end_lineno=177,
      end_col_offset=153), Subscript(value=Name(id=''List'', ctx=Load(), lineno=177,
      col_offset=155, end_lineno=177, end_col_offset=159), slice=Name(id=''Dict'',
      ctx=Load(), lineno=177, col_offset=160, end_lineno=177, end_col_offset=164),
      ctx=Load(), lineno=177, col_offset=155, end_lineno=177, end_col_offset=165)],
      ctx=Load(), lineno=177, col_offset=150, end_lineno=177, end_col_offset=165),
      ctx=Load(), lineno=177, col_offset=145, end_lineno=177, end_col_offset=166),
      lineno=177, col_offset=0, end_lineno=230, end_col_offset=19)'
    function_docstring: "Processes all Python files in a given directory and its subdirectories.\n\
      Args:\n    start_path (str): The directory to start the search for Python files.\n\
      \    output_dir (str): The directory where the output files should be\n    \
      \    written.\n    questions (Dict): The set of questions to answer about each\
      \ Python \n        file.\n    model_config (Dict): The configuration for the\
      \ model.\n    use_llm (bool): Whether to use the LLM model to generate answers\
      \ for\n        json.\n    use_summary (bool): Whether to use the summary of\
      \ the code to reduce \n        dataset context length\n    graph (bool): Whether\
      \ to generate graphs for the code."
    function_inputs:
    - start_path
    - output_dir
    - questions
    - llm
    - prompt
    - use_llm
    - use_summary
    - graph
    function_defaults: []
    function_returns:
    - datasets
    function_calls:
    - Path
    - logging.info
    - write_file
    - Path(file_path).relative_to
    - '''.''.join'
    - Path(start_path).rglob
    - isinstance
    - p.is_file
    - get_python_file_details
    - output_subdir.mkdir
    - create_code_graph
    - combine_json_files
    - get_python_datasets
    - zip
    function_variables:
    - file_names
    - datasets
    - file_details
    - base_name
    - output_subdir
    - python_files
    - relative_path
    - contents
    function_decorators: []
    function_annotations: []
    function_properties: []
  py2dataset:
    function_name: py2dataset
    function_code: "def py2dataset(start_path: str='', use_llm: bool=False, use_summary:\
      \ bool=False, graph: bool=False, output_dir: str='', model_config_pathname:\
      \ str='', questions_pathname: str='') -> Dict[str, List[Dict]]:\n    \"\"\"\n\
      \    Process Python files within the specified directory and its \n    subdirectories,\
      \ to generating question-answer pairs and instructions for\n    each file. The\
      \ results are written to JSON and YAML files in the specified\n    output directory.\n\
      \    Args:\n        start_path (str, optional): Path to the directory to start\
      \ the search for Python\n            files.\n        use_llm (bool, optional):\
      \ If True, use a large language model to\n            generate answers for JSON.\
      \ Defaults to False.\n        graph (bool, optional): If True, generate graphs\
      \ from the file details. \n              Defaults to False.\n        output_dir\
      \ (str, optional): Path to the directory where the output\n            files\
      \ should be written. \n        model_config_pathname (str, optional): Path to\
      \ the model configuration\n            file. \n    Raises:\n        ValueError:\
      \ If the provided directory does not exist.\n    \"\"\"\n    sys.setrecursionlimit(3000)\n\
      \    if start_path == '' or not os.path.isdir(start_path):\n        logging.info('No\
      \ valid start path provided. Using current working directory.')\n        start_path\
      \ = os.getcwd()\n    output_dir = get_output_dir(output_dir)\n    questions\
      \ = get_questions(questions_pathname)\n    llm = None\n    model_config = None\n\
      \    prompt = ''\n    if use_llm:\n        llm, prompt = get_model(model_config_pathname)\n\
      \    datasets = process_python_directories(start_path, output_dir, questions,\
      \ llm, prompt, use_llm, use_summary, graph)\n    return datasets"
    function_ast: 'FunctionDef(name=''py2dataset'', args=arguments(posonlyargs=[],
      args=[arg(arg=''start_path'', annotation=Name(id=''str'', ctx=Load(), lineno=233,
      col_offset=27, end_lineno=233, end_col_offset=30), lineno=233, col_offset=15,
      end_lineno=233, end_col_offset=30), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=233, col_offset=44, end_lineno=233, end_col_offset=48), lineno=233,
      col_offset=35, end_lineno=233, end_col_offset=48), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=233, col_offset=69, end_lineno=233,
      end_col_offset=73), lineno=233, col_offset=56, end_lineno=233, end_col_offset=73),
      arg(arg=''graph'', annotation=Name(id=''bool'', ctx=Load(), lineno=233, col_offset=88,
      end_lineno=233, end_col_offset=92), lineno=233, col_offset=81, end_lineno=233,
      end_col_offset=92), arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load(),
      lineno=233, col_offset=112, end_lineno=233, end_col_offset=115), lineno=233,
      col_offset=100, end_lineno=233, end_col_offset=115), arg(arg=''model_config_pathname'',
      annotation=Name(id=''str'', ctx=Load(), lineno=233, col_offset=143, end_lineno=233,
      end_col_offset=146), lineno=233, col_offset=120, end_lineno=233, end_col_offset=146),
      arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load(), lineno=233,
      col_offset=171, end_lineno=233, end_col_offset=174), lineno=233, col_offset=151,
      end_lineno=233, end_col_offset=174)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='''',
      lineno=233, col_offset=31, end_lineno=233, end_col_offset=33), Constant(value=False,
      lineno=233, col_offset=49, end_lineno=233, end_col_offset=54), Constant(value=False,
      lineno=233, col_offset=74, end_lineno=233, end_col_offset=79), Constant(value=False,
      lineno=233, col_offset=93, end_lineno=233, end_col_offset=98), Constant(value='''',
      lineno=233, col_offset=116, end_lineno=233, end_col_offset=118), Constant(value='''',
      lineno=233, col_offset=147, end_lineno=233, end_col_offset=149), Constant(value='''',
      lineno=233, col_offset=175, end_lineno=233, end_col_offset=177)]), body=[Expr(value=Constant(value=''\n    Process
      Python files within the specified directory and its \n    subdirectories, to
      generating question-answer pairs and instructions for\n    each file. The results
      are written to JSON and YAML files in the specified\n    output directory.\n    Args:\n        start_path
      (str, optional): Path to the directory to start the search for Python\n            files.\n        use_llm
      (bool, optional): If True, use a large language model to\n            generate
      answers for JSON. Defaults to False.\n        graph (bool, optional): If True,
      generate graphs from the file details. \n              Defaults to False.\n        output_dir
      (str, optional): Path to the directory where the output\n            files should
      be written. \n        model_config_pathname (str, optional): Path to the model
      configuration\n            file. \n    Raises:\n        ValueError: If the provided
      directory does not exist.\n    '', lineno=234, col_offset=4, end_lineno=252,
      end_col_offset=7), lineno=234, col_offset=4, end_lineno=252, end_col_offset=7),
      Expr(value=Call(func=Attribute(value=Name(id=''sys'', ctx=Load(), lineno=253,
      col_offset=4, end_lineno=253, end_col_offset=7), attr=''setrecursionlimit'',
      ctx=Load(), lineno=253, col_offset=4, end_lineno=253, end_col_offset=25), args=[Constant(value=3000,
      lineno=253, col_offset=26, end_lineno=253, end_col_offset=30)], keywords=[],
      lineno=253, col_offset=4, end_lineno=253, end_col_offset=31), lineno=253, col_offset=4,
      end_lineno=253, end_col_offset=31), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id=''start_path'',
      ctx=Load(), lineno=256, col_offset=7, end_lineno=256, end_col_offset=17), ops=[Eq()],
      comparators=[Constant(value='''', lineno=256, col_offset=21, end_lineno=256,
      end_col_offset=23)], lineno=256, col_offset=7, end_lineno=256, end_col_offset=23),
      UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=256, col_offset=31, end_lineno=256, end_col_offset=33), attr=''path'',
      ctx=Load(), lineno=256, col_offset=31, end_lineno=256, end_col_offset=38), attr=''isdir'',
      ctx=Load(), lineno=256, col_offset=31, end_lineno=256, end_col_offset=44), args=[Name(id=''start_path'',
      ctx=Load(), lineno=256, col_offset=45, end_lineno=256, end_col_offset=55)],
      keywords=[], lineno=256, col_offset=31, end_lineno=256, end_col_offset=56),
      lineno=256, col_offset=27, end_lineno=256, end_col_offset=56)], lineno=256,
      col_offset=7, end_lineno=256, end_col_offset=56), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=257, col_offset=8, end_lineno=257, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=257, col_offset=8, end_lineno=257, end_col_offset=20), args=[Constant(value=''No
      valid start path provided. Using current working directory.'', lineno=257, col_offset=21,
      end_lineno=257, end_col_offset=85)], keywords=[], lineno=257, col_offset=8,
      end_lineno=257, end_col_offset=86), lineno=257, col_offset=8, end_lineno=257,
      end_col_offset=86), Assign(targets=[Name(id=''start_path'', ctx=Store(), lineno=258,
      col_offset=8, end_lineno=258, end_col_offset=18)], value=Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=258, col_offset=21, end_lineno=258, end_col_offset=23), attr=''getcwd'',
      ctx=Load(), lineno=258, col_offset=21, end_lineno=258, end_col_offset=30), args=[],
      keywords=[], lineno=258, col_offset=21, end_lineno=258, end_col_offset=32),
      lineno=258, col_offset=8, end_lineno=258, end_col_offset=32)], orelse=[], lineno=256,
      col_offset=4, end_lineno=258, end_col_offset=32), Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=260, col_offset=4, end_lineno=260, end_col_offset=14)],
      value=Call(func=Name(id=''get_output_dir'', ctx=Load(), lineno=260, col_offset=17,
      end_lineno=260, end_col_offset=31), args=[Name(id=''output_dir'', ctx=Load(),
      lineno=260, col_offset=32, end_lineno=260, end_col_offset=42)], keywords=[],
      lineno=260, col_offset=17, end_lineno=260, end_col_offset=43), lineno=260, col_offset=4,
      end_lineno=260, end_col_offset=43), Assign(targets=[Name(id=''questions'', ctx=Store(),
      lineno=261, col_offset=4, end_lineno=261, end_col_offset=13)], value=Call(func=Name(id=''get_questions'',
      ctx=Load(), lineno=261, col_offset=16, end_lineno=261, end_col_offset=29), args=[Name(id=''questions_pathname'',
      ctx=Load(), lineno=261, col_offset=30, end_lineno=261, end_col_offset=48)],
      keywords=[], lineno=261, col_offset=16, end_lineno=261, end_col_offset=49),
      lineno=261, col_offset=4, end_lineno=261, end_col_offset=49), Assign(targets=[Name(id=''llm'',
      ctx=Store(), lineno=263, col_offset=4, end_lineno=263, end_col_offset=7)], value=Constant(value=None,
      lineno=263, col_offset=10, end_lineno=263, end_col_offset=14), lineno=263, col_offset=4,
      end_lineno=263, end_col_offset=14), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=264, col_offset=4, end_lineno=264, end_col_offset=16)],
      value=Constant(value=None, lineno=264, col_offset=19, end_lineno=264, end_col_offset=23),
      lineno=264, col_offset=4, end_lineno=264, end_col_offset=23), Assign(targets=[Name(id=''prompt'',
      ctx=Store(), lineno=265, col_offset=4, end_lineno=265, end_col_offset=10)],
      value=Constant(value='''', lineno=265, col_offset=13, end_lineno=265, end_col_offset=15),
      lineno=265, col_offset=4, end_lineno=265, end_col_offset=15), If(test=Name(id=''use_llm'',
      ctx=Load(), lineno=266, col_offset=7, end_lineno=266, end_col_offset=14), body=[Assign(targets=[Tuple(elts=[Name(id=''llm'',
      ctx=Store(), lineno=267, col_offset=8, end_lineno=267, end_col_offset=11), Name(id=''prompt'',
      ctx=Store(), lineno=267, col_offset=13, end_lineno=267, end_col_offset=19)],
      ctx=Store(), lineno=267, col_offset=8, end_lineno=267, end_col_offset=19)],
      value=Call(func=Name(id=''get_model'', ctx=Load(), lineno=267, col_offset=22,
      end_lineno=267, end_col_offset=31), args=[Name(id=''model_config_pathname'',
      ctx=Load(), lineno=267, col_offset=32, end_lineno=267, end_col_offset=53)],
      keywords=[], lineno=267, col_offset=22, end_lineno=267, end_col_offset=54),
      lineno=267, col_offset=8, end_lineno=267, end_col_offset=54)], orelse=[], lineno=266,
      col_offset=4, end_lineno=267, end_col_offset=54), Assign(targets=[Name(id=''datasets'',
      ctx=Store(), lineno=269, col_offset=4, end_lineno=269, end_col_offset=12)],
      value=Call(func=Name(id=''process_python_directories'', ctx=Load(), lineno=269,
      col_offset=15, end_lineno=269, end_col_offset=41), args=[Name(id=''start_path'',
      ctx=Load(), lineno=269, col_offset=42, end_lineno=269, end_col_offset=52), Name(id=''output_dir'',
      ctx=Load(), lineno=269, col_offset=54, end_lineno=269, end_col_offset=64), Name(id=''questions'',
      ctx=Load(), lineno=269, col_offset=66, end_lineno=269, end_col_offset=75), Name(id=''llm'',
      ctx=Load(), lineno=269, col_offset=77, end_lineno=269, end_col_offset=80), Name(id=''prompt'',
      ctx=Load(), lineno=269, col_offset=82, end_lineno=269, end_col_offset=88), Name(id=''use_llm'',
      ctx=Load(), lineno=269, col_offset=90, end_lineno=269, end_col_offset=97), Name(id=''use_summary'',
      ctx=Load(), lineno=269, col_offset=99, end_lineno=269, end_col_offset=110),
      Name(id=''graph'', ctx=Load(), lineno=269, col_offset=112, end_lineno=269, end_col_offset=117)],
      keywords=[], lineno=269, col_offset=15, end_lineno=269, end_col_offset=118),
      lineno=269, col_offset=4, end_lineno=269, end_col_offset=118), Return(value=Name(id=''datasets'',
      ctx=Load(), lineno=270, col_offset=11, end_lineno=270, end_col_offset=19), lineno=270,
      col_offset=4, end_lineno=270, end_col_offset=19)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=233, col_offset=182, end_lineno=233, end_col_offset=186),
      slice=Tuple(elts=[Name(id=''str'', ctx=Load(), lineno=233, col_offset=187, end_lineno=233,
      end_col_offset=190), Subscript(value=Name(id=''List'', ctx=Load(), lineno=233,
      col_offset=192, end_lineno=233, end_col_offset=196), slice=Name(id=''Dict'',
      ctx=Load(), lineno=233, col_offset=197, end_lineno=233, end_col_offset=201),
      ctx=Load(), lineno=233, col_offset=192, end_lineno=233, end_col_offset=202)],
      ctx=Load(), lineno=233, col_offset=187, end_lineno=233, end_col_offset=202),
      ctx=Load(), lineno=233, col_offset=182, end_lineno=233, end_col_offset=203),
      lineno=233, col_offset=0, end_lineno=270, end_col_offset=19)'
    function_docstring: "Process Python files within the specified directory and its\
      \ \nsubdirectories, to generating question-answer pairs and instructions for\n\
      each file. The results are written to JSON and YAML files in the specified\n\
      output directory.\nArgs:\n    start_path (str, optional): Path to the directory\
      \ to start the search for Python\n        files.\n    use_llm (bool, optional):\
      \ If True, use a large language model to\n        generate answers for JSON.\
      \ Defaults to False.\n    graph (bool, optional): If True, generate graphs from\
      \ the file details. \n          Defaults to False.\n    output_dir (str, optional):\
      \ Path to the directory where the output\n        files should be written. \n\
      \    model_config_pathname (str, optional): Path to the model configuration\n\
      \        file. \nRaises:\n    ValueError: If the provided directory does not\
      \ exist."
    function_inputs:
    - start_path
    - use_llm
    - use_summary
    - graph
    - output_dir
    - model_config_pathname
    - questions_pathname
    function_defaults:
    - ''''''
    - 'False'
    - 'False'
    - 'False'
    - ''''''
    - ''''''
    - ''''''
    function_returns:
    - datasets
    function_calls:
    - sys.setrecursionlimit
    - logging.info
    - process_python_directories
    - get_model
    - os.getcwd
    - get_output_dir
    - os.path.isdir
    - get_questions
    function_variables:
    - output_dir
    - datasets
    - questions
    - prompt
    - model_config
    - llm
    - start_path
    function_decorators: []
    function_annotations: []
    function_properties: []
  main:
    function_name: main
    function_code: "def main():\n    \"\"\"\n    Command line function called function\
      \ to process Python files within the \n    specified directory and its subdirectories,\
      \ to generating question-answer\n    pairs and instructions for each file. The\
      \ results are written to JSON and\n    YAML files in the specified output directory.\n\
      \    Args:\n        start_path (str, optional): Path to the directory to start\
      \ the search for Python\n            files.\n        use_llm (bool, optional):\
      \ If True, use a large language model to\n            generate answers for JSON.\
      \ Defaults to False.\n        graph (bool, optional): If True, generate graphs\
      \ from the file details.\n                Defaults to False.\n        output_dir\
      \ (str, optional): Path to the directory where the output\n            files\
      \ should be written. If not provided, writes the files to the\n            'datasets'\
      \ directory in the current working directory.\n        model_config_pathname\
      \ (str, optional): Path to the model configuration file.\n            If not\
      \ provided, defaults tO local 'py2dataset_model_config.yaml'\n        questions_pathname\
      \ (str, optional): Path to the questions file.\n    Raises: ValueError: If the\
      \ provided directory does not exist.\n    \"\"\"\n    arg_string = ' '.join(sys.argv[1:])\n\
      \    start_path = ''\n    use_llm = False\n    use_summary = False\n    quiet\
      \ = False\n    graph = False\n    output_dir = ''\n    questions_pathname =\
      \ ''\n    model_config_pathname = ''\n    if '--start_path' in arg_string:\n\
      \        start_path = arg_string.split('--start_path ')[1].split(' ')[0]\n \
      \       arg_string = arg_string.replace(f'--start_path {start_path}', '')\n\
      \    if '--use_llm' in arg_string:\n        use_llm = True\n        arg_string\
      \ = arg_string.replace('--use_llm', '')\n    if '--use_summary' in arg_string:\n\
      \        use_summary = True\n        arg_string = arg_string.replace('--use_summary',\
      \ '')\n    if '--quiet' in arg_string:\n        quiet = True\n        arg_string\
      \ = arg_string.replace('--quiet', '')\n    if '--graph' in arg_string:\n   \
      \     graph = True\n        arg_string = arg_string.replace('--graph', '')\n\
      \    if '--output_dir' in arg_string:\n        output_dir = arg_string.split('--output_dir\
      \ ')[1].split(' ')[0]\n        arg_string = arg_string.replace(f'--output_dir\
      \ {output_dir}', '')\n    if '--model_config_pathname' in arg_string:\n    \
      \    model_config_pathname = arg_string.split('--model_config_pathname ')[1].split('\
      \ ')[0]\n        arg_string = arg_string.replace(f'--model_config_pathname {model_config_pathname}',\
      \ '')\n    if '--questions_pathname' in arg_string:\n        questions_pathname\
      \ = arg_string.split('--questions_pathname ')[1].split(' ')[0]\n        arg_string\
      \ = arg_string.replace(f'--questions_pathname {questions_pathname}', '')\n \
      \   if quiet:\n        logging.getLogger().setLevel(logging.WARNING)\n    else:\n\
      \        logging.getLogger().setLevel(logging.INFO)\n    py2dataset(start_path,\
      \ use_llm, use_summary, graph, output_dir, model_config_pathname, questions_pathname)"
    function_ast: 'FunctionDef(name=''main'', args=arguments(posonlyargs=[], args=[],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Command
      line function called function to process Python files within the \n    specified
      directory and its subdirectories, to generating question-answer\n    pairs and
      instructions for each file. The results are written to JSON and\n    YAML files
      in the specified output directory.\n    Args:\n        start_path (str, optional):
      Path to the directory to start the search for Python\n            files.\n        use_llm
      (bool, optional): If True, use a large language model to\n            generate
      answers for JSON. Defaults to False.\n        graph (bool, optional): If True,
      generate graphs from the file details.\n                Defaults to False.\n        output_dir
      (str, optional): Path to the directory where the output\n            files should
      be written. If not provided, writes the files to the\n            ''datasets''
      directory in the current working directory.\n        model_config_pathname (str,
      optional): Path to the model configuration file.\n            If not provided,
      defaults tO local ''py2dataset_model_config.yaml''\n        questions_pathname
      (str, optional): Path to the questions file.\n    Raises: ValueError: If the
      provided directory does not exist.\n    ", lineno=274, col_offset=4, end_lineno=293,
      end_col_offset=7), lineno=274, col_offset=4, end_lineno=293, end_col_offset=7),
      Assign(targets=[Name(id=''arg_string'', ctx=Store(), lineno=294, col_offset=4,
      end_lineno=294, end_col_offset=14)], value=Call(func=Attribute(value=Constant(value=''
      '', lineno=294, col_offset=17, end_lineno=294, end_col_offset=20), attr=''join'',
      ctx=Load(), lineno=294, col_offset=17, end_lineno=294, end_col_offset=25), args=[Subscript(value=Attribute(value=Name(id=''sys'',
      ctx=Load(), lineno=294, col_offset=26, end_lineno=294, end_col_offset=29), attr=''argv'',
      ctx=Load(), lineno=294, col_offset=26, end_lineno=294, end_col_offset=34), slice=Slice(lower=Constant(value=1,
      lineno=294, col_offset=35, end_lineno=294, end_col_offset=36), lineno=294, col_offset=35,
      end_lineno=294, end_col_offset=37), ctx=Load(), lineno=294, col_offset=26, end_lineno=294,
      end_col_offset=38)], keywords=[], lineno=294, col_offset=17, end_lineno=294,
      end_col_offset=39), lineno=294, col_offset=4, end_lineno=294, end_col_offset=39),
      Assign(targets=[Name(id=''start_path'', ctx=Store(), lineno=295, col_offset=4,
      end_lineno=295, end_col_offset=14)], value=Constant(value='''', lineno=295,
      col_offset=17, end_lineno=295, end_col_offset=19), lineno=295, col_offset=4,
      end_lineno=295, end_col_offset=19), Assign(targets=[Name(id=''use_llm'', ctx=Store(),
      lineno=296, col_offset=4, end_lineno=296, end_col_offset=11)], value=Constant(value=False,
      lineno=296, col_offset=14, end_lineno=296, end_col_offset=19), lineno=296, col_offset=4,
      end_lineno=296, end_col_offset=19), Assign(targets=[Name(id=''use_summary'',
      ctx=Store(), lineno=297, col_offset=4, end_lineno=297, end_col_offset=15)],
      value=Constant(value=False, lineno=297, col_offset=18, end_lineno=297, end_col_offset=23),
      lineno=297, col_offset=4, end_lineno=297, end_col_offset=23), Assign(targets=[Name(id=''quiet'',
      ctx=Store(), lineno=298, col_offset=4, end_lineno=298, end_col_offset=9)], value=Constant(value=False,
      lineno=298, col_offset=12, end_lineno=298, end_col_offset=17), lineno=298, col_offset=4,
      end_lineno=298, end_col_offset=17), Assign(targets=[Name(id=''graph'', ctx=Store(),
      lineno=299, col_offset=4, end_lineno=299, end_col_offset=9)], value=Constant(value=False,
      lineno=299, col_offset=12, end_lineno=299, end_col_offset=17), lineno=299, col_offset=4,
      end_lineno=299, end_col_offset=17), Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=300, col_offset=4, end_lineno=300, end_col_offset=14)],
      value=Constant(value='''', lineno=300, col_offset=17, end_lineno=300, end_col_offset=19),
      lineno=300, col_offset=4, end_lineno=300, end_col_offset=19), Assign(targets=[Name(id=''questions_pathname'',
      ctx=Store(), lineno=301, col_offset=4, end_lineno=301, end_col_offset=22)],
      value=Constant(value='''', lineno=301, col_offset=25, end_lineno=301, end_col_offset=27),
      lineno=301, col_offset=4, end_lineno=301, end_col_offset=27), Assign(targets=[Name(id=''model_config_pathname'',
      ctx=Store(), lineno=302, col_offset=4, end_lineno=302, end_col_offset=25)],
      value=Constant(value='''', lineno=302, col_offset=28, end_lineno=302, end_col_offset=30),
      lineno=302, col_offset=4, end_lineno=302, end_col_offset=30), If(test=Compare(left=Constant(value=''--start_path'',
      lineno=303, col_offset=7, end_lineno=303, end_col_offset=21), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=303, col_offset=25, end_lineno=303, end_col_offset=35)],
      lineno=303, col_offset=7, end_lineno=303, end_col_offset=35), body=[Assign(targets=[Name(id=''start_path'',
      ctx=Store(), lineno=304, col_offset=8, end_lineno=304, end_col_offset=18)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=304, col_offset=21, end_lineno=304, end_col_offset=31), attr=''split'',
      ctx=Load(), lineno=304, col_offset=21, end_lineno=304, end_col_offset=37), args=[Constant(value=''--start_path
      '', lineno=304, col_offset=38, end_lineno=304, end_col_offset=53)], keywords=[],
      lineno=304, col_offset=21, end_lineno=304, end_col_offset=54), slice=Constant(value=1,
      lineno=304, col_offset=55, end_lineno=304, end_col_offset=56), ctx=Load(), lineno=304,
      col_offset=21, end_lineno=304, end_col_offset=57), attr=''split'', ctx=Load(),
      lineno=304, col_offset=21, end_lineno=304, end_col_offset=63), args=[Constant(value=''
      '', lineno=304, col_offset=64, end_lineno=304, end_col_offset=67)], keywords=[],
      lineno=304, col_offset=21, end_lineno=304, end_col_offset=68), slice=Constant(value=0,
      lineno=304, col_offset=69, end_lineno=304, end_col_offset=70), ctx=Load(), lineno=304,
      col_offset=21, end_lineno=304, end_col_offset=71), lineno=304, col_offset=8,
      end_lineno=304, end_col_offset=71), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=305, col_offset=8, end_lineno=305, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=305,
      col_offset=21, end_lineno=305, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=305, col_offset=21, end_lineno=305, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--start_path
      '', lineno=305, col_offset=40, end_lineno=305, end_col_offset=68), FormattedValue(value=Name(id=''start_path'',
      ctx=Load(), lineno=305, col_offset=56, end_lineno=305, end_col_offset=66), conversion=-1,
      lineno=305, col_offset=40, end_lineno=305, end_col_offset=68)], lineno=305,
      col_offset=40, end_lineno=305, end_col_offset=68), Constant(value='''', lineno=305,
      col_offset=70, end_lineno=305, end_col_offset=72)], keywords=[], lineno=305,
      col_offset=21, end_lineno=305, end_col_offset=73), lineno=305, col_offset=8,
      end_lineno=305, end_col_offset=73)], orelse=[], lineno=303, col_offset=4, end_lineno=305,
      end_col_offset=73), If(test=Compare(left=Constant(value=''--use_llm'', lineno=306,
      col_offset=7, end_lineno=306, end_col_offset=18), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=306, col_offset=22, end_lineno=306, end_col_offset=32)],
      lineno=306, col_offset=7, end_lineno=306, end_col_offset=32), body=[Assign(targets=[Name(id=''use_llm'',
      ctx=Store(), lineno=307, col_offset=8, end_lineno=307, end_col_offset=15)],
      value=Constant(value=True, lineno=307, col_offset=18, end_lineno=307, end_col_offset=22),
      lineno=307, col_offset=8, end_lineno=307, end_col_offset=22), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=308, col_offset=8, end_lineno=308, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=308,
      col_offset=21, end_lineno=308, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=308, col_offset=21, end_lineno=308, end_col_offset=39), args=[Constant(value=''--use_llm'',
      lineno=308, col_offset=40, end_lineno=308, end_col_offset=51), Constant(value='''',
      lineno=308, col_offset=53, end_lineno=308, end_col_offset=55)], keywords=[],
      lineno=308, col_offset=21, end_lineno=308, end_col_offset=56), lineno=308, col_offset=8,
      end_lineno=308, end_col_offset=56)], orelse=[], lineno=306, col_offset=4, end_lineno=308,
      end_col_offset=56), If(test=Compare(left=Constant(value=''--use_summary'', lineno=309,
      col_offset=7, end_lineno=309, end_col_offset=22), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=309, col_offset=26, end_lineno=309, end_col_offset=36)],
      lineno=309, col_offset=7, end_lineno=309, end_col_offset=36), body=[Assign(targets=[Name(id=''use_summary'',
      ctx=Store(), lineno=310, col_offset=8, end_lineno=310, end_col_offset=19)],
      value=Constant(value=True, lineno=310, col_offset=22, end_lineno=310, end_col_offset=26),
      lineno=310, col_offset=8, end_lineno=310, end_col_offset=26), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=311, col_offset=8, end_lineno=311, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=311,
      col_offset=21, end_lineno=311, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=311, col_offset=21, end_lineno=311, end_col_offset=39), args=[Constant(value=''--use_summary'',
      lineno=311, col_offset=40, end_lineno=311, end_col_offset=55), Constant(value='''',
      lineno=311, col_offset=57, end_lineno=311, end_col_offset=59)], keywords=[],
      lineno=311, col_offset=21, end_lineno=311, end_col_offset=60), lineno=311, col_offset=8,
      end_lineno=311, end_col_offset=60)], orelse=[], lineno=309, col_offset=4, end_lineno=311,
      end_col_offset=60), If(test=Compare(left=Constant(value=''--quiet'', lineno=312,
      col_offset=7, end_lineno=312, end_col_offset=16), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=312, col_offset=20, end_lineno=312, end_col_offset=30)],
      lineno=312, col_offset=7, end_lineno=312, end_col_offset=30), body=[Assign(targets=[Name(id=''quiet'',
      ctx=Store(), lineno=313, col_offset=8, end_lineno=313, end_col_offset=13)],
      value=Constant(value=True, lineno=313, col_offset=16, end_lineno=313, end_col_offset=20),
      lineno=313, col_offset=8, end_lineno=313, end_col_offset=20), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=314, col_offset=8, end_lineno=314, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=314,
      col_offset=21, end_lineno=314, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=314, col_offset=21, end_lineno=314, end_col_offset=39), args=[Constant(value=''--quiet'',
      lineno=314, col_offset=40, end_lineno=314, end_col_offset=49), Constant(value='''',
      lineno=314, col_offset=51, end_lineno=314, end_col_offset=53)], keywords=[],
      lineno=314, col_offset=21, end_lineno=314, end_col_offset=54), lineno=314, col_offset=8,
      end_lineno=314, end_col_offset=54)], orelse=[], lineno=312, col_offset=4, end_lineno=314,
      end_col_offset=54), If(test=Compare(left=Constant(value=''--graph'', lineno=315,
      col_offset=7, end_lineno=315, end_col_offset=16), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=315, col_offset=20, end_lineno=315, end_col_offset=30)],
      lineno=315, col_offset=7, end_lineno=315, end_col_offset=30), body=[Assign(targets=[Name(id=''graph'',
      ctx=Store(), lineno=316, col_offset=8, end_lineno=316, end_col_offset=13)],
      value=Constant(value=True, lineno=316, col_offset=16, end_lineno=316, end_col_offset=20),
      lineno=316, col_offset=8, end_lineno=316, end_col_offset=20), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=317, col_offset=8, end_lineno=317, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=317,
      col_offset=21, end_lineno=317, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=317, col_offset=21, end_lineno=317, end_col_offset=39), args=[Constant(value=''--graph'',
      lineno=317, col_offset=40, end_lineno=317, end_col_offset=49), Constant(value='''',
      lineno=317, col_offset=51, end_lineno=317, end_col_offset=53)], keywords=[],
      lineno=317, col_offset=21, end_lineno=317, end_col_offset=54), lineno=317, col_offset=8,
      end_lineno=317, end_col_offset=54)], orelse=[], lineno=315, col_offset=4, end_lineno=317,
      end_col_offset=54), If(test=Compare(left=Constant(value=''--output_dir'', lineno=318,
      col_offset=7, end_lineno=318, end_col_offset=21), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=318, col_offset=25, end_lineno=318, end_col_offset=35)],
      lineno=318, col_offset=7, end_lineno=318, end_col_offset=35), body=[Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=319, col_offset=8, end_lineno=319, end_col_offset=18)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=319, col_offset=21, end_lineno=319, end_col_offset=31), attr=''split'',
      ctx=Load(), lineno=319, col_offset=21, end_lineno=319, end_col_offset=37), args=[Constant(value=''--output_dir
      '', lineno=319, col_offset=38, end_lineno=319, end_col_offset=53)], keywords=[],
      lineno=319, col_offset=21, end_lineno=319, end_col_offset=54), slice=Constant(value=1,
      lineno=319, col_offset=55, end_lineno=319, end_col_offset=56), ctx=Load(), lineno=319,
      col_offset=21, end_lineno=319, end_col_offset=57), attr=''split'', ctx=Load(),
      lineno=319, col_offset=21, end_lineno=319, end_col_offset=63), args=[Constant(value=''
      '', lineno=319, col_offset=64, end_lineno=319, end_col_offset=67)], keywords=[],
      lineno=319, col_offset=21, end_lineno=319, end_col_offset=68), slice=Constant(value=0,
      lineno=319, col_offset=69, end_lineno=319, end_col_offset=70), ctx=Load(), lineno=319,
      col_offset=21, end_lineno=319, end_col_offset=71), lineno=319, col_offset=8,
      end_lineno=319, end_col_offset=71), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=320, col_offset=8, end_lineno=320, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=320,
      col_offset=21, end_lineno=320, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=320, col_offset=21, end_lineno=320, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--output_dir
      '', lineno=320, col_offset=40, end_lineno=320, end_col_offset=68), FormattedValue(value=Name(id=''output_dir'',
      ctx=Load(), lineno=320, col_offset=56, end_lineno=320, end_col_offset=66), conversion=-1,
      lineno=320, col_offset=40, end_lineno=320, end_col_offset=68)], lineno=320,
      col_offset=40, end_lineno=320, end_col_offset=68), Constant(value='''', lineno=320,
      col_offset=70, end_lineno=320, end_col_offset=72)], keywords=[], lineno=320,
      col_offset=21, end_lineno=320, end_col_offset=73), lineno=320, col_offset=8,
      end_lineno=320, end_col_offset=73)], orelse=[], lineno=318, col_offset=4, end_lineno=320,
      end_col_offset=73), If(test=Compare(left=Constant(value=''--model_config_pathname'',
      lineno=321, col_offset=7, end_lineno=321, end_col_offset=32), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=321, col_offset=36, end_lineno=321, end_col_offset=46)],
      lineno=321, col_offset=7, end_lineno=321, end_col_offset=46), body=[Assign(targets=[Name(id=''model_config_pathname'',
      ctx=Store(), lineno=322, col_offset=8, end_lineno=322, end_col_offset=29)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=322, col_offset=32, end_lineno=322, end_col_offset=42), attr=''split'',
      ctx=Load(), lineno=322, col_offset=32, end_lineno=322, end_col_offset=48), args=[Constant(value=''--model_config_pathname
      '', lineno=322, col_offset=49, end_lineno=322, end_col_offset=75)], keywords=[],
      lineno=322, col_offset=32, end_lineno=322, end_col_offset=76), slice=Constant(value=1,
      lineno=322, col_offset=77, end_lineno=322, end_col_offset=78), ctx=Load(), lineno=322,
      col_offset=32, end_lineno=322, end_col_offset=79), attr=''split'', ctx=Load(),
      lineno=322, col_offset=32, end_lineno=322, end_col_offset=85), args=[Constant(value=''
      '', lineno=322, col_offset=86, end_lineno=322, end_col_offset=89)], keywords=[],
      lineno=322, col_offset=32, end_lineno=322, end_col_offset=90), slice=Constant(value=0,
      lineno=322, col_offset=91, end_lineno=322, end_col_offset=92), ctx=Load(), lineno=322,
      col_offset=32, end_lineno=322, end_col_offset=93), lineno=322, col_offset=8,
      end_lineno=322, end_col_offset=93), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=323, col_offset=8, end_lineno=323, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=323,
      col_offset=21, end_lineno=323, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=323, col_offset=21, end_lineno=323, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--model_config_pathname
      '', lineno=323, col_offset=40, end_lineno=323, end_col_offset=90), FormattedValue(value=Name(id=''model_config_pathname'',
      ctx=Load(), lineno=323, col_offset=67, end_lineno=323, end_col_offset=88), conversion=-1,
      lineno=323, col_offset=40, end_lineno=323, end_col_offset=90)], lineno=323,
      col_offset=40, end_lineno=323, end_col_offset=90), Constant(value='''', lineno=323,
      col_offset=92, end_lineno=323, end_col_offset=94)], keywords=[], lineno=323,
      col_offset=21, end_lineno=323, end_col_offset=95), lineno=323, col_offset=8,
      end_lineno=323, end_col_offset=95)], orelse=[], lineno=321, col_offset=4, end_lineno=323,
      end_col_offset=95), If(test=Compare(left=Constant(value=''--questions_pathname'',
      lineno=324, col_offset=7, end_lineno=324, end_col_offset=29), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=324, col_offset=33, end_lineno=324, end_col_offset=43)],
      lineno=324, col_offset=7, end_lineno=324, end_col_offset=43), body=[Assign(targets=[Name(id=''questions_pathname'',
      ctx=Store(), lineno=325, col_offset=8, end_lineno=325, end_col_offset=26)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=325, col_offset=29, end_lineno=325, end_col_offset=39), attr=''split'',
      ctx=Load(), lineno=325, col_offset=29, end_lineno=325, end_col_offset=45), args=[Constant(value=''--questions_pathname
      '', lineno=325, col_offset=46, end_lineno=325, end_col_offset=69)], keywords=[],
      lineno=325, col_offset=29, end_lineno=325, end_col_offset=70), slice=Constant(value=1,
      lineno=325, col_offset=71, end_lineno=325, end_col_offset=72), ctx=Load(), lineno=325,
      col_offset=29, end_lineno=325, end_col_offset=73), attr=''split'', ctx=Load(),
      lineno=325, col_offset=29, end_lineno=325, end_col_offset=79), args=[Constant(value=''
      '', lineno=325, col_offset=80, end_lineno=325, end_col_offset=83)], keywords=[],
      lineno=325, col_offset=29, end_lineno=325, end_col_offset=84), slice=Constant(value=0,
      lineno=325, col_offset=85, end_lineno=325, end_col_offset=86), ctx=Load(), lineno=325,
      col_offset=29, end_lineno=325, end_col_offset=87), lineno=325, col_offset=8,
      end_lineno=325, end_col_offset=87), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=326, col_offset=8, end_lineno=326, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=326,
      col_offset=21, end_lineno=326, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=326, col_offset=21, end_lineno=326, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--questions_pathname
      '', lineno=326, col_offset=40, end_lineno=326, end_col_offset=84), FormattedValue(value=Name(id=''questions_pathname'',
      ctx=Load(), lineno=326, col_offset=64, end_lineno=326, end_col_offset=82), conversion=-1,
      lineno=326, col_offset=40, end_lineno=326, end_col_offset=84)], lineno=326,
      col_offset=40, end_lineno=326, end_col_offset=84), Constant(value='''', lineno=326,
      col_offset=86, end_lineno=326, end_col_offset=88)], keywords=[], lineno=326,
      col_offset=21, end_lineno=326, end_col_offset=89), lineno=326, col_offset=8,
      end_lineno=326, end_col_offset=89)], orelse=[], lineno=324, col_offset=4, end_lineno=326,
      end_col_offset=89), If(test=Name(id=''quiet'', ctx=Load(), lineno=328, col_offset=7,
      end_lineno=328, end_col_offset=12), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=329, col_offset=8, end_lineno=329, end_col_offset=15), attr=''getLogger'',
      ctx=Load(), lineno=329, col_offset=8, end_lineno=329, end_col_offset=25), args=[],
      keywords=[], lineno=329, col_offset=8, end_lineno=329, end_col_offset=27), attr=''setLevel'',
      ctx=Load(), lineno=329, col_offset=8, end_lineno=329, end_col_offset=36), args=[Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=329, col_offset=37, end_lineno=329, end_col_offset=44), attr=''WARNING'',
      ctx=Load(), lineno=329, col_offset=37, end_lineno=329, end_col_offset=52)],
      keywords=[], lineno=329, col_offset=8, end_lineno=329, end_col_offset=53), lineno=329,
      col_offset=8, end_lineno=329, end_col_offset=53)], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=331, col_offset=8, end_lineno=331, end_col_offset=15), attr=''getLogger'',
      ctx=Load(), lineno=331, col_offset=8, end_lineno=331, end_col_offset=25), args=[],
      keywords=[], lineno=331, col_offset=8, end_lineno=331, end_col_offset=27), attr=''setLevel'',
      ctx=Load(), lineno=331, col_offset=8, end_lineno=331, end_col_offset=36), args=[Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=331, col_offset=37, end_lineno=331, end_col_offset=44), attr=''INFO'',
      ctx=Load(), lineno=331, col_offset=37, end_lineno=331, end_col_offset=49)],
      keywords=[], lineno=331, col_offset=8, end_lineno=331, end_col_offset=50), lineno=331,
      col_offset=8, end_lineno=331, end_col_offset=50)], lineno=328, col_offset=4,
      end_lineno=331, end_col_offset=50), Expr(value=Call(func=Name(id=''py2dataset'',
      ctx=Load(), lineno=333, col_offset=4, end_lineno=333, end_col_offset=14), args=[Name(id=''start_path'',
      ctx=Load(), lineno=333, col_offset=15, end_lineno=333, end_col_offset=25), Name(id=''use_llm'',
      ctx=Load(), lineno=333, col_offset=27, end_lineno=333, end_col_offset=34), Name(id=''use_summary'',
      ctx=Load(), lineno=333, col_offset=36, end_lineno=333, end_col_offset=47), Name(id=''graph'',
      ctx=Load(), lineno=333, col_offset=49, end_lineno=333, end_col_offset=54), Name(id=''output_dir'',
      ctx=Load(), lineno=333, col_offset=56, end_lineno=333, end_col_offset=66), Name(id=''model_config_pathname'',
      ctx=Load(), lineno=333, col_offset=68, end_lineno=333, end_col_offset=89), Name(id=''questions_pathname'',
      ctx=Load(), lineno=333, col_offset=91, end_lineno=333, end_col_offset=109)],
      keywords=[], lineno=333, col_offset=4, end_lineno=333, end_col_offset=110),
      lineno=333, col_offset=4, end_lineno=333, end_col_offset=110)], decorator_list=[],
      lineno=273, col_offset=0, end_lineno=333, end_col_offset=110)'
    function_docstring: "Command line function called function to process Python files\
      \ within the \nspecified directory and its subdirectories, to generating question-answer\n\
      pairs and instructions for each file. The results are written to JSON and\n\
      YAML files in the specified output directory.\nArgs:\n    start_path (str, optional):\
      \ Path to the directory to start the search for Python\n        files.\n   \
      \ use_llm (bool, optional): If True, use a large language model to\n       \
      \ generate answers for JSON. Defaults to False.\n    graph (bool, optional):\
      \ If True, generate graphs from the file details.\n            Defaults to False.\n\
      \    output_dir (str, optional): Path to the directory where the output\n  \
      \      files should be written. If not provided, writes the files to the\n \
      \       'datasets' directory in the current working directory.\n    model_config_pathname\
      \ (str, optional): Path to the model configuration file.\n        If not provided,\
      \ defaults tO local 'py2dataset_model_config.yaml'\n    questions_pathname (str,\
      \ optional): Path to the questions file.\nRaises: ValueError: If the provided\
      \ directory does not exist."
    function_inputs: []
    function_defaults: []
    function_returns: []
    function_calls:
    - arg_string.split('--model_config_pathname ')[1].split
    - logging.getLogger
    - arg_string.split('--start_path ')[1].split
    - arg_string.split
    - ''' ''.join'
    - arg_string.split('--questions_pathname ')[1].split
    - arg_string.replace
    - py2dataset
    - logging.getLogger().setLevel
    - arg_string.split('--output_dir ')[1].split
    function_variables:
    - output_dir
    - arg_string
    - quiet
    - use_summary
    - use_llm
    - questions_pathname
    - model_config_pathname
    - graph
    - start_path
    function_decorators: []
    function_annotations: []
    function_properties: []
classes: {}
