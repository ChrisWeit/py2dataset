file_info:
  file_code: "\"\"\"\nFor each Python file within given directory, generate, save,\
    \ and return datasets\nthat include responses to questions about the code.\nRequirements:\n\
    [req01] The `process_python_directories` function shall:\n        a. Accept parameters\
    \ for the starting directory, output directory, questions dictionary, LLM, prompt,\
    \ use of LLM, use of summary, graph generation, and HTML generation.\n       \
    \ b. Search for all Python files within the given directory and its subdirectories.\n\
    \        c. Process each Python file using the 'get_python_file_details' and 'get_python_datasets'\
    \ functions.\n        d. Write the resulting datasets to the specified output\
    \ directory.\n        e. Return the datasets.\n[req02] The `py2dataset` function\
    \ shall:\n        a. Accept parameters for the starting directory, output directory,\
    \ questions pathname, model configuration pathname, use of LLM, use of summary,\
    \ graph generation, quiet mode, and HTML generation.\n        b. Determine the\
    \ appropriate parameters for the `process_python_directories` function based on\
    \ provided or default values.\n        c. Call the `process_python_directories`\
    \ function.\n        d. Adjust the logging level based on the quiet flag.\n  \
    \      e. Return the datasets.\n[req03] The `main` function shall:\n        a.\
    \ Accept command-line arguments.\n        b. Process the command-line arguments\
    \ to determine the parameters for the `py2dataset` function.\n        c. Call\
    \ the `py2dataset` function with the derived parameters.\n\"\"\"\nimport sys\n\
    import os\nimport logging\nfrom pathlib import Path\nfrom typing import Dict,\
    \ List, Union\nfrom get_python_file_details import get_python_file_details\nfrom\
    \ get_python_datasets import get_python_datasets\nfrom get_py2dataset_params import\
    \ get_questions, get_model, get_output_dir\nfrom save_py2dataset_output import\
    \ read_file, write_file, combine_json_files, create_code_graph\n\ndef process_python_directories(start_dir:\
    \ str, output_dir: str, questions: Dict, llm, prompt, use_llm: bool, use_summary:\
    \ bool, graph: bool, html: bool) -> Dict[str, List[Dict]]:\n    \"\"\"\n    Processes\
    \ all Python files in the provided directory and subdirectories.\n    Args:\n\
    \        start_dir (str): Starting directory to search for Python files.\n   \
    \     output_dir (str): Directory to write the output files.\n        questions\
    \ (Dict): Questions dictionary to answer about each Python file.\n        llm:\
    \ Large Language Model to use for generating answers.\n        prompt (str): Prompt\
    \ to provide to the language model.\n        use_llm (bool): If True, use the\
    \ LLM model to generate answers for JSON.\n        use_summary (bool): Use the\
    \ code summary to reduce dataset context length.\n        graph (bool): Generate\
    \ graphs for the code.\n        html (bool): Generate HTML files from the JSON\
    \ files.\n    Returns:\n        Dict[str, List[Dict]]: Datasets dictionary.\n\
    \    \"\"\"\n    python_files = [p for p in Path(start_dir).rglob('[!_]*.py')\
    \ if p.is_file()]\n\n    for file_path in python_files:\n        logging.info(f'Processing:\
    \ {file_path}')\n        relative_path = Path(file_path).relative_to(start_dir)\n\
    \        base_name = '.'.join(part for part in relative_path.parts)\n\n      \
    \  # use AST to get python file details\n        file_details = get_python_file_details(file_path)\n\
    \        if file_details is None or isinstance(file_details, tuple):\n       \
    \     continue\n\n        # get lists for qa.json and intruct.json for python\
    \ file\n        qa_list, instruct_list = get_python_datasets(file_path, file_details,\
    \ base_name, questions, llm, prompt, use_llm, use_summary)\n        if not qa_list:\n\
    \            continue\n\n        output_subdir = Path(output_dir) / relative_path.parts[0]\n\
    \        output_subdir.mkdir(parents=True, exist_ok=True)\n\n        # write qa.json\
    \ and instrunct.json files\n        file_names = [f'{base_name}.qa.json', f'{base_name}.instruct.json',\
    \ f'{base_name}.details.yaml']\n        contents = [qa_list, instruct_list, file_details]\n\
    \        for file_name, content in zip(file_names, contents):\n            write_file(content,\
    \ output_subdir / file_name)\n\n        # Create code graph images\n        if\
    \ graph:\n            # add error handling if anything goes wrong with creating\
    \ or saving the graph\n            try:\n                create_code_graph(file_details,\
    \ base_name, output_subdir)\n            except:\n                logging.info(f'Error\
    \ creating graph for {file_path}')\n                continue\n\n    # combine\
    \ all of the qa.json and instruct.json files together\n    datasets = combine_json_files(output_dir,\
    \ html)   \n    return datasets\n\n\ndef py2dataset(start_dir: str='', output_dir:\
    \ str='', questions_pathname: str='', model_config_pathname: str='', use_llm:\
    \ bool=False, use_summary: bool=False, graph: bool=False, quiet: bool=False, html:\
    \ bool=False) -> Dict[str, List[Dict]]:\n    \"\"\"\n    Process Python files\
    \ to generate question-answer pairs and instructions.\n    Args:\n        start_dir\
    \ (str, optional): Starting directory to search for Python files. Defaults to\
    \ current working directory.\n        output_dir (str, optional): Directory to\
    \ write the output files.\n        questions_pathname (str, optional): Path to\
    \ the questions file.\n        model_config_pathname (str, optional): Path to\
    \ the model configuration file.\n        use_llm (bool, optional): If True, use\
    \ a Large Language Model for generating JSON answers. Defaults to False.\n   \
    \     use_summary (bool, optional): Use code summary to reduce dataset context\
    \ length. Defaults to False.\n        graph (bool, optional): Generate graphs\
    \ for the code. Defaults to False.\n        quiet (bool, optional): Limit logging\
    \ output. Defaults to False.\n        html (bool, optional): Generate HTML files\
    \ from the JSON files. Defaults to False.\n    Returns:\n        Dict[str, List[Dict]]:\
    \ Datasets dictionary.\n    \"\"\"\n    if quiet:\n        logging.getLogger().setLevel(logging.WARNING)\n\
    \    else:\n        logging.getLogger().setLevel(logging.INFO)\n    sys.setrecursionlimit(3000)\
    \  # Increase the recursion limit for AST\n    \n    # if start dir is empty or\
    \ not a valid directory, use current working directory\n    if start_dir == ''\
    \ :\n        logging.info('No valid start path provided. Using current working\
    \ directory.')\n        start_dir = os.getcwd()    \n    start_dir = os.path.abspath(start_dir)\n\
    \    \n    output_dir = get_output_dir(output_dir)\n    questions = get_questions(questions_pathname)\n\
    \    \n    llm = None\n    model_config = None\n    prompt = ''\n    if use_llm:\n\
    \        llm, prompt = get_model(model_config_pathname)\n\n    datasets = process_python_directories(start_dir,\
    \ output_dir, questions, llm, prompt, use_llm, use_summary, graph, html)\n   \
    \ return datasets\n\n\ndef main():\n    \"\"\"\n    Command-line entry point for\
    \ processing Python files and generating datasets.\n    Args:\n        --start_dir\
    \ (str, optional): Starting directory to search for Python files. Defaults to\
    \ the current working directory.\n        --output_dir (str, optional): Directory\
    \ to write the output files. Defaults to the 'datasets' directory in the current\
    \ working directory.\n        --questions_pathname (str, optional): Path to the\
    \ questions file. If not provided, defaults defined in 'get_py2dataset_params.py'\
    \ will be used.\n        --model_config_pathname (str, optional): Path to the\
    \ model configuration file. If not provided, defaults defined in 'get_py2dataset_params.py'\
    \ will be used.\n        --use_llm (bool, optional): Use a Large Language Model\
    \ for generating JSON answers. Defaults to False.\n        --use_summary (bool,\
    \ optional): Use code summary to reduce dataset context length. Defaults to False.\n\
    \        --graph (bool, optional): Generate graphs for the code. Defaults to False.\n\
    \        --html (bool, optional): Generate HTML files from the JSON files. Defaults\
    \ to False.\n        --quiet (bool, optional): Limit logging output. If provided,\
    \ only warnings and errors will be logged. Defaults to False.\n    \"\"\"\n  \
    \  arg_string = ' '.join(sys.argv[1:])\n    start_dir = ''\n    output_dir = ''\n\
    \    questions_pathname = ''\n    model_config_pathname = ''\n    use_llm = False\n\
    \    use_summary = False\n    quiet = False\n    graph = False\n    html = False\n\
    \    if '--start_dir' in arg_string:\n        start_dir = arg_string.split('--start_dir\
    \ ')[1].split(' ')[0]\n        arg_string = arg_string.replace(f'--start_dir {start_dir}',\
    \ '')\n    if '--output_dir' in arg_string:\n        output_dir = arg_string.split('--output_dir\
    \ ')[1].split(' ')[0]\n        arg_string = arg_string.replace(f'--output_dir\
    \ {output_dir}', '')\n    if '--model_config_pathname' in arg_string:\n      \
    \  model_config_pathname = arg_string.split('--model_config_pathname ')[1].split('\
    \ ')[0]\n        arg_string = arg_string.replace(f'--model_config_pathname {model_config_pathname}',\
    \ '')\n    if '--questions_pathname' in arg_string:\n        questions_pathname\
    \ = arg_string.split('--questions_pathname ')[1].split(' ')[0]\n        arg_string\
    \ = arg_string.replace(f'--questions_pathname {questions_pathname}', '') \n  \
    \  if '--use_llm' in arg_string:\n        use_llm = True\n        arg_string =\
    \ arg_string.replace('--use_llm', '')\n    if '--use_summary' in arg_string:\n\
    \        use_summary = True\n        arg_string = arg_string.replace('--use_summary',\
    \ '')\n    if '--quiet' in arg_string:\n        quiet = True\n        arg_string\
    \ = arg_string.replace('--quiet', '')\n    if '--graph' in arg_string:\n     \
    \   graph = True\n        arg_string = arg_string.replace('--graph', '')\n   \
    \ if '--html' in arg_string:\n        html = True\n        arg_string = arg_string.replace('--html',\
    \ '')\n\n    py2dataset(start_dir, output_dir, questions_pathname, model_config_pathname,\
    \ use_llm, use_summary, graph, quiet, html)\n\nif __name__ == \"__main__\":\n\
    \    main()"
  file_ast: 'Module(body=[Expr(value=Constant(value="\nFor each Python file within
    given directory, generate, save, and return datasets\nthat include responses to
    questions about the code.\nRequirements:\n[req01] The `process_python_directories`
    function shall:\n        a. Accept parameters for the starting directory, output
    directory, questions dictionary, LLM, prompt, use of LLM, use of summary, graph
    generation, and HTML generation.\n        b. Search for all Python files within
    the given directory and its subdirectories.\n        c. Process each Python file
    using the ''get_python_file_details'' and ''get_python_datasets'' functions.\n        d.
    Write the resulting datasets to the specified output directory.\n        e. Return
    the datasets.\n[req02] The `py2dataset` function shall:\n        a. Accept parameters
    for the starting directory, output directory, questions pathname, model configuration
    pathname, use of LLM, use of summary, graph generation, quiet mode, and HTML generation.\n        b.
    Determine the appropriate parameters for the `process_python_directories` function
    based on provided or default values.\n        c. Call the `process_python_directories`
    function.\n        d. Adjust the logging level based on the quiet flag.\n        e.
    Return the datasets.\n[req03] The `main` function shall:\n        a. Accept command-line
    arguments.\n        b. Process the command-line arguments to determine the parameters
    for the `py2dataset` function.\n        c. Call the `py2dataset` function with
    the derived parameters.\n")), Import(names=[alias(name=''sys'')]), Import(names=[alias(name=''os'')]),
    Import(names=[alias(name=''logging'')]), ImportFrom(module=''pathlib'', names=[alias(name=''Path'')],
    level=0), ImportFrom(module=''typing'', names=[alias(name=''Dict''), alias(name=''List''),
    alias(name=''Union'')], level=0), ImportFrom(module=''get_python_file_details'',
    names=[alias(name=''get_python_file_details'')], level=0), ImportFrom(module=''get_python_datasets'',
    names=[alias(name=''get_python_datasets'')], level=0), ImportFrom(module=''get_py2dataset_params'',
    names=[alias(name=''get_questions''), alias(name=''get_model''), alias(name=''get_output_dir'')],
    level=0), ImportFrom(module=''save_py2dataset_output'', names=[alias(name=''read_file''),
    alias(name=''write_file''), alias(name=''combine_json_files''), alias(name=''create_code_graph'')],
    level=0), FunctionDef(name=''process_python_directories'', args=arguments(posonlyargs=[],
    args=[arg(arg=''start_dir'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''output_dir'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''questions'', annotation=Name(id=''Dict'',
    ctx=Load())), arg(arg=''llm''), arg(arg=''prompt''), arg(arg=''use_llm'', annotation=Name(id=''bool'',
    ctx=Load())), arg(arg=''use_summary'', annotation=Name(id=''bool'', ctx=Load())),
    arg(arg=''graph'', annotation=Name(id=''bool'', ctx=Load())), arg(arg=''html'',
    annotation=Name(id=''bool'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value=''\n    Processes all Python files in the provided
    directory and subdirectories.\n    Args:\n        start_dir (str): Starting directory
    to search for Python files.\n        output_dir (str): Directory to write the
    output files.\n        questions (Dict): Questions dictionary to answer about
    each Python file.\n        llm: Large Language Model to use for generating answers.\n        prompt
    (str): Prompt to provide to the language model.\n        use_llm (bool): If True,
    use the LLM model to generate answers for JSON.\n        use_summary (bool): Use
    the code summary to reduce dataset context length.\n        graph (bool): Generate
    graphs for the code.\n        html (bool): Generate HTML files from the JSON files.\n    Returns:\n        Dict[str,
    List[Dict]]: Datasets dictionary.\n    '')), Assign(targets=[Name(id=''python_files'',
    ctx=Store())], value=ListComp(elt=Name(id=''p'', ctx=Load()), generators=[comprehension(target=Name(id=''p'',
    ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load()),
    args=[Name(id=''start_dir'', ctx=Load())], keywords=[]), attr=''rglob'', ctx=Load()),
    args=[Constant(value=''[!_]*.py'')], keywords=[]), ifs=[Call(func=Attribute(value=Name(id=''p'',
    ctx=Load()), attr=''is_file'', ctx=Load()), args=[], keywords=[])], is_async=0)])),
    For(target=Name(id=''file_path'', ctx=Store()), iter=Name(id=''python_files'',
    ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Processing:
    ''), FormattedValue(value=Name(id=''file_path'', ctx=Load()), conversion=-1)])],
    keywords=[])), Assign(targets=[Name(id=''relative_path'', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id=''Path'',
    ctx=Load()), args=[Name(id=''file_path'', ctx=Load())], keywords=[]), attr=''relative_to'',
    ctx=Load()), args=[Name(id=''start_dir'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''base_name'',
    ctx=Store())], value=Call(func=Attribute(value=Constant(value=''.''), attr=''join'',
    ctx=Load()), args=[GeneratorExp(elt=Name(id=''part'', ctx=Load()), generators=[comprehension(target=Name(id=''part'',
    ctx=Store()), iter=Attribute(value=Name(id=''relative_path'', ctx=Load()), attr=''parts'',
    ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id=''file_details'',
    ctx=Store())], value=Call(func=Name(id=''get_python_file_details'', ctx=Load()),
    args=[Name(id=''file_path'', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(),
    values=[Compare(left=Name(id=''file_details'', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]),
    Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''file_details'',
    ctx=Load()), Name(id=''tuple'', ctx=Load())], keywords=[])]), body=[Continue()],
    orelse=[]), Assign(targets=[Tuple(elts=[Name(id=''qa_list'', ctx=Store()), Name(id=''instruct_list'',
    ctx=Store())], ctx=Store())], value=Call(func=Name(id=''get_python_datasets'',
    ctx=Load()), args=[Name(id=''file_path'', ctx=Load()), Name(id=''file_details'',
    ctx=Load()), Name(id=''base_name'', ctx=Load()), Name(id=''questions'', ctx=Load()),
    Name(id=''llm'', ctx=Load()), Name(id=''prompt'', ctx=Load()), Name(id=''use_llm'',
    ctx=Load()), Name(id=''use_summary'', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(),
    operand=Name(id=''qa_list'', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id=''output_subdir'',
    ctx=Store())], value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[]), op=Div(), right=Subscript(value=Attribute(value=Name(id=''relative_path'',
    ctx=Load()), attr=''parts'', ctx=Load()), slice=Constant(value=0), ctx=Load()))),
    Expr(value=Call(func=Attribute(value=Name(id=''output_subdir'', ctx=Load()), attr=''mkdir'',
    ctx=Load()), args=[], keywords=[keyword(arg=''parents'', value=Constant(value=True)),
    keyword(arg=''exist_ok'', value=Constant(value=True))])), Assign(targets=[Name(id=''file_names'',
    ctx=Store())], value=List(elts=[JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.qa.json'')]), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.instruct.json'')]), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.details.yaml'')])], ctx=Load())),
    Assign(targets=[Name(id=''contents'', ctx=Store())], value=List(elts=[Name(id=''qa_list'',
    ctx=Load()), Name(id=''instruct_list'', ctx=Load()), Name(id=''file_details'',
    ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id=''file_name'', ctx=Store()),
    Name(id=''content'', ctx=Store())], ctx=Store()), iter=Call(func=Name(id=''zip'',
    ctx=Load()), args=[Name(id=''file_names'', ctx=Load()), Name(id=''contents'',
    ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id=''write_file'',
    ctx=Load()), args=[Name(id=''content'', ctx=Load()), BinOp(left=Name(id=''output_subdir'',
    ctx=Load()), op=Div(), right=Name(id=''file_name'', ctx=Load()))], keywords=[]))],
    orelse=[]), If(test=Name(id=''graph'', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Name(id=''create_code_graph'',
    ctx=Load()), args=[Name(id=''file_details'', ctx=Load()), Name(id=''base_name'',
    ctx=Load()), Name(id=''output_subdir'', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Error
    creating graph for ''), FormattedValue(value=Name(id=''file_path'', ctx=Load()),
    conversion=-1)])], keywords=[])), Continue()])], orelse=[], finalbody=[])], orelse=[])],
    orelse=[]), Assign(targets=[Name(id=''datasets'', ctx=Store())], value=Call(func=Name(id=''combine_json_files'',
    ctx=Load()), args=[Name(id=''output_dir'', ctx=Load()), Name(id=''html'', ctx=Load())],
    keywords=[])), Return(value=Name(id=''datasets'', ctx=Load()))], decorator_list=[],
    returns=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''Dict'',
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name=''py2dataset'',
    args=arguments(posonlyargs=[], args=[arg(arg=''start_dir'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''output_dir'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''questions_pathname'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''model_config_pathname'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''use_llm'', annotation=Name(id=''bool'',
    ctx=Load())), arg(arg=''use_summary'', annotation=Name(id=''bool'', ctx=Load())),
    arg(arg=''graph'', annotation=Name(id=''bool'', ctx=Load())), arg(arg=''quiet'',
    annotation=Name(id=''bool'', ctx=Load())), arg(arg=''html'', annotation=Name(id=''bool'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''''),
    Constant(value=''''), Constant(value=''''), Constant(value=''''), Constant(value=False),
    Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False)]),
    body=[Expr(value=Constant(value=''\n    Process Python files to generate question-answer
    pairs and instructions.\n    Args:\n        start_dir (str, optional): Starting
    directory to search for Python files. Defaults to current working directory.\n        output_dir
    (str, optional): Directory to write the output files.\n        questions_pathname
    (str, optional): Path to the questions file.\n        model_config_pathname (str,
    optional): Path to the model configuration file.\n        use_llm (bool, optional):
    If True, use a Large Language Model for generating JSON answers. Defaults to False.\n        use_summary
    (bool, optional): Use code summary to reduce dataset context length. Defaults
    to False.\n        graph (bool, optional): Generate graphs for the code. Defaults
    to False.\n        quiet (bool, optional): Limit logging output. Defaults to False.\n        html
    (bool, optional): Generate HTML files from the JSON files. Defaults to False.\n    Returns:\n        Dict[str,
    List[Dict]]: Datasets dictionary.\n    '')), If(test=Name(id=''quiet'', ctx=Load()),
    body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[], keywords=[]), attr=''setLevel'',
    ctx=Load()), args=[Attribute(value=Name(id=''logging'', ctx=Load()), attr=''WARNING'',
    ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[], keywords=[]), attr=''setLevel'',
    ctx=Load()), args=[Attribute(value=Name(id=''logging'', ctx=Load()), attr=''INFO'',
    ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id=''sys'',
    ctx=Load()), attr=''setrecursionlimit'', ctx=Load()), args=[Constant(value=3000)],
    keywords=[])), If(test=Compare(left=Name(id=''start_dir'', ctx=Load()), ops=[Eq()],
    comparators=[Constant(value='''')]), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[Constant(value=''No valid start
    path provided. Using current working directory.'')], keywords=[])), Assign(targets=[Name(id=''start_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''os'', ctx=Load()), attr=''getcwd'',
    ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id=''start_dir'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''os'',
    ctx=Load()), attr=''path'', ctx=Load()), attr=''abspath'', ctx=Load()), args=[Name(id=''start_dir'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''output_dir'', ctx=Store())],
    value=Call(func=Name(id=''get_output_dir'', ctx=Load()), args=[Name(id=''output_dir'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''questions'', ctx=Store())],
    value=Call(func=Name(id=''get_questions'', ctx=Load()), args=[Name(id=''questions_pathname'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''llm'', ctx=Store())], value=Constant(value=None)),
    Assign(targets=[Name(id=''model_config'', ctx=Store())], value=Constant(value=None)),
    Assign(targets=[Name(id=''prompt'', ctx=Store())], value=Constant(value='''')),
    If(test=Name(id=''use_llm'', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id=''llm'',
    ctx=Store()), Name(id=''prompt'', ctx=Store())], ctx=Store())], value=Call(func=Name(id=''get_model'',
    ctx=Load()), args=[Name(id=''model_config_pathname'', ctx=Load())], keywords=[]))],
    orelse=[]), Assign(targets=[Name(id=''datasets'', ctx=Store())], value=Call(func=Name(id=''process_python_directories'',
    ctx=Load()), args=[Name(id=''start_dir'', ctx=Load()), Name(id=''output_dir'',
    ctx=Load()), Name(id=''questions'', ctx=Load()), Name(id=''llm'', ctx=Load()),
    Name(id=''prompt'', ctx=Load()), Name(id=''use_llm'', ctx=Load()), Name(id=''use_summary'',
    ctx=Load()), Name(id=''graph'', ctx=Load()), Name(id=''html'', ctx=Load())], keywords=[])),
    Return(value=Name(id=''datasets'', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())),
    FunctionDef(name=''main'', args=arguments(posonlyargs=[], args=[], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Command-line
    entry point for processing Python files and generating datasets.\n    Args:\n        --start_dir
    (str, optional): Starting directory to search for Python files. Defaults to the
    current working directory.\n        --output_dir (str, optional): Directory to
    write the output files. Defaults to the ''datasets'' directory in the current
    working directory.\n        --questions_pathname (str, optional): Path to the
    questions file. If not provided, defaults defined in ''get_py2dataset_params.py''
    will be used.\n        --model_config_pathname (str, optional): Path to the model
    configuration file. If not provided, defaults defined in ''get_py2dataset_params.py''
    will be used.\n        --use_llm (bool, optional): Use a Large Language Model
    for generating JSON answers. Defaults to False.\n        --use_summary (bool,
    optional): Use code summary to reduce dataset context length. Defaults to False.\n        --graph
    (bool, optional): Generate graphs for the code. Defaults to False.\n        --html
    (bool, optional): Generate HTML files from the JSON files. Defaults to False.\n        --quiet
    (bool, optional): Limit logging output. If provided, only warnings and errors
    will be logged. Defaults to False.\n    ")), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Constant(value='' ''), attr=''join'',
    ctx=Load()), args=[Subscript(value=Attribute(value=Name(id=''sys'', ctx=Load()),
    attr=''argv'', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())],
    keywords=[])), Assign(targets=[Name(id=''start_dir'', ctx=Store())], value=Constant(value='''')),
    Assign(targets=[Name(id=''output_dir'', ctx=Store())], value=Constant(value='''')),
    Assign(targets=[Name(id=''questions_pathname'', ctx=Store())], value=Constant(value='''')),
    Assign(targets=[Name(id=''model_config_pathname'', ctx=Store())], value=Constant(value='''')),
    Assign(targets=[Name(id=''use_llm'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''use_summary'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''quiet'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''graph'', ctx=Store())], value=Constant(value=False)),
    Assign(targets=[Name(id=''html'', ctx=Store())], value=Constant(value=False)),
    If(test=Compare(left=Constant(value=''--start_dir''), ops=[In()], comparators=[Name(id=''arg_string'',
    ctx=Load())]), body=[Assign(targets=[Name(id=''start_dir'', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--start_dir '')],
    keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--start_dir
    ''), FormattedValue(value=Name(id=''start_dir'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--output_dir''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''output_dir'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--output_dir
    '')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--output_dir
    ''), FormattedValue(value=Name(id=''output_dir'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--model_config_pathname''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''model_config_pathname'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--model_config_pathname
    '')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--model_config_pathname
    ''), FormattedValue(value=Name(id=''model_config_pathname'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--questions_pathname''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''questions_pathname'',
    ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''--questions_pathname
    '')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr=''split'', ctx=Load()),
    args=[Constant(value='' '')], keywords=[]), slice=Constant(value=0), ctx=Load())),
    Assign(targets=[Name(id=''arg_string'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''--questions_pathname
    ''), FormattedValue(value=Name(id=''questions_pathname'', ctx=Load()), conversion=-1)]),
    Constant(value='''')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--use_llm''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''use_llm'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--use_llm''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--use_summary''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''use_summary'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--use_summary''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--quiet''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''quiet'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--quiet''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--graph''),
    ops=[In()], comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''graph'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--graph''), Constant(value='''')],
    keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=''--html''), ops=[In()],
    comparators=[Name(id=''arg_string'', ctx=Load())]), body=[Assign(targets=[Name(id=''html'',
    ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id=''arg_string'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load()),
    attr=''replace'', ctx=Load()), args=[Constant(value=''--html''), Constant(value='''')],
    keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id=''py2dataset'', ctx=Load()),
    args=[Name(id=''start_dir'', ctx=Load()), Name(id=''output_dir'', ctx=Load()),
    Name(id=''questions_pathname'', ctx=Load()), Name(id=''model_config_pathname'',
    ctx=Load()), Name(id=''use_llm'', ctx=Load()), Name(id=''use_summary'', ctx=Load()),
    Name(id=''graph'', ctx=Load()), Name(id=''quiet'', ctx=Load()), Name(id=''html'',
    ctx=Load())], keywords=[]))], decorator_list=[]), If(test=Compare(left=Name(id=''__name__'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''__main__'')]), body=[Expr(value=Call(func=Name(id=''main'',
    ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])'
  file_dependencies:
  - logging
  - sys
  - os
  - get_python_file_details
  - typing
  - save_py2dataset_output
  - get_py2dataset_params
  - get_python_datasets
  - pathlib
  file_functions:
  - process_python_directories
  - py2dataset
  - main
  file_classes: []
  file_control_flow: module -> def process_python_directories -> for -> if -> if ->
    for -> if -> try -> except -> def py2dataset -> if -> if -> if -> def main ->
    if -> if -> if -> if -> if -> if -> if -> if -> if -> if
  file_summary: '{dependencies: [logging, sys, os, get_python_file_details, typing,
    save_py2dataset_output, get_py2dataset_params, get_python_datasets, pathlib],
    function_defs: [{process_python_directories: {inputs: [start_dir, output_dir,
    questions, llm, prompt, use_llm, use_summary, graph, html], calls: [Path, logging.info,
    isinstance, Path(start_dir).rglob, output_subdir.mkdir, ''.''.join, write_file,
    combine_json_files, Path(file_path).relative_to, zip, create_code_graph, get_python_file_details,
    get_python_datasets, p.is_file], returns: [datasets]}}, {py2dataset: {inputs:
    [start_dir, output_dir, questions_pathname, model_config_pathname, use_llm, use_summary,
    graph, quiet, html], calls: [logging.info, get_questions, get_model, logging.getLogger,
    os.getcwd, sys.setrecursionlimit, process_python_directories, get_output_dir,
    os.path.abspath, logging.getLogger().setLevel], returns: [datasets]}}, {main:
    {inputs: [], calls: ['' ''.join, arg_string.replace, arg_string.split(''--start_dir
    '')[1].split, arg_string.split(''--model_config_pathname '')[1].split, py2dataset,
    arg_string.split(''--output_dir '')[1].split, arg_string.split, arg_string.split(''--questions_pathname
    '')[1].split], returns: []}}], class_defs: []}'
  internal_code_graph:
    nodes:
    - process_python_directories
    - py2dataset
    - main
    edges:
    - source: py2dataset
      target: process_python_directories
      target_inputs:
      - start_dir
      - output_dir
      - questions
      - llm
      - prompt
      - use_llm
      - use_summary
      - graph
      - html
      target_returns:
      - datasets
    - source: main
      target: py2dataset
      target_inputs:
      - start_dir
      - output_dir
      - questions_pathname
      - model_config_pathname
      - use_llm
      - use_summary
      - graph
      - quiet
      - html
      target_returns:
      - datasets
  entire_code_graph:
    nodes:
    - process_python_directories
    - py2dataset
    - main
    - Path
    - logging.info
    - isinstance
    - Path(start_dir).rglob
    - output_subdir.mkdir
    - '''.''.join'
    - write_file
    - combine_json_files
    - Path(file_path).relative_to
    - zip
    - create_code_graph
    - get_python_file_details
    - get_python_datasets
    - p.is_file
    - get_questions
    - get_model
    - logging.getLogger
    - os.getcwd
    - sys.setrecursionlimit
    - get_output_dir
    - os.path.abspath
    - logging.getLogger().setLevel
    - ''' ''.join'
    - arg_string.replace
    - arg_string.split('--start_dir ')[1].split
    - arg_string.split('--model_config_pathname ')[1].split
    - arg_string.split('--output_dir ')[1].split
    - arg_string.split
    - arg_string.split('--questions_pathname ')[1].split
    edges:
    - source: process_python_directories
      target: Path
    - source: process_python_directories
      target: logging.info
    - source: process_python_directories
      target: isinstance
    - source: process_python_directories
      target: Path(start_dir).rglob
    - source: process_python_directories
      target: output_subdir.mkdir
    - source: process_python_directories
      target: '''.''.join'
    - source: process_python_directories
      target: write_file
    - source: process_python_directories
      target: combine_json_files
    - source: process_python_directories
      target: Path(file_path).relative_to
    - source: process_python_directories
      target: zip
    - source: process_python_directories
      target: create_code_graph
    - source: process_python_directories
      target: get_python_file_details
    - source: process_python_directories
      target: get_python_datasets
    - source: process_python_directories
      target: p.is_file
    - source: py2dataset
      target: logging.info
    - source: py2dataset
      target: get_questions
    - source: py2dataset
      target: get_model
    - source: py2dataset
      target: logging.getLogger
    - source: py2dataset
      target: os.getcwd
    - source: py2dataset
      target: sys.setrecursionlimit
    - source: py2dataset
      target: process_python_directories
      target_inputs:
      - start_dir
      - output_dir
      - questions
      - llm
      - prompt
      - use_llm
      - use_summary
      - graph
      - html
      target_returns:
      - datasets
    - source: py2dataset
      target: get_output_dir
    - source: py2dataset
      target: os.path.abspath
    - source: py2dataset
      target: logging.getLogger().setLevel
    - source: main
      target: ''' ''.join'
    - source: main
      target: arg_string.replace
    - source: main
      target: arg_string.split('--start_dir ')[1].split
    - source: main
      target: arg_string.split('--model_config_pathname ')[1].split
    - source: main
      target: py2dataset
      target_inputs:
      - start_dir
      - output_dir
      - questions_pathname
      - model_config_pathname
      - use_llm
      - use_summary
      - graph
      - quiet
      - html
      target_returns:
      - datasets
    - source: main
      target: arg_string.split('--output_dir ')[1].split
    - source: main
      target: arg_string.split
    - source: main
      target: arg_string.split('--questions_pathname ')[1].split
functions:
  process_python_directories:
    function_name: process_python_directories
    function_code: "def process_python_directories(start_dir: str, output_dir: str,\
      \ questions: Dict, llm, prompt, use_llm: bool, use_summary: bool, graph: bool,\
      \ html: bool) -> Dict[str, List[Dict]]:\n    \"\"\"\n    Processes all Python\
      \ files in the provided directory and subdirectories.\n    Args:\n        start_dir\
      \ (str): Starting directory to search for Python files.\n        output_dir\
      \ (str): Directory to write the output files.\n        questions (Dict): Questions\
      \ dictionary to answer about each Python file.\n        llm: Large Language\
      \ Model to use for generating answers.\n        prompt (str): Prompt to provide\
      \ to the language model.\n        use_llm (bool): If True, use the LLM model\
      \ to generate answers for JSON.\n        use_summary (bool): Use the code summary\
      \ to reduce dataset context length.\n        graph (bool): Generate graphs for\
      \ the code.\n        html (bool): Generate HTML files from the JSON files.\n\
      \    Returns:\n        Dict[str, List[Dict]]: Datasets dictionary.\n    \"\"\
      \"\n    python_files = [p for p in Path(start_dir).rglob('[!_]*.py') if p.is_file()]\n\
      \    for file_path in python_files:\n        logging.info(f'Processing: {file_path}')\n\
      \        relative_path = Path(file_path).relative_to(start_dir)\n        base_name\
      \ = '.'.join((part for part in relative_path.parts))\n        file_details =\
      \ get_python_file_details(file_path)\n        if file_details is None or isinstance(file_details,\
      \ tuple):\n            continue\n        qa_list, instruct_list = get_python_datasets(file_path,\
      \ file_details, base_name, questions, llm, prompt, use_llm, use_summary)\n \
      \       if not qa_list:\n            continue\n        output_subdir = Path(output_dir)\
      \ / relative_path.parts[0]\n        output_subdir.mkdir(parents=True, exist_ok=True)\n\
      \        file_names = [f'{base_name}.qa.json', f'{base_name}.instruct.json',\
      \ f'{base_name}.details.yaml']\n        contents = [qa_list, instruct_list,\
      \ file_details]\n        for file_name, content in zip(file_names, contents):\n\
      \            write_file(content, output_subdir / file_name)\n        if graph:\n\
      \            try:\n                create_code_graph(file_details, base_name,\
      \ output_subdir)\n            except:\n                logging.info(f'Error\
      \ creating graph for {file_path}')\n                continue\n    datasets =\
      \ combine_json_files(output_dir, html)\n    return datasets"
    function_ast: 'FunctionDef(name=''process_python_directories'', args=arguments(posonlyargs=[],
      args=[arg(arg=''start_dir'', annotation=Name(id=''str'', ctx=Load(), lineno=32,
      col_offset=42, end_lineno=32, end_col_offset=45), lineno=32, col_offset=31,
      end_lineno=32, end_col_offset=45), arg(arg=''output_dir'', annotation=Name(id=''str'',
      ctx=Load(), lineno=32, col_offset=59, end_lineno=32, end_col_offset=62), lineno=32,
      col_offset=47, end_lineno=32, end_col_offset=62), arg(arg=''questions'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=32, col_offset=75, end_lineno=32, end_col_offset=79), lineno=32,
      col_offset=64, end_lineno=32, end_col_offset=79), arg(arg=''llm'', lineno=32,
      col_offset=81, end_lineno=32, end_col_offset=84), arg(arg=''prompt'', lineno=32,
      col_offset=86, end_lineno=32, end_col_offset=92), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=32, col_offset=103, end_lineno=32, end_col_offset=107), lineno=32,
      col_offset=94, end_lineno=32, end_col_offset=107), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=32, col_offset=122, end_lineno=32,
      end_col_offset=126), lineno=32, col_offset=109, end_lineno=32, end_col_offset=126),
      arg(arg=''graph'', annotation=Name(id=''bool'', ctx=Load(), lineno=32, col_offset=135,
      end_lineno=32, end_col_offset=139), lineno=32, col_offset=128, end_lineno=32,
      end_col_offset=139), arg(arg=''html'', annotation=Name(id=''bool'', ctx=Load(),
      lineno=32, col_offset=147, end_lineno=32, end_col_offset=151), lineno=32, col_offset=141,
      end_lineno=32, end_col_offset=151)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Processes all Python files in the provided
      directory and subdirectories.\n    Args:\n        start_dir (str): Starting
      directory to search for Python files.\n        output_dir (str): Directory to
      write the output files.\n        questions (Dict): Questions dictionary to answer
      about each Python file.\n        llm: Large Language Model to use for generating
      answers.\n        prompt (str): Prompt to provide to the language model.\n        use_llm
      (bool): If True, use the LLM model to generate answers for JSON.\n        use_summary
      (bool): Use the code summary to reduce dataset context length.\n        graph
      (bool): Generate graphs for the code.\n        html (bool): Generate HTML files
      from the JSON files.\n    Returns:\n        Dict[str, List[Dict]]: Datasets
      dictionary.\n    '', lineno=33, col_offset=4, end_lineno=47, end_col_offset=7),
      lineno=33, col_offset=4, end_lineno=47, end_col_offset=7), Assign(targets=[Name(id=''python_files'',
      ctx=Store(), lineno=48, col_offset=4, end_lineno=48, end_col_offset=16)], value=ListComp(elt=Name(id=''p'',
      ctx=Load(), lineno=48, col_offset=20, end_lineno=48, end_col_offset=21), generators=[comprehension(target=Name(id=''p'',
      ctx=Store(), lineno=48, col_offset=26, end_lineno=48, end_col_offset=27), iter=Call(func=Attribute(value=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=48, col_offset=31, end_lineno=48, end_col_offset=35), args=[Name(id=''start_dir'',
      ctx=Load(), lineno=48, col_offset=36, end_lineno=48, end_col_offset=45)], keywords=[],
      lineno=48, col_offset=31, end_lineno=48, end_col_offset=46), attr=''rglob'',
      ctx=Load(), lineno=48, col_offset=31, end_lineno=48, end_col_offset=52), args=[Constant(value=''[!_]*.py'',
      lineno=48, col_offset=53, end_lineno=48, end_col_offset=63)], keywords=[], lineno=48,
      col_offset=31, end_lineno=48, end_col_offset=64), ifs=[Call(func=Attribute(value=Name(id=''p'',
      ctx=Load(), lineno=48, col_offset=68, end_lineno=48, end_col_offset=69), attr=''is_file'',
      ctx=Load(), lineno=48, col_offset=68, end_lineno=48, end_col_offset=77), args=[],
      keywords=[], lineno=48, col_offset=68, end_lineno=48, end_col_offset=79)], is_async=0)],
      lineno=48, col_offset=19, end_lineno=48, end_col_offset=80), lineno=48, col_offset=4,
      end_lineno=48, end_col_offset=80), For(target=Name(id=''file_path'', ctx=Store(),
      lineno=50, col_offset=8, end_lineno=50, end_col_offset=17), iter=Name(id=''python_files'',
      ctx=Load(), lineno=50, col_offset=21, end_lineno=50, end_col_offset=33), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=51, col_offset=8, end_lineno=51, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=51, col_offset=8, end_lineno=51, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Processing:
      '', lineno=51, col_offset=21, end_lineno=51, end_col_offset=47), FormattedValue(value=Name(id=''file_path'',
      ctx=Load(), lineno=51, col_offset=36, end_lineno=51, end_col_offset=45), conversion=-1,
      lineno=51, col_offset=21, end_lineno=51, end_col_offset=47)], lineno=51, col_offset=21,
      end_lineno=51, end_col_offset=47)], keywords=[], lineno=51, col_offset=8, end_lineno=51,
      end_col_offset=48), lineno=51, col_offset=8, end_lineno=51, end_col_offset=48),
      Assign(targets=[Name(id=''relative_path'', ctx=Store(), lineno=52, col_offset=8,
      end_lineno=52, end_col_offset=21)], value=Call(func=Attribute(value=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=52, col_offset=24, end_lineno=52, end_col_offset=28), args=[Name(id=''file_path'',
      ctx=Load(), lineno=52, col_offset=29, end_lineno=52, end_col_offset=38)], keywords=[],
      lineno=52, col_offset=24, end_lineno=52, end_col_offset=39), attr=''relative_to'',
      ctx=Load(), lineno=52, col_offset=24, end_lineno=52, end_col_offset=51), args=[Name(id=''start_dir'',
      ctx=Load(), lineno=52, col_offset=52, end_lineno=52, end_col_offset=61)], keywords=[],
      lineno=52, col_offset=24, end_lineno=52, end_col_offset=62), lineno=52, col_offset=8,
      end_lineno=52, end_col_offset=62), Assign(targets=[Name(id=''base_name'', ctx=Store(),
      lineno=53, col_offset=8, end_lineno=53, end_col_offset=17)], value=Call(func=Attribute(value=Constant(value=''.'',
      lineno=53, col_offset=20, end_lineno=53, end_col_offset=23), attr=''join'',
      ctx=Load(), lineno=53, col_offset=20, end_lineno=53, end_col_offset=28), args=[GeneratorExp(elt=Name(id=''part'',
      ctx=Load(), lineno=53, col_offset=29, end_lineno=53, end_col_offset=33), generators=[comprehension(target=Name(id=''part'',
      ctx=Store(), lineno=53, col_offset=38, end_lineno=53, end_col_offset=42), iter=Attribute(value=Name(id=''relative_path'',
      ctx=Load(), lineno=53, col_offset=46, end_lineno=53, end_col_offset=59), attr=''parts'',
      ctx=Load(), lineno=53, col_offset=46, end_lineno=53, end_col_offset=65), ifs=[],
      is_async=0)], lineno=53, col_offset=28, end_lineno=53, end_col_offset=66)],
      keywords=[], lineno=53, col_offset=20, end_lineno=53, end_col_offset=66), lineno=53,
      col_offset=8, end_lineno=53, end_col_offset=66), Assign(targets=[Name(id=''file_details'',
      ctx=Store(), lineno=56, col_offset=8, end_lineno=56, end_col_offset=20)], value=Call(func=Name(id=''get_python_file_details'',
      ctx=Load(), lineno=56, col_offset=23, end_lineno=56, end_col_offset=46), args=[Name(id=''file_path'',
      ctx=Load(), lineno=56, col_offset=47, end_lineno=56, end_col_offset=56)], keywords=[],
      lineno=56, col_offset=23, end_lineno=56, end_col_offset=57), lineno=56, col_offset=8,
      end_lineno=56, end_col_offset=57), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id=''file_details'',
      ctx=Load(), lineno=57, col_offset=11, end_lineno=57, end_col_offset=23), ops=[Is()],
      comparators=[Constant(value=None, lineno=57, col_offset=27, end_lineno=57, end_col_offset=31)],
      lineno=57, col_offset=11, end_lineno=57, end_col_offset=31), Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=57, col_offset=35, end_lineno=57, end_col_offset=45), args=[Name(id=''file_details'',
      ctx=Load(), lineno=57, col_offset=46, end_lineno=57, end_col_offset=58), Name(id=''tuple'',
      ctx=Load(), lineno=57, col_offset=60, end_lineno=57, end_col_offset=65)], keywords=[],
      lineno=57, col_offset=35, end_lineno=57, end_col_offset=66)], lineno=57, col_offset=11,
      end_lineno=57, end_col_offset=66), body=[Continue(lineno=58, col_offset=12,
      end_lineno=58, end_col_offset=20)], orelse=[], lineno=57, col_offset=8, end_lineno=58,
      end_col_offset=20), Assign(targets=[Tuple(elts=[Name(id=''qa_list'', ctx=Store(),
      lineno=61, col_offset=8, end_lineno=61, end_col_offset=15), Name(id=''instruct_list'',
      ctx=Store(), lineno=61, col_offset=17, end_lineno=61, end_col_offset=30)], ctx=Store(),
      lineno=61, col_offset=8, end_lineno=61, end_col_offset=30)], value=Call(func=Name(id=''get_python_datasets'',
      ctx=Load(), lineno=61, col_offset=33, end_lineno=61, end_col_offset=52), args=[Name(id=''file_path'',
      ctx=Load(), lineno=61, col_offset=53, end_lineno=61, end_col_offset=62), Name(id=''file_details'',
      ctx=Load(), lineno=61, col_offset=64, end_lineno=61, end_col_offset=76), Name(id=''base_name'',
      ctx=Load(), lineno=61, col_offset=78, end_lineno=61, end_col_offset=87), Name(id=''questions'',
      ctx=Load(), lineno=61, col_offset=89, end_lineno=61, end_col_offset=98), Name(id=''llm'',
      ctx=Load(), lineno=61, col_offset=100, end_lineno=61, end_col_offset=103), Name(id=''prompt'',
      ctx=Load(), lineno=61, col_offset=105, end_lineno=61, end_col_offset=111), Name(id=''use_llm'',
      ctx=Load(), lineno=61, col_offset=113, end_lineno=61, end_col_offset=120), Name(id=''use_summary'',
      ctx=Load(), lineno=61, col_offset=122, end_lineno=61, end_col_offset=133)],
      keywords=[], lineno=61, col_offset=33, end_lineno=61, end_col_offset=134), lineno=61,
      col_offset=8, end_lineno=61, end_col_offset=134), If(test=UnaryOp(op=Not(),
      operand=Name(id=''qa_list'', ctx=Load(), lineno=62, col_offset=15, end_lineno=62,
      end_col_offset=22), lineno=62, col_offset=11, end_lineno=62, end_col_offset=22),
      body=[Continue(lineno=63, col_offset=12, end_lineno=63, end_col_offset=20)],
      orelse=[], lineno=62, col_offset=8, end_lineno=63, end_col_offset=20), Assign(targets=[Name(id=''output_subdir'',
      ctx=Store(), lineno=65, col_offset=8, end_lineno=65, end_col_offset=21)], value=BinOp(left=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=65, col_offset=24, end_lineno=65, end_col_offset=28), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=65, col_offset=29, end_lineno=65, end_col_offset=39)], keywords=[],
      lineno=65, col_offset=24, end_lineno=65, end_col_offset=40), op=Div(), right=Subscript(value=Attribute(value=Name(id=''relative_path'',
      ctx=Load(), lineno=65, col_offset=43, end_lineno=65, end_col_offset=56), attr=''parts'',
      ctx=Load(), lineno=65, col_offset=43, end_lineno=65, end_col_offset=62), slice=Constant(value=0,
      lineno=65, col_offset=63, end_lineno=65, end_col_offset=64), ctx=Load(), lineno=65,
      col_offset=43, end_lineno=65, end_col_offset=65), lineno=65, col_offset=24,
      end_lineno=65, end_col_offset=65), lineno=65, col_offset=8, end_lineno=65, end_col_offset=65),
      Expr(value=Call(func=Attribute(value=Name(id=''output_subdir'', ctx=Load(),
      lineno=66, col_offset=8, end_lineno=66, end_col_offset=21), attr=''mkdir'',
      ctx=Load(), lineno=66, col_offset=8, end_lineno=66, end_col_offset=27), args=[],
      keywords=[keyword(arg=''parents'', value=Constant(value=True, lineno=66, col_offset=36,
      end_lineno=66, end_col_offset=40), lineno=66, col_offset=28, end_lineno=66,
      end_col_offset=40), keyword(arg=''exist_ok'', value=Constant(value=True, lineno=66,
      col_offset=51, end_lineno=66, end_col_offset=55), lineno=66, col_offset=42,
      end_lineno=66, end_col_offset=55)], lineno=66, col_offset=8, end_lineno=66,
      end_col_offset=56), lineno=66, col_offset=8, end_lineno=66, end_col_offset=56),
      Assign(targets=[Name(id=''file_names'', ctx=Store(), lineno=69, col_offset=8,
      end_lineno=69, end_col_offset=18)], value=List(elts=[JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=69, col_offset=25, end_lineno=69, end_col_offset=34), conversion=-1,
      lineno=69, col_offset=22, end_lineno=69, end_col_offset=44), Constant(value=''.qa.json'',
      lineno=69, col_offset=22, end_lineno=69, end_col_offset=44)], lineno=69, col_offset=22,
      end_lineno=69, end_col_offset=44), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=69, col_offset=49, end_lineno=69, end_col_offset=58), conversion=-1,
      lineno=69, col_offset=46, end_lineno=69, end_col_offset=74), Constant(value=''.instruct.json'',
      lineno=69, col_offset=46, end_lineno=69, end_col_offset=74)], lineno=69, col_offset=46,
      end_lineno=69, end_col_offset=74), JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=69, col_offset=79, end_lineno=69, end_col_offset=88), conversion=-1,
      lineno=69, col_offset=76, end_lineno=69, end_col_offset=103), Constant(value=''.details.yaml'',
      lineno=69, col_offset=76, end_lineno=69, end_col_offset=103)], lineno=69, col_offset=76,
      end_lineno=69, end_col_offset=103)], ctx=Load(), lineno=69, col_offset=21, end_lineno=69,
      end_col_offset=104), lineno=69, col_offset=8, end_lineno=69, end_col_offset=104),
      Assign(targets=[Name(id=''contents'', ctx=Store(), lineno=70, col_offset=8,
      end_lineno=70, end_col_offset=16)], value=List(elts=[Name(id=''qa_list'', ctx=Load(),
      lineno=70, col_offset=20, end_lineno=70, end_col_offset=27), Name(id=''instruct_list'',
      ctx=Load(), lineno=70, col_offset=29, end_lineno=70, end_col_offset=42), Name(id=''file_details'',
      ctx=Load(), lineno=70, col_offset=44, end_lineno=70, end_col_offset=56)], ctx=Load(),
      lineno=70, col_offset=19, end_lineno=70, end_col_offset=57), lineno=70, col_offset=8,
      end_lineno=70, end_col_offset=57), For(target=Tuple(elts=[Name(id=''file_name'',
      ctx=Store(), lineno=71, col_offset=12, end_lineno=71, end_col_offset=21), Name(id=''content'',
      ctx=Store(), lineno=71, col_offset=23, end_lineno=71, end_col_offset=30)], ctx=Store(),
      lineno=71, col_offset=12, end_lineno=71, end_col_offset=30), iter=Call(func=Name(id=''zip'',
      ctx=Load(), lineno=71, col_offset=34, end_lineno=71, end_col_offset=37), args=[Name(id=''file_names'',
      ctx=Load(), lineno=71, col_offset=38, end_lineno=71, end_col_offset=48), Name(id=''contents'',
      ctx=Load(), lineno=71, col_offset=50, end_lineno=71, end_col_offset=58)], keywords=[],
      lineno=71, col_offset=34, end_lineno=71, end_col_offset=59), body=[Expr(value=Call(func=Name(id=''write_file'',
      ctx=Load(), lineno=72, col_offset=12, end_lineno=72, end_col_offset=22), args=[Name(id=''content'',
      ctx=Load(), lineno=72, col_offset=23, end_lineno=72, end_col_offset=30), BinOp(left=Name(id=''output_subdir'',
      ctx=Load(), lineno=72, col_offset=32, end_lineno=72, end_col_offset=45), op=Div(),
      right=Name(id=''file_name'', ctx=Load(), lineno=72, col_offset=48, end_lineno=72,
      end_col_offset=57), lineno=72, col_offset=32, end_lineno=72, end_col_offset=57)],
      keywords=[], lineno=72, col_offset=12, end_lineno=72, end_col_offset=58), lineno=72,
      col_offset=12, end_lineno=72, end_col_offset=58)], orelse=[], lineno=71, col_offset=8,
      end_lineno=72, end_col_offset=58), If(test=Name(id=''graph'', ctx=Load(), lineno=75,
      col_offset=11, end_lineno=75, end_col_offset=16), body=[Try(body=[Expr(value=Call(func=Name(id=''create_code_graph'',
      ctx=Load(), lineno=78, col_offset=16, end_lineno=78, end_col_offset=33), args=[Name(id=''file_details'',
      ctx=Load(), lineno=78, col_offset=34, end_lineno=78, end_col_offset=46), Name(id=''base_name'',
      ctx=Load(), lineno=78, col_offset=48, end_lineno=78, end_col_offset=57), Name(id=''output_subdir'',
      ctx=Load(), lineno=78, col_offset=59, end_lineno=78, end_col_offset=72)], keywords=[],
      lineno=78, col_offset=16, end_lineno=78, end_col_offset=73), lineno=78, col_offset=16,
      end_lineno=78, end_col_offset=73)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=80, col_offset=16, end_lineno=80, end_col_offset=23), attr=''info'',
      ctx=Load(), lineno=80, col_offset=16, end_lineno=80, end_col_offset=28), args=[JoinedStr(values=[Constant(value=''Error
      creating graph for '', lineno=80, col_offset=29, end_lineno=80, end_col_offset=68),
      FormattedValue(value=Name(id=''file_path'', ctx=Load(), lineno=80, col_offset=57,
      end_lineno=80, end_col_offset=66), conversion=-1, lineno=80, col_offset=29,
      end_lineno=80, end_col_offset=68)], lineno=80, col_offset=29, end_lineno=80,
      end_col_offset=68)], keywords=[], lineno=80, col_offset=16, end_lineno=80, end_col_offset=69),
      lineno=80, col_offset=16, end_lineno=80, end_col_offset=69), Continue(lineno=81,
      col_offset=16, end_lineno=81, end_col_offset=24)], lineno=79, col_offset=12,
      end_lineno=81, end_col_offset=24)], orelse=[], finalbody=[], lineno=77, col_offset=12,
      end_lineno=81, end_col_offset=24)], orelse=[], lineno=75, col_offset=8, end_lineno=81,
      end_col_offset=24)], orelse=[], lineno=50, col_offset=4, end_lineno=81, end_col_offset=24),
      Assign(targets=[Name(id=''datasets'', ctx=Store(), lineno=84, col_offset=4,
      end_lineno=84, end_col_offset=12)], value=Call(func=Name(id=''combine_json_files'',
      ctx=Load(), lineno=84, col_offset=15, end_lineno=84, end_col_offset=33), args=[Name(id=''output_dir'',
      ctx=Load(), lineno=84, col_offset=34, end_lineno=84, end_col_offset=44), Name(id=''html'',
      ctx=Load(), lineno=84, col_offset=46, end_lineno=84, end_col_offset=50)], keywords=[],
      lineno=84, col_offset=15, end_lineno=84, end_col_offset=51), lineno=84, col_offset=4,
      end_lineno=84, end_col_offset=51), Return(value=Name(id=''datasets'', ctx=Load(),
      lineno=85, col_offset=11, end_lineno=85, end_col_offset=19), lineno=85, col_offset=4,
      end_lineno=85, end_col_offset=19)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=32, col_offset=156, end_lineno=32, end_col_offset=160), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=32, col_offset=161, end_lineno=32, end_col_offset=164), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=32, col_offset=166, end_lineno=32, end_col_offset=170), slice=Name(id=''Dict'',
      ctx=Load(), lineno=32, col_offset=171, end_lineno=32, end_col_offset=175), ctx=Load(),
      lineno=32, col_offset=166, end_lineno=32, end_col_offset=176)], ctx=Load(),
      lineno=32, col_offset=161, end_lineno=32, end_col_offset=176), ctx=Load(), lineno=32,
      col_offset=156, end_lineno=32, end_col_offset=177), lineno=32, col_offset=0,
      end_lineno=85, end_col_offset=19)'
    function_docstring: "Processes all Python files in the provided directory and\
      \ subdirectories.\nArgs:\n    start_dir (str): Starting directory to search\
      \ for Python files.\n    output_dir (str): Directory to write the output files.\n\
      \    questions (Dict): Questions dictionary to answer about each Python file.\n\
      \    llm: Large Language Model to use for generating answers.\n    prompt (str):\
      \ Prompt to provide to the language model.\n    use_llm (bool): If True, use\
      \ the LLM model to generate answers for JSON.\n    use_summary (bool): Use the\
      \ code summary to reduce dataset context length.\n    graph (bool): Generate\
      \ graphs for the code.\n    html (bool): Generate HTML files from the JSON files.\n\
      Returns:\n    Dict[str, List[Dict]]: Datasets dictionary."
    function_inputs:
    - start_dir
    - output_dir
    - questions
    - llm
    - prompt
    - use_llm
    - use_summary
    - graph
    - html
    function_defaults: []
    function_returns:
    - datasets
    function_calls:
    - Path
    - logging.info
    - isinstance
    - Path(start_dir).rglob
    - output_subdir.mkdir
    - '''.''.join'
    - write_file
    - combine_json_files
    - Path(file_path).relative_to
    - zip
    - create_code_graph
    - get_python_file_details
    - get_python_datasets
    - p.is_file
    function_variables:
    - output_subdir
    - contents
    - file_names
    - relative_path
    - base_name
    - datasets
    - python_files
    - file_details
    function_decorators: []
    function_annotations: []
    function_properties: []
  py2dataset:
    function_name: py2dataset
    function_code: "def py2dataset(start_dir: str='', output_dir: str='', questions_pathname:\
      \ str='', model_config_pathname: str='', use_llm: bool=False, use_summary: bool=False,\
      \ graph: bool=False, quiet: bool=False, html: bool=False) -> Dict[str, List[Dict]]:\n\
      \    \"\"\"\n    Process Python files to generate question-answer pairs and\
      \ instructions.\n    Args:\n        start_dir (str, optional): Starting directory\
      \ to search for Python files. Defaults to current working directory.\n     \
      \   output_dir (str, optional): Directory to write the output files.\n     \
      \   questions_pathname (str, optional): Path to the questions file.\n      \
      \  model_config_pathname (str, optional): Path to the model configuration file.\n\
      \        use_llm (bool, optional): If True, use a Large Language Model for generating\
      \ JSON answers. Defaults to False.\n        use_summary (bool, optional): Use\
      \ code summary to reduce dataset context length. Defaults to False.\n      \
      \  graph (bool, optional): Generate graphs for the code. Defaults to False.\n\
      \        quiet (bool, optional): Limit logging output. Defaults to False.\n\
      \        html (bool, optional): Generate HTML files from the JSON files. Defaults\
      \ to False.\n    Returns:\n        Dict[str, List[Dict]]: Datasets dictionary.\n\
      \    \"\"\"\n    if quiet:\n        logging.getLogger().setLevel(logging.WARNING)\n\
      \    else:\n        logging.getLogger().setLevel(logging.INFO)\n    sys.setrecursionlimit(3000)\n\
      \    if start_dir == '':\n        logging.info('No valid start path provided.\
      \ Using current working directory.')\n        start_dir = os.getcwd()\n    start_dir\
      \ = os.path.abspath(start_dir)\n    output_dir = get_output_dir(output_dir)\n\
      \    questions = get_questions(questions_pathname)\n    llm = None\n    model_config\
      \ = None\n    prompt = ''\n    if use_llm:\n        llm, prompt = get_model(model_config_pathname)\n\
      \    datasets = process_python_directories(start_dir, output_dir, questions,\
      \ llm, prompt, use_llm, use_summary, graph, html)\n    return datasets"
    function_ast: 'FunctionDef(name=''py2dataset'', args=arguments(posonlyargs=[],
      args=[arg(arg=''start_dir'', annotation=Name(id=''str'', ctx=Load(), lineno=88,
      col_offset=26, end_lineno=88, end_col_offset=29), lineno=88, col_offset=15,
      end_lineno=88, end_col_offset=29), arg(arg=''output_dir'', annotation=Name(id=''str'',
      ctx=Load(), lineno=88, col_offset=46, end_lineno=88, end_col_offset=49), lineno=88,
      col_offset=34, end_lineno=88, end_col_offset=49), arg(arg=''questions_pathname'',
      annotation=Name(id=''str'', ctx=Load(), lineno=88, col_offset=74, end_lineno=88,
      end_col_offset=77), lineno=88, col_offset=54, end_lineno=88, end_col_offset=77),
      arg(arg=''model_config_pathname'', annotation=Name(id=''str'', ctx=Load(), lineno=88,
      col_offset=105, end_lineno=88, end_col_offset=108), lineno=88, col_offset=82,
      end_lineno=88, end_col_offset=108), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=88, col_offset=122, end_lineno=88, end_col_offset=126), lineno=88,
      col_offset=113, end_lineno=88, end_col_offset=126), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=88, col_offset=147, end_lineno=88,
      end_col_offset=151), lineno=88, col_offset=134, end_lineno=88, end_col_offset=151),
      arg(arg=''graph'', annotation=Name(id=''bool'', ctx=Load(), lineno=88, col_offset=166,
      end_lineno=88, end_col_offset=170), lineno=88, col_offset=159, end_lineno=88,
      end_col_offset=170), arg(arg=''quiet'', annotation=Name(id=''bool'', ctx=Load(),
      lineno=88, col_offset=185, end_lineno=88, end_col_offset=189), lineno=88, col_offset=178,
      end_lineno=88, end_col_offset=189), arg(arg=''html'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=88, col_offset=203, end_lineno=88, end_col_offset=207), lineno=88,
      col_offset=197, end_lineno=88, end_col_offset=207)], kwonlyargs=[], kw_defaults=[],
      defaults=[Constant(value='''', lineno=88, col_offset=30, end_lineno=88, end_col_offset=32),
      Constant(value='''', lineno=88, col_offset=50, end_lineno=88, end_col_offset=52),
      Constant(value='''', lineno=88, col_offset=78, end_lineno=88, end_col_offset=80),
      Constant(value='''', lineno=88, col_offset=109, end_lineno=88, end_col_offset=111),
      Constant(value=False, lineno=88, col_offset=127, end_lineno=88, end_col_offset=132),
      Constant(value=False, lineno=88, col_offset=152, end_lineno=88, end_col_offset=157),
      Constant(value=False, lineno=88, col_offset=171, end_lineno=88, end_col_offset=176),
      Constant(value=False, lineno=88, col_offset=190, end_lineno=88, end_col_offset=195),
      Constant(value=False, lineno=88, col_offset=208, end_lineno=88, end_col_offset=213)]),
      body=[Expr(value=Constant(value=''\n    Process Python files to generate question-answer
      pairs and instructions.\n    Args:\n        start_dir (str, optional): Starting
      directory to search for Python files. Defaults to current working directory.\n        output_dir
      (str, optional): Directory to write the output files.\n        questions_pathname
      (str, optional): Path to the questions file.\n        model_config_pathname
      (str, optional): Path to the model configuration file.\n        use_llm (bool,
      optional): If True, use a Large Language Model for generating JSON answers.
      Defaults to False.\n        use_summary (bool, optional): Use code summary to
      reduce dataset context length. Defaults to False.\n        graph (bool, optional):
      Generate graphs for the code. Defaults to False.\n        quiet (bool, optional):
      Limit logging output. Defaults to False.\n        html (bool, optional): Generate
      HTML files from the JSON files. Defaults to False.\n    Returns:\n        Dict[str,
      List[Dict]]: Datasets dictionary.\n    '', lineno=89, col_offset=4, end_lineno=103,
      end_col_offset=7), lineno=89, col_offset=4, end_lineno=103, end_col_offset=7),
      If(test=Name(id=''quiet'', ctx=Load(), lineno=104, col_offset=7, end_lineno=104,
      end_col_offset=12), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=15), attr=''getLogger'',
      ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=25), args=[],
      keywords=[], lineno=105, col_offset=8, end_lineno=105, end_col_offset=27), attr=''setLevel'',
      ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=36), args=[Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=105, col_offset=37, end_lineno=105, end_col_offset=44), attr=''WARNING'',
      ctx=Load(), lineno=105, col_offset=37, end_lineno=105, end_col_offset=52)],
      keywords=[], lineno=105, col_offset=8, end_lineno=105, end_col_offset=53), lineno=105,
      col_offset=8, end_lineno=105, end_col_offset=53)], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=107, col_offset=8, end_lineno=107, end_col_offset=15), attr=''getLogger'',
      ctx=Load(), lineno=107, col_offset=8, end_lineno=107, end_col_offset=25), args=[],
      keywords=[], lineno=107, col_offset=8, end_lineno=107, end_col_offset=27), attr=''setLevel'',
      ctx=Load(), lineno=107, col_offset=8, end_lineno=107, end_col_offset=36), args=[Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=107, col_offset=37, end_lineno=107, end_col_offset=44), attr=''INFO'',
      ctx=Load(), lineno=107, col_offset=37, end_lineno=107, end_col_offset=49)],
      keywords=[], lineno=107, col_offset=8, end_lineno=107, end_col_offset=50), lineno=107,
      col_offset=8, end_lineno=107, end_col_offset=50)], lineno=104, col_offset=4,
      end_lineno=107, end_col_offset=50), Expr(value=Call(func=Attribute(value=Name(id=''sys'',
      ctx=Load(), lineno=108, col_offset=4, end_lineno=108, end_col_offset=7), attr=''setrecursionlimit'',
      ctx=Load(), lineno=108, col_offset=4, end_lineno=108, end_col_offset=25), args=[Constant(value=3000,
      lineno=108, col_offset=26, end_lineno=108, end_col_offset=30)], keywords=[],
      lineno=108, col_offset=4, end_lineno=108, end_col_offset=31), lineno=108, col_offset=4,
      end_lineno=108, end_col_offset=31), If(test=Compare(left=Name(id=''start_dir'',
      ctx=Load(), lineno=111, col_offset=7, end_lineno=111, end_col_offset=16), ops=[Eq()],
      comparators=[Constant(value='''', lineno=111, col_offset=20, end_lineno=111,
      end_col_offset=22)], lineno=111, col_offset=7, end_lineno=111, end_col_offset=22),
      body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load(),
      lineno=112, col_offset=8, end_lineno=112, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=112, col_offset=8, end_lineno=112, end_col_offset=20), args=[Constant(value=''No
      valid start path provided. Using current working directory.'', lineno=112, col_offset=21,
      end_lineno=112, end_col_offset=85)], keywords=[], lineno=112, col_offset=8,
      end_lineno=112, end_col_offset=86), lineno=112, col_offset=8, end_lineno=112,
      end_col_offset=86), Assign(targets=[Name(id=''start_dir'', ctx=Store(), lineno=113,
      col_offset=8, end_lineno=113, end_col_offset=17)], value=Call(func=Attribute(value=Name(id=''os'',
      ctx=Load(), lineno=113, col_offset=20, end_lineno=113, end_col_offset=22), attr=''getcwd'',
      ctx=Load(), lineno=113, col_offset=20, end_lineno=113, end_col_offset=29), args=[],
      keywords=[], lineno=113, col_offset=20, end_lineno=113, end_col_offset=31),
      lineno=113, col_offset=8, end_lineno=113, end_col_offset=31)], orelse=[], lineno=111,
      col_offset=4, end_lineno=113, end_col_offset=31), Assign(targets=[Name(id=''start_dir'',
      ctx=Store(), lineno=114, col_offset=4, end_lineno=114, end_col_offset=13)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''os'', ctx=Load(),
      lineno=114, col_offset=16, end_lineno=114, end_col_offset=18), attr=''path'',
      ctx=Load(), lineno=114, col_offset=16, end_lineno=114, end_col_offset=23), attr=''abspath'',
      ctx=Load(), lineno=114, col_offset=16, end_lineno=114, end_col_offset=31), args=[Name(id=''start_dir'',
      ctx=Load(), lineno=114, col_offset=32, end_lineno=114, end_col_offset=41)],
      keywords=[], lineno=114, col_offset=16, end_lineno=114, end_col_offset=42),
      lineno=114, col_offset=4, end_lineno=114, end_col_offset=42), Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=116, col_offset=4, end_lineno=116, end_col_offset=14)],
      value=Call(func=Name(id=''get_output_dir'', ctx=Load(), lineno=116, col_offset=17,
      end_lineno=116, end_col_offset=31), args=[Name(id=''output_dir'', ctx=Load(),
      lineno=116, col_offset=32, end_lineno=116, end_col_offset=42)], keywords=[],
      lineno=116, col_offset=17, end_lineno=116, end_col_offset=43), lineno=116, col_offset=4,
      end_lineno=116, end_col_offset=43), Assign(targets=[Name(id=''questions'', ctx=Store(),
      lineno=117, col_offset=4, end_lineno=117, end_col_offset=13)], value=Call(func=Name(id=''get_questions'',
      ctx=Load(), lineno=117, col_offset=16, end_lineno=117, end_col_offset=29), args=[Name(id=''questions_pathname'',
      ctx=Load(), lineno=117, col_offset=30, end_lineno=117, end_col_offset=48)],
      keywords=[], lineno=117, col_offset=16, end_lineno=117, end_col_offset=49),
      lineno=117, col_offset=4, end_lineno=117, end_col_offset=49), Assign(targets=[Name(id=''llm'',
      ctx=Store(), lineno=119, col_offset=4, end_lineno=119, end_col_offset=7)], value=Constant(value=None,
      lineno=119, col_offset=10, end_lineno=119, end_col_offset=14), lineno=119, col_offset=4,
      end_lineno=119, end_col_offset=14), Assign(targets=[Name(id=''model_config'',
      ctx=Store(), lineno=120, col_offset=4, end_lineno=120, end_col_offset=16)],
      value=Constant(value=None, lineno=120, col_offset=19, end_lineno=120, end_col_offset=23),
      lineno=120, col_offset=4, end_lineno=120, end_col_offset=23), Assign(targets=[Name(id=''prompt'',
      ctx=Store(), lineno=121, col_offset=4, end_lineno=121, end_col_offset=10)],
      value=Constant(value='''', lineno=121, col_offset=13, end_lineno=121, end_col_offset=15),
      lineno=121, col_offset=4, end_lineno=121, end_col_offset=15), If(test=Name(id=''use_llm'',
      ctx=Load(), lineno=122, col_offset=7, end_lineno=122, end_col_offset=14), body=[Assign(targets=[Tuple(elts=[Name(id=''llm'',
      ctx=Store(), lineno=123, col_offset=8, end_lineno=123, end_col_offset=11), Name(id=''prompt'',
      ctx=Store(), lineno=123, col_offset=13, end_lineno=123, end_col_offset=19)],
      ctx=Store(), lineno=123, col_offset=8, end_lineno=123, end_col_offset=19)],
      value=Call(func=Name(id=''get_model'', ctx=Load(), lineno=123, col_offset=22,
      end_lineno=123, end_col_offset=31), args=[Name(id=''model_config_pathname'',
      ctx=Load(), lineno=123, col_offset=32, end_lineno=123, end_col_offset=53)],
      keywords=[], lineno=123, col_offset=22, end_lineno=123, end_col_offset=54),
      lineno=123, col_offset=8, end_lineno=123, end_col_offset=54)], orelse=[], lineno=122,
      col_offset=4, end_lineno=123, end_col_offset=54), Assign(targets=[Name(id=''datasets'',
      ctx=Store(), lineno=125, col_offset=4, end_lineno=125, end_col_offset=12)],
      value=Call(func=Name(id=''process_python_directories'', ctx=Load(), lineno=125,
      col_offset=15, end_lineno=125, end_col_offset=41), args=[Name(id=''start_dir'',
      ctx=Load(), lineno=125, col_offset=42, end_lineno=125, end_col_offset=51), Name(id=''output_dir'',
      ctx=Load(), lineno=125, col_offset=53, end_lineno=125, end_col_offset=63), Name(id=''questions'',
      ctx=Load(), lineno=125, col_offset=65, end_lineno=125, end_col_offset=74), Name(id=''llm'',
      ctx=Load(), lineno=125, col_offset=76, end_lineno=125, end_col_offset=79), Name(id=''prompt'',
      ctx=Load(), lineno=125, col_offset=81, end_lineno=125, end_col_offset=87), Name(id=''use_llm'',
      ctx=Load(), lineno=125, col_offset=89, end_lineno=125, end_col_offset=96), Name(id=''use_summary'',
      ctx=Load(), lineno=125, col_offset=98, end_lineno=125, end_col_offset=109),
      Name(id=''graph'', ctx=Load(), lineno=125, col_offset=111, end_lineno=125, end_col_offset=116),
      Name(id=''html'', ctx=Load(), lineno=125, col_offset=118, end_lineno=125, end_col_offset=122)],
      keywords=[], lineno=125, col_offset=15, end_lineno=125, end_col_offset=123),
      lineno=125, col_offset=4, end_lineno=125, end_col_offset=123), Return(value=Name(id=''datasets'',
      ctx=Load(), lineno=126, col_offset=11, end_lineno=126, end_col_offset=19), lineno=126,
      col_offset=4, end_lineno=126, end_col_offset=19)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=88, col_offset=218, end_lineno=88, end_col_offset=222), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=88, col_offset=223, end_lineno=88, end_col_offset=226), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=88, col_offset=228, end_lineno=88, end_col_offset=232), slice=Name(id=''Dict'',
      ctx=Load(), lineno=88, col_offset=233, end_lineno=88, end_col_offset=237), ctx=Load(),
      lineno=88, col_offset=228, end_lineno=88, end_col_offset=238)], ctx=Load(),
      lineno=88, col_offset=223, end_lineno=88, end_col_offset=238), ctx=Load(), lineno=88,
      col_offset=218, end_lineno=88, end_col_offset=239), lineno=88, col_offset=0,
      end_lineno=126, end_col_offset=19)'
    function_docstring: "Process Python files to generate question-answer pairs and\
      \ instructions.\nArgs:\n    start_dir (str, optional): Starting directory to\
      \ search for Python files. Defaults to current working directory.\n    output_dir\
      \ (str, optional): Directory to write the output files.\n    questions_pathname\
      \ (str, optional): Path to the questions file.\n    model_config_pathname (str,\
      \ optional): Path to the model configuration file.\n    use_llm (bool, optional):\
      \ If True, use a Large Language Model for generating JSON answers. Defaults\
      \ to False.\n    use_summary (bool, optional): Use code summary to reduce dataset\
      \ context length. Defaults to False.\n    graph (bool, optional): Generate graphs\
      \ for the code. Defaults to False.\n    quiet (bool, optional): Limit logging\
      \ output. Defaults to False.\n    html (bool, optional): Generate HTML files\
      \ from the JSON files. Defaults to False.\nReturns:\n    Dict[str, List[Dict]]:\
      \ Datasets dictionary."
    function_inputs:
    - start_dir
    - output_dir
    - questions_pathname
    - model_config_pathname
    - use_llm
    - use_summary
    - graph
    - quiet
    - html
    function_defaults:
    - ''''''
    - ''''''
    - ''''''
    - ''''''
    - 'False'
    - 'False'
    - 'False'
    - 'False'
    - 'False'
    function_returns:
    - datasets
    function_calls:
    - logging.info
    - get_questions
    - get_model
    - logging.getLogger
    - os.getcwd
    - sys.setrecursionlimit
    - process_python_directories
    - get_output_dir
    - os.path.abspath
    - logging.getLogger().setLevel
    function_variables:
    - prompt
    - questions
    - datasets
    - model_config
    - llm
    - start_dir
    - output_dir
    function_decorators: []
    function_annotations: []
    function_properties: []
  main:
    function_name: main
    function_code: "def main():\n    \"\"\"\n    Command-line entry point for processing\
      \ Python files and generating datasets.\n    Args:\n        --start_dir (str,\
      \ optional): Starting directory to search for Python files. Defaults to the\
      \ current working directory.\n        --output_dir (str, optional): Directory\
      \ to write the output files. Defaults to the 'datasets' directory in the current\
      \ working directory.\n        --questions_pathname (str, optional): Path to\
      \ the questions file. If not provided, defaults defined in 'get_py2dataset_params.py'\
      \ will be used.\n        --model_config_pathname (str, optional): Path to the\
      \ model configuration file. If not provided, defaults defined in 'get_py2dataset_params.py'\
      \ will be used.\n        --use_llm (bool, optional): Use a Large Language Model\
      \ for generating JSON answers. Defaults to False.\n        --use_summary (bool,\
      \ optional): Use code summary to reduce dataset context length. Defaults to\
      \ False.\n        --graph (bool, optional): Generate graphs for the code. Defaults\
      \ to False.\n        --html (bool, optional): Generate HTML files from the JSON\
      \ files. Defaults to False.\n        --quiet (bool, optional): Limit logging\
      \ output. If provided, only warnings and errors will be logged. Defaults to\
      \ False.\n    \"\"\"\n    arg_string = ' '.join(sys.argv[1:])\n    start_dir\
      \ = ''\n    output_dir = ''\n    questions_pathname = ''\n    model_config_pathname\
      \ = ''\n    use_llm = False\n    use_summary = False\n    quiet = False\n  \
      \  graph = False\n    html = False\n    if '--start_dir' in arg_string:\n  \
      \      start_dir = arg_string.split('--start_dir ')[1].split(' ')[0]\n     \
      \   arg_string = arg_string.replace(f'--start_dir {start_dir}', '')\n    if\
      \ '--output_dir' in arg_string:\n        output_dir = arg_string.split('--output_dir\
      \ ')[1].split(' ')[0]\n        arg_string = arg_string.replace(f'--output_dir\
      \ {output_dir}', '')\n    if '--model_config_pathname' in arg_string:\n    \
      \    model_config_pathname = arg_string.split('--model_config_pathname ')[1].split('\
      \ ')[0]\n        arg_string = arg_string.replace(f'--model_config_pathname {model_config_pathname}',\
      \ '')\n    if '--questions_pathname' in arg_string:\n        questions_pathname\
      \ = arg_string.split('--questions_pathname ')[1].split(' ')[0]\n        arg_string\
      \ = arg_string.replace(f'--questions_pathname {questions_pathname}', '')\n \
      \   if '--use_llm' in arg_string:\n        use_llm = True\n        arg_string\
      \ = arg_string.replace('--use_llm', '')\n    if '--use_summary' in arg_string:\n\
      \        use_summary = True\n        arg_string = arg_string.replace('--use_summary',\
      \ '')\n    if '--quiet' in arg_string:\n        quiet = True\n        arg_string\
      \ = arg_string.replace('--quiet', '')\n    if '--graph' in arg_string:\n   \
      \     graph = True\n        arg_string = arg_string.replace('--graph', '')\n\
      \    if '--html' in arg_string:\n        html = True\n        arg_string = arg_string.replace('--html',\
      \ '')\n    py2dataset(start_dir, output_dir, questions_pathname, model_config_pathname,\
      \ use_llm, use_summary, graph, quiet, html)"
    function_ast: 'FunctionDef(name=''main'', args=arguments(posonlyargs=[], args=[],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Command-line
      entry point for processing Python files and generating datasets.\n    Args:\n        --start_dir
      (str, optional): Starting directory to search for Python files. Defaults to
      the current working directory.\n        --output_dir (str, optional): Directory
      to write the output files. Defaults to the ''datasets'' directory in the current
      working directory.\n        --questions_pathname (str, optional): Path to the
      questions file. If not provided, defaults defined in ''get_py2dataset_params.py''
      will be used.\n        --model_config_pathname (str, optional): Path to the
      model configuration file. If not provided, defaults defined in ''get_py2dataset_params.py''
      will be used.\n        --use_llm (bool, optional): Use a Large Language Model
      for generating JSON answers. Defaults to False.\n        --use_summary (bool,
      optional): Use code summary to reduce dataset context length. Defaults to False.\n        --graph
      (bool, optional): Generate graphs for the code. Defaults to False.\n        --html
      (bool, optional): Generate HTML files from the JSON files. Defaults to False.\n        --quiet
      (bool, optional): Limit logging output. If provided, only warnings and errors
      will be logged. Defaults to False.\n    ", lineno=130, col_offset=4, end_lineno=142,
      end_col_offset=7), lineno=130, col_offset=4, end_lineno=142, end_col_offset=7),
      Assign(targets=[Name(id=''arg_string'', ctx=Store(), lineno=143, col_offset=4,
      end_lineno=143, end_col_offset=14)], value=Call(func=Attribute(value=Constant(value=''
      '', lineno=143, col_offset=17, end_lineno=143, end_col_offset=20), attr=''join'',
      ctx=Load(), lineno=143, col_offset=17, end_lineno=143, end_col_offset=25), args=[Subscript(value=Attribute(value=Name(id=''sys'',
      ctx=Load(), lineno=143, col_offset=26, end_lineno=143, end_col_offset=29), attr=''argv'',
      ctx=Load(), lineno=143, col_offset=26, end_lineno=143, end_col_offset=34), slice=Slice(lower=Constant(value=1,
      lineno=143, col_offset=35, end_lineno=143, end_col_offset=36), lineno=143, col_offset=35,
      end_lineno=143, end_col_offset=37), ctx=Load(), lineno=143, col_offset=26, end_lineno=143,
      end_col_offset=38)], keywords=[], lineno=143, col_offset=17, end_lineno=143,
      end_col_offset=39), lineno=143, col_offset=4, end_lineno=143, end_col_offset=39),
      Assign(targets=[Name(id=''start_dir'', ctx=Store(), lineno=144, col_offset=4,
      end_lineno=144, end_col_offset=13)], value=Constant(value='''', lineno=144,
      col_offset=16, end_lineno=144, end_col_offset=18), lineno=144, col_offset=4,
      end_lineno=144, end_col_offset=18), Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=145, col_offset=4, end_lineno=145, end_col_offset=14)],
      value=Constant(value='''', lineno=145, col_offset=17, end_lineno=145, end_col_offset=19),
      lineno=145, col_offset=4, end_lineno=145, end_col_offset=19), Assign(targets=[Name(id=''questions_pathname'',
      ctx=Store(), lineno=146, col_offset=4, end_lineno=146, end_col_offset=22)],
      value=Constant(value='''', lineno=146, col_offset=25, end_lineno=146, end_col_offset=27),
      lineno=146, col_offset=4, end_lineno=146, end_col_offset=27), Assign(targets=[Name(id=''model_config_pathname'',
      ctx=Store(), lineno=147, col_offset=4, end_lineno=147, end_col_offset=25)],
      value=Constant(value='''', lineno=147, col_offset=28, end_lineno=147, end_col_offset=30),
      lineno=147, col_offset=4, end_lineno=147, end_col_offset=30), Assign(targets=[Name(id=''use_llm'',
      ctx=Store(), lineno=148, col_offset=4, end_lineno=148, end_col_offset=11)],
      value=Constant(value=False, lineno=148, col_offset=14, end_lineno=148, end_col_offset=19),
      lineno=148, col_offset=4, end_lineno=148, end_col_offset=19), Assign(targets=[Name(id=''use_summary'',
      ctx=Store(), lineno=149, col_offset=4, end_lineno=149, end_col_offset=15)],
      value=Constant(value=False, lineno=149, col_offset=18, end_lineno=149, end_col_offset=23),
      lineno=149, col_offset=4, end_lineno=149, end_col_offset=23), Assign(targets=[Name(id=''quiet'',
      ctx=Store(), lineno=150, col_offset=4, end_lineno=150, end_col_offset=9)], value=Constant(value=False,
      lineno=150, col_offset=12, end_lineno=150, end_col_offset=17), lineno=150, col_offset=4,
      end_lineno=150, end_col_offset=17), Assign(targets=[Name(id=''graph'', ctx=Store(),
      lineno=151, col_offset=4, end_lineno=151, end_col_offset=9)], value=Constant(value=False,
      lineno=151, col_offset=12, end_lineno=151, end_col_offset=17), lineno=151, col_offset=4,
      end_lineno=151, end_col_offset=17), Assign(targets=[Name(id=''html'', ctx=Store(),
      lineno=152, col_offset=4, end_lineno=152, end_col_offset=8)], value=Constant(value=False,
      lineno=152, col_offset=11, end_lineno=152, end_col_offset=16), lineno=152, col_offset=4,
      end_lineno=152, end_col_offset=16), If(test=Compare(left=Constant(value=''--start_dir'',
      lineno=153, col_offset=7, end_lineno=153, end_col_offset=20), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=153, col_offset=24, end_lineno=153, end_col_offset=34)],
      lineno=153, col_offset=7, end_lineno=153, end_col_offset=34), body=[Assign(targets=[Name(id=''start_dir'',
      ctx=Store(), lineno=154, col_offset=8, end_lineno=154, end_col_offset=17)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=154, col_offset=20, end_lineno=154, end_col_offset=30), attr=''split'',
      ctx=Load(), lineno=154, col_offset=20, end_lineno=154, end_col_offset=36), args=[Constant(value=''--start_dir
      '', lineno=154, col_offset=37, end_lineno=154, end_col_offset=51)], keywords=[],
      lineno=154, col_offset=20, end_lineno=154, end_col_offset=52), slice=Constant(value=1,
      lineno=154, col_offset=53, end_lineno=154, end_col_offset=54), ctx=Load(), lineno=154,
      col_offset=20, end_lineno=154, end_col_offset=55), attr=''split'', ctx=Load(),
      lineno=154, col_offset=20, end_lineno=154, end_col_offset=61), args=[Constant(value=''
      '', lineno=154, col_offset=62, end_lineno=154, end_col_offset=65)], keywords=[],
      lineno=154, col_offset=20, end_lineno=154, end_col_offset=66), slice=Constant(value=0,
      lineno=154, col_offset=67, end_lineno=154, end_col_offset=68), ctx=Load(), lineno=154,
      col_offset=20, end_lineno=154, end_col_offset=69), lineno=154, col_offset=8,
      end_lineno=154, end_col_offset=69), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=155, col_offset=8, end_lineno=155, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=155,
      col_offset=21, end_lineno=155, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=155, col_offset=21, end_lineno=155, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--start_dir
      '', lineno=155, col_offset=40, end_lineno=155, end_col_offset=66), FormattedValue(value=Name(id=''start_dir'',
      ctx=Load(), lineno=155, col_offset=55, end_lineno=155, end_col_offset=64), conversion=-1,
      lineno=155, col_offset=40, end_lineno=155, end_col_offset=66)], lineno=155,
      col_offset=40, end_lineno=155, end_col_offset=66), Constant(value='''', lineno=155,
      col_offset=68, end_lineno=155, end_col_offset=70)], keywords=[], lineno=155,
      col_offset=21, end_lineno=155, end_col_offset=71), lineno=155, col_offset=8,
      end_lineno=155, end_col_offset=71)], orelse=[], lineno=153, col_offset=4, end_lineno=155,
      end_col_offset=71), If(test=Compare(left=Constant(value=''--output_dir'', lineno=156,
      col_offset=7, end_lineno=156, end_col_offset=21), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=156, col_offset=25, end_lineno=156, end_col_offset=35)],
      lineno=156, col_offset=7, end_lineno=156, end_col_offset=35), body=[Assign(targets=[Name(id=''output_dir'',
      ctx=Store(), lineno=157, col_offset=8, end_lineno=157, end_col_offset=18)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=157, col_offset=21, end_lineno=157, end_col_offset=31), attr=''split'',
      ctx=Load(), lineno=157, col_offset=21, end_lineno=157, end_col_offset=37), args=[Constant(value=''--output_dir
      '', lineno=157, col_offset=38, end_lineno=157, end_col_offset=53)], keywords=[],
      lineno=157, col_offset=21, end_lineno=157, end_col_offset=54), slice=Constant(value=1,
      lineno=157, col_offset=55, end_lineno=157, end_col_offset=56), ctx=Load(), lineno=157,
      col_offset=21, end_lineno=157, end_col_offset=57), attr=''split'', ctx=Load(),
      lineno=157, col_offset=21, end_lineno=157, end_col_offset=63), args=[Constant(value=''
      '', lineno=157, col_offset=64, end_lineno=157, end_col_offset=67)], keywords=[],
      lineno=157, col_offset=21, end_lineno=157, end_col_offset=68), slice=Constant(value=0,
      lineno=157, col_offset=69, end_lineno=157, end_col_offset=70), ctx=Load(), lineno=157,
      col_offset=21, end_lineno=157, end_col_offset=71), lineno=157, col_offset=8,
      end_lineno=157, end_col_offset=71), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=158, col_offset=8, end_lineno=158, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=158,
      col_offset=21, end_lineno=158, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=158, col_offset=21, end_lineno=158, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--output_dir
      '', lineno=158, col_offset=40, end_lineno=158, end_col_offset=68), FormattedValue(value=Name(id=''output_dir'',
      ctx=Load(), lineno=158, col_offset=56, end_lineno=158, end_col_offset=66), conversion=-1,
      lineno=158, col_offset=40, end_lineno=158, end_col_offset=68)], lineno=158,
      col_offset=40, end_lineno=158, end_col_offset=68), Constant(value='''', lineno=158,
      col_offset=70, end_lineno=158, end_col_offset=72)], keywords=[], lineno=158,
      col_offset=21, end_lineno=158, end_col_offset=73), lineno=158, col_offset=8,
      end_lineno=158, end_col_offset=73)], orelse=[], lineno=156, col_offset=4, end_lineno=158,
      end_col_offset=73), If(test=Compare(left=Constant(value=''--model_config_pathname'',
      lineno=159, col_offset=7, end_lineno=159, end_col_offset=32), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=159, col_offset=36, end_lineno=159, end_col_offset=46)],
      lineno=159, col_offset=7, end_lineno=159, end_col_offset=46), body=[Assign(targets=[Name(id=''model_config_pathname'',
      ctx=Store(), lineno=160, col_offset=8, end_lineno=160, end_col_offset=29)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=160, col_offset=32, end_lineno=160, end_col_offset=42), attr=''split'',
      ctx=Load(), lineno=160, col_offset=32, end_lineno=160, end_col_offset=48), args=[Constant(value=''--model_config_pathname
      '', lineno=160, col_offset=49, end_lineno=160, end_col_offset=75)], keywords=[],
      lineno=160, col_offset=32, end_lineno=160, end_col_offset=76), slice=Constant(value=1,
      lineno=160, col_offset=77, end_lineno=160, end_col_offset=78), ctx=Load(), lineno=160,
      col_offset=32, end_lineno=160, end_col_offset=79), attr=''split'', ctx=Load(),
      lineno=160, col_offset=32, end_lineno=160, end_col_offset=85), args=[Constant(value=''
      '', lineno=160, col_offset=86, end_lineno=160, end_col_offset=89)], keywords=[],
      lineno=160, col_offset=32, end_lineno=160, end_col_offset=90), slice=Constant(value=0,
      lineno=160, col_offset=91, end_lineno=160, end_col_offset=92), ctx=Load(), lineno=160,
      col_offset=32, end_lineno=160, end_col_offset=93), lineno=160, col_offset=8,
      end_lineno=160, end_col_offset=93), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=161, col_offset=8, end_lineno=161, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=161,
      col_offset=21, end_lineno=161, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=161, col_offset=21, end_lineno=161, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--model_config_pathname
      '', lineno=161, col_offset=40, end_lineno=161, end_col_offset=90), FormattedValue(value=Name(id=''model_config_pathname'',
      ctx=Load(), lineno=161, col_offset=67, end_lineno=161, end_col_offset=88), conversion=-1,
      lineno=161, col_offset=40, end_lineno=161, end_col_offset=90)], lineno=161,
      col_offset=40, end_lineno=161, end_col_offset=90), Constant(value='''', lineno=161,
      col_offset=92, end_lineno=161, end_col_offset=94)], keywords=[], lineno=161,
      col_offset=21, end_lineno=161, end_col_offset=95), lineno=161, col_offset=8,
      end_lineno=161, end_col_offset=95)], orelse=[], lineno=159, col_offset=4, end_lineno=161,
      end_col_offset=95), If(test=Compare(left=Constant(value=''--questions_pathname'',
      lineno=162, col_offset=7, end_lineno=162, end_col_offset=29), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=162, col_offset=33, end_lineno=162, end_col_offset=43)],
      lineno=162, col_offset=7, end_lineno=162, end_col_offset=43), body=[Assign(targets=[Name(id=''questions_pathname'',
      ctx=Store(), lineno=163, col_offset=8, end_lineno=163, end_col_offset=26)],
      value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id=''arg_string'',
      ctx=Load(), lineno=163, col_offset=29, end_lineno=163, end_col_offset=39), attr=''split'',
      ctx=Load(), lineno=163, col_offset=29, end_lineno=163, end_col_offset=45), args=[Constant(value=''--questions_pathname
      '', lineno=163, col_offset=46, end_lineno=163, end_col_offset=69)], keywords=[],
      lineno=163, col_offset=29, end_lineno=163, end_col_offset=70), slice=Constant(value=1,
      lineno=163, col_offset=71, end_lineno=163, end_col_offset=72), ctx=Load(), lineno=163,
      col_offset=29, end_lineno=163, end_col_offset=73), attr=''split'', ctx=Load(),
      lineno=163, col_offset=29, end_lineno=163, end_col_offset=79), args=[Constant(value=''
      '', lineno=163, col_offset=80, end_lineno=163, end_col_offset=83)], keywords=[],
      lineno=163, col_offset=29, end_lineno=163, end_col_offset=84), slice=Constant(value=0,
      lineno=163, col_offset=85, end_lineno=163, end_col_offset=86), ctx=Load(), lineno=163,
      col_offset=29, end_lineno=163, end_col_offset=87), lineno=163, col_offset=8,
      end_lineno=163, end_col_offset=87), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=164, col_offset=8, end_lineno=164, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=164,
      col_offset=21, end_lineno=164, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=164, col_offset=21, end_lineno=164, end_col_offset=39), args=[JoinedStr(values=[Constant(value=''--questions_pathname
      '', lineno=164, col_offset=40, end_lineno=164, end_col_offset=84), FormattedValue(value=Name(id=''questions_pathname'',
      ctx=Load(), lineno=164, col_offset=64, end_lineno=164, end_col_offset=82), conversion=-1,
      lineno=164, col_offset=40, end_lineno=164, end_col_offset=84)], lineno=164,
      col_offset=40, end_lineno=164, end_col_offset=84), Constant(value='''', lineno=164,
      col_offset=86, end_lineno=164, end_col_offset=88)], keywords=[], lineno=164,
      col_offset=21, end_lineno=164, end_col_offset=89), lineno=164, col_offset=8,
      end_lineno=164, end_col_offset=89)], orelse=[], lineno=162, col_offset=4, end_lineno=164,
      end_col_offset=89), If(test=Compare(left=Constant(value=''--use_llm'', lineno=165,
      col_offset=7, end_lineno=165, end_col_offset=18), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=165, col_offset=22, end_lineno=165, end_col_offset=32)],
      lineno=165, col_offset=7, end_lineno=165, end_col_offset=32), body=[Assign(targets=[Name(id=''use_llm'',
      ctx=Store(), lineno=166, col_offset=8, end_lineno=166, end_col_offset=15)],
      value=Constant(value=True, lineno=166, col_offset=18, end_lineno=166, end_col_offset=22),
      lineno=166, col_offset=8, end_lineno=166, end_col_offset=22), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=167, col_offset=8, end_lineno=167, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=167,
      col_offset=21, end_lineno=167, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=167, col_offset=21, end_lineno=167, end_col_offset=39), args=[Constant(value=''--use_llm'',
      lineno=167, col_offset=40, end_lineno=167, end_col_offset=51), Constant(value='''',
      lineno=167, col_offset=53, end_lineno=167, end_col_offset=55)], keywords=[],
      lineno=167, col_offset=21, end_lineno=167, end_col_offset=56), lineno=167, col_offset=8,
      end_lineno=167, end_col_offset=56)], orelse=[], lineno=165, col_offset=4, end_lineno=167,
      end_col_offset=56), If(test=Compare(left=Constant(value=''--use_summary'', lineno=168,
      col_offset=7, end_lineno=168, end_col_offset=22), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=168, col_offset=26, end_lineno=168, end_col_offset=36)],
      lineno=168, col_offset=7, end_lineno=168, end_col_offset=36), body=[Assign(targets=[Name(id=''use_summary'',
      ctx=Store(), lineno=169, col_offset=8, end_lineno=169, end_col_offset=19)],
      value=Constant(value=True, lineno=169, col_offset=22, end_lineno=169, end_col_offset=26),
      lineno=169, col_offset=8, end_lineno=169, end_col_offset=26), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=170, col_offset=8, end_lineno=170, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=170,
      col_offset=21, end_lineno=170, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=170, col_offset=21, end_lineno=170, end_col_offset=39), args=[Constant(value=''--use_summary'',
      lineno=170, col_offset=40, end_lineno=170, end_col_offset=55), Constant(value='''',
      lineno=170, col_offset=57, end_lineno=170, end_col_offset=59)], keywords=[],
      lineno=170, col_offset=21, end_lineno=170, end_col_offset=60), lineno=170, col_offset=8,
      end_lineno=170, end_col_offset=60)], orelse=[], lineno=168, col_offset=4, end_lineno=170,
      end_col_offset=60), If(test=Compare(left=Constant(value=''--quiet'', lineno=171,
      col_offset=7, end_lineno=171, end_col_offset=16), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=171, col_offset=20, end_lineno=171, end_col_offset=30)],
      lineno=171, col_offset=7, end_lineno=171, end_col_offset=30), body=[Assign(targets=[Name(id=''quiet'',
      ctx=Store(), lineno=172, col_offset=8, end_lineno=172, end_col_offset=13)],
      value=Constant(value=True, lineno=172, col_offset=16, end_lineno=172, end_col_offset=20),
      lineno=172, col_offset=8, end_lineno=172, end_col_offset=20), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=173, col_offset=8, end_lineno=173, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=173,
      col_offset=21, end_lineno=173, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=173, col_offset=21, end_lineno=173, end_col_offset=39), args=[Constant(value=''--quiet'',
      lineno=173, col_offset=40, end_lineno=173, end_col_offset=49), Constant(value='''',
      lineno=173, col_offset=51, end_lineno=173, end_col_offset=53)], keywords=[],
      lineno=173, col_offset=21, end_lineno=173, end_col_offset=54), lineno=173, col_offset=8,
      end_lineno=173, end_col_offset=54)], orelse=[], lineno=171, col_offset=4, end_lineno=173,
      end_col_offset=54), If(test=Compare(left=Constant(value=''--graph'', lineno=174,
      col_offset=7, end_lineno=174, end_col_offset=16), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=174, col_offset=20, end_lineno=174, end_col_offset=30)],
      lineno=174, col_offset=7, end_lineno=174, end_col_offset=30), body=[Assign(targets=[Name(id=''graph'',
      ctx=Store(), lineno=175, col_offset=8, end_lineno=175, end_col_offset=13)],
      value=Constant(value=True, lineno=175, col_offset=16, end_lineno=175, end_col_offset=20),
      lineno=175, col_offset=8, end_lineno=175, end_col_offset=20), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=176, col_offset=8, end_lineno=176, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=176,
      col_offset=21, end_lineno=176, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=176, col_offset=21, end_lineno=176, end_col_offset=39), args=[Constant(value=''--graph'',
      lineno=176, col_offset=40, end_lineno=176, end_col_offset=49), Constant(value='''',
      lineno=176, col_offset=51, end_lineno=176, end_col_offset=53)], keywords=[],
      lineno=176, col_offset=21, end_lineno=176, end_col_offset=54), lineno=176, col_offset=8,
      end_lineno=176, end_col_offset=54)], orelse=[], lineno=174, col_offset=4, end_lineno=176,
      end_col_offset=54), If(test=Compare(left=Constant(value=''--html'', lineno=177,
      col_offset=7, end_lineno=177, end_col_offset=15), ops=[In()], comparators=[Name(id=''arg_string'',
      ctx=Load(), lineno=177, col_offset=19, end_lineno=177, end_col_offset=29)],
      lineno=177, col_offset=7, end_lineno=177, end_col_offset=29), body=[Assign(targets=[Name(id=''html'',
      ctx=Store(), lineno=178, col_offset=8, end_lineno=178, end_col_offset=12)],
      value=Constant(value=True, lineno=178, col_offset=15, end_lineno=178, end_col_offset=19),
      lineno=178, col_offset=8, end_lineno=178, end_col_offset=19), Assign(targets=[Name(id=''arg_string'',
      ctx=Store(), lineno=179, col_offset=8, end_lineno=179, end_col_offset=18)],
      value=Call(func=Attribute(value=Name(id=''arg_string'', ctx=Load(), lineno=179,
      col_offset=21, end_lineno=179, end_col_offset=31), attr=''replace'', ctx=Load(),
      lineno=179, col_offset=21, end_lineno=179, end_col_offset=39), args=[Constant(value=''--html'',
      lineno=179, col_offset=40, end_lineno=179, end_col_offset=48), Constant(value='''',
      lineno=179, col_offset=50, end_lineno=179, end_col_offset=52)], keywords=[],
      lineno=179, col_offset=21, end_lineno=179, end_col_offset=53), lineno=179, col_offset=8,
      end_lineno=179, end_col_offset=53)], orelse=[], lineno=177, col_offset=4, end_lineno=179,
      end_col_offset=53), Expr(value=Call(func=Name(id=''py2dataset'', ctx=Load(),
      lineno=181, col_offset=4, end_lineno=181, end_col_offset=14), args=[Name(id=''start_dir'',
      ctx=Load(), lineno=181, col_offset=15, end_lineno=181, end_col_offset=24), Name(id=''output_dir'',
      ctx=Load(), lineno=181, col_offset=26, end_lineno=181, end_col_offset=36), Name(id=''questions_pathname'',
      ctx=Load(), lineno=181, col_offset=38, end_lineno=181, end_col_offset=56), Name(id=''model_config_pathname'',
      ctx=Load(), lineno=181, col_offset=58, end_lineno=181, end_col_offset=79), Name(id=''use_llm'',
      ctx=Load(), lineno=181, col_offset=81, end_lineno=181, end_col_offset=88), Name(id=''use_summary'',
      ctx=Load(), lineno=181, col_offset=90, end_lineno=181, end_col_offset=101),
      Name(id=''graph'', ctx=Load(), lineno=181, col_offset=103, end_lineno=181, end_col_offset=108),
      Name(id=''quiet'', ctx=Load(), lineno=181, col_offset=110, end_lineno=181, end_col_offset=115),
      Name(id=''html'', ctx=Load(), lineno=181, col_offset=117, end_lineno=181, end_col_offset=121)],
      keywords=[], lineno=181, col_offset=4, end_lineno=181, end_col_offset=122),
      lineno=181, col_offset=4, end_lineno=181, end_col_offset=122)], decorator_list=[],
      lineno=129, col_offset=0, end_lineno=181, end_col_offset=122)'
    function_docstring: "Command-line entry point for processing Python files and\
      \ generating datasets.\nArgs:\n    --start_dir (str, optional): Starting directory\
      \ to search for Python files. Defaults to the current working directory.\n \
      \   --output_dir (str, optional): Directory to write the output files. Defaults\
      \ to the 'datasets' directory in the current working directory.\n    --questions_pathname\
      \ (str, optional): Path to the questions file. If not provided, defaults defined\
      \ in 'get_py2dataset_params.py' will be used.\n    --model_config_pathname (str,\
      \ optional): Path to the model configuration file. If not provided, defaults\
      \ defined in 'get_py2dataset_params.py' will be used.\n    --use_llm (bool,\
      \ optional): Use a Large Language Model for generating JSON answers. Defaults\
      \ to False.\n    --use_summary (bool, optional): Use code summary to reduce\
      \ dataset context length. Defaults to False.\n    --graph (bool, optional):\
      \ Generate graphs for the code. Defaults to False.\n    --html (bool, optional):\
      \ Generate HTML files from the JSON files. Defaults to False.\n    --quiet (bool,\
      \ optional): Limit logging output. If provided, only warnings and errors will\
      \ be logged. Defaults to False."
    function_inputs: []
    function_defaults: []
    function_returns: []
    function_calls:
    - ''' ''.join'
    - arg_string.replace
    - arg_string.split('--start_dir ')[1].split
    - arg_string.split('--model_config_pathname ')[1].split
    - py2dataset
    - arg_string.split('--output_dir ')[1].split
    - arg_string.split
    - arg_string.split('--questions_pathname ')[1].split
    function_variables:
    - quiet
    - use_llm
    - questions_pathname
    - use_summary
    - graph
    - html
    - model_config_pathname
    - start_dir
    - output_dir
    - arg_string
    function_decorators: []
    function_annotations: []
    function_properties: []
classes: {}
