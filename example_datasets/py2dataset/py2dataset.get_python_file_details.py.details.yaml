file_info:
  file_code: "\"\"\"\nUse AST to extract details from Python a file and return as\
    \ a dictionary.\nRequirements:\n[req01] The ControlFlowVisitor class shall inherit\
    \ from ast.NodeVisitor and be\n        used to visit nodes in the AST (Abstract\
    \ Syntax Tree). It extracts \n        control flow keywords to give a high-level\
    \ understanding of the program\n        flow. \n[req02] The CodeVisitor class\
    \ shall inherit from ast.NodeVisitor and be used to\n        traverse an AST (Abstract\
    \ Syntax Tree) and extract details about the\n        code. \n[req03] The CodeVisitor\
    \ class shall have methods to visit FunctionDef and\n        ClassDef nodes and\
    \ extract details about a function or a class.\n[req04] The CodeVisitor class\
    \ shall have a method to analyze a node and\n        populate file_info with details\
    \ about the file.\n[req05] The get_control_flow function shall accept a string\
    \ of source code as\n        an argument and return the control flow keywords\
    \ in the code.\n[req06] The get_python_file_details function shall accept a file\
    \ path as an\n        argument and return a dictionary of the details extracted\
    \ from the\n        file.\n[req07] The CodeVisitor class shall store details about\
    \ functions and classes,\n        including their code, AST, docstring, inputs,\
    \ defaults, returns, calls,\n        variables, decorators, annotations, and properties.\n\
    [req08] The CodeVisitor class shall store details about class attributes,\n  \
    \      methods, inheritance, and static methods.\n[req09] The analyze function\
    \ in the CodeVisitor class shall populate file_info\n        with the file's code,\
    \ AST, dependencies, functions, classes, and control\n        flow. \n[req10]\
    \ The code_graph function shall create a dictionary representation of file\n \
    \       details, including nodes and edges representing the relationships in the\n\
    \        code. \n[req11] The code_graph function shall include function nodes,\
    \ class nodes, method \n        nodes, and edges for function calls, method calls,\
    \ and class inheritance.\n[req12] The get_python_file_details function shall add\
    \ an internal file graph \n        (only including function calls where both the\
    \ caller and called function\n        are within the file) and an entire file\
    \ graph (including all function \n        calls) file_info in the returned file_details\
    \ dictionary.\n\"\"\"\nimport ast\nimport re\nimport json\nimport logging\nimport\
    \ networkx as nx\nfrom typing import Dict, List, Optional, Union\n\n\nclass ControlFlowVisitor(ast.NodeVisitor):\n\
    \    \"\"\"\n    This class inherits from ast.NodeVisitor and is used to visit\
    \ nodes in the\n    AST (Abstract Syntax Tree).It extracts control flow keywords\
    \ to give a \n    high-level understanding of the program flow.\n    Attributes:\n\
    \        node_type_to_keyword (dict): A dictionary mapping AST node types to \n\
    \            corresponding control flow keywords.\n        control_flow (list):\
    \ A list storing the sequence of control flow \n            keywords encountered\
    \ in the AST.\n    Methods:\n        __init__(): Initializes a new instance of\
    \ the class, setting up the\n            control flow list.\n        generic_visit(node):\
    \ Method to visit a node. If the node type \n            corresponds to a control\
    \ flow keyword, it is added to the \n            control_flow list. The method\
    \ then calls the inherited\n            generic_visit to continue visiting other\
    \ nodes.\n        get_control_flow(): Returns a string representing the control\
    \ flow of\n            the program. The control flow keywords are joined in the\
    \ order they\n            were encountered during the AST visit.\n    \"\"\"\n\
    \    node_type_to_keyword = {\n        ast.If: \"if\",\n        ast.While: \"\
    while\",\n        ast.For: \"for\",\n        ast.AsyncFor: \"for\",\n        ast.AsyncWith:\
    \ \"with\",\n        ast.Try: \"try\",\n        ast.With: \"with\",\n        ast.ExceptHandler:\
    \ \"except\",\n        ast.FunctionDef: \"def\",\n        ast.AsyncFunctionDef:\
    \ \"def\",\n        ast.ClassDef: \"class\",\n        ast.Module: \"module\",\n\
    \    }\n    def __init__(self):\n        self.control_flow = []\n    def generic_visit(self,\
    \ node):\n        keyword = self.node_type_to_keyword.get(type(node))\n      \
    \  if keyword:\n            if isinstance(node, ast.FunctionDef):\n          \
    \      self.control_flow.append(keyword + ' ' + node.name)\n            else:\n\
    \                self.control_flow.append(keyword)\n        super().generic_visit(node)\n\
    \    def get_control_flow(self):\n        return ' -> '.join(self.control_flow)\n\
    \ndef get_all_calls(node):\n    \"\"\"\n    Recursively find all function calls\
    \ in the subtree rooted at `node`.\n    \"\"\"\n    calls = []\n    for child\
    \ in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n  \
    \          calls.append(child)\n        calls.extend(get_all_calls(child))\n \
    \   return calls\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor\
    \ class for traversing an AST (Abstract Syntax Tree) and extracting\n    details\
    \ about the code.\n    Attributes:\n        code (str): The source code.\n   \
    \     functions(Dict): details about functions in the code.\n        classes (Dict):\
    \ details about classes in the code.\n        file_info (Dict): details about\
    \ the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) ->\
    \ None: Extract details \n            about a function.\n        visit_ClassDef(node:\
    \ ast.ClassDef) -> None: Extract details about a \n            class.\n      \
    \  extract_details(node: ast.AST, node_type: str) -> \n            Dict[str, Union[str,\
    \ List[str]]]: Extract details about a node.\n        analyze(node: ast.AST) ->\
    \ None: Populate file_info with details about\n                the file.\n   \
    \ \"\"\"\n    def __init__(self, code: str):\n        # initialize dictionaries\
    \ to store function, class, and file definitions\n        self.code: str = code\n\
    \        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n  \
    \      self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n      \
    \  self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class:\
    \ str = None\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n\
    \        if self.current_class: # If we're inside a class, add this function as\
    \ a method of the class\n            self.classes[self.current_class][f'class_method_{node.name}']\
    \ = self.extract_details(node, 'method')\n        else: # populate function dictionary\
    \ when function definition found in AST\n            self.functions[node.name]\
    \ = self.extract_details(node, 'function')\n        self.generic_visit(node) #\
    \ continue AST traversal to the next node\n    def visit_ClassDef(self, node:\
    \ ast.ClassDef) -> None:\n        self.classes[node.name] = self.extract_details(node,\
    \ 'class') # populate class dictionary when class definition found in AST\n  \
    \      self.current_class = node.name  # Set current_class to indicate that we're\
    \ inside a class\n        self.generic_visit(node) # continue AST traversal to\
    \ the next node\n        self.current_class = None  # Reset current_class after\
    \ we've finished with this class\n    def extract_details(self, node: ast.AST,\
    \ node_type: str) -> Dict[str, Union[str, List[str]]]:\n        node_walk = list(ast.walk(node))\n\
    \        details = {\n            f\"{node_type}_name\": node.name, \n       \
    \     f\"{node_type}_code\": ast.unparse(node),\n            f\"{node_type}_ast\"\
    : ast.dump(node, include_attributes=True), \n            f\"{node_type}_docstring\"\
    : ast.get_docstring(node),\n            f\"{node_type}_inputs\": [arg.arg for\
    \ arg in node.args.args] if node_type in ['function', 'method'] else None,\n \
    \           f\"{node_type}_defaults\": [ast.unparse(d) for d in node.args.defaults]\
    \ if node_type in ['function', 'method'] else None,\n            f\"{node_type}_returns\"\
    : [ast.unparse(subnode.value) if subnode.value is not None else \"None\" for subnode\
    \ in node_walk if isinstance(subnode, ast.Return)],\n            f\"{node_type}_calls\"\
    : list(set([ast.unparse(n.func) for n in get_all_calls(node)])),\n           \
    \ f\"{node_type}_variables\": list(set([ast.unparse(target) for subnode in node_walk\
    \ if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target,\
    \ ast.Name)])),\n            f\"{node_type}_decorators\": list(set(ast.unparse(decorator)\
    \ for decorator in node.decorator_list)) if node.decorator_list else [],\n   \
    \         f\"{node_type}_annotations\": list(set(ast.unparse(subnode.annotation)\
    \ for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation\
    \ is not None)),\n            f\"{node_type}_properties\": list(set([ast.unparse(subnode)\
    \ for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx,\
    \ ast.Store)])),\n        }  \n        if node_type == 'class' or node_type ==\
    \ 'method':\n            if node_type == 'method' and self.current_class: # Find\
    \ attributes defined as self.attribute\n                attributes = [target.attr\
    \ for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets\
    \ if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name)\
    \ and target.value.id == 'self']\n                if attributes: # If this class\
    \ already has some attributes, add to them\n                    if \"class_attributes\"\
    \ in self.classes[self.current_class]:\n                        self.classes[self.current_class][\"\
    class_attributes\"].extend(attributes)\n                    else: # Otherwise,\
    \ start a new list of attributes for this class\n                        self.classes[self.current_class][\"\
    class_attributes\"] = attributes\n            if node_type == 'class':\n     \
    \           details.update({\n                    \"class_attributes\": [target.attr\
    \ for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets\
    \ if isinstance(target, ast.Attribute)],\n                    \"class_methods\"\
    : [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)\
    \ and subnode.name != \"__init__\"],\n                    \"class_inheritance\"\
    : [ast.unparse(base) for base in node.bases] if node.bases else [],\n        \
    \            \"class_static_methods\": [subnode.name for subnode in node.body\
    \ if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\" and\
    \ any(isinstance(decorator, ast.Name) and decorator.id == \"staticmethod\" for\
    \ decorator in subnode.decorator_list)],\n                    })\n        return\
    \ details\n\n    def analyze(self, node: ast.AST) -> None:\n        # traverse\
    \ the AST rooted at 'node', create a list of all nodes within the current file,\
    \ and populate 'file_info' with file details\n        node_walk = list(ast.walk(node))\n\
    \        self.visit(node)\n        self.file_info = {\n            \"file_code\"\
    : self.code,\n            \"file_ast\" : ast.dump(node),\n            \"file_dependencies\"\
    : list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import)\
    \ for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode,\
    \ ast.ImportFrom)}),\n            \"file_functions\": list(self.functions.keys()),\n\
    \            \"file_classes\": list(self.classes.keys()),\n            \"file_control_flow\"\
    : get_control_flow(self.code),\n        }\n        \n        # add file_summary\
    \ to file_info\n        dependencies = self.file_info[\"file_dependencies\"]\n\
    \        function_defs = [{func_name: {\"inputs\": details[\"function_inputs\"\
    ], \"calls\": details[\"function_calls\"], \"returns\": details[\"function_returns\"\
    ]}} for func_name, details in self.functions.items()]\n        class_defs = []\n\
    \        for class_name, class_details in self.classes.items():\n            method_defs\
    \ = {}\n            for method_name, details in class_details.items():\n     \
    \           if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]]\
    \ = {\"inputs\": details[\"method_inputs\"], \"calls\": details[\"method_calls\"\
    ], \"returns\": details[\"method_returns\"]}\n            class_defs.append({class_name:\
    \ {\"method_defs\": method_defs}})\n        self.file_info[\"file_summary\"] =\
    \ { 'dependencies': dependencies, 'function_defs' : function_defs, 'class_defs'\
    \ : class_defs}\n\n\ndef get_control_flow(code: str) -> str:\n    \"\"\"\n   \
    \ Extract control flow keywords from source code.\n    Args:\n        code: str:\
    \ The source code to extract from.\n    Returns:\n        str: The control flow\
    \ keywords in the code.\n    \"\"\"\n    visitor = ControlFlowVisitor()\n    tree\
    \ = ast.parse(code)\n    visitor.visit(tree)\n    return visitor.get_control_flow()\n\
    \n\ndef code_graph(file_summary: Dict[str, Union[Dict, str]], internal_only: bool\
    \ = True) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n\
    \    Create a dictionary representation of file details.\n    Args:\n        file_summary:\
    \ Dict[str, Union[Dict, str]]: The details extracted from the file.\n        internal_only:\
    \ bool: If True, only include function calls where both the caller and called\
    \ function are within the file.\n    Returns:\n        dict: A dictionary with\
    \ nodes and edges representing the relationships\n            in the code.\n \
    \   \"\"\"\n    G = nx.DiGraph()\n\n    # Add function nodes to graph\n    for\
    \ function_def in file_summary['function_defs']:\n        for function_name in\
    \ function_def.keys():\n            G.add_node(function_name)\n\n    # Add class\
    \ nodes and method nodes to graph\n    for class_def in file_summary['class_defs']:\n\
    \        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n\
    \            for method_name in class_details['method_defs'].keys():\n       \
    \         # Use the format 'ClassName.methodName' to represent methods\n     \
    \           qualified_method_name = f'{class_name}.{method_name}'\n          \
    \      G.add_node(qualified_method_name)\n                # Add edge between class\
    \ and its method\n                G.add_edge(class_name, qualified_method_name)\n\
    \        \n    # Add edges for function calls\n    for function_def in file_summary['function_defs']:\n\
    \        for function_name, function_details in function_def.items():\n      \
    \      for called_func in function_details['calls']:\n                edge_data\
    \ = {}\n                if not internal_only or called_func in G.nodes:\n    \
    \                # Determine if the called function is a method or a standalone\
    \ function\n                    if '.' in called_func:  # The called function\
    \ is a method\n                        called_class_name, called_method_name =\
    \ called_func.rsplit('.', 1)\n                        # Retrieve the target_inputs\
    \ and target_returns from the class methods in file_summary\n                \
    \        target_inputs = target_returns = None\n                        for class_def\
    \ in file_summary['class_defs']:\n                            if class_def.get(called_class_name):\n\
    \                                target_inputs = class_def[called_class_name]['method_defs'].get(called_method_name,\
    \ {}).get('inputs', [])\n                                target_returns = class_def[called_class_name]['method_defs'].get(called_method_name,\
    \ {}).get('returns', [])\n                    else:  # The called function is\
    \ a standalone function\n                        # Retrieve the target_inputs\
    \ and target_returns from the functions in file_summary\n                    \
    \    target_inputs = target_returns = None\n                        for function_def\
    \ in file_summary['function_defs']:\n                            if function_def.get(called_func):\n\
    \                                target_inputs = function_def[called_func].get('inputs',\
    \ [])\n                                target_returns = function_def[called_func].get('returns',\
    \ [])\n                    if target_inputs:\n                        edge_data['target_inputs']\
    \ = target_inputs\n                    if target_returns:\n                  \
    \      edge_data['target_returns'] = target_returns\n                    G.add_edge(function_name,\
    \ called_func.strip(), **edge_data)\n\n    # Add edges for function calls inside\
    \ class methods\n    for class_def in file_summary['class_defs']:\n        for\
    \ class_name, class_details in class_def.items():\n            for method_name,\
    \ method_details in class_details['method_defs'].items():\n                for\
    \ called_func in method_details['calls']:\n                    edge_data = {}\n\
    \                    if not internal_only or called_func in G.nodes:\n       \
    \                 # Determine if the called function is a method or a standalone\
    \ function\n                        if '.' in called_func:  # The called function\
    \ is a method\n                            called_class_name, called_method_name\
    \ = called_func.rsplit('.', 1)\n                            # Retrieve the target_inputs\
    \ and target_returns from the class methods in file_summary\n                \
    \            target_inputs = target_returns = None\n                         \
    \   for class_def in file_summary['class_defs']:\n                           \
    \     if class_def.get(called_class_name):\n                                 \
    \   target_inputs = class_def[called_class_name]['method_defs'].get(called_method_name,\
    \ {}).get('inputs', [])\n                                    target_returns =\
    \ class_def[called_class_name]['method_defs'].get(called_method_name, {}).get('returns',\
    \ [])\n                        else:  # The called function is a standalone function\n\
    \                            # Retrieve the target_inputs and target_returns from\
    \ the functions in file_summary\n                            target_inputs = target_returns\
    \ = None\n                            for function_def in file_summary['function_defs']:\n\
    \                                if function_def.get(called_func):\n         \
    \                           target_inputs = function_def[called_func].get('inputs',\
    \ [])\n                                    target_returns = function_def[called_func].get('returns',\
    \ [])\n                        if target_inputs:\n                           \
    \ edge_data['target_inputs'] = target_inputs\n                        if target_returns:\n\
    \                            edge_data['target_returns'] = target_returns\n  \
    \                  G.add_edge(f'{class_name}.{method_name}', called_func.strip(),\
    \ **edge_data)\n\n    nodes = list(G.nodes)        \n    edges = [{\"source\"\
    : str(edge[0]), \"target\": str(edge[1]), **edge[2]} for edge in G.edges.data()]\n\
    \n    return {\n        \"nodes\": nodes,\n        \"edges\": edges,\n    }\n\n\
    \ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n\
    \    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path:\
    \ str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict,\
    \ str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with\
    \ open(file_path, \"r\", encoding=\"utf-8\", errors='ignore') as f:\n        \
    \    code = f.read()\n    except PermissionError:\n        logging.warning(f\"\
    Permission denied: {file_path}\")\n        return None \n    try:\n        tree\
    \ = ast.parse(code)\n    except SyntaxError:\n        logging.warning(f\"Syntax\
    \ error in file: {file_path}\")\n        return None\n    visitor = CodeVisitor(code)\n\
    \    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info,\
    \ 'functions': visitor.functions, 'classes': visitor.classes}\n    \n    # add\
    \ graph to file_info in file_details\n    file_details['file_info']['internal_code_graph']\
    \ = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['entire_code_graph']\
    \ = code_graph(file_details['file_info']['file_summary'], internal_only=False)\n\
    \    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\\\
    \"','')\n    return file_details"
  file_ast: 'Module(body=[Expr(value=Constant(value="\nUse AST to extract details
    from Python a file and return as a dictionary.\nRequirements:\n[req01] The ControlFlowVisitor
    class shall inherit from ast.NodeVisitor and be\n        used to visit nodes in
    the AST (Abstract Syntax Tree). It extracts \n        control flow keywords to
    give a high-level understanding of the program\n        flow. \n[req02] The CodeVisitor
    class shall inherit from ast.NodeVisitor and be used to\n        traverse an AST
    (Abstract Syntax Tree) and extract details about the\n        code. \n[req03]
    The CodeVisitor class shall have methods to visit FunctionDef and\n        ClassDef
    nodes and extract details about a function or a class.\n[req04] The CodeVisitor
    class shall have a method to analyze a node and\n        populate file_info with
    details about the file.\n[req05] The get_control_flow function shall accept a
    string of source code as\n        an argument and return the control flow keywords
    in the code.\n[req06] The get_python_file_details function shall accept a file
    path as an\n        argument and return a dictionary of the details extracted
    from the\n        file.\n[req07] The CodeVisitor class shall store details about
    functions and classes,\n        including their code, AST, docstring, inputs,
    defaults, returns, calls,\n        variables, decorators, annotations, and properties.\n[req08]
    The CodeVisitor class shall store details about class attributes,\n        methods,
    inheritance, and static methods.\n[req09] The analyze function in the CodeVisitor
    class shall populate file_info\n        with the file''s code, AST, dependencies,
    functions, classes, and control\n        flow. \n[req10] The code_graph function
    shall create a dictionary representation of file\n        details, including nodes
    and edges representing the relationships in the\n        code. \n[req11] The code_graph
    function shall include function nodes, class nodes, method \n        nodes, and
    edges for function calls, method calls, and class inheritance.\n[req12] The get_python_file_details
    function shall add an internal file graph \n        (only including function calls
    where both the caller and called function\n        are within the file) and an
    entire file graph (including all function \n        calls) file_info in the returned
    file_details dictionary.\n")), Import(names=[alias(name=''ast'')]), Import(names=[alias(name=''re'')]),
    Import(names=[alias(name=''json'')]), Import(names=[alias(name=''logging'')]),
    Import(names=[alias(name=''networkx'', asname=''nx'')]), ImportFrom(module=''typing'',
    names=[alias(name=''Dict''), alias(name=''List''), alias(name=''Optional''), alias(name=''Union'')],
    level=0), ClassDef(name=''ControlFlowVisitor'', bases=[Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''NodeVisitor'', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=''\n    This
    class inherits from ast.NodeVisitor and is used to visit nodes in the\n    AST
    (Abstract Syntax Tree).It extracts control flow keywords to give a \n    high-level
    understanding of the program flow.\n    Attributes:\n        node_type_to_keyword
    (dict): A dictionary mapping AST node types to \n            corresponding control
    flow keywords.\n        control_flow (list): A list storing the sequence of control
    flow \n            keywords encountered in the AST.\n    Methods:\n        __init__():
    Initializes a new instance of the class, setting up the\n            control flow
    list.\n        generic_visit(node): Method to visit a node. If the node type \n            corresponds
    to a control flow keyword, it is added to the \n            control_flow list.
    The method then calls the inherited\n            generic_visit to continue visiting
    other nodes.\n        get_control_flow(): Returns a string representing the control
    flow of\n            the program. The control flow keywords are joined in the
    order they\n            were encountered during the AST visit.\n    '')), Assign(targets=[Name(id=''node_type_to_keyword'',
    ctx=Store())], value=Dict(keys=[Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''If'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''While'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''For'', ctx=Load()),
    Attribute(value=Name(id=''ast'', ctx=Load()), attr=''AsyncFor'', ctx=Load()),
    Attribute(value=Name(id=''ast'', ctx=Load()), attr=''AsyncWith'', ctx=Load()),
    Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Try'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''With'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''ExceptHandler'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''FunctionDef'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''AsyncFunctionDef'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''ClassDef'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''Module'', ctx=Load())], values=[Constant(value=''if''), Constant(value=''while''),
    Constant(value=''for''), Constant(value=''for''), Constant(value=''with''), Constant(value=''try''),
    Constant(value=''with''), Constant(value=''except''), Constant(value=''def''),
    Constant(value=''def''), Constant(value=''class''), Constant(value=''module'')])),
    FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'')],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''control_flow'', ctx=Store())], value=List(elts=[], ctx=Load()))],
    decorator_list=[]), FunctionDef(name=''generic_visit'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''node'')], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Assign(targets=[Name(id=''keyword'', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''node_type_to_keyword'', ctx=Load()), attr=''get'', ctx=Load()),
    args=[Call(func=Name(id=''type'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[])], keywords=[])), If(test=Name(id=''keyword'', ctx=Load()), body=[If(test=Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''FunctionDef'', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''control_flow'', ctx=Load()), attr=''append'', ctx=Load()),
    args=[BinOp(left=BinOp(left=Name(id=''keyword'', ctx=Load()), op=Add(), right=Constant(value=''
    '')), op=Add(), right=Attribute(value=Name(id=''node'', ctx=Load()), attr=''name'',
    ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''control_flow'', ctx=Load()), attr=''append'', ctx=Load()),
    args=[Name(id=''keyword'', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id=''super'',
    ctx=Load()), args=[], keywords=[]), attr=''generic_visit'', ctx=Load()), args=[Name(id=''node'',
    ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name=''get_control_flow'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self'')], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='' ->
    ''), attr=''join'', ctx=Load()), args=[Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''control_flow'', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]),
    FunctionDef(name=''get_all_calls'', args=arguments(posonlyargs=[], args=[arg(arg=''node'')],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Recursively
    find all function calls in the subtree rooted at `node`.\n    '')), Assign(targets=[Name(id=''calls'',
    ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id=''child'',
    ctx=Store()), iter=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''iter_child_nodes'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''child'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Call'', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''calls'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[Name(id=''child'', ctx=Load())],
    keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''calls'',
    ctx=Load()), attr=''extend'', ctx=Load()), args=[Call(func=Name(id=''get_all_calls'',
    ctx=Load()), args=[Name(id=''child'', ctx=Load())], keywords=[])], keywords=[]))],
    orelse=[]), Return(value=Name(id=''calls'', ctx=Load()))], decorator_list=[]),
    ClassDef(name=''CodeVisitor'', bases=[Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''NodeVisitor'', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=''\n    Visitor
    class for traversing an AST (Abstract Syntax Tree) and extracting\n    details
    about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict):
    details about functions in the code.\n        classes (Dict): details about classes
    in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node:
    ast.FunctionDef) -> None: Extract details \n            about a function.\n        visit_ClassDef(node:
    ast.ClassDef) -> None: Extract details about a \n            class.\n        extract_details(node:
    ast.AST, node_type: str) -> \n            Dict[str, Union[str, List[str]]]: Extract
    details about a node.\n        analyze(node: ast.AST) -> None: Populate file_info
    with details about\n                the file.\n    '')), FunctionDef(name=''__init__'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''code'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''code'', ctx=Store()), annotation=Name(id=''str'', ctx=Load()),
    value=Name(id=''code'', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''functions'', ctx=Store()), annotation=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]),
    simple=0), AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load()), attr=''classes'',
    ctx=Store()), annotation=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Union'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''str'',
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Store()), annotation=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Store()), annotation=Name(id=''str'',
    ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name=''visit_FunctionDef'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''FunctionDef'', ctx=Load()))], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[If(test=Attribute(value=Name(id=''self'', ctx=Load()), attr=''current_class'',
    ctx=Load()), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load()), ctx=Load()), slice=JoinedStr(values=[Constant(value=''class_method_''),
    FormattedValue(value=Attribute(value=Name(id=''node'', ctx=Load()), attr=''name'',
    ctx=Load()), conversion=-1)]), ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''extract_details'', ctx=Load()), args=[Name(id=''node'', ctx=Load()),
    Constant(value=''method'')], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''functions'', ctx=Load()), slice=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''name'', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''extract_details'', ctx=Load()), args=[Name(id=''node'', ctx=Load()),
    Constant(value=''function'')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''generic_visit'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''visit_ClassDef'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''ClassDef'', ctx=Load()))], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''name'', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''extract_details'', ctx=Load()), args=[Name(id=''node'', ctx=Load()),
    Constant(value=''class'')], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Store())], value=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''name'', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''generic_visit'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''current_class'', ctx=Store())], value=Constant(value=None))], decorator_list=[],
    returns=Constant(value=None)), FunctionDef(name=''extract_details'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''AST'', ctx=Load())), arg(arg=''node_type'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''node_walk'',
    ctx=Store())], value=Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''walk'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[])], keywords=[])), Assign(targets=[Name(id=''details'', ctx=Store())],
    value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_name'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_code'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_ast'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_docstring'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_inputs'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_defaults'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_returns'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_calls'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variables'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_decorators'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_annotations'')]), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
    ctx=Load()), conversion=-1), Constant(value=''_properties'')])], values=[Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''name'', ctx=Load()), Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[]), Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''dump'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[keyword(arg=''include_attributes'',
    value=Constant(value=True))]), Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''get_docstring'', ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[]),
    IfExp(test=Compare(left=Name(id=''node_type'', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=''function''),
    Constant(value=''method'')], ctx=Load())]), body=ListComp(elt=Attribute(value=Name(id=''arg'',
    ctx=Load()), attr=''arg'', ctx=Load()), generators=[comprehension(target=Name(id=''arg'',
    ctx=Store()), iter=Attribute(value=Attribute(value=Name(id=''node'', ctx=Load()),
    attr=''args'', ctx=Load()), attr=''args'', ctx=Load()), ifs=[], is_async=0)]),
    orelse=Constant(value=None)), IfExp(test=Compare(left=Name(id=''node_type'', ctx=Load()),
    ops=[In()], comparators=[List(elts=[Constant(value=''function''), Constant(value=''method'')],
    ctx=Load())]), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''unparse'', ctx=Load()), args=[Name(id=''d'', ctx=Load())], keywords=[]),
    generators=[comprehension(target=Name(id=''d'', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''args'', ctx=Load()), attr=''defaults'', ctx=Load()), ifs=[],
    is_async=0)]), orelse=Constant(value=None)), ListComp(elt=IfExp(test=Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''value'', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]),
    body=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''unparse'',
    ctx=Load()), args=[Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''value'',
    ctx=Load())], keywords=[]), orelse=Constant(value=''None'')), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Return'', ctx=Load())], keywords=[])], is_async=0)]), Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Name(id=''set'', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Attribute(value=Name(id=''n'',
    ctx=Load()), attr=''func'', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id=''n'',
    ctx=Store()), iter=Call(func=Name(id=''get_all_calls'', ctx=Load()), args=[Name(id=''node'',
    ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[]),
    Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Name(id=''set'', ctx=Load()),
    args=[ListComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''unparse'',
    ctx=Load()), args=[Name(id=''target'', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Assign'', ctx=Load())], keywords=[])], is_async=0), comprehension(target=Name(id=''target'',
    ctx=Store()), iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''targets'',
    ctx=Load()), ifs=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''target'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Name'', ctx=Load())],
    keywords=[])], is_async=0)])], keywords=[])], keywords=[]), IfExp(test=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''decorator_list'', ctx=Load()), body=Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Name(id=''set'', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Name(id=''decorator'', ctx=Load())],
    keywords=[]), generators=[comprehension(target=Name(id=''decorator'', ctx=Store()),
    iter=Attribute(value=Name(id=''node'', ctx=Load()), attr=''decorator_list'', ctx=Load()),
    ifs=[], is_async=0)])], keywords=[])], keywords=[]), orelse=List(elts=[], ctx=Load())),
    Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Name(id=''set'', ctx=Load()),
    args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''unparse'', ctx=Load()), args=[Attribute(value=Name(id=''subnode'', ctx=Load()),
    attr=''annotation'', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''AnnAssign'', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''annotation'', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])])],
    is_async=0)])], keywords=[])], keywords=[]), Call(func=Name(id=''list'', ctx=Load()),
    args=[Call(func=Name(id=''set'', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''unparse'', ctx=Load()), args=[Name(id=''subnode'', ctx=Load())],
    keywords=[]), generators=[comprehension(target=Name(id=''subnode'', ctx=Store()),
    iter=Name(id=''node_walk'', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Attribute'', ctx=Load())], keywords=[]), Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''ctx'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Store'', ctx=Load())],
    keywords=[])])], is_async=0)])], keywords=[])], keywords=[])])), If(test=BoolOp(op=Or(),
    values=[Compare(left=Name(id=''node_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''class'')]),
    Compare(left=Name(id=''node_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''method'')])]),
    body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''node_type'', ctx=Load()),
    ops=[Eq()], comparators=[Constant(value=''method'')]), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load())]), body=[Assign(targets=[Name(id=''attributes'',
    ctx=Store())], value=ListComp(elt=Attribute(value=Name(id=''target'', ctx=Load()),
    attr=''attr'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Assign'', ctx=Load())], keywords=[])], is_async=0), comprehension(target=Name(id=''target'',
    ctx=Store()), iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''targets'',
    ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load()),
    args=[Name(id=''target'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''Attribute'', ctx=Load())], keywords=[]), Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Attribute(value=Name(id=''target'', ctx=Load()), attr=''value'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Name'', ctx=Load())],
    keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id=''target'',
    ctx=Load()), attr=''value'', ctx=Load()), attr=''id'', ctx=Load()), ops=[Eq()],
    comparators=[Constant(value=''self'')])])], is_async=0)])), If(test=Name(id=''attributes'',
    ctx=Load()), body=[If(test=Compare(left=Constant(value=''class_attributes''),
    ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''current_class'', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load()), ctx=Load()), slice=Constant(value=''class_attributes''),
    ctx=Load()), attr=''extend'', ctx=Load()), args=[Name(id=''attributes'', ctx=Load())],
    keywords=[]))], orelse=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), slice=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''current_class'', ctx=Load()), ctx=Load()), slice=Constant(value=''class_attributes''),
    ctx=Store())], value=Name(id=''attributes'', ctx=Load()))])], orelse=[])], orelse=[]),
    If(test=Compare(left=Name(id=''node_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''class'')]),
    body=[Expr(value=Call(func=Attribute(value=Name(id=''details'', ctx=Load()), attr=''update'',
    ctx=Load()), args=[Dict(keys=[Constant(value=''class_attributes''), Constant(value=''class_methods''),
    Constant(value=''class_inheritance''), Constant(value=''class_static_methods'')],
    values=[ListComp(elt=Attribute(value=Name(id=''target'', ctx=Load()), attr=''attr'',
    ctx=Load()), generators=[comprehension(target=Name(id=''subnode'', ctx=Store()),
    iter=Attribute(value=Name(id=''node'', ctx=Load()), attr=''body'', ctx=Load()),
    ifs=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''subnode'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Assign'', ctx=Load())],
    keywords=[])], is_async=0), comprehension(target=Name(id=''target'', ctx=Store()),
    iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''targets'', ctx=Load()),
    ifs=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''target'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Attribute'',
    ctx=Load())], keywords=[])], is_async=0)]), ListComp(elt=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''name'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Attribute(value=Name(id=''node'', ctx=Load()), attr=''body'',
    ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load()),
    args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''FunctionDef'', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''name'', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''__init__'')])])],
    is_async=0)]), IfExp(test=Attribute(value=Name(id=''node'', ctx=Load()), attr=''bases'',
    ctx=Load()), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()),
    attr=''unparse'', ctx=Load()), args=[Name(id=''base'', ctx=Load())], keywords=[]),
    generators=[comprehension(target=Name(id=''base'', ctx=Store()), iter=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''bases'', ctx=Load()), ifs=[], is_async=0)]), orelse=List(elts=[],
    ctx=Load())), ListComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''name'',
    ctx=Load()), generators=[comprehension(target=Name(id=''subnode'', ctx=Store()),
    iter=Attribute(value=Name(id=''node'', ctx=Load()), attr=''body'', ctx=Load()),
    ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''subnode'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''FunctionDef'',
    ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''name'', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''__init__'')]),
    Call(func=Name(id=''any'', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(),
    values=[Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''decorator'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''Name'', ctx=Load())],
    keywords=[]), Compare(left=Attribute(value=Name(id=''decorator'', ctx=Load()),
    attr=''id'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''staticmethod'')])]),
    generators=[comprehension(target=Name(id=''decorator'', ctx=Store()), iter=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''decorator_list'', ctx=Load()), ifs=[], is_async=0)])], keywords=[])])],
    is_async=0)])])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id=''details'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''Dict'', ctx=Load()),
    slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load())), FunctionDef(name=''analyze'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''AST'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Assign(targets=[Name(id=''node_walk'', ctx=Store())], value=Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''walk'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[])], keywords=[])),
    Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''visit'',
    ctx=Load()), args=[Name(id=''node'', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Store())], value=Dict(keys=[Constant(value=''file_code''),
    Constant(value=''file_ast''), Constant(value=''file_dependencies''), Constant(value=''file_functions''),
    Constant(value=''file_classes''), Constant(value=''file_control_flow'')], values=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''code'', ctx=Load()), Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''node'', ctx=Load())],
    keywords=[]), Call(func=Name(id=''list'', ctx=Load()), args=[BinOp(left=SetComp(elt=Attribute(value=Name(id=''alias'',
    ctx=Load()), attr=''name'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''Import'', ctx=Load())], keywords=[])], is_async=0), comprehension(target=Name(id=''alias'',
    ctx=Store()), iter=Attribute(value=Name(id=''subnode'', ctx=Load()), attr=''names'',
    ctx=Load()), ifs=[], is_async=0)]), op=BitOr(), right=SetComp(elt=Attribute(value=Name(id=''subnode'',
    ctx=Load()), attr=''module'', ctx=Load()), generators=[comprehension(target=Name(id=''subnode'',
    ctx=Store()), iter=Name(id=''node_walk'', ctx=Load()), ifs=[Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''subnode'', ctx=Load()), Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''ImportFrom'', ctx=Load())], keywords=[])], is_async=0)]))],
    keywords=[]), Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''functions'', ctx=Load()), attr=''keys'', ctx=Load()), args=[],
    keywords=[])], keywords=[]), Call(func=Name(id=''list'', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), attr=''keys'', ctx=Load()), args=[],
    keywords=[])], keywords=[]), Call(func=Name(id=''get_control_flow'', ctx=Load()),
    args=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''code'', ctx=Load())],
    keywords=[])])), Assign(targets=[Name(id=''dependencies'', ctx=Store())], value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Load()), slice=Constant(value=''file_dependencies''),
    ctx=Load())), Assign(targets=[Name(id=''function_defs'', ctx=Store())], value=ListComp(elt=Dict(keys=[Name(id=''func_name'',
    ctx=Load())], values=[Dict(keys=[Constant(value=''inputs''), Constant(value=''calls''),
    Constant(value=''returns'')], values=[Subscript(value=Name(id=''details'', ctx=Load()),
    slice=Constant(value=''function_inputs''), ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''function_calls''), ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''function_returns''), ctx=Load())])]), generators=[comprehension(target=Tuple(elts=[Name(id=''func_name'',
    ctx=Store()), Name(id=''details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''functions'', ctx=Load()), attr=''items'', ctx=Load()), args=[],
    keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id=''class_defs'',
    ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id=''class_name'',
    ctx=Store()), Name(id=''class_details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''classes'', ctx=Load()), attr=''items'', ctx=Load()), args=[],
    keywords=[]), body=[Assign(targets=[Name(id=''method_defs'', ctx=Store())], value=Dict(keys=[],
    values=[])), For(target=Tuple(elts=[Name(id=''method_name'', ctx=Store()), Name(id=''details'',
    ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_details'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id=''method_name'',
    ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[]), body=[Assign(targets=[Subscript(value=Name(id=''method_defs'', ctx=Load()),
    slice=Subscript(value=Name(id=''method_name'', ctx=Load()), slice=Slice(lower=Call(func=Name(id=''len'',
    ctx=Load()), args=[Constant(value=''class_method_'')], keywords=[])), ctx=Load()),
    ctx=Store())], value=Dict(keys=[Constant(value=''inputs''), Constant(value=''calls''),
    Constant(value=''returns'')], values=[Subscript(value=Name(id=''details'', ctx=Load()),
    slice=Constant(value=''method_inputs''), ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''method_calls''), ctx=Load()), Subscript(value=Name(id=''details'',
    ctx=Load()), slice=Constant(value=''method_returns''), ctx=Load())]))], orelse=[])],
    orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''class_defs'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[Dict(keys=[Name(id=''class_name'', ctx=Load())],
    values=[Dict(keys=[Constant(value=''method_defs'')], values=[Name(id=''method_defs'',
    ctx=Load())])])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_info'', ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Store())], value=Dict(keys=[Constant(value=''dependencies''), Constant(value=''function_defs''),
    Constant(value=''class_defs'')], values=[Name(id=''dependencies'', ctx=Load()),
    Name(id=''function_defs'', ctx=Load()), Name(id=''class_defs'', ctx=Load())]))],
    decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name=''get_control_flow'',
    args=arguments(posonlyargs=[], args=[arg(arg=''code'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Extract
    control flow keywords from source code.\n    Args:\n        code: str: The source
    code to extract from.\n    Returns:\n        str: The control flow keywords in
    the code.\n    '')), Assign(targets=[Name(id=''visitor'', ctx=Store())], value=Call(func=Name(id=''ControlFlowVisitor'',
    ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id=''tree'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''ast'', ctx=Load()), attr=''parse'',
    ctx=Load()), args=[Name(id=''code'', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''visit'', ctx=Load()), args=[Name(id=''tree'', ctx=Load())],
    keywords=[])), Return(value=Call(func=Attribute(value=Name(id=''visitor'', ctx=Load()),
    attr=''get_control_flow'', ctx=Load()), args=[], keywords=[]))], decorator_list=[],
    returns=Name(id=''str'', ctx=Load())), FunctionDef(name=''code_graph'', args=arguments(posonlyargs=[],
    args=[arg(arg=''file_summary'', annotation=Subscript(value=Name(id=''Dict'', ctx=Load()),
    slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''Union'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''Dict'', ctx=Load()), Name(id=''str'',
    ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg=''internal_only'',
    annotation=Name(id=''bool'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]),
    body=[Expr(value=Constant(value=''\n    Create a dictionary representation of
    file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The
    details extracted from the file.\n        internal_only: bool: If True, only include
    function calls where both the caller and called function are within the file.\n    Returns:\n        dict:
    A dictionary with nodes and edges representing the relationships\n            in
    the code.\n    '')), Assign(targets=[Name(id=''G'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''nx'',
    ctx=Load()), attr=''DiGraph'', ctx=Load()), args=[], keywords=[])), For(target=Name(id=''function_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''function_defs''),
    ctx=Load()), body=[For(target=Name(id=''function_name'', ctx=Store()), iter=Call(func=Attribute(value=Name(id=''function_def'',
    ctx=Load()), attr=''keys'', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''function_name'',
    ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id=''class_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''class_defs''),
    ctx=Load()), body=[For(target=Tuple(elts=[Name(id=''class_name'', ctx=Store()),
    Name(id=''class_details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_def'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''class_name'', ctx=Load())],
    keywords=[])), For(target=Name(id=''method_name'', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id=''class_details'',
    ctx=Load()), slice=Constant(value=''method_defs''), ctx=Load()), attr=''keys'',
    ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id=''qualified_method_name'',
    ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id=''class_name'',
    ctx=Load()), conversion=-1), Constant(value=''.''), FormattedValue(value=Name(id=''method_name'',
    ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''qualified_method_name'',
    ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_edge'', ctx=Load()), args=[Name(id=''class_name'', ctx=Load()),
    Name(id=''qualified_method_name'', ctx=Load())], keywords=[]))], orelse=[])],
    orelse=[])], orelse=[]), For(target=Name(id=''function_def'', ctx=Store()), iter=Subscript(value=Name(id=''file_summary'',
    ctx=Load()), slice=Constant(value=''function_defs''), ctx=Load()), body=[For(target=Tuple(elts=[Name(id=''function_name'',
    ctx=Store()), Name(id=''function_details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''function_def'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id=''called_func'',
    ctx=Store()), iter=Subscript(value=Name(id=''function_details'', ctx=Load()),
    slice=Constant(value=''calls''), ctx=Load()), body=[Assign(targets=[Name(id=''edge_data'',
    ctx=Store())], value=Dict(keys=[], values=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(),
    operand=Name(id=''internal_only'', ctx=Load())), Compare(left=Name(id=''called_func'',
    ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id=''G'', ctx=Load()),
    attr=''nodes'', ctx=Load())])]), body=[If(test=Compare(left=Constant(value=''.''),
    ops=[In()], comparators=[Name(id=''called_func'', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id=''called_class_name'',
    ctx=Store()), Name(id=''called_method_name'', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id=''called_func'',
    ctx=Load()), attr=''rsplit'', ctx=Load()), args=[Constant(value=''.''), Constant(value=1)],
    keywords=[])), Assign(targets=[Name(id=''target_inputs'', ctx=Store()), Name(id=''target_returns'',
    ctx=Store())], value=Constant(value=None)), For(target=Name(id=''class_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''class_defs''),
    ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id=''class_def'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''called_class_name'', ctx=Load())],
    keywords=[]), body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store())],
    value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
    ctx=Load()), slice=Name(id=''called_class_name'', ctx=Load()), ctx=Load()), slice=Constant(value=''method_defs''),
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''called_method_name'',
    ctx=Load()), Dict(keys=[], values=[])], keywords=[]), attr=''get'', ctx=Load()),
    args=[Constant(value=''inputs''), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id=''target_returns'',
    ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
    ctx=Load()), slice=Name(id=''called_class_name'', ctx=Load()), ctx=Load()), slice=Constant(value=''method_defs''),
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''called_method_name'',
    ctx=Load()), Dict(keys=[], values=[])], keywords=[]), attr=''get'', ctx=Load()),
    args=[Constant(value=''returns''), List(elts=[], ctx=Load())], keywords=[]))],
    orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id=''target_inputs'', ctx=Store()),
    Name(id=''target_returns'', ctx=Store())], value=Constant(value=None)), For(target=Name(id=''function_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''function_defs''),
    ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id=''function_def'',
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''called_func'', ctx=Load())],
    keywords=[]), body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store())],
    value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'', ctx=Load()),
    slice=Name(id=''called_func'', ctx=Load()), ctx=Load()), attr=''get'', ctx=Load()),
    args=[Constant(value=''inputs''), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id=''target_returns'',
    ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'',
    ctx=Load()), slice=Name(id=''called_func'', ctx=Load()), ctx=Load()), attr=''get'',
    ctx=Load()), args=[Constant(value=''returns''), List(elts=[], ctx=Load())], keywords=[]))],
    orelse=[])], orelse=[])]), If(test=Name(id=''target_inputs'', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
    ctx=Load()), slice=Constant(value=''target_inputs''), ctx=Store())], value=Name(id=''target_inputs'',
    ctx=Load()))], orelse=[]), If(test=Name(id=''target_returns'', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
    ctx=Load()), slice=Constant(value=''target_returns''), ctx=Store())], value=Name(id=''target_returns'',
    ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_edge'', ctx=Load()), args=[Name(id=''function_name'',
    ctx=Load()), Call(func=Attribute(value=Name(id=''called_func'', ctx=Load()), attr=''strip'',
    ctx=Load()), args=[], keywords=[])], keywords=[keyword(value=Name(id=''edge_data'',
    ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id=''class_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''class_defs''),
    ctx=Load()), body=[For(target=Tuple(elts=[Name(id=''class_name'', ctx=Store()),
    Name(id=''class_details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_def'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id=''method_name'',
    ctx=Store()), Name(id=''method_details'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id=''class_details'',
    ctx=Load()), slice=Constant(value=''method_defs''), ctx=Load()), attr=''items'',
    ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id=''called_func'',
    ctx=Store()), iter=Subscript(value=Name(id=''method_details'', ctx=Load()), slice=Constant(value=''calls''),
    ctx=Load()), body=[Assign(targets=[Name(id=''edge_data'', ctx=Store())], value=Dict(keys=[],
    values=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id=''internal_only'',
    ctx=Load())), Compare(left=Name(id=''called_func'', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''nodes'', ctx=Load())])]), body=[If(test=Compare(left=Constant(value=''.''),
    ops=[In()], comparators=[Name(id=''called_func'', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id=''called_class_name'',
    ctx=Store()), Name(id=''called_method_name'', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id=''called_func'',
    ctx=Load()), attr=''rsplit'', ctx=Load()), args=[Constant(value=''.''), Constant(value=1)],
    keywords=[])), Assign(targets=[Name(id=''target_inputs'', ctx=Store()), Name(id=''target_returns'',
    ctx=Store())], value=Constant(value=None)), For(target=Name(id=''class_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''class_defs''),
    ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id=''class_def'', ctx=Load()),
    attr=''get'', ctx=Load()), args=[Name(id=''called_class_name'', ctx=Load())],
    keywords=[]), body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store())],
    value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
    ctx=Load()), slice=Name(id=''called_class_name'', ctx=Load()), ctx=Load()), slice=Constant(value=''method_defs''),
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''called_method_name'',
    ctx=Load()), Dict(keys=[], values=[])], keywords=[]), attr=''get'', ctx=Load()),
    args=[Constant(value=''inputs''), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id=''target_returns'',
    ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
    ctx=Load()), slice=Name(id=''called_class_name'', ctx=Load()), ctx=Load()), slice=Constant(value=''method_defs''),
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''called_method_name'',
    ctx=Load()), Dict(keys=[], values=[])], keywords=[]), attr=''get'', ctx=Load()),
    args=[Constant(value=''returns''), List(elts=[], ctx=Load())], keywords=[]))],
    orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id=''target_inputs'', ctx=Store()),
    Name(id=''target_returns'', ctx=Store())], value=Constant(value=None)), For(target=Name(id=''function_def'',
    ctx=Store()), iter=Subscript(value=Name(id=''file_summary'', ctx=Load()), slice=Constant(value=''function_defs''),
    ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id=''function_def'',
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''called_func'', ctx=Load())],
    keywords=[]), body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store())],
    value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'', ctx=Load()),
    slice=Name(id=''called_func'', ctx=Load()), ctx=Load()), attr=''get'', ctx=Load()),
    args=[Constant(value=''inputs''), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id=''target_returns'',
    ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'',
    ctx=Load()), slice=Name(id=''called_func'', ctx=Load()), ctx=Load()), attr=''get'',
    ctx=Load()), args=[Constant(value=''returns''), List(elts=[], ctx=Load())], keywords=[]))],
    orelse=[])], orelse=[])]), If(test=Name(id=''target_inputs'', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
    ctx=Load()), slice=Constant(value=''target_inputs''), ctx=Store())], value=Name(id=''target_inputs'',
    ctx=Load()))], orelse=[]), If(test=Name(id=''target_returns'', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
    ctx=Load()), slice=Constant(value=''target_returns''), ctx=Store())], value=Name(id=''target_returns'',
    ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_edge'', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id=''class_name'',
    ctx=Load()), conversion=-1), Constant(value=''.''), FormattedValue(value=Name(id=''method_name'',
    ctx=Load()), conversion=-1)]), Call(func=Attribute(value=Name(id=''called_func'',
    ctx=Load()), attr=''strip'', ctx=Load()), args=[], keywords=[])], keywords=[keyword(value=Name(id=''edge_data'',
    ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id=''nodes'',
    ctx=Store())], value=Call(func=Name(id=''list'', ctx=Load()), args=[Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''nodes'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''edges'',
    ctx=Store())], value=ListComp(elt=Dict(keys=[Constant(value=''source''), Constant(value=''target''),
    None], values=[Call(func=Name(id=''str'', ctx=Load()), args=[Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Call(func=Name(id=''str'',
    ctx=Load()), args=[Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=1),
    ctx=Load())], keywords=[]), Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=2),
    ctx=Load())]), generators=[comprehension(target=Name(id=''edge'', ctx=Store()),
    iter=Call(func=Attribute(value=Attribute(value=Name(id=''G'', ctx=Load()), attr=''edges'',
    ctx=Load()), attr=''data'', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])),
    Return(value=Dict(keys=[Constant(value=''nodes''), Constant(value=''edges'')],
    values=[Name(id=''nodes'', ctx=Load()), Name(id=''edges'', ctx=Load())]))], decorator_list=[],
    returns=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Union'', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load()), Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''str'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())],
    ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name=''get_python_file_details'',
    args=arguments(posonlyargs=[], args=[arg(arg=''file_path'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Extract
    details from a Python file.\n    Args:\n        file_path: str: The path to the
    Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted
    from the file.\n    '')), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Name(id=''file_path'', ctx=Load()), Constant(value=''r'')],
    keywords=[keyword(arg=''encoding'', value=Constant(value=''utf-8'')), keyword(arg=''errors'',
    value=Constant(value=''ignore''))]), optional_vars=Name(id=''f'', ctx=Store()))],
    body=[Assign(targets=[Name(id=''code'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''f'',
    ctx=Load()), attr=''read'', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id=''PermissionError'',
    ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''warning'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Permission
    denied: ''), FormattedValue(value=Name(id=''file_path'', ctx=Load()), conversion=-1)])],
    keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[]),
    Try(body=[Assign(targets=[Name(id=''tree'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''ast'',
    ctx=Load()), attr=''parse'', ctx=Load()), args=[Name(id=''code'', ctx=Load())],
    keywords=[]))], handlers=[ExceptHandler(type=Name(id=''SyntaxError'', ctx=Load()),
    body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''warning'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Syntax error in file: ''),
    FormattedValue(value=Name(id=''file_path'', ctx=Load()), conversion=-1)])], keywords=[])),
    Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id=''visitor'',
    ctx=Store())], value=Call(func=Name(id=''CodeVisitor'', ctx=Load()), args=[Name(id=''code'',
    ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''analyze'', ctx=Load()), args=[Name(id=''tree'', ctx=Load())],
    keywords=[])), Assign(targets=[Name(id=''file_details'', ctx=Store())], value=Dict(keys=[Constant(value=''file_info''),
    Constant(value=''functions''), Constant(value=''classes'')], values=[Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''file_info'', ctx=Load()), Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''functions'', ctx=Load()), Attribute(value=Name(id=''visitor'',
    ctx=Load()), attr=''classes'', ctx=Load())])), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''internal_code_graph''),
    ctx=Store())], value=Call(func=Name(id=''code_graph'', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''entire_code_graph''),
    ctx=Store())], value=Call(func=Name(id=''code_graph'', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Load())], keywords=[keyword(arg=''internal_only'', value=Constant(value=False))])),
    Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'', ctx=Load()),
    slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dumps'', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Load())], keywords=[]), attr=''replace'', ctx=Load()), args=[Constant(value=''"''),
    Constant(value='''')], keywords=[])), Return(value=Name(id=''file_details'', ctx=Load()))],
    decorator_list=[], returns=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Subscript(value=Name(id=''Union'', ctx=Load()), slice=Tuple(elts=[Name(id=''Dict'',
    ctx=Load()), Name(id=''str'', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()),
    ctx=Load()))], type_ignores=[])'
  file_dependencies:
  - logging
  - ast
  - re
  - networkx
  - json
  - typing
  file_functions:
  - get_all_calls
  - get_control_flow
  - code_graph
  - get_python_file_details
  file_classes:
  - ControlFlowVisitor
  - CodeVisitor
  file_control_flow: module -> class -> def __init__ -> def generic_visit -> if ->
    if -> def get_control_flow -> def get_all_calls -> for -> if -> class -> def __init__
    -> def visit_FunctionDef -> if -> def visit_ClassDef -> def extract_details ->
    if -> if -> if -> if -> if -> def analyze -> for -> for -> if -> def get_control_flow
    -> def code_graph -> for -> for -> for -> for -> for -> for -> for -> for -> if
    -> if -> for -> if -> for -> if -> if -> if -> for -> for -> for -> for -> if
    -> if -> for -> if -> for -> if -> if -> if -> def get_python_file_details ->
    try -> with -> except -> try -> except
  file_summary: '{dependencies: [logging, ast, re, networkx, json, typing], function_defs:
    [{get_all_calls: {inputs: [node], calls: [isinstance, get_all_calls, calls.extend,
    calls.append, ast.iter_child_nodes], returns: [calls]}}, {get_control_flow: {inputs:
    [code], calls: [ast.parse, visitor.visit, visitor.get_control_flow, ControlFlowVisitor],
    returns: [visitor.get_control_flow()]}}, {code_graph: {inputs: [file_summary,
    internal_only], calls: [class_details[''method_defs''].keys, G.add_edge, G.add_node,
    function_def[called_func].get, function_def.keys, class_def.items, str, class_def[called_class_name][''method_defs''].get,
    G.edges.data, called_func.strip, function_def.get, nx.DiGraph, class_def.get,
    function_def.items, class_def[called_class_name][''method_defs''].get(called_method_name,
    {}).get, called_func.rsplit, class_details[''method_defs''].items, list], returns:
    [{''nodes'': nodes, ''edges'': edges}]}}, {get_python_file_details: {inputs: [file_path],
    calls: [open, logging.warning, json.dumps(file_details[''file_info''][''file_summary'']).replace,
    json.dumps, CodeVisitor, f.read, visitor.analyze, ast.parse, code_graph], returns:
    [file_details, None, None]}}], class_defs: [{ControlFlowVisitor: {method_defs:
    {__init__: {inputs: [self], calls: [], returns: []}, generic_visit: {inputs: [self,
    node], calls: [isinstance, super().generic_visit, super, self.node_type_to_keyword.get,
    self.control_flow.append, type], returns: []}, get_control_flow: {inputs: [self],
    calls: ['' -> ''.join], returns: ['' -> ''.join(self.control_flow)]}}}}, {CodeVisitor:
    {method_defs: {__init__: {inputs: [self, code], calls: [], returns: []}, visit_FunctionDef:
    {inputs: [self, node], calls: [self.generic_visit, self.extract_details], returns:
    []}, visit_ClassDef: {inputs: [self, node], calls: [self.generic_visit, self.extract_details],
    returns: []}, extract_details: {inputs: [self, node, node_type], calls: [isinstance,
    any, get_all_calls, details.update, ast.unparse, ast.get_docstring, self.classes[self.current_class][''class_attributes''].extend,
    ast.dump, ast.walk, set, list], returns: [details]}, analyze: {inputs: [self,
    node], calls: [self.classes.items, get_control_flow, self.visit, isinstance, self.functions.keys,
    method_name.startswith, self.classes.keys, len, self.functions.items, class_details.items,
    ast.dump, ast.walk, class_defs.append, list], returns: []}}}}]}'
  internal_code_graph:
    nodes:
    - get_all_calls
    - get_control_flow
    - code_graph
    - get_python_file_details
    - ControlFlowVisitor
    - ControlFlowVisitor.__init__
    - ControlFlowVisitor.generic_visit
    - ControlFlowVisitor.get_control_flow
    - CodeVisitor
    - CodeVisitor.__init__
    - CodeVisitor.visit_FunctionDef
    - CodeVisitor.visit_ClassDef
    - CodeVisitor.extract_details
    - CodeVisitor.analyze
    - isinstance
    - super().generic_visit
    - super
    - self.node_type_to_keyword.get
    - self.control_flow.append
    - type
    - ''' -> ''.join'
    - self.generic_visit
    - self.extract_details
    - any
    - details.update
    - ast.unparse
    - ast.get_docstring
    - self.classes[self.current_class]['class_attributes'].extend
    - ast.dump
    - ast.walk
    - set
    - list
    - self.classes.items
    - self.visit
    - self.functions.keys
    - method_name.startswith
    - self.classes.keys
    - len
    - self.functions.items
    - class_details.items
    - class_defs.append
    edges:
    - source: get_all_calls
      target: get_all_calls
      target_inputs:
      - node
      target_returns:
      - calls
    - source: get_control_flow
      target: ControlFlowVisitor
    - source: get_python_file_details
      target: CodeVisitor
    - source: get_python_file_details
      target: code_graph
      target_inputs:
      - file_summary
      - internal_only
      target_returns:
      - '{''nodes'': nodes, ''edges'': edges}'
    - source: ControlFlowVisitor
      target: ControlFlowVisitor.__init__
    - source: ControlFlowVisitor
      target: ControlFlowVisitor.generic_visit
    - source: ControlFlowVisitor
      target: ControlFlowVisitor.get_control_flow
    - source: ControlFlowVisitor.generic_visit
      target: isinstance
    - source: ControlFlowVisitor.generic_visit
      target: super().generic_visit
    - source: ControlFlowVisitor.generic_visit
      target: super
    - source: ControlFlowVisitor.generic_visit
      target: self.node_type_to_keyword.get
    - source: ControlFlowVisitor.generic_visit
      target: self.control_flow.append
    - source: ControlFlowVisitor.generic_visit
      target: type
    - source: ControlFlowVisitor.get_control_flow
      target: ''' -> ''.join'
    - source: CodeVisitor
      target: CodeVisitor.__init__
    - source: CodeVisitor
      target: CodeVisitor.visit_FunctionDef
    - source: CodeVisitor
      target: CodeVisitor.visit_ClassDef
    - source: CodeVisitor
      target: CodeVisitor.extract_details
    - source: CodeVisitor
      target: CodeVisitor.analyze
    - source: CodeVisitor.visit_FunctionDef
      target: self.generic_visit
    - source: CodeVisitor.visit_FunctionDef
      target: self.extract_details
    - source: CodeVisitor.visit_ClassDef
      target: self.generic_visit
    - source: CodeVisitor.visit_ClassDef
      target: self.extract_details
    - source: CodeVisitor.extract_details
      target: isinstance
    - source: CodeVisitor.extract_details
      target: any
    - source: CodeVisitor.extract_details
      target: get_all_calls
      target_inputs:
      - node
      target_returns:
      - calls
    - source: CodeVisitor.extract_details
      target: details.update
    - source: CodeVisitor.extract_details
      target: ast.unparse
    - source: CodeVisitor.extract_details
      target: ast.get_docstring
    - source: CodeVisitor.extract_details
      target: self.classes[self.current_class]['class_attributes'].extend
    - source: CodeVisitor.extract_details
      target: ast.dump
    - source: CodeVisitor.extract_details
      target: ast.walk
    - source: CodeVisitor.extract_details
      target: set
    - source: CodeVisitor.extract_details
      target: list
    - source: CodeVisitor.analyze
      target: self.classes.items
    - source: CodeVisitor.analyze
      target: get_control_flow
      target_inputs:
      - code
      target_returns:
      - visitor.get_control_flow()
    - source: CodeVisitor.analyze
      target: self.visit
    - source: CodeVisitor.analyze
      target: isinstance
    - source: CodeVisitor.analyze
      target: self.functions.keys
    - source: CodeVisitor.analyze
      target: method_name.startswith
    - source: CodeVisitor.analyze
      target: self.classes.keys
    - source: CodeVisitor.analyze
      target: len
    - source: CodeVisitor.analyze
      target: self.functions.items
    - source: CodeVisitor.analyze
      target: class_details.items
    - source: CodeVisitor.analyze
      target: ast.dump
    - source: CodeVisitor.analyze
      target: ast.walk
    - source: CodeVisitor.analyze
      target: class_defs.append
    - source: CodeVisitor.analyze
      target: list
  entire_code_graph:
    nodes:
    - get_all_calls
    - get_control_flow
    - code_graph
    - get_python_file_details
    - ControlFlowVisitor
    - ControlFlowVisitor.__init__
    - ControlFlowVisitor.generic_visit
    - ControlFlowVisitor.get_control_flow
    - CodeVisitor
    - CodeVisitor.__init__
    - CodeVisitor.visit_FunctionDef
    - CodeVisitor.visit_ClassDef
    - CodeVisitor.extract_details
    - CodeVisitor.analyze
    - isinstance
    - calls.extend
    - calls.append
    - ast.iter_child_nodes
    - ast.parse
    - visitor.visit
    - visitor.get_control_flow
    - class_details['method_defs'].keys
    - G.add_edge
    - G.add_node
    - function_def[called_func].get
    - function_def.keys
    - class_def.items
    - str
    - class_def[called_class_name]['method_defs'].get
    - G.edges.data
    - called_func.strip
    - function_def.get
    - nx.DiGraph
    - class_def.get
    - function_def.items
    - class_def[called_class_name]['method_defs'].get(called_method_name, {}).get
    - called_func.rsplit
    - class_details['method_defs'].items
    - list
    - open
    - logging.warning
    - json.dumps(file_details['file_info']['file_summary']).replace
    - json.dumps
    - f.read
    - visitor.analyze
    - super().generic_visit
    - super
    - self.node_type_to_keyword.get
    - self.control_flow.append
    - type
    - ''' -> ''.join'
    - self.generic_visit
    - self.extract_details
    - any
    - details.update
    - ast.unparse
    - ast.get_docstring
    - self.classes[self.current_class]['class_attributes'].extend
    - ast.dump
    - ast.walk
    - set
    - self.classes.items
    - self.visit
    - self.functions.keys
    - method_name.startswith
    - self.classes.keys
    - len
    - self.functions.items
    - class_details.items
    - class_defs.append
    edges:
    - source: get_all_calls
      target: isinstance
    - source: get_all_calls
      target: get_all_calls
      target_inputs:
      - node
      target_returns:
      - calls
    - source: get_all_calls
      target: calls.extend
    - source: get_all_calls
      target: calls.append
    - source: get_all_calls
      target: ast.iter_child_nodes
    - source: get_control_flow
      target: ast.parse
    - source: get_control_flow
      target: visitor.visit
    - source: get_control_flow
      target: visitor.get_control_flow
    - source: get_control_flow
      target: ControlFlowVisitor
    - source: code_graph
      target: class_details['method_defs'].keys
    - source: code_graph
      target: G.add_edge
    - source: code_graph
      target: G.add_node
    - source: code_graph
      target: function_def[called_func].get
    - source: code_graph
      target: function_def.keys
    - source: code_graph
      target: class_def.items
    - source: code_graph
      target: str
    - source: code_graph
      target: class_def[called_class_name]['method_defs'].get
    - source: code_graph
      target: G.edges.data
    - source: code_graph
      target: called_func.strip
    - source: code_graph
      target: function_def.get
    - source: code_graph
      target: nx.DiGraph
    - source: code_graph
      target: class_def.get
    - source: code_graph
      target: function_def.items
    - source: code_graph
      target: class_def[called_class_name]['method_defs'].get(called_method_name,
        {}).get
    - source: code_graph
      target: called_func.rsplit
    - source: code_graph
      target: class_details['method_defs'].items
    - source: code_graph
      target: list
    - source: get_python_file_details
      target: open
    - source: get_python_file_details
      target: logging.warning
    - source: get_python_file_details
      target: json.dumps(file_details['file_info']['file_summary']).replace
    - source: get_python_file_details
      target: json.dumps
    - source: get_python_file_details
      target: CodeVisitor
    - source: get_python_file_details
      target: f.read
    - source: get_python_file_details
      target: visitor.analyze
    - source: get_python_file_details
      target: ast.parse
    - source: get_python_file_details
      target: code_graph
      target_inputs:
      - file_summary
      - internal_only
      target_returns:
      - '{''nodes'': nodes, ''edges'': edges}'
    - source: ControlFlowVisitor
      target: ControlFlowVisitor.__init__
    - source: ControlFlowVisitor
      target: ControlFlowVisitor.generic_visit
    - source: ControlFlowVisitor
      target: ControlFlowVisitor.get_control_flow
    - source: ControlFlowVisitor.generic_visit
      target: isinstance
    - source: ControlFlowVisitor.generic_visit
      target: super().generic_visit
    - source: ControlFlowVisitor.generic_visit
      target: super
    - source: ControlFlowVisitor.generic_visit
      target: self.node_type_to_keyword.get
    - source: ControlFlowVisitor.generic_visit
      target: self.control_flow.append
    - source: ControlFlowVisitor.generic_visit
      target: type
    - source: ControlFlowVisitor.get_control_flow
      target: ''' -> ''.join'
    - source: CodeVisitor
      target: CodeVisitor.__init__
    - source: CodeVisitor
      target: CodeVisitor.visit_FunctionDef
    - source: CodeVisitor
      target: CodeVisitor.visit_ClassDef
    - source: CodeVisitor
      target: CodeVisitor.extract_details
    - source: CodeVisitor
      target: CodeVisitor.analyze
    - source: CodeVisitor.visit_FunctionDef
      target: self.generic_visit
    - source: CodeVisitor.visit_FunctionDef
      target: self.extract_details
    - source: CodeVisitor.visit_ClassDef
      target: self.generic_visit
    - source: CodeVisitor.visit_ClassDef
      target: self.extract_details
    - source: CodeVisitor.extract_details
      target: isinstance
    - source: CodeVisitor.extract_details
      target: any
    - source: CodeVisitor.extract_details
      target: get_all_calls
      target_inputs:
      - node
      target_returns:
      - calls
    - source: CodeVisitor.extract_details
      target: details.update
    - source: CodeVisitor.extract_details
      target: ast.unparse
    - source: CodeVisitor.extract_details
      target: ast.get_docstring
    - source: CodeVisitor.extract_details
      target: self.classes[self.current_class]['class_attributes'].extend
    - source: CodeVisitor.extract_details
      target: ast.dump
    - source: CodeVisitor.extract_details
      target: ast.walk
    - source: CodeVisitor.extract_details
      target: set
    - source: CodeVisitor.extract_details
      target: list
    - source: CodeVisitor.analyze
      target: self.classes.items
    - source: CodeVisitor.analyze
      target: get_control_flow
      target_inputs:
      - code
      target_returns:
      - visitor.get_control_flow()
    - source: CodeVisitor.analyze
      target: self.visit
    - source: CodeVisitor.analyze
      target: isinstance
    - source: CodeVisitor.analyze
      target: self.functions.keys
    - source: CodeVisitor.analyze
      target: method_name.startswith
    - source: CodeVisitor.analyze
      target: self.classes.keys
    - source: CodeVisitor.analyze
      target: len
    - source: CodeVisitor.analyze
      target: self.functions.items
    - source: CodeVisitor.analyze
      target: class_details.items
    - source: CodeVisitor.analyze
      target: ast.dump
    - source: CodeVisitor.analyze
      target: ast.walk
    - source: CodeVisitor.analyze
      target: class_defs.append
    - source: CodeVisitor.analyze
      target: list
functions:
  get_all_calls:
    function_name: get_all_calls
    function_code: "def get_all_calls(node):\n    \"\"\"\n    Recursively find all\
      \ function calls in the subtree rooted at `node`.\n    \"\"\"\n    calls = []\n\
      \    for child in ast.iter_child_nodes(node):\n        if isinstance(child,\
      \ ast.Call):\n            calls.append(child)\n        calls.extend(get_all_calls(child))\n\
      \    return calls"
    function_ast: FunctionDef(name='get_all_calls', args=arguments(posonlyargs=[],
      args=[arg(arg='node', lineno=94, col_offset=18, end_lineno=94, end_col_offset=22)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Recursively
      find all function calls in the subtree rooted at `node`.\n    ', lineno=95,
      col_offset=4, end_lineno=97, end_col_offset=7), lineno=95, col_offset=4, end_lineno=97,
      end_col_offset=7), Assign(targets=[Name(id='calls', ctx=Store(), lineno=98,
      col_offset=4, end_lineno=98, end_col_offset=9)], value=List(elts=[], ctx=Load(),
      lineno=98, col_offset=12, end_lineno=98, end_col_offset=14), lineno=98, col_offset=4,
      end_lineno=98, end_col_offset=14), For(target=Name(id='child', ctx=Store(),
      lineno=99, col_offset=8, end_lineno=99, end_col_offset=13), iter=Call(func=Attribute(value=Name(id='ast',
      ctx=Load(), lineno=99, col_offset=17, end_lineno=99, end_col_offset=20), attr='iter_child_nodes',
      ctx=Load(), lineno=99, col_offset=17, end_lineno=99, end_col_offset=37), args=[Name(id='node',
      ctx=Load(), lineno=99, col_offset=38, end_lineno=99, end_col_offset=42)], keywords=[],
      lineno=99, col_offset=17, end_lineno=99, end_col_offset=43), body=[If(test=Call(func=Name(id='isinstance',
      ctx=Load(), lineno=100, col_offset=11, end_lineno=100, end_col_offset=21), args=[Name(id='child',
      ctx=Load(), lineno=100, col_offset=22, end_lineno=100, end_col_offset=27), Attribute(value=Name(id='ast',
      ctx=Load(), lineno=100, col_offset=29, end_lineno=100, end_col_offset=32), attr='Call',
      ctx=Load(), lineno=100, col_offset=29, end_lineno=100, end_col_offset=37)],
      keywords=[], lineno=100, col_offset=11, end_lineno=100, end_col_offset=38),
      body=[Expr(value=Call(func=Attribute(value=Name(id='calls', ctx=Load(), lineno=101,
      col_offset=12, end_lineno=101, end_col_offset=17), attr='append', ctx=Load(),
      lineno=101, col_offset=12, end_lineno=101, end_col_offset=24), args=[Name(id='child',
      ctx=Load(), lineno=101, col_offset=25, end_lineno=101, end_col_offset=30)],
      keywords=[], lineno=101, col_offset=12, end_lineno=101, end_col_offset=31),
      lineno=101, col_offset=12, end_lineno=101, end_col_offset=31)], orelse=[], lineno=100,
      col_offset=8, end_lineno=101, end_col_offset=31), Expr(value=Call(func=Attribute(value=Name(id='calls',
      ctx=Load(), lineno=102, col_offset=8, end_lineno=102, end_col_offset=13), attr='extend',
      ctx=Load(), lineno=102, col_offset=8, end_lineno=102, end_col_offset=20), args=[Call(func=Name(id='get_all_calls',
      ctx=Load(), lineno=102, col_offset=21, end_lineno=102, end_col_offset=34), args=[Name(id='child',
      ctx=Load(), lineno=102, col_offset=35, end_lineno=102, end_col_offset=40)],
      keywords=[], lineno=102, col_offset=21, end_lineno=102, end_col_offset=41)],
      keywords=[], lineno=102, col_offset=8, end_lineno=102, end_col_offset=42), lineno=102,
      col_offset=8, end_lineno=102, end_col_offset=42)], orelse=[], lineno=99, col_offset=4,
      end_lineno=102, end_col_offset=42), Return(value=Name(id='calls', ctx=Load(),
      lineno=103, col_offset=11, end_lineno=103, end_col_offset=16), lineno=103, col_offset=4,
      end_lineno=103, end_col_offset=16)], decorator_list=[], lineno=94, col_offset=0,
      end_lineno=103, end_col_offset=16)
    function_docstring: Recursively find all function calls in the subtree rooted
      at `node`.
    function_inputs:
    - node
    function_defaults: []
    function_returns:
    - calls
    function_calls:
    - isinstance
    - get_all_calls
    - calls.extend
    - calls.append
    - ast.iter_child_nodes
    function_variables:
    - calls
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_control_flow:
    function_name: get_control_flow
    function_code: "def get_control_flow(code: str) -> str:\n    \"\"\"\n    Extract\
      \ control flow keywords from source code.\n    Args:\n        code: str: The\
      \ source code to extract from.\n    Returns:\n        str: The control flow\
      \ keywords in the code.\n    \"\"\"\n    visitor = ControlFlowVisitor()\n  \
      \  tree = ast.parse(code)\n    visitor.visit(tree)\n    return visitor.get_control_flow()"
    function_ast: 'FunctionDef(name=''get_control_flow'', args=arguments(posonlyargs=[],
      args=[arg(arg=''code'', annotation=Name(id=''str'', ctx=Load(), lineno=201,
      col_offset=27, end_lineno=201, end_col_offset=30), lineno=201, col_offset=21,
      end_lineno=201, end_col_offset=30)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Extract control flow keywords from source
      code.\n    Args:\n        code: str: The source code to extract from.\n    Returns:\n        str:
      The control flow keywords in the code.\n    '', lineno=202, col_offset=4, end_lineno=208,
      end_col_offset=7), lineno=202, col_offset=4, end_lineno=208, end_col_offset=7),
      Assign(targets=[Name(id=''visitor'', ctx=Store(), lineno=209, col_offset=4,
      end_lineno=209, end_col_offset=11)], value=Call(func=Name(id=''ControlFlowVisitor'',
      ctx=Load(), lineno=209, col_offset=14, end_lineno=209, end_col_offset=32), args=[],
      keywords=[], lineno=209, col_offset=14, end_lineno=209, end_col_offset=34),
      lineno=209, col_offset=4, end_lineno=209, end_col_offset=34), Assign(targets=[Name(id=''tree'',
      ctx=Store(), lineno=210, col_offset=4, end_lineno=210, end_col_offset=8)], value=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=210, col_offset=11, end_lineno=210, end_col_offset=14), attr=''parse'',
      ctx=Load(), lineno=210, col_offset=11, end_lineno=210, end_col_offset=20), args=[Name(id=''code'',
      ctx=Load(), lineno=210, col_offset=21, end_lineno=210, end_col_offset=25)],
      keywords=[], lineno=210, col_offset=11, end_lineno=210, end_col_offset=26),
      lineno=210, col_offset=4, end_lineno=210, end_col_offset=26), Expr(value=Call(func=Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=211, col_offset=4, end_lineno=211, end_col_offset=11), attr=''visit'',
      ctx=Load(), lineno=211, col_offset=4, end_lineno=211, end_col_offset=17), args=[Name(id=''tree'',
      ctx=Load(), lineno=211, col_offset=18, end_lineno=211, end_col_offset=22)],
      keywords=[], lineno=211, col_offset=4, end_lineno=211, end_col_offset=23), lineno=211,
      col_offset=4, end_lineno=211, end_col_offset=23), Return(value=Call(func=Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=212, col_offset=11, end_lineno=212, end_col_offset=18), attr=''get_control_flow'',
      ctx=Load(), lineno=212, col_offset=11, end_lineno=212, end_col_offset=35), args=[],
      keywords=[], lineno=212, col_offset=11, end_lineno=212, end_col_offset=37),
      lineno=212, col_offset=4, end_lineno=212, end_col_offset=37)], decorator_list=[],
      returns=Name(id=''str'', ctx=Load(), lineno=201, col_offset=35, end_lineno=201,
      end_col_offset=38), lineno=201, col_offset=0, end_lineno=212, end_col_offset=37)'
    function_docstring: "Extract control flow keywords from source code.\nArgs:\n\
      \    code: str: The source code to extract from.\nReturns:\n    str: The control\
      \ flow keywords in the code."
    function_inputs:
    - code
    function_defaults: []
    function_returns:
    - visitor.get_control_flow()
    function_calls:
    - ast.parse
    - visitor.visit
    - visitor.get_control_flow
    - ControlFlowVisitor
    function_variables:
    - visitor
    - tree
    function_decorators: []
    function_annotations: []
    function_properties: []
  code_graph:
    function_name: code_graph
    function_code: "def code_graph(file_summary: Dict[str, Union[Dict, str]], internal_only:\
      \ bool=True) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\
      \"\n    Create a dictionary representation of file details.\n    Args:\n   \
      \     file_summary: Dict[str, Union[Dict, str]]: The details extracted from\
      \ the file.\n        internal_only: bool: If True, only include function calls\
      \ where both the caller and called function are within the file.\n    Returns:\n\
      \        dict: A dictionary with nodes and edges representing the relationships\n\
      \            in the code.\n    \"\"\"\n    G = nx.DiGraph()\n    for function_def\
      \ in file_summary['function_defs']:\n        for function_name in function_def.keys():\n\
      \            G.add_node(function_name)\n    for class_def in file_summary['class_defs']:\n\
      \        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n\
      \            for method_name in class_details['method_defs'].keys():\n     \
      \           qualified_method_name = f'{class_name}.{method_name}'\n        \
      \        G.add_node(qualified_method_name)\n                G.add_edge(class_name,\
      \ qualified_method_name)\n    for function_def in file_summary['function_defs']:\n\
      \        for function_name, function_details in function_def.items():\n    \
      \        for called_func in function_details['calls']:\n                edge_data\
      \ = {}\n                if not internal_only or called_func in G.nodes:\n  \
      \                  if '.' in called_func:\n                        called_class_name,\
      \ called_method_name = called_func.rsplit('.', 1)\n                        target_inputs\
      \ = target_returns = None\n                        for class_def in file_summary['class_defs']:\n\
      \                            if class_def.get(called_class_name):\n        \
      \                        target_inputs = class_def[called_class_name]['method_defs'].get(called_method_name,\
      \ {}).get('inputs', [])\n                                target_returns = class_def[called_class_name]['method_defs'].get(called_method_name,\
      \ {}).get('returns', [])\n                    else:\n                      \
      \  target_inputs = target_returns = None\n                        for function_def\
      \ in file_summary['function_defs']:\n                            if function_def.get(called_func):\n\
      \                                target_inputs = function_def[called_func].get('inputs',\
      \ [])\n                                target_returns = function_def[called_func].get('returns',\
      \ [])\n                    if target_inputs:\n                        edge_data['target_inputs']\
      \ = target_inputs\n                    if target_returns:\n                \
      \        edge_data['target_returns'] = target_returns\n                    G.add_edge(function_name,\
      \ called_func.strip(), **edge_data)\n    for class_def in file_summary['class_defs']:\n\
      \        for class_name, class_details in class_def.items():\n            for\
      \ method_name, method_details in class_details['method_defs'].items():\n   \
      \             for called_func in method_details['calls']:\n                \
      \    edge_data = {}\n                    if not internal_only or called_func\
      \ in G.nodes:\n                        if '.' in called_func:\n            \
      \                called_class_name, called_method_name = called_func.rsplit('.',\
      \ 1)\n                            target_inputs = target_returns = None\n  \
      \                          for class_def in file_summary['class_defs']:\n  \
      \                              if class_def.get(called_class_name):\n      \
      \                              target_inputs = class_def[called_class_name]['method_defs'].get(called_method_name,\
      \ {}).get('inputs', [])\n                                    target_returns\
      \ = class_def[called_class_name]['method_defs'].get(called_method_name, {}).get('returns',\
      \ [])\n                        else:\n                            target_inputs\
      \ = target_returns = None\n                            for function_def in file_summary['function_defs']:\n\
      \                                if function_def.get(called_func):\n       \
      \                             target_inputs = function_def[called_func].get('inputs',\
      \ [])\n                                    target_returns = function_def[called_func].get('returns',\
      \ [])\n                        if target_inputs:\n                         \
      \   edge_data['target_inputs'] = target_inputs\n                        if target_returns:\n\
      \                            edge_data['target_returns'] = target_returns\n\
      \                    G.add_edge(f'{class_name}.{method_name}', called_func.strip(),\
      \ **edge_data)\n    nodes = list(G.nodes)\n    edges = [{'source': str(edge[0]),\
      \ 'target': str(edge[1]), **edge[2]} for edge in G.edges.data()]\n    return\
      \ {'nodes': nodes, 'edges': edges}"
    function_ast: 'FunctionDef(name=''code_graph'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_summary'', annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=215, col_offset=29, end_lineno=215, end_col_offset=33), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=215, col_offset=34, end_lineno=215, end_col_offset=37), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=215, col_offset=39, end_lineno=215, end_col_offset=44), slice=Tuple(elts=[Name(id=''Dict'',
      ctx=Load(), lineno=215, col_offset=45, end_lineno=215, end_col_offset=49), Name(id=''str'',
      ctx=Load(), lineno=215, col_offset=51, end_lineno=215, end_col_offset=54)],
      ctx=Load(), lineno=215, col_offset=45, end_lineno=215, end_col_offset=54), ctx=Load(),
      lineno=215, col_offset=39, end_lineno=215, end_col_offset=55)], ctx=Load(),
      lineno=215, col_offset=34, end_lineno=215, end_col_offset=55), ctx=Load(), lineno=215,
      col_offset=29, end_lineno=215, end_col_offset=56), lineno=215, col_offset=15,
      end_lineno=215, end_col_offset=56), arg(arg=''internal_only'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=215, col_offset=73, end_lineno=215, end_col_offset=77), lineno=215,
      col_offset=58, end_lineno=215, end_col_offset=77)], kwonlyargs=[], kw_defaults=[],
      defaults=[Constant(value=True, lineno=215, col_offset=80, end_lineno=215, end_col_offset=84)]),
      body=[Expr(value=Constant(value=''\n    Create a dictionary representation of
      file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]:
      The details extracted from the file.\n        internal_only: bool: If True,
      only include function calls where both the caller and called function are within
      the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing
      the relationships\n            in the code.\n    '', lineno=216, col_offset=4,
      end_lineno=224, end_col_offset=7), lineno=216, col_offset=4, end_lineno=224,
      end_col_offset=7), Assign(targets=[Name(id=''G'', ctx=Store(), lineno=225, col_offset=4,
      end_lineno=225, end_col_offset=5)], value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=225, col_offset=8, end_lineno=225, end_col_offset=10), attr=''DiGraph'',
      ctx=Load(), lineno=225, col_offset=8, end_lineno=225, end_col_offset=18), args=[],
      keywords=[], lineno=225, col_offset=8, end_lineno=225, end_col_offset=20), lineno=225,
      col_offset=4, end_lineno=225, end_col_offset=20), For(target=Name(id=''function_def'',
      ctx=Store(), lineno=228, col_offset=8, end_lineno=228, end_col_offset=20), iter=Subscript(value=Name(id=''file_summary'',
      ctx=Load(), lineno=228, col_offset=24, end_lineno=228, end_col_offset=36), slice=Constant(value=''function_defs'',
      lineno=228, col_offset=37, end_lineno=228, end_col_offset=52), ctx=Load(), lineno=228,
      col_offset=24, end_lineno=228, end_col_offset=53), body=[For(target=Name(id=''function_name'',
      ctx=Store(), lineno=229, col_offset=12, end_lineno=229, end_col_offset=25),
      iter=Call(func=Attribute(value=Name(id=''function_def'', ctx=Load(), lineno=229,
      col_offset=29, end_lineno=229, end_col_offset=41), attr=''keys'', ctx=Load(),
      lineno=229, col_offset=29, end_lineno=229, end_col_offset=46), args=[], keywords=[],
      lineno=229, col_offset=29, end_lineno=229, end_col_offset=48), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=230, col_offset=12, end_lineno=230, end_col_offset=13), attr=''add_node'',
      ctx=Load(), lineno=230, col_offset=12, end_lineno=230, end_col_offset=22), args=[Name(id=''function_name'',
      ctx=Load(), lineno=230, col_offset=23, end_lineno=230, end_col_offset=36)],
      keywords=[], lineno=230, col_offset=12, end_lineno=230, end_col_offset=37),
      lineno=230, col_offset=12, end_lineno=230, end_col_offset=37)], orelse=[], lineno=229,
      col_offset=8, end_lineno=230, end_col_offset=37)], orelse=[], lineno=228, col_offset=4,
      end_lineno=230, end_col_offset=37), For(target=Name(id=''class_def'', ctx=Store(),
      lineno=233, col_offset=8, end_lineno=233, end_col_offset=17), iter=Subscript(value=Name(id=''file_summary'',
      ctx=Load(), lineno=233, col_offset=21, end_lineno=233, end_col_offset=33), slice=Constant(value=''class_defs'',
      lineno=233, col_offset=34, end_lineno=233, end_col_offset=46), ctx=Load(), lineno=233,
      col_offset=21, end_lineno=233, end_col_offset=47), body=[For(target=Tuple(elts=[Name(id=''class_name'',
      ctx=Store(), lineno=234, col_offset=12, end_lineno=234, end_col_offset=22),
      Name(id=''class_details'', ctx=Store(), lineno=234, col_offset=24, end_lineno=234,
      end_col_offset=37)], ctx=Store(), lineno=234, col_offset=12, end_lineno=234,
      end_col_offset=37), iter=Call(func=Attribute(value=Name(id=''class_def'', ctx=Load(),
      lineno=234, col_offset=41, end_lineno=234, end_col_offset=50), attr=''items'',
      ctx=Load(), lineno=234, col_offset=41, end_lineno=234, end_col_offset=56), args=[],
      keywords=[], lineno=234, col_offset=41, end_lineno=234, end_col_offset=58),
      body=[Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load(), lineno=235,
      col_offset=12, end_lineno=235, end_col_offset=13), attr=''add_node'', ctx=Load(),
      lineno=235, col_offset=12, end_lineno=235, end_col_offset=22), args=[Name(id=''class_name'',
      ctx=Load(), lineno=235, col_offset=23, end_lineno=235, end_col_offset=33)],
      keywords=[], lineno=235, col_offset=12, end_lineno=235, end_col_offset=34),
      lineno=235, col_offset=12, end_lineno=235, end_col_offset=34), For(target=Name(id=''method_name'',
      ctx=Store(), lineno=236, col_offset=16, end_lineno=236, end_col_offset=27),
      iter=Call(func=Attribute(value=Subscript(value=Name(id=''class_details'', ctx=Load(),
      lineno=236, col_offset=31, end_lineno=236, end_col_offset=44), slice=Constant(value=''method_defs'',
      lineno=236, col_offset=45, end_lineno=236, end_col_offset=58), ctx=Load(), lineno=236,
      col_offset=31, end_lineno=236, end_col_offset=59), attr=''keys'', ctx=Load(),
      lineno=236, col_offset=31, end_lineno=236, end_col_offset=64), args=[], keywords=[],
      lineno=236, col_offset=31, end_lineno=236, end_col_offset=66), body=[Assign(targets=[Name(id=''qualified_method_name'',
      ctx=Store(), lineno=238, col_offset=16, end_lineno=238, end_col_offset=37)],
      value=JoinedStr(values=[FormattedValue(value=Name(id=''class_name'', ctx=Load(),
      lineno=238, col_offset=43, end_lineno=238, end_col_offset=53), conversion=-1,
      lineno=238, col_offset=40, end_lineno=238, end_col_offset=69), Constant(value=''.'',
      lineno=238, col_offset=40, end_lineno=238, end_col_offset=69), FormattedValue(value=Name(id=''method_name'',
      ctx=Load(), lineno=238, col_offset=56, end_lineno=238, end_col_offset=67), conversion=-1,
      lineno=238, col_offset=40, end_lineno=238, end_col_offset=69)], lineno=238,
      col_offset=40, end_lineno=238, end_col_offset=69), lineno=238, col_offset=16,
      end_lineno=238, end_col_offset=69), Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=239, col_offset=16, end_lineno=239, end_col_offset=17), attr=''add_node'',
      ctx=Load(), lineno=239, col_offset=16, end_lineno=239, end_col_offset=26), args=[Name(id=''qualified_method_name'',
      ctx=Load(), lineno=239, col_offset=27, end_lineno=239, end_col_offset=48)],
      keywords=[], lineno=239, col_offset=16, end_lineno=239, end_col_offset=49),
      lineno=239, col_offset=16, end_lineno=239, end_col_offset=49), Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=17), attr=''add_edge'',
      ctx=Load(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=26), args=[Name(id=''class_name'',
      ctx=Load(), lineno=241, col_offset=27, end_lineno=241, end_col_offset=37), Name(id=''qualified_method_name'',
      ctx=Load(), lineno=241, col_offset=39, end_lineno=241, end_col_offset=60)],
      keywords=[], lineno=241, col_offset=16, end_lineno=241, end_col_offset=61),
      lineno=241, col_offset=16, end_lineno=241, end_col_offset=61)], orelse=[], lineno=236,
      col_offset=12, end_lineno=241, end_col_offset=61)], orelse=[], lineno=234, col_offset=8,
      end_lineno=241, end_col_offset=61)], orelse=[], lineno=233, col_offset=4, end_lineno=241,
      end_col_offset=61), For(target=Name(id=''function_def'', ctx=Store(), lineno=244,
      col_offset=8, end_lineno=244, end_col_offset=20), iter=Subscript(value=Name(id=''file_summary'',
      ctx=Load(), lineno=244, col_offset=24, end_lineno=244, end_col_offset=36), slice=Constant(value=''function_defs'',
      lineno=244, col_offset=37, end_lineno=244, end_col_offset=52), ctx=Load(), lineno=244,
      col_offset=24, end_lineno=244, end_col_offset=53), body=[For(target=Tuple(elts=[Name(id=''function_name'',
      ctx=Store(), lineno=245, col_offset=12, end_lineno=245, end_col_offset=25),
      Name(id=''function_details'', ctx=Store(), lineno=245, col_offset=27, end_lineno=245,
      end_col_offset=43)], ctx=Store(), lineno=245, col_offset=12, end_lineno=245,
      end_col_offset=43), iter=Call(func=Attribute(value=Name(id=''function_def'',
      ctx=Load(), lineno=245, col_offset=47, end_lineno=245, end_col_offset=59), attr=''items'',
      ctx=Load(), lineno=245, col_offset=47, end_lineno=245, end_col_offset=65), args=[],
      keywords=[], lineno=245, col_offset=47, end_lineno=245, end_col_offset=67),
      body=[For(target=Name(id=''called_func'', ctx=Store(), lineno=246, col_offset=16,
      end_lineno=246, end_col_offset=27), iter=Subscript(value=Name(id=''function_details'',
      ctx=Load(), lineno=246, col_offset=31, end_lineno=246, end_col_offset=47), slice=Constant(value=''calls'',
      lineno=246, col_offset=48, end_lineno=246, end_col_offset=55), ctx=Load(), lineno=246,
      col_offset=31, end_lineno=246, end_col_offset=56), body=[Assign(targets=[Name(id=''edge_data'',
      ctx=Store(), lineno=247, col_offset=16, end_lineno=247, end_col_offset=25)],
      value=Dict(keys=[], values=[], lineno=247, col_offset=28, end_lineno=247, end_col_offset=30),
      lineno=247, col_offset=16, end_lineno=247, end_col_offset=30), If(test=BoolOp(op=Or(),
      values=[UnaryOp(op=Not(), operand=Name(id=''internal_only'', ctx=Load(), lineno=248,
      col_offset=23, end_lineno=248, end_col_offset=36), lineno=248, col_offset=19,
      end_lineno=248, end_col_offset=36), Compare(left=Name(id=''called_func'', ctx=Load(),
      lineno=248, col_offset=40, end_lineno=248, end_col_offset=51), ops=[In()], comparators=[Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=248, col_offset=55, end_lineno=248, end_col_offset=56), attr=''nodes'',
      ctx=Load(), lineno=248, col_offset=55, end_lineno=248, end_col_offset=62)],
      lineno=248, col_offset=40, end_lineno=248, end_col_offset=62)], lineno=248,
      col_offset=19, end_lineno=248, end_col_offset=62), body=[If(test=Compare(left=Constant(value=''.'',
      lineno=250, col_offset=23, end_lineno=250, end_col_offset=26), ops=[In()], comparators=[Name(id=''called_func'',
      ctx=Load(), lineno=250, col_offset=30, end_lineno=250, end_col_offset=41)],
      lineno=250, col_offset=23, end_lineno=250, end_col_offset=41), body=[Assign(targets=[Tuple(elts=[Name(id=''called_class_name'',
      ctx=Store(), lineno=251, col_offset=24, end_lineno=251, end_col_offset=41),
      Name(id=''called_method_name'', ctx=Store(), lineno=251, col_offset=43, end_lineno=251,
      end_col_offset=61)], ctx=Store(), lineno=251, col_offset=24, end_lineno=251,
      end_col_offset=61)], value=Call(func=Attribute(value=Name(id=''called_func'',
      ctx=Load(), lineno=251, col_offset=64, end_lineno=251, end_col_offset=75), attr=''rsplit'',
      ctx=Load(), lineno=251, col_offset=64, end_lineno=251, end_col_offset=82), args=[Constant(value=''.'',
      lineno=251, col_offset=83, end_lineno=251, end_col_offset=86), Constant(value=1,
      lineno=251, col_offset=88, end_lineno=251, end_col_offset=89)], keywords=[],
      lineno=251, col_offset=64, end_lineno=251, end_col_offset=90), lineno=251, col_offset=24,
      end_lineno=251, end_col_offset=90), Assign(targets=[Name(id=''target_inputs'',
      ctx=Store(), lineno=253, col_offset=24, end_lineno=253, end_col_offset=37),
      Name(id=''target_returns'', ctx=Store(), lineno=253, col_offset=40, end_lineno=253,
      end_col_offset=54)], value=Constant(value=None, lineno=253, col_offset=57, end_lineno=253,
      end_col_offset=61), lineno=253, col_offset=24, end_lineno=253, end_col_offset=61),
      For(target=Name(id=''class_def'', ctx=Store(), lineno=254, col_offset=28, end_lineno=254,
      end_col_offset=37), iter=Subscript(value=Name(id=''file_summary'', ctx=Load(),
      lineno=254, col_offset=41, end_lineno=254, end_col_offset=53), slice=Constant(value=''class_defs'',
      lineno=254, col_offset=54, end_lineno=254, end_col_offset=66), ctx=Load(), lineno=254,
      col_offset=41, end_lineno=254, end_col_offset=67), body=[If(test=Call(func=Attribute(value=Name(id=''class_def'',
      ctx=Load(), lineno=255, col_offset=31, end_lineno=255, end_col_offset=40), attr=''get'',
      ctx=Load(), lineno=255, col_offset=31, end_lineno=255, end_col_offset=44), args=[Name(id=''called_class_name'',
      ctx=Load(), lineno=255, col_offset=45, end_lineno=255, end_col_offset=62)],
      keywords=[], lineno=255, col_offset=31, end_lineno=255, end_col_offset=63),
      body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store(), lineno=256, col_offset=32,
      end_lineno=256, end_col_offset=45)], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
      ctx=Load(), lineno=256, col_offset=48, end_lineno=256, end_col_offset=57), slice=Name(id=''called_class_name'',
      ctx=Load(), lineno=256, col_offset=58, end_lineno=256, end_col_offset=75), ctx=Load(),
      lineno=256, col_offset=48, end_lineno=256, end_col_offset=76), slice=Constant(value=''method_defs'',
      lineno=256, col_offset=77, end_lineno=256, end_col_offset=90), ctx=Load(), lineno=256,
      col_offset=48, end_lineno=256, end_col_offset=91), attr=''get'', ctx=Load(),
      lineno=256, col_offset=48, end_lineno=256, end_col_offset=95), args=[Name(id=''called_method_name'',
      ctx=Load(), lineno=256, col_offset=96, end_lineno=256, end_col_offset=114),
      Dict(keys=[], values=[], lineno=256, col_offset=116, end_lineno=256, end_col_offset=118)],
      keywords=[], lineno=256, col_offset=48, end_lineno=256, end_col_offset=119),
      attr=''get'', ctx=Load(), lineno=256, col_offset=48, end_lineno=256, end_col_offset=123),
      args=[Constant(value=''inputs'', lineno=256, col_offset=124, end_lineno=256,
      end_col_offset=132), List(elts=[], ctx=Load(), lineno=256, col_offset=134, end_lineno=256,
      end_col_offset=136)], keywords=[], lineno=256, col_offset=48, end_lineno=256,
      end_col_offset=137), lineno=256, col_offset=32, end_lineno=256, end_col_offset=137),
      Assign(targets=[Name(id=''target_returns'', ctx=Store(), lineno=257, col_offset=32,
      end_lineno=257, end_col_offset=46)], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
      ctx=Load(), lineno=257, col_offset=49, end_lineno=257, end_col_offset=58), slice=Name(id=''called_class_name'',
      ctx=Load(), lineno=257, col_offset=59, end_lineno=257, end_col_offset=76), ctx=Load(),
      lineno=257, col_offset=49, end_lineno=257, end_col_offset=77), slice=Constant(value=''method_defs'',
      lineno=257, col_offset=78, end_lineno=257, end_col_offset=91), ctx=Load(), lineno=257,
      col_offset=49, end_lineno=257, end_col_offset=92), attr=''get'', ctx=Load(),
      lineno=257, col_offset=49, end_lineno=257, end_col_offset=96), args=[Name(id=''called_method_name'',
      ctx=Load(), lineno=257, col_offset=97, end_lineno=257, end_col_offset=115),
      Dict(keys=[], values=[], lineno=257, col_offset=117, end_lineno=257, end_col_offset=119)],
      keywords=[], lineno=257, col_offset=49, end_lineno=257, end_col_offset=120),
      attr=''get'', ctx=Load(), lineno=257, col_offset=49, end_lineno=257, end_col_offset=124),
      args=[Constant(value=''returns'', lineno=257, col_offset=125, end_lineno=257,
      end_col_offset=134), List(elts=[], ctx=Load(), lineno=257, col_offset=136, end_lineno=257,
      end_col_offset=138)], keywords=[], lineno=257, col_offset=49, end_lineno=257,
      end_col_offset=139), lineno=257, col_offset=32, end_lineno=257, end_col_offset=139)],
      orelse=[], lineno=255, col_offset=28, end_lineno=257, end_col_offset=139)],
      orelse=[], lineno=254, col_offset=24, end_lineno=257, end_col_offset=139)],
      orelse=[Assign(targets=[Name(id=''target_inputs'', ctx=Store(), lineno=260,
      col_offset=24, end_lineno=260, end_col_offset=37), Name(id=''target_returns'',
      ctx=Store(), lineno=260, col_offset=40, end_lineno=260, end_col_offset=54)],
      value=Constant(value=None, lineno=260, col_offset=57, end_lineno=260, end_col_offset=61),
      lineno=260, col_offset=24, end_lineno=260, end_col_offset=61), For(target=Name(id=''function_def'',
      ctx=Store(), lineno=261, col_offset=28, end_lineno=261, end_col_offset=40),
      iter=Subscript(value=Name(id=''file_summary'', ctx=Load(), lineno=261, col_offset=44,
      end_lineno=261, end_col_offset=56), slice=Constant(value=''function_defs'',
      lineno=261, col_offset=57, end_lineno=261, end_col_offset=72), ctx=Load(), lineno=261,
      col_offset=44, end_lineno=261, end_col_offset=73), body=[If(test=Call(func=Attribute(value=Name(id=''function_def'',
      ctx=Load(), lineno=262, col_offset=31, end_lineno=262, end_col_offset=43), attr=''get'',
      ctx=Load(), lineno=262, col_offset=31, end_lineno=262, end_col_offset=47), args=[Name(id=''called_func'',
      ctx=Load(), lineno=262, col_offset=48, end_lineno=262, end_col_offset=59)],
      keywords=[], lineno=262, col_offset=31, end_lineno=262, end_col_offset=60),
      body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store(), lineno=263, col_offset=32,
      end_lineno=263, end_col_offset=45)], value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'',
      ctx=Load(), lineno=263, col_offset=48, end_lineno=263, end_col_offset=60), slice=Name(id=''called_func'',
      ctx=Load(), lineno=263, col_offset=61, end_lineno=263, end_col_offset=72), ctx=Load(),
      lineno=263, col_offset=48, end_lineno=263, end_col_offset=73), attr=''get'',
      ctx=Load(), lineno=263, col_offset=48, end_lineno=263, end_col_offset=77), args=[Constant(value=''inputs'',
      lineno=263, col_offset=78, end_lineno=263, end_col_offset=86), List(elts=[],
      ctx=Load(), lineno=263, col_offset=88, end_lineno=263, end_col_offset=90)],
      keywords=[], lineno=263, col_offset=48, end_lineno=263, end_col_offset=91),
      lineno=263, col_offset=32, end_lineno=263, end_col_offset=91), Assign(targets=[Name(id=''target_returns'',
      ctx=Store(), lineno=264, col_offset=32, end_lineno=264, end_col_offset=46)],
      value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'', ctx=Load(),
      lineno=264, col_offset=49, end_lineno=264, end_col_offset=61), slice=Name(id=''called_func'',
      ctx=Load(), lineno=264, col_offset=62, end_lineno=264, end_col_offset=73), ctx=Load(),
      lineno=264, col_offset=49, end_lineno=264, end_col_offset=74), attr=''get'',
      ctx=Load(), lineno=264, col_offset=49, end_lineno=264, end_col_offset=78), args=[Constant(value=''returns'',
      lineno=264, col_offset=79, end_lineno=264, end_col_offset=88), List(elts=[],
      ctx=Load(), lineno=264, col_offset=90, end_lineno=264, end_col_offset=92)],
      keywords=[], lineno=264, col_offset=49, end_lineno=264, end_col_offset=93),
      lineno=264, col_offset=32, end_lineno=264, end_col_offset=93)], orelse=[], lineno=262,
      col_offset=28, end_lineno=264, end_col_offset=93)], orelse=[], lineno=261, col_offset=24,
      end_lineno=264, end_col_offset=93)], lineno=250, col_offset=20, end_lineno=264,
      end_col_offset=93), If(test=Name(id=''target_inputs'', ctx=Load(), lineno=265,
      col_offset=23, end_lineno=265, end_col_offset=36), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=266, col_offset=24, end_lineno=266, end_col_offset=33), slice=Constant(value=''target_inputs'',
      lineno=266, col_offset=34, end_lineno=266, end_col_offset=49), ctx=Store(),
      lineno=266, col_offset=24, end_lineno=266, end_col_offset=50)], value=Name(id=''target_inputs'',
      ctx=Load(), lineno=266, col_offset=53, end_lineno=266, end_col_offset=66), lineno=266,
      col_offset=24, end_lineno=266, end_col_offset=66)], orelse=[], lineno=265, col_offset=20,
      end_lineno=266, end_col_offset=66), If(test=Name(id=''target_returns'', ctx=Load(),
      lineno=267, col_offset=23, end_lineno=267, end_col_offset=37), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=268, col_offset=24, end_lineno=268, end_col_offset=33), slice=Constant(value=''target_returns'',
      lineno=268, col_offset=34, end_lineno=268, end_col_offset=50), ctx=Store(),
      lineno=268, col_offset=24, end_lineno=268, end_col_offset=51)], value=Name(id=''target_returns'',
      ctx=Load(), lineno=268, col_offset=54, end_lineno=268, end_col_offset=68), lineno=268,
      col_offset=24, end_lineno=268, end_col_offset=68)], orelse=[], lineno=267, col_offset=20,
      end_lineno=268, end_col_offset=68), Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=269, col_offset=20, end_lineno=269, end_col_offset=21), attr=''add_edge'',
      ctx=Load(), lineno=269, col_offset=20, end_lineno=269, end_col_offset=30), args=[Name(id=''function_name'',
      ctx=Load(), lineno=269, col_offset=31, end_lineno=269, end_col_offset=44), Call(func=Attribute(value=Name(id=''called_func'',
      ctx=Load(), lineno=269, col_offset=46, end_lineno=269, end_col_offset=57), attr=''strip'',
      ctx=Load(), lineno=269, col_offset=46, end_lineno=269, end_col_offset=63), args=[],
      keywords=[], lineno=269, col_offset=46, end_lineno=269, end_col_offset=65)],
      keywords=[keyword(value=Name(id=''edge_data'', ctx=Load(), lineno=269, col_offset=69,
      end_lineno=269, end_col_offset=78), lineno=269, col_offset=67, end_lineno=269,
      end_col_offset=78)], lineno=269, col_offset=20, end_lineno=269, end_col_offset=79),
      lineno=269, col_offset=20, end_lineno=269, end_col_offset=79)], orelse=[], lineno=248,
      col_offset=16, end_lineno=269, end_col_offset=79)], orelse=[], lineno=246, col_offset=12,
      end_lineno=269, end_col_offset=79)], orelse=[], lineno=245, col_offset=8, end_lineno=269,
      end_col_offset=79)], orelse=[], lineno=244, col_offset=4, end_lineno=269, end_col_offset=79),
      For(target=Name(id=''class_def'', ctx=Store(), lineno=272, col_offset=8, end_lineno=272,
      end_col_offset=17), iter=Subscript(value=Name(id=''file_summary'', ctx=Load(),
      lineno=272, col_offset=21, end_lineno=272, end_col_offset=33), slice=Constant(value=''class_defs'',
      lineno=272, col_offset=34, end_lineno=272, end_col_offset=46), ctx=Load(), lineno=272,
      col_offset=21, end_lineno=272, end_col_offset=47), body=[For(target=Tuple(elts=[Name(id=''class_name'',
      ctx=Store(), lineno=273, col_offset=12, end_lineno=273, end_col_offset=22),
      Name(id=''class_details'', ctx=Store(), lineno=273, col_offset=24, end_lineno=273,
      end_col_offset=37)], ctx=Store(), lineno=273, col_offset=12, end_lineno=273,
      end_col_offset=37), iter=Call(func=Attribute(value=Name(id=''class_def'', ctx=Load(),
      lineno=273, col_offset=41, end_lineno=273, end_col_offset=50), attr=''items'',
      ctx=Load(), lineno=273, col_offset=41, end_lineno=273, end_col_offset=56), args=[],
      keywords=[], lineno=273, col_offset=41, end_lineno=273, end_col_offset=58),
      body=[For(target=Tuple(elts=[Name(id=''method_name'', ctx=Store(), lineno=274,
      col_offset=16, end_lineno=274, end_col_offset=27), Name(id=''method_details'',
      ctx=Store(), lineno=274, col_offset=29, end_lineno=274, end_col_offset=43)],
      ctx=Store(), lineno=274, col_offset=16, end_lineno=274, end_col_offset=43),
      iter=Call(func=Attribute(value=Subscript(value=Name(id=''class_details'', ctx=Load(),
      lineno=274, col_offset=47, end_lineno=274, end_col_offset=60), slice=Constant(value=''method_defs'',
      lineno=274, col_offset=61, end_lineno=274, end_col_offset=74), ctx=Load(), lineno=274,
      col_offset=47, end_lineno=274, end_col_offset=75), attr=''items'', ctx=Load(),
      lineno=274, col_offset=47, end_lineno=274, end_col_offset=81), args=[], keywords=[],
      lineno=274, col_offset=47, end_lineno=274, end_col_offset=83), body=[For(target=Name(id=''called_func'',
      ctx=Store(), lineno=275, col_offset=20, end_lineno=275, end_col_offset=31),
      iter=Subscript(value=Name(id=''method_details'', ctx=Load(), lineno=275, col_offset=35,
      end_lineno=275, end_col_offset=49), slice=Constant(value=''calls'', lineno=275,
      col_offset=50, end_lineno=275, end_col_offset=57), ctx=Load(), lineno=275, col_offset=35,
      end_lineno=275, end_col_offset=58), body=[Assign(targets=[Name(id=''edge_data'',
      ctx=Store(), lineno=276, col_offset=20, end_lineno=276, end_col_offset=29)],
      value=Dict(keys=[], values=[], lineno=276, col_offset=32, end_lineno=276, end_col_offset=34),
      lineno=276, col_offset=20, end_lineno=276, end_col_offset=34), If(test=BoolOp(op=Or(),
      values=[UnaryOp(op=Not(), operand=Name(id=''internal_only'', ctx=Load(), lineno=277,
      col_offset=27, end_lineno=277, end_col_offset=40), lineno=277, col_offset=23,
      end_lineno=277, end_col_offset=40), Compare(left=Name(id=''called_func'', ctx=Load(),
      lineno=277, col_offset=44, end_lineno=277, end_col_offset=55), ops=[In()], comparators=[Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=277, col_offset=59, end_lineno=277, end_col_offset=60), attr=''nodes'',
      ctx=Load(), lineno=277, col_offset=59, end_lineno=277, end_col_offset=66)],
      lineno=277, col_offset=44, end_lineno=277, end_col_offset=66)], lineno=277,
      col_offset=23, end_lineno=277, end_col_offset=66), body=[If(test=Compare(left=Constant(value=''.'',
      lineno=279, col_offset=27, end_lineno=279, end_col_offset=30), ops=[In()], comparators=[Name(id=''called_func'',
      ctx=Load(), lineno=279, col_offset=34, end_lineno=279, end_col_offset=45)],
      lineno=279, col_offset=27, end_lineno=279, end_col_offset=45), body=[Assign(targets=[Tuple(elts=[Name(id=''called_class_name'',
      ctx=Store(), lineno=280, col_offset=28, end_lineno=280, end_col_offset=45),
      Name(id=''called_method_name'', ctx=Store(), lineno=280, col_offset=47, end_lineno=280,
      end_col_offset=65)], ctx=Store(), lineno=280, col_offset=28, end_lineno=280,
      end_col_offset=65)], value=Call(func=Attribute(value=Name(id=''called_func'',
      ctx=Load(), lineno=280, col_offset=68, end_lineno=280, end_col_offset=79), attr=''rsplit'',
      ctx=Load(), lineno=280, col_offset=68, end_lineno=280, end_col_offset=86), args=[Constant(value=''.'',
      lineno=280, col_offset=87, end_lineno=280, end_col_offset=90), Constant(value=1,
      lineno=280, col_offset=92, end_lineno=280, end_col_offset=93)], keywords=[],
      lineno=280, col_offset=68, end_lineno=280, end_col_offset=94), lineno=280, col_offset=28,
      end_lineno=280, end_col_offset=94), Assign(targets=[Name(id=''target_inputs'',
      ctx=Store(), lineno=282, col_offset=28, end_lineno=282, end_col_offset=41),
      Name(id=''target_returns'', ctx=Store(), lineno=282, col_offset=44, end_lineno=282,
      end_col_offset=58)], value=Constant(value=None, lineno=282, col_offset=61, end_lineno=282,
      end_col_offset=65), lineno=282, col_offset=28, end_lineno=282, end_col_offset=65),
      For(target=Name(id=''class_def'', ctx=Store(), lineno=283, col_offset=32, end_lineno=283,
      end_col_offset=41), iter=Subscript(value=Name(id=''file_summary'', ctx=Load(),
      lineno=283, col_offset=45, end_lineno=283, end_col_offset=57), slice=Constant(value=''class_defs'',
      lineno=283, col_offset=58, end_lineno=283, end_col_offset=70), ctx=Load(), lineno=283,
      col_offset=45, end_lineno=283, end_col_offset=71), body=[If(test=Call(func=Attribute(value=Name(id=''class_def'',
      ctx=Load(), lineno=284, col_offset=35, end_lineno=284, end_col_offset=44), attr=''get'',
      ctx=Load(), lineno=284, col_offset=35, end_lineno=284, end_col_offset=48), args=[Name(id=''called_class_name'',
      ctx=Load(), lineno=284, col_offset=49, end_lineno=284, end_col_offset=66)],
      keywords=[], lineno=284, col_offset=35, end_lineno=284, end_col_offset=67),
      body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store(), lineno=285, col_offset=36,
      end_lineno=285, end_col_offset=49)], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
      ctx=Load(), lineno=285, col_offset=52, end_lineno=285, end_col_offset=61), slice=Name(id=''called_class_name'',
      ctx=Load(), lineno=285, col_offset=62, end_lineno=285, end_col_offset=79), ctx=Load(),
      lineno=285, col_offset=52, end_lineno=285, end_col_offset=80), slice=Constant(value=''method_defs'',
      lineno=285, col_offset=81, end_lineno=285, end_col_offset=94), ctx=Load(), lineno=285,
      col_offset=52, end_lineno=285, end_col_offset=95), attr=''get'', ctx=Load(),
      lineno=285, col_offset=52, end_lineno=285, end_col_offset=99), args=[Name(id=''called_method_name'',
      ctx=Load(), lineno=285, col_offset=100, end_lineno=285, end_col_offset=118),
      Dict(keys=[], values=[], lineno=285, col_offset=120, end_lineno=285, end_col_offset=122)],
      keywords=[], lineno=285, col_offset=52, end_lineno=285, end_col_offset=123),
      attr=''get'', ctx=Load(), lineno=285, col_offset=52, end_lineno=285, end_col_offset=127),
      args=[Constant(value=''inputs'', lineno=285, col_offset=128, end_lineno=285,
      end_col_offset=136), List(elts=[], ctx=Load(), lineno=285, col_offset=138, end_lineno=285,
      end_col_offset=140)], keywords=[], lineno=285, col_offset=52, end_lineno=285,
      end_col_offset=141), lineno=285, col_offset=36, end_lineno=285, end_col_offset=141),
      Assign(targets=[Name(id=''target_returns'', ctx=Store(), lineno=286, col_offset=36,
      end_lineno=286, end_col_offset=50)], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id=''class_def'',
      ctx=Load(), lineno=286, col_offset=53, end_lineno=286, end_col_offset=62), slice=Name(id=''called_class_name'',
      ctx=Load(), lineno=286, col_offset=63, end_lineno=286, end_col_offset=80), ctx=Load(),
      lineno=286, col_offset=53, end_lineno=286, end_col_offset=81), slice=Constant(value=''method_defs'',
      lineno=286, col_offset=82, end_lineno=286, end_col_offset=95), ctx=Load(), lineno=286,
      col_offset=53, end_lineno=286, end_col_offset=96), attr=''get'', ctx=Load(),
      lineno=286, col_offset=53, end_lineno=286, end_col_offset=100), args=[Name(id=''called_method_name'',
      ctx=Load(), lineno=286, col_offset=101, end_lineno=286, end_col_offset=119),
      Dict(keys=[], values=[], lineno=286, col_offset=121, end_lineno=286, end_col_offset=123)],
      keywords=[], lineno=286, col_offset=53, end_lineno=286, end_col_offset=124),
      attr=''get'', ctx=Load(), lineno=286, col_offset=53, end_lineno=286, end_col_offset=128),
      args=[Constant(value=''returns'', lineno=286, col_offset=129, end_lineno=286,
      end_col_offset=138), List(elts=[], ctx=Load(), lineno=286, col_offset=140, end_lineno=286,
      end_col_offset=142)], keywords=[], lineno=286, col_offset=53, end_lineno=286,
      end_col_offset=143), lineno=286, col_offset=36, end_lineno=286, end_col_offset=143)],
      orelse=[], lineno=284, col_offset=32, end_lineno=286, end_col_offset=143)],
      orelse=[], lineno=283, col_offset=28, end_lineno=286, end_col_offset=143)],
      orelse=[Assign(targets=[Name(id=''target_inputs'', ctx=Store(), lineno=289,
      col_offset=28, end_lineno=289, end_col_offset=41), Name(id=''target_returns'',
      ctx=Store(), lineno=289, col_offset=44, end_lineno=289, end_col_offset=58)],
      value=Constant(value=None, lineno=289, col_offset=61, end_lineno=289, end_col_offset=65),
      lineno=289, col_offset=28, end_lineno=289, end_col_offset=65), For(target=Name(id=''function_def'',
      ctx=Store(), lineno=290, col_offset=32, end_lineno=290, end_col_offset=44),
      iter=Subscript(value=Name(id=''file_summary'', ctx=Load(), lineno=290, col_offset=48,
      end_lineno=290, end_col_offset=60), slice=Constant(value=''function_defs'',
      lineno=290, col_offset=61, end_lineno=290, end_col_offset=76), ctx=Load(), lineno=290,
      col_offset=48, end_lineno=290, end_col_offset=77), body=[If(test=Call(func=Attribute(value=Name(id=''function_def'',
      ctx=Load(), lineno=291, col_offset=35, end_lineno=291, end_col_offset=47), attr=''get'',
      ctx=Load(), lineno=291, col_offset=35, end_lineno=291, end_col_offset=51), args=[Name(id=''called_func'',
      ctx=Load(), lineno=291, col_offset=52, end_lineno=291, end_col_offset=63)],
      keywords=[], lineno=291, col_offset=35, end_lineno=291, end_col_offset=64),
      body=[Assign(targets=[Name(id=''target_inputs'', ctx=Store(), lineno=292, col_offset=36,
      end_lineno=292, end_col_offset=49)], value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'',
      ctx=Load(), lineno=292, col_offset=52, end_lineno=292, end_col_offset=64), slice=Name(id=''called_func'',
      ctx=Load(), lineno=292, col_offset=65, end_lineno=292, end_col_offset=76), ctx=Load(),
      lineno=292, col_offset=52, end_lineno=292, end_col_offset=77), attr=''get'',
      ctx=Load(), lineno=292, col_offset=52, end_lineno=292, end_col_offset=81), args=[Constant(value=''inputs'',
      lineno=292, col_offset=82, end_lineno=292, end_col_offset=90), List(elts=[],
      ctx=Load(), lineno=292, col_offset=92, end_lineno=292, end_col_offset=94)],
      keywords=[], lineno=292, col_offset=52, end_lineno=292, end_col_offset=95),
      lineno=292, col_offset=36, end_lineno=292, end_col_offset=95), Assign(targets=[Name(id=''target_returns'',
      ctx=Store(), lineno=293, col_offset=36, end_lineno=293, end_col_offset=50)],
      value=Call(func=Attribute(value=Subscript(value=Name(id=''function_def'', ctx=Load(),
      lineno=293, col_offset=53, end_lineno=293, end_col_offset=65), slice=Name(id=''called_func'',
      ctx=Load(), lineno=293, col_offset=66, end_lineno=293, end_col_offset=77), ctx=Load(),
      lineno=293, col_offset=53, end_lineno=293, end_col_offset=78), attr=''get'',
      ctx=Load(), lineno=293, col_offset=53, end_lineno=293, end_col_offset=82), args=[Constant(value=''returns'',
      lineno=293, col_offset=83, end_lineno=293, end_col_offset=92), List(elts=[],
      ctx=Load(), lineno=293, col_offset=94, end_lineno=293, end_col_offset=96)],
      keywords=[], lineno=293, col_offset=53, end_lineno=293, end_col_offset=97),
      lineno=293, col_offset=36, end_lineno=293, end_col_offset=97)], orelse=[], lineno=291,
      col_offset=32, end_lineno=293, end_col_offset=97)], orelse=[], lineno=290, col_offset=28,
      end_lineno=293, end_col_offset=97)], lineno=279, col_offset=24, end_lineno=293,
      end_col_offset=97), If(test=Name(id=''target_inputs'', ctx=Load(), lineno=294,
      col_offset=27, end_lineno=294, end_col_offset=40), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=295, col_offset=28, end_lineno=295, end_col_offset=37), slice=Constant(value=''target_inputs'',
      lineno=295, col_offset=38, end_lineno=295, end_col_offset=53), ctx=Store(),
      lineno=295, col_offset=28, end_lineno=295, end_col_offset=54)], value=Name(id=''target_inputs'',
      ctx=Load(), lineno=295, col_offset=57, end_lineno=295, end_col_offset=70), lineno=295,
      col_offset=28, end_lineno=295, end_col_offset=70)], orelse=[], lineno=294, col_offset=24,
      end_lineno=295, end_col_offset=70), If(test=Name(id=''target_returns'', ctx=Load(),
      lineno=296, col_offset=27, end_lineno=296, end_col_offset=41), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=297, col_offset=28, end_lineno=297, end_col_offset=37), slice=Constant(value=''target_returns'',
      lineno=297, col_offset=38, end_lineno=297, end_col_offset=54), ctx=Store(),
      lineno=297, col_offset=28, end_lineno=297, end_col_offset=55)], value=Name(id=''target_returns'',
      ctx=Load(), lineno=297, col_offset=58, end_lineno=297, end_col_offset=72), lineno=297,
      col_offset=28, end_lineno=297, end_col_offset=72)], orelse=[], lineno=296, col_offset=24,
      end_lineno=297, end_col_offset=72)], orelse=[], lineno=277, col_offset=20, end_lineno=297,
      end_col_offset=72), Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load(),
      lineno=298, col_offset=20, end_lineno=298, end_col_offset=21), attr=''add_edge'',
      ctx=Load(), lineno=298, col_offset=20, end_lineno=298, end_col_offset=30), args=[JoinedStr(values=[FormattedValue(value=Name(id=''class_name'',
      ctx=Load(), lineno=298, col_offset=34, end_lineno=298, end_col_offset=44), conversion=-1,
      lineno=298, col_offset=31, end_lineno=298, end_col_offset=60), Constant(value=''.'',
      lineno=298, col_offset=31, end_lineno=298, end_col_offset=60), FormattedValue(value=Name(id=''method_name'',
      ctx=Load(), lineno=298, col_offset=47, end_lineno=298, end_col_offset=58), conversion=-1,
      lineno=298, col_offset=31, end_lineno=298, end_col_offset=60)], lineno=298,
      col_offset=31, end_lineno=298, end_col_offset=60), Call(func=Attribute(value=Name(id=''called_func'',
      ctx=Load(), lineno=298, col_offset=62, end_lineno=298, end_col_offset=73), attr=''strip'',
      ctx=Load(), lineno=298, col_offset=62, end_lineno=298, end_col_offset=79), args=[],
      keywords=[], lineno=298, col_offset=62, end_lineno=298, end_col_offset=81)],
      keywords=[keyword(value=Name(id=''edge_data'', ctx=Load(), lineno=298, col_offset=85,
      end_lineno=298, end_col_offset=94), lineno=298, col_offset=83, end_lineno=298,
      end_col_offset=94)], lineno=298, col_offset=20, end_lineno=298, end_col_offset=95),
      lineno=298, col_offset=20, end_lineno=298, end_col_offset=95)], orelse=[], lineno=275,
      col_offset=16, end_lineno=298, end_col_offset=95)], orelse=[], lineno=274, col_offset=12,
      end_lineno=298, end_col_offset=95)], orelse=[], lineno=273, col_offset=8, end_lineno=298,
      end_col_offset=95)], orelse=[], lineno=272, col_offset=4, end_lineno=298, end_col_offset=95),
      Assign(targets=[Name(id=''nodes'', ctx=Store(), lineno=300, col_offset=4, end_lineno=300,
      end_col_offset=9)], value=Call(func=Name(id=''list'', ctx=Load(), lineno=300,
      col_offset=12, end_lineno=300, end_col_offset=16), args=[Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=300, col_offset=17, end_lineno=300, end_col_offset=18), attr=''nodes'',
      ctx=Load(), lineno=300, col_offset=17, end_lineno=300, end_col_offset=24)],
      keywords=[], lineno=300, col_offset=12, end_lineno=300, end_col_offset=25),
      lineno=300, col_offset=4, end_lineno=300, end_col_offset=25), Assign(targets=[Name(id=''edges'',
      ctx=Store(), lineno=301, col_offset=4, end_lineno=301, end_col_offset=9)], value=ListComp(elt=Dict(keys=[Constant(value=''source'',
      lineno=301, col_offset=14, end_lineno=301, end_col_offset=22), Constant(value=''target'',
      lineno=301, col_offset=38, end_lineno=301, end_col_offset=46), None], values=[Call(func=Name(id=''str'',
      ctx=Load(), lineno=301, col_offset=24, end_lineno=301, end_col_offset=27), args=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=301, col_offset=28, end_lineno=301, end_col_offset=32), slice=Constant(value=0,
      lineno=301, col_offset=33, end_lineno=301, end_col_offset=34), ctx=Load(), lineno=301,
      col_offset=28, end_lineno=301, end_col_offset=35)], keywords=[], lineno=301,
      col_offset=24, end_lineno=301, end_col_offset=36), Call(func=Name(id=''str'',
      ctx=Load(), lineno=301, col_offset=48, end_lineno=301, end_col_offset=51), args=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=301, col_offset=52, end_lineno=301, end_col_offset=56), slice=Constant(value=1,
      lineno=301, col_offset=57, end_lineno=301, end_col_offset=58), ctx=Load(), lineno=301,
      col_offset=52, end_lineno=301, end_col_offset=59)], keywords=[], lineno=301,
      col_offset=48, end_lineno=301, end_col_offset=60), Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=301, col_offset=64, end_lineno=301, end_col_offset=68), slice=Constant(value=2,
      lineno=301, col_offset=69, end_lineno=301, end_col_offset=70), ctx=Load(), lineno=301,
      col_offset=64, end_lineno=301, end_col_offset=71)], lineno=301, col_offset=13,
      end_lineno=301, end_col_offset=72), generators=[comprehension(target=Name(id=''edge'',
      ctx=Store(), lineno=301, col_offset=77, end_lineno=301, end_col_offset=81),
      iter=Call(func=Attribute(value=Attribute(value=Name(id=''G'', ctx=Load(), lineno=301,
      col_offset=85, end_lineno=301, end_col_offset=86), attr=''edges'', ctx=Load(),
      lineno=301, col_offset=85, end_lineno=301, end_col_offset=92), attr=''data'',
      ctx=Load(), lineno=301, col_offset=85, end_lineno=301, end_col_offset=97), args=[],
      keywords=[], lineno=301, col_offset=85, end_lineno=301, end_col_offset=99),
      ifs=[], is_async=0)], lineno=301, col_offset=12, end_lineno=301, end_col_offset=100),
      lineno=301, col_offset=4, end_lineno=301, end_col_offset=100), Return(value=Dict(keys=[Constant(value=''nodes'',
      lineno=304, col_offset=8, end_lineno=304, end_col_offset=15), Constant(value=''edges'',
      lineno=305, col_offset=8, end_lineno=305, end_col_offset=15)], values=[Name(id=''nodes'',
      ctx=Load(), lineno=304, col_offset=17, end_lineno=304, end_col_offset=22), Name(id=''edges'',
      ctx=Load(), lineno=305, col_offset=17, end_lineno=305, end_col_offset=22)],
      lineno=303, col_offset=11, end_lineno=306, end_col_offset=5), lineno=303, col_offset=4,
      end_lineno=306, end_col_offset=5)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=215, col_offset=89, end_lineno=215, end_col_offset=93), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=215, col_offset=94, end_lineno=215, end_col_offset=97), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=215, col_offset=99, end_lineno=215, end_col_offset=104),
      slice=Tuple(elts=[Subscript(value=Name(id=''List'', ctx=Load(), lineno=215,
      col_offset=105, end_lineno=215, end_col_offset=109), slice=Name(id=''str'',
      ctx=Load(), lineno=215, col_offset=110, end_lineno=215, end_col_offset=113),
      ctx=Load(), lineno=215, col_offset=105, end_lineno=215, end_col_offset=114),
      Subscript(value=Name(id=''Dict'', ctx=Load(), lineno=215, col_offset=116, end_lineno=215,
      end_col_offset=120), slice=Tuple(elts=[Name(id=''str'', ctx=Load(), lineno=215,
      col_offset=121, end_lineno=215, end_col_offset=124), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=215, col_offset=126, end_lineno=215, end_col_offset=130),
      slice=Name(id=''str'', ctx=Load(), lineno=215, col_offset=131, end_lineno=215,
      end_col_offset=134), ctx=Load(), lineno=215, col_offset=126, end_lineno=215,
      end_col_offset=135)], ctx=Load(), lineno=215, col_offset=121, end_lineno=215,
      end_col_offset=135), ctx=Load(), lineno=215, col_offset=116, end_lineno=215,
      end_col_offset=136)], ctx=Load(), lineno=215, col_offset=105, end_lineno=215,
      end_col_offset=136), ctx=Load(), lineno=215, col_offset=99, end_lineno=215,
      end_col_offset=137)], ctx=Load(), lineno=215, col_offset=94, end_lineno=215,
      end_col_offset=137), ctx=Load(), lineno=215, col_offset=89, end_lineno=215,
      end_col_offset=138), lineno=215, col_offset=0, end_lineno=306, end_col_offset=5)'
    function_docstring: "Create a dictionary representation of file details.\nArgs:\n\
      \    file_summary: Dict[str, Union[Dict, str]]: The details extracted from the\
      \ file.\n    internal_only: bool: If True, only include function calls where\
      \ both the caller and called function are within the file.\nReturns:\n    dict:\
      \ A dictionary with nodes and edges representing the relationships\n       \
      \ in the code."
    function_inputs:
    - file_summary
    - internal_only
    function_defaults:
    - 'True'
    function_returns:
    - '{''nodes'': nodes, ''edges'': edges}'
    function_calls:
    - class_details['method_defs'].keys
    - G.add_edge
    - G.add_node
    - function_def[called_func].get
    - function_def.keys
    - class_def.items
    - str
    - class_def[called_class_name]['method_defs'].get
    - G.edges.data
    - called_func.strip
    - function_def.get
    - nx.DiGraph
    - class_def.get
    - function_def.items
    - class_def[called_class_name]['method_defs'].get(called_method_name, {}).get
    - called_func.rsplit
    - class_details['method_defs'].items
    - list
    function_variables:
    - G
    - qualified_method_name
    - target_returns
    - target_inputs
    - edges
    - edge_data
    - nodes
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_python_file_details:
    function_name: get_python_file_details
    function_code: "def get_python_file_details(file_path: str) -> Dict[str, Union[Dict,\
      \ str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n \
      \       file_path: str: The path to the Python file.\n    Returns:\n       \
      \ Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\
      \"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore')\
      \ as f:\n            code = f.read()\n    except PermissionError:\n        logging.warning(f'Permission\
      \ denied: {file_path}')\n        return None\n    try:\n        tree = ast.parse(code)\n\
      \    except SyntaxError:\n        logging.warning(f'Syntax error in file: {file_path}')\n\
      \        return None\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n\
      \    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions,\
      \ 'classes': visitor.classes}\n    file_details['file_info']['internal_code_graph']\
      \ = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['entire_code_graph']\
      \ = code_graph(file_details['file_info']['file_summary'], internal_only=False)\n\
      \    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\"\
      ', '')\n    return file_details"
    function_ast: 'FunctionDef(name=''get_python_file_details'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load(), lineno=309,
      col_offset=39, end_lineno=309, end_col_offset=42), lineno=309, col_offset=28,
      end_lineno=309, end_col_offset=42)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Extract details from a Python file.\n    Args:\n        file_path:
      str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict,
      str]]: The details extracted from the file.\n    '', lineno=310, col_offset=4,
      end_lineno=316, end_col_offset=7), lineno=310, col_offset=4, end_lineno=316,
      end_col_offset=7), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=318, col_offset=13, end_lineno=318, end_col_offset=17), args=[Name(id=''file_path'',
      ctx=Load(), lineno=318, col_offset=18, end_lineno=318, end_col_offset=27), Constant(value=''r'',
      lineno=318, col_offset=29, end_lineno=318, end_col_offset=32)], keywords=[keyword(arg=''encoding'',
      value=Constant(value=''utf-8'', lineno=318, col_offset=43, end_lineno=318, end_col_offset=50),
      lineno=318, col_offset=34, end_lineno=318, end_col_offset=50), keyword(arg=''errors'',
      value=Constant(value=''ignore'', lineno=318, col_offset=59, end_lineno=318,
      end_col_offset=67), lineno=318, col_offset=52, end_lineno=318, end_col_offset=67)],
      lineno=318, col_offset=13, end_lineno=318, end_col_offset=68), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=318, col_offset=72, end_lineno=318, end_col_offset=73))],
      body=[Assign(targets=[Name(id=''code'', ctx=Store(), lineno=319, col_offset=12,
      end_lineno=319, end_col_offset=16)], value=Call(func=Attribute(value=Name(id=''f'',
      ctx=Load(), lineno=319, col_offset=19, end_lineno=319, end_col_offset=20), attr=''read'',
      ctx=Load(), lineno=319, col_offset=19, end_lineno=319, end_col_offset=25), args=[],
      keywords=[], lineno=319, col_offset=19, end_lineno=319, end_col_offset=27),
      lineno=319, col_offset=12, end_lineno=319, end_col_offset=27)], lineno=318,
      col_offset=8, end_lineno=319, end_col_offset=27)], handlers=[ExceptHandler(type=Name(id=''PermissionError'',
      ctx=Load(), lineno=320, col_offset=11, end_lineno=320, end_col_offset=26), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=321, col_offset=8, end_lineno=321, end_col_offset=15), attr=''warning'',
      ctx=Load(), lineno=321, col_offset=8, end_lineno=321, end_col_offset=23), args=[JoinedStr(values=[Constant(value=''Permission
      denied: '', lineno=321, col_offset=24, end_lineno=321, end_col_offset=57), FormattedValue(value=Name(id=''file_path'',
      ctx=Load(), lineno=321, col_offset=46, end_lineno=321, end_col_offset=55), conversion=-1,
      lineno=321, col_offset=24, end_lineno=321, end_col_offset=57)], lineno=321,
      col_offset=24, end_lineno=321, end_col_offset=57)], keywords=[], lineno=321,
      col_offset=8, end_lineno=321, end_col_offset=58), lineno=321, col_offset=8,
      end_lineno=321, end_col_offset=58), Return(value=Constant(value=None, lineno=322,
      col_offset=15, end_lineno=322, end_col_offset=19), lineno=322, col_offset=8,
      end_lineno=322, end_col_offset=19)], lineno=320, col_offset=4, end_lineno=322,
      end_col_offset=19)], orelse=[], finalbody=[], lineno=317, col_offset=4, end_lineno=322,
      end_col_offset=19), Try(body=[Assign(targets=[Name(id=''tree'', ctx=Store(),
      lineno=324, col_offset=8, end_lineno=324, end_col_offset=12)], value=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=324, col_offset=15, end_lineno=324, end_col_offset=18), attr=''parse'',
      ctx=Load(), lineno=324, col_offset=15, end_lineno=324, end_col_offset=24), args=[Name(id=''code'',
      ctx=Load(), lineno=324, col_offset=25, end_lineno=324, end_col_offset=29)],
      keywords=[], lineno=324, col_offset=15, end_lineno=324, end_col_offset=30),
      lineno=324, col_offset=8, end_lineno=324, end_col_offset=30)], handlers=[ExceptHandler(type=Name(id=''SyntaxError'',
      ctx=Load(), lineno=325, col_offset=11, end_lineno=325, end_col_offset=22), body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=326, col_offset=8, end_lineno=326, end_col_offset=15), attr=''warning'',
      ctx=Load(), lineno=326, col_offset=8, end_lineno=326, end_col_offset=23), args=[JoinedStr(values=[Constant(value=''Syntax
      error in file: '', lineno=326, col_offset=24, end_lineno=326, end_col_offset=60),
      FormattedValue(value=Name(id=''file_path'', ctx=Load(), lineno=326, col_offset=49,
      end_lineno=326, end_col_offset=58), conversion=-1, lineno=326, col_offset=24,
      end_lineno=326, end_col_offset=60)], lineno=326, col_offset=24, end_lineno=326,
      end_col_offset=60)], keywords=[], lineno=326, col_offset=8, end_lineno=326,
      end_col_offset=61), lineno=326, col_offset=8, end_lineno=326, end_col_offset=61),
      Return(value=Constant(value=None, lineno=327, col_offset=15, end_lineno=327,
      end_col_offset=19), lineno=327, col_offset=8, end_lineno=327, end_col_offset=19)],
      lineno=325, col_offset=4, end_lineno=327, end_col_offset=19)], orelse=[], finalbody=[],
      lineno=323, col_offset=4, end_lineno=327, end_col_offset=19), Assign(targets=[Name(id=''visitor'',
      ctx=Store(), lineno=328, col_offset=4, end_lineno=328, end_col_offset=11)],
      value=Call(func=Name(id=''CodeVisitor'', ctx=Load(), lineno=328, col_offset=14,
      end_lineno=328, end_col_offset=25), args=[Name(id=''code'', ctx=Load(), lineno=328,
      col_offset=26, end_lineno=328, end_col_offset=30)], keywords=[], lineno=328,
      col_offset=14, end_lineno=328, end_col_offset=31), lineno=328, col_offset=4,
      end_lineno=328, end_col_offset=31), Expr(value=Call(func=Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=329, col_offset=4, end_lineno=329, end_col_offset=11), attr=''analyze'',
      ctx=Load(), lineno=329, col_offset=4, end_lineno=329, end_col_offset=19), args=[Name(id=''tree'',
      ctx=Load(), lineno=329, col_offset=20, end_lineno=329, end_col_offset=24)],
      keywords=[], lineno=329, col_offset=4, end_lineno=329, end_col_offset=25), lineno=329,
      col_offset=4, end_lineno=329, end_col_offset=25), Assign(targets=[Name(id=''file_details'',
      ctx=Store(), lineno=330, col_offset=4, end_lineno=330, end_col_offset=16)],
      value=Dict(keys=[Constant(value=''file_info'', lineno=330, col_offset=20, end_lineno=330,
      end_col_offset=31), Constant(value=''functions'', lineno=330, col_offset=52,
      end_lineno=330, end_col_offset=63), Constant(value=''classes'', lineno=330,
      col_offset=84, end_lineno=330, end_col_offset=93)], values=[Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=330, col_offset=33, end_lineno=330, end_col_offset=40), attr=''file_info'',
      ctx=Load(), lineno=330, col_offset=33, end_lineno=330, end_col_offset=50), Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=330, col_offset=65, end_lineno=330, end_col_offset=72), attr=''functions'',
      ctx=Load(), lineno=330, col_offset=65, end_lineno=330, end_col_offset=82), Attribute(value=Name(id=''visitor'',
      ctx=Load(), lineno=330, col_offset=95, end_lineno=330, end_col_offset=102),
      attr=''classes'', ctx=Load(), lineno=330, col_offset=95, end_lineno=330, end_col_offset=110)],
      lineno=330, col_offset=19, end_lineno=330, end_col_offset=111), lineno=330,
      col_offset=4, end_lineno=330, end_col_offset=111), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=333, col_offset=4, end_lineno=333, end_col_offset=16), slice=Constant(value=''file_info'',
      lineno=333, col_offset=17, end_lineno=333, end_col_offset=28), ctx=Load(), lineno=333,
      col_offset=4, end_lineno=333, end_col_offset=29), slice=Constant(value=''internal_code_graph'',
      lineno=333, col_offset=30, end_lineno=333, end_col_offset=51), ctx=Store(),
      lineno=333, col_offset=4, end_lineno=333, end_col_offset=52)], value=Call(func=Name(id=''code_graph'',
      ctx=Load(), lineno=333, col_offset=55, end_lineno=333, end_col_offset=65), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=333, col_offset=66, end_lineno=333, end_col_offset=78), slice=Constant(value=''file_info'',
      lineno=333, col_offset=79, end_lineno=333, end_col_offset=90), ctx=Load(), lineno=333,
      col_offset=66, end_lineno=333, end_col_offset=91), slice=Constant(value=''file_summary'',
      lineno=333, col_offset=92, end_lineno=333, end_col_offset=106), ctx=Load(),
      lineno=333, col_offset=66, end_lineno=333, end_col_offset=107)], keywords=[],
      lineno=333, col_offset=55, end_lineno=333, end_col_offset=108), lineno=333,
      col_offset=4, end_lineno=333, end_col_offset=108), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=334, col_offset=4, end_lineno=334, end_col_offset=16), slice=Constant(value=''file_info'',
      lineno=334, col_offset=17, end_lineno=334, end_col_offset=28), ctx=Load(), lineno=334,
      col_offset=4, end_lineno=334, end_col_offset=29), slice=Constant(value=''entire_code_graph'',
      lineno=334, col_offset=30, end_lineno=334, end_col_offset=49), ctx=Store(),
      lineno=334, col_offset=4, end_lineno=334, end_col_offset=50)], value=Call(func=Name(id=''code_graph'',
      ctx=Load(), lineno=334, col_offset=53, end_lineno=334, end_col_offset=63), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=334, col_offset=64, end_lineno=334, end_col_offset=76), slice=Constant(value=''file_info'',
      lineno=334, col_offset=77, end_lineno=334, end_col_offset=88), ctx=Load(), lineno=334,
      col_offset=64, end_lineno=334, end_col_offset=89), slice=Constant(value=''file_summary'',
      lineno=334, col_offset=90, end_lineno=334, end_col_offset=104), ctx=Load(),
      lineno=334, col_offset=64, end_lineno=334, end_col_offset=105)], keywords=[keyword(arg=''internal_only'',
      value=Constant(value=False, lineno=334, col_offset=121, end_lineno=334, end_col_offset=126),
      lineno=334, col_offset=107, end_lineno=334, end_col_offset=126)], lineno=334,
      col_offset=53, end_lineno=334, end_col_offset=127), lineno=334, col_offset=4,
      end_lineno=334, end_col_offset=127), Assign(targets=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=335, col_offset=4, end_lineno=335, end_col_offset=16), slice=Constant(value=''file_info'',
      lineno=335, col_offset=17, end_lineno=335, end_col_offset=28), ctx=Load(), lineno=335,
      col_offset=4, end_lineno=335, end_col_offset=29), slice=Constant(value=''file_summary'',
      lineno=335, col_offset=30, end_lineno=335, end_col_offset=44), ctx=Store(),
      lineno=335, col_offset=4, end_lineno=335, end_col_offset=45)], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=335, col_offset=48, end_lineno=335, end_col_offset=52), attr=''dumps'',
      ctx=Load(), lineno=335, col_offset=48, end_lineno=335, end_col_offset=58), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=335, col_offset=59, end_lineno=335, end_col_offset=71), slice=Constant(value=''file_info'',
      lineno=335, col_offset=72, end_lineno=335, end_col_offset=83), ctx=Load(), lineno=335,
      col_offset=59, end_lineno=335, end_col_offset=84), slice=Constant(value=''file_summary'',
      lineno=335, col_offset=85, end_lineno=335, end_col_offset=99), ctx=Load(), lineno=335,
      col_offset=59, end_lineno=335, end_col_offset=100)], keywords=[], lineno=335,
      col_offset=48, end_lineno=335, end_col_offset=101), attr=''replace'', ctx=Load(),
      lineno=335, col_offset=48, end_lineno=335, end_col_offset=109), args=[Constant(value=''"'',
      lineno=335, col_offset=110, end_lineno=335, end_col_offset=114), Constant(value='''',
      lineno=335, col_offset=115, end_lineno=335, end_col_offset=117)], keywords=[],
      lineno=335, col_offset=48, end_lineno=335, end_col_offset=118), lineno=335,
      col_offset=4, end_lineno=335, end_col_offset=118), Return(value=Name(id=''file_details'',
      ctx=Load(), lineno=336, col_offset=11, end_lineno=336, end_col_offset=23), lineno=336,
      col_offset=4, end_lineno=336, end_col_offset=23)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=309, col_offset=47, end_lineno=309, end_col_offset=51), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=309, col_offset=52, end_lineno=309, end_col_offset=55), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=309, col_offset=57, end_lineno=309, end_col_offset=62), slice=Tuple(elts=[Name(id=''Dict'',
      ctx=Load(), lineno=309, col_offset=63, end_lineno=309, end_col_offset=67), Name(id=''str'',
      ctx=Load(), lineno=309, col_offset=69, end_lineno=309, end_col_offset=72)],
      ctx=Load(), lineno=309, col_offset=63, end_lineno=309, end_col_offset=72), ctx=Load(),
      lineno=309, col_offset=57, end_lineno=309, end_col_offset=73)], ctx=Load(),
      lineno=309, col_offset=52, end_lineno=309, end_col_offset=73), ctx=Load(), lineno=309,
      col_offset=47, end_lineno=309, end_col_offset=74), lineno=309, col_offset=0,
      end_lineno=336, end_col_offset=23)'
    function_docstring: "Extract details from a Python file.\nArgs:\n    file_path:\
      \ str: The path to the Python file.\nReturns:\n    Dict[str, Union[Dict, str]]:\
      \ The details extracted from the file."
    function_inputs:
    - file_path
    function_defaults: []
    function_returns:
    - file_details
    - None
    - None
    function_calls:
    - open
    - logging.warning
    - json.dumps(file_details['file_info']['file_summary']).replace
    - json.dumps
    - CodeVisitor
    - f.read
    - visitor.analyze
    - ast.parse
    - code_graph
    function_variables:
    - visitor
    - file_details
    - code
    - tree
    function_decorators: []
    function_annotations: []
    function_properties: []
classes:
  ControlFlowVisitor:
    class_name: ControlFlowVisitor
    class_code: "class ControlFlowVisitor(ast.NodeVisitor):\n    \"\"\"\n    This\
      \ class inherits from ast.NodeVisitor and is used to visit nodes in the\n  \
      \  AST (Abstract Syntax Tree).It extracts control flow keywords to give a \n\
      \    high-level understanding of the program flow.\n    Attributes:\n      \
      \  node_type_to_keyword (dict): A dictionary mapping AST node types to \n  \
      \          corresponding control flow keywords.\n        control_flow (list):\
      \ A list storing the sequence of control flow \n            keywords encountered\
      \ in the AST.\n    Methods:\n        __init__(): Initializes a new instance\
      \ of the class, setting up the\n            control flow list.\n        generic_visit(node):\
      \ Method to visit a node. If the node type \n            corresponds to a control\
      \ flow keyword, it is added to the \n            control_flow list. The method\
      \ then calls the inherited\n            generic_visit to continue visiting other\
      \ nodes.\n        get_control_flow(): Returns a string representing the control\
      \ flow of\n            the program. The control flow keywords are joined in\
      \ the order they\n            were encountered during the AST visit.\n    \"\
      \"\"\n    node_type_to_keyword = {ast.If: 'if', ast.While: 'while', ast.For:\
      \ 'for', ast.AsyncFor: 'for', ast.AsyncWith: 'with', ast.Try: 'try', ast.With:\
      \ 'with', ast.ExceptHandler: 'except', ast.FunctionDef: 'def', ast.AsyncFunctionDef:\
      \ 'def', ast.ClassDef: 'class', ast.Module: 'module'}\n\n    def __init__(self):\n\
      \        self.control_flow = []\n\n    def generic_visit(self, node):\n    \
      \    keyword = self.node_type_to_keyword.get(type(node))\n        if keyword:\n\
      \            if isinstance(node, ast.FunctionDef):\n                self.control_flow.append(keyword\
      \ + ' ' + node.name)\n            else:\n                self.control_flow.append(keyword)\n\
      \        super().generic_visit(node)\n\n    def get_control_flow(self):\n  \
      \      return ' -> '.join(self.control_flow)"
    class_ast: 'ClassDef(name=''ControlFlowVisitor'', bases=[Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=46, col_offset=25, end_lineno=46, end_col_offset=28), attr=''NodeVisitor'',
      ctx=Load(), lineno=46, col_offset=25, end_lineno=46, end_col_offset=40)], keywords=[],
      body=[Expr(value=Constant(value=''\n    This class inherits from ast.NodeVisitor
      and is used to visit nodes in the\n    AST (Abstract Syntax Tree).It extracts
      control flow keywords to give a \n    high-level understanding of the program
      flow.\n    Attributes:\n        node_type_to_keyword (dict): A dictionary mapping
      AST node types to \n            corresponding control flow keywords.\n        control_flow
      (list): A list storing the sequence of control flow \n            keywords encountered
      in the AST.\n    Methods:\n        __init__(): Initializes a new instance of
      the class, setting up the\n            control flow list.\n        generic_visit(node):
      Method to visit a node. If the node type \n            corresponds to a control
      flow keyword, it is added to the \n            control_flow list. The method
      then calls the inherited\n            generic_visit to continue visiting other
      nodes.\n        get_control_flow(): Returns a string representing the control
      flow of\n            the program. The control flow keywords are joined in the
      order they\n            were encountered during the AST visit.\n    '', lineno=47,
      col_offset=4, end_lineno=66, end_col_offset=7), lineno=47, col_offset=4, end_lineno=66,
      end_col_offset=7), Assign(targets=[Name(id=''node_type_to_keyword'', ctx=Store(),
      lineno=67, col_offset=4, end_lineno=67, end_col_offset=24)], value=Dict(keys=[Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=68, col_offset=8, end_lineno=68, end_col_offset=11), attr=''If'',
      ctx=Load(), lineno=68, col_offset=8, end_lineno=68, end_col_offset=14), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=69, col_offset=8, end_lineno=69, end_col_offset=11), attr=''While'',
      ctx=Load(), lineno=69, col_offset=8, end_lineno=69, end_col_offset=17), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=70, col_offset=8, end_lineno=70, end_col_offset=11), attr=''For'',
      ctx=Load(), lineno=70, col_offset=8, end_lineno=70, end_col_offset=15), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=71, col_offset=8, end_lineno=71, end_col_offset=11), attr=''AsyncFor'',
      ctx=Load(), lineno=71, col_offset=8, end_lineno=71, end_col_offset=20), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=72, col_offset=8, end_lineno=72, end_col_offset=11), attr=''AsyncWith'',
      ctx=Load(), lineno=72, col_offset=8, end_lineno=72, end_col_offset=21), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=73, col_offset=8, end_lineno=73, end_col_offset=11), attr=''Try'',
      ctx=Load(), lineno=73, col_offset=8, end_lineno=73, end_col_offset=15), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=74, col_offset=8, end_lineno=74, end_col_offset=11), attr=''With'',
      ctx=Load(), lineno=74, col_offset=8, end_lineno=74, end_col_offset=16), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=75, col_offset=8, end_lineno=75, end_col_offset=11), attr=''ExceptHandler'',
      ctx=Load(), lineno=75, col_offset=8, end_lineno=75, end_col_offset=25), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=76, col_offset=8, end_lineno=76, end_col_offset=11), attr=''FunctionDef'',
      ctx=Load(), lineno=76, col_offset=8, end_lineno=76, end_col_offset=23), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=77, col_offset=8, end_lineno=77, end_col_offset=11), attr=''AsyncFunctionDef'',
      ctx=Load(), lineno=77, col_offset=8, end_lineno=77, end_col_offset=28), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=78, col_offset=8, end_lineno=78, end_col_offset=11), attr=''ClassDef'',
      ctx=Load(), lineno=78, col_offset=8, end_lineno=78, end_col_offset=20), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=79, col_offset=8, end_lineno=79, end_col_offset=11), attr=''Module'',
      ctx=Load(), lineno=79, col_offset=8, end_lineno=79, end_col_offset=18)], values=[Constant(value=''if'',
      lineno=68, col_offset=16, end_lineno=68, end_col_offset=20), Constant(value=''while'',
      lineno=69, col_offset=19, end_lineno=69, end_col_offset=26), Constant(value=''for'',
      lineno=70, col_offset=17, end_lineno=70, end_col_offset=22), Constant(value=''for'',
      lineno=71, col_offset=22, end_lineno=71, end_col_offset=27), Constant(value=''with'',
      lineno=72, col_offset=23, end_lineno=72, end_col_offset=29), Constant(value=''try'',
      lineno=73, col_offset=17, end_lineno=73, end_col_offset=22), Constant(value=''with'',
      lineno=74, col_offset=18, end_lineno=74, end_col_offset=24), Constant(value=''except'',
      lineno=75, col_offset=27, end_lineno=75, end_col_offset=35), Constant(value=''def'',
      lineno=76, col_offset=25, end_lineno=76, end_col_offset=30), Constant(value=''def'',
      lineno=77, col_offset=30, end_lineno=77, end_col_offset=35), Constant(value=''class'',
      lineno=78, col_offset=22, end_lineno=78, end_col_offset=29), Constant(value=''module'',
      lineno=79, col_offset=20, end_lineno=79, end_col_offset=28)], lineno=67, col_offset=27,
      end_lineno=80, end_col_offset=5), lineno=67, col_offset=4, end_lineno=80, end_col_offset=5),
      FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
      lineno=81, col_offset=17, end_lineno=81, end_col_offset=21)], kwonlyargs=[],
      kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=12), attr=''control_flow'',
      ctx=Store(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=25)], value=List(elts=[],
      ctx=Load(), lineno=82, col_offset=28, end_lineno=82, end_col_offset=30), lineno=82,
      col_offset=8, end_lineno=82, end_col_offset=30)], decorator_list=[], lineno=81,
      col_offset=4, end_lineno=82, end_col_offset=30), FunctionDef(name=''generic_visit'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=83, col_offset=22,
      end_lineno=83, end_col_offset=26), arg(arg=''node'', lineno=83, col_offset=28,
      end_lineno=83, end_col_offset=32)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Assign(targets=[Name(id=''keyword'', ctx=Store(), lineno=84, col_offset=8,
      end_lineno=84, end_col_offset=15)], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=84, col_offset=18, end_lineno=84, end_col_offset=22), attr=''node_type_to_keyword'',
      ctx=Load(), lineno=84, col_offset=18, end_lineno=84, end_col_offset=43), attr=''get'',
      ctx=Load(), lineno=84, col_offset=18, end_lineno=84, end_col_offset=47), args=[Call(func=Name(id=''type'',
      ctx=Load(), lineno=84, col_offset=48, end_lineno=84, end_col_offset=52), args=[Name(id=''node'',
      ctx=Load(), lineno=84, col_offset=53, end_lineno=84, end_col_offset=57)], keywords=[],
      lineno=84, col_offset=48, end_lineno=84, end_col_offset=58)], keywords=[], lineno=84,
      col_offset=18, end_lineno=84, end_col_offset=59), lineno=84, col_offset=8, end_lineno=84,
      end_col_offset=59), If(test=Name(id=''keyword'', ctx=Load(), lineno=85, col_offset=11,
      end_lineno=85, end_col_offset=18), body=[If(test=Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=86, col_offset=15, end_lineno=86, end_col_offset=25), args=[Name(id=''node'',
      ctx=Load(), lineno=86, col_offset=26, end_lineno=86, end_col_offset=30), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=86, col_offset=32, end_lineno=86, end_col_offset=35), attr=''FunctionDef'',
      ctx=Load(), lineno=86, col_offset=32, end_lineno=86, end_col_offset=47)], keywords=[],
      lineno=86, col_offset=15, end_lineno=86, end_col_offset=48), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=87, col_offset=16, end_lineno=87, end_col_offset=20), attr=''control_flow'',
      ctx=Load(), lineno=87, col_offset=16, end_lineno=87, end_col_offset=33), attr=''append'',
      ctx=Load(), lineno=87, col_offset=16, end_lineno=87, end_col_offset=40), args=[BinOp(left=BinOp(left=Name(id=''keyword'',
      ctx=Load(), lineno=87, col_offset=41, end_lineno=87, end_col_offset=48), op=Add(),
      right=Constant(value='' '', lineno=87, col_offset=51, end_lineno=87, end_col_offset=54),
      lineno=87, col_offset=41, end_lineno=87, end_col_offset=54), op=Add(), right=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=87, col_offset=57, end_lineno=87, end_col_offset=61), attr=''name'',
      ctx=Load(), lineno=87, col_offset=57, end_lineno=87, end_col_offset=66), lineno=87,
      col_offset=41, end_lineno=87, end_col_offset=66)], keywords=[], lineno=87, col_offset=16,
      end_lineno=87, end_col_offset=67), lineno=87, col_offset=16, end_lineno=87,
      end_col_offset=67)], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=89, col_offset=16, end_lineno=89, end_col_offset=20), attr=''control_flow'',
      ctx=Load(), lineno=89, col_offset=16, end_lineno=89, end_col_offset=33), attr=''append'',
      ctx=Load(), lineno=89, col_offset=16, end_lineno=89, end_col_offset=40), args=[Name(id=''keyword'',
      ctx=Load(), lineno=89, col_offset=41, end_lineno=89, end_col_offset=48)], keywords=[],
      lineno=89, col_offset=16, end_lineno=89, end_col_offset=49), lineno=89, col_offset=16,
      end_lineno=89, end_col_offset=49)], lineno=86, col_offset=12, end_lineno=89,
      end_col_offset=49)], orelse=[], lineno=85, col_offset=8, end_lineno=89, end_col_offset=49),
      Expr(value=Call(func=Attribute(value=Call(func=Name(id=''super'', ctx=Load(),
      lineno=90, col_offset=8, end_lineno=90, end_col_offset=13), args=[], keywords=[],
      lineno=90, col_offset=8, end_lineno=90, end_col_offset=15), attr=''generic_visit'',
      ctx=Load(), lineno=90, col_offset=8, end_lineno=90, end_col_offset=29), args=[Name(id=''node'',
      ctx=Load(), lineno=90, col_offset=30, end_lineno=90, end_col_offset=34)], keywords=[],
      lineno=90, col_offset=8, end_lineno=90, end_col_offset=35), lineno=90, col_offset=8,
      end_lineno=90, end_col_offset=35)], decorator_list=[], lineno=83, col_offset=4,
      end_lineno=90, end_col_offset=35), FunctionDef(name=''get_control_flow'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=91, col_offset=25, end_lineno=91, end_col_offset=29)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value=''
      -> '', lineno=92, col_offset=15, end_lineno=92, end_col_offset=21), attr=''join'',
      ctx=Load(), lineno=92, col_offset=15, end_lineno=92, end_col_offset=26), args=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=92, col_offset=27, end_lineno=92, end_col_offset=31), attr=''control_flow'',
      ctx=Load(), lineno=92, col_offset=27, end_lineno=92, end_col_offset=44)], keywords=[],
      lineno=92, col_offset=15, end_lineno=92, end_col_offset=45), lineno=92, col_offset=8,
      end_lineno=92, end_col_offset=45)], decorator_list=[], lineno=91, col_offset=4,
      end_lineno=92, end_col_offset=45)], decorator_list=[], lineno=46, col_offset=0,
      end_lineno=92, end_col_offset=45)'
    class_docstring: "This class inherits from ast.NodeVisitor and is used to visit\
      \ nodes in the\nAST (Abstract Syntax Tree).It extracts control flow keywords\
      \ to give a \nhigh-level understanding of the program flow.\nAttributes:\n \
      \   node_type_to_keyword (dict): A dictionary mapping AST node types to \n \
      \       corresponding control flow keywords.\n    control_flow (list): A list\
      \ storing the sequence of control flow \n        keywords encountered in the\
      \ AST.\nMethods:\n    __init__(): Initializes a new instance of the class, setting\
      \ up the\n        control flow list.\n    generic_visit(node): Method to visit\
      \ a node. If the node type \n        corresponds to a control flow keyword,\
      \ it is added to the \n        control_flow list. The method then calls the\
      \ inherited\n        generic_visit to continue visiting other nodes.\n    get_control_flow():\
      \ Returns a string representing the control flow of\n        the program. The\
      \ control flow keywords are joined in the order they\n        were encountered\
      \ during the AST visit."
    class_inputs: null
    class_defaults: null
    class_returns:
    - ''' -> ''.join(self.control_flow)'
    class_calls:
    - isinstance
    - super().generic_visit
    - ''' -> ''.join'
    - super
    - self.node_type_to_keyword.get
    - self.control_flow.append
    - type
    class_variables:
    - node_type_to_keyword
    - keyword
    class_decorators: []
    class_annotations: []
    class_properties:
    - self.control_flow
    class_attributes:
    - control_flow
    class_methods:
    - generic_visit
    - get_control_flow
    class_inheritance:
    - ast.NodeVisitor
    class_static_methods: []
    class_method___init__:
      method_name: __init__
      method_code: "def __init__(self):\n    self.control_flow = []"
      method_ast: FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self',
        lineno=81, col_offset=17, end_lineno=81, end_col_offset=21)], kwonlyargs=[],
        kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=12), attr='control_flow',
        ctx=Store(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=25)],
        value=List(elts=[], ctx=Load(), lineno=82, col_offset=28, end_lineno=82, end_col_offset=30),
        lineno=82, col_offset=8, end_lineno=82, end_col_offset=30)], decorator_list=[],
        lineno=81, col_offset=4, end_lineno=82, end_col_offset=30)
      method_docstring: null
      method_inputs:
      - self
      method_defaults: []
      method_returns: []
      method_calls: []
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.control_flow
    class_method_generic_visit:
      method_name: generic_visit
      method_code: "def generic_visit(self, node):\n    keyword = self.node_type_to_keyword.get(type(node))\n\
        \    if keyword:\n        if isinstance(node, ast.FunctionDef):\n        \
        \    self.control_flow.append(keyword + ' ' + node.name)\n        else:\n\
        \            self.control_flow.append(keyword)\n    super().generic_visit(node)"
      method_ast: FunctionDef(name='generic_visit', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=83, col_offset=22, end_lineno=83, end_col_offset=26),
        arg(arg='node', lineno=83, col_offset=28, end_lineno=83, end_col_offset=32)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='keyword',
        ctx=Store(), lineno=84, col_offset=8, end_lineno=84, end_col_offset=15)],
        value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load(),
        lineno=84, col_offset=18, end_lineno=84, end_col_offset=22), attr='node_type_to_keyword',
        ctx=Load(), lineno=84, col_offset=18, end_lineno=84, end_col_offset=43), attr='get',
        ctx=Load(), lineno=84, col_offset=18, end_lineno=84, end_col_offset=47), args=[Call(func=Name(id='type',
        ctx=Load(), lineno=84, col_offset=48, end_lineno=84, end_col_offset=52), args=[Name(id='node',
        ctx=Load(), lineno=84, col_offset=53, end_lineno=84, end_col_offset=57)],
        keywords=[], lineno=84, col_offset=48, end_lineno=84, end_col_offset=58)],
        keywords=[], lineno=84, col_offset=18, end_lineno=84, end_col_offset=59),
        lineno=84, col_offset=8, end_lineno=84, end_col_offset=59), If(test=Name(id='keyword',
        ctx=Load(), lineno=85, col_offset=11, end_lineno=85, end_col_offset=18), body=[If(test=Call(func=Name(id='isinstance',
        ctx=Load(), lineno=86, col_offset=15, end_lineno=86, end_col_offset=25), args=[Name(id='node',
        ctx=Load(), lineno=86, col_offset=26, end_lineno=86, end_col_offset=30), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=86, col_offset=32, end_lineno=86, end_col_offset=35), attr='FunctionDef',
        ctx=Load(), lineno=86, col_offset=32, end_lineno=86, end_col_offset=47)],
        keywords=[], lineno=86, col_offset=15, end_lineno=86, end_col_offset=48),
        body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=87, col_offset=16, end_lineno=87, end_col_offset=20), attr='control_flow',
        ctx=Load(), lineno=87, col_offset=16, end_lineno=87, end_col_offset=33), attr='append',
        ctx=Load(), lineno=87, col_offset=16, end_lineno=87, end_col_offset=40), args=[BinOp(left=BinOp(left=Name(id='keyword',
        ctx=Load(), lineno=87, col_offset=41, end_lineno=87, end_col_offset=48), op=Add(),
        right=Constant(value=' ', lineno=87, col_offset=51, end_lineno=87, end_col_offset=54),
        lineno=87, col_offset=41, end_lineno=87, end_col_offset=54), op=Add(), right=Attribute(value=Name(id='node',
        ctx=Load(), lineno=87, col_offset=57, end_lineno=87, end_col_offset=61), attr='name',
        ctx=Load(), lineno=87, col_offset=57, end_lineno=87, end_col_offset=66), lineno=87,
        col_offset=41, end_lineno=87, end_col_offset=66)], keywords=[], lineno=87,
        col_offset=16, end_lineno=87, end_col_offset=67), lineno=87, col_offset=16,
        end_lineno=87, end_col_offset=67)], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=89, col_offset=16, end_lineno=89, end_col_offset=20), attr='control_flow',
        ctx=Load(), lineno=89, col_offset=16, end_lineno=89, end_col_offset=33), attr='append',
        ctx=Load(), lineno=89, col_offset=16, end_lineno=89, end_col_offset=40), args=[Name(id='keyword',
        ctx=Load(), lineno=89, col_offset=41, end_lineno=89, end_col_offset=48)],
        keywords=[], lineno=89, col_offset=16, end_lineno=89, end_col_offset=49),
        lineno=89, col_offset=16, end_lineno=89, end_col_offset=49)], lineno=86, col_offset=12,
        end_lineno=89, end_col_offset=49)], orelse=[], lineno=85, col_offset=8, end_lineno=89,
        end_col_offset=49), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super',
        ctx=Load(), lineno=90, col_offset=8, end_lineno=90, end_col_offset=13), args=[],
        keywords=[], lineno=90, col_offset=8, end_lineno=90, end_col_offset=15), attr='generic_visit',
        ctx=Load(), lineno=90, col_offset=8, end_lineno=90, end_col_offset=29), args=[Name(id='node',
        ctx=Load(), lineno=90, col_offset=30, end_lineno=90, end_col_offset=34)],
        keywords=[], lineno=90, col_offset=8, end_lineno=90, end_col_offset=35), lineno=90,
        col_offset=8, end_lineno=90, end_col_offset=35)], decorator_list=[], lineno=83,
        col_offset=4, end_lineno=90, end_col_offset=35)
      method_docstring: null
      method_inputs:
      - self
      - node
      method_defaults: []
      method_returns: []
      method_calls:
      - isinstance
      - super().generic_visit
      - super
      - self.node_type_to_keyword.get
      - self.control_flow.append
      - type
      method_variables:
      - keyword
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_get_control_flow:
      method_name: get_control_flow
      method_code: "def get_control_flow(self):\n    return ' -> '.join(self.control_flow)"
      method_ast: FunctionDef(name='get_control_flow', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=91, col_offset=25, end_lineno=91, end_col_offset=29)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='
        -> ', lineno=92, col_offset=15, end_lineno=92, end_col_offset=21), attr='join',
        ctx=Load(), lineno=92, col_offset=15, end_lineno=92, end_col_offset=26), args=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=92, col_offset=27, end_lineno=92, end_col_offset=31), attr='control_flow',
        ctx=Load(), lineno=92, col_offset=27, end_lineno=92, end_col_offset=44)],
        keywords=[], lineno=92, col_offset=15, end_lineno=92, end_col_offset=45),
        lineno=92, col_offset=8, end_lineno=92, end_col_offset=45)], decorator_list=[],
        lineno=91, col_offset=4, end_lineno=92, end_col_offset=45)
      method_docstring: null
      method_inputs:
      - self
      method_defaults: []
      method_returns:
      - ''' -> ''.join(self.control_flow)'
      method_calls:
      - ''' -> ''.join'
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties: []
  CodeVisitor:
    class_name: CodeVisitor
    class_code: "class CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class\
      \ for traversing an AST (Abstract Syntax Tree) and extracting\n    details about\
      \ the code.\n    Attributes:\n        code (str): The source code.\n       \
      \ functions(Dict): details about functions in the code.\n        classes (Dict):\
      \ details about classes in the code.\n        file_info (Dict): details about\
      \ the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef)\
      \ -> None: Extract details \n            about a function.\n        visit_ClassDef(node:\
      \ ast.ClassDef) -> None: Extract details about a \n            class.\n    \
      \    extract_details(node: ast.AST, node_type: str) -> \n            Dict[str,\
      \ Union[str, List[str]]]: Extract details about a node.\n        analyze(node:\
      \ ast.AST) -> None: Populate file_info with details about\n                the\
      \ file.\n    \"\"\"\n\n    def __init__(self, code: str):\n        self.code:\
      \ str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]]\
      \ = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] =\
      \ {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n      \
      \  self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef)\
      \ -> None:\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}']\
      \ = self.extract_details(node, 'method')\n        else:\n            self.functions[node.name]\
      \ = self.extract_details(node, 'function')\n        self.generic_visit(node)\n\
      \n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        self.classes[node.name]\
      \ = self.extract_details(node, 'class')\n        self.current_class = node.name\n\
      \        self.generic_visit(node)\n        self.current_class = None\n\n   \
      \ def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str,\
      \ List[str]]]:\n        node_walk = list(ast.walk(node))\n        details =\
      \ {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast':\
      \ ast.dump(node, include_attributes=True), f'{node_type}_docstring': ast.get_docstring(node),\
      \ f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in\
      \ ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d)\
      \ for d in node.args.defaults] if node_type in ['function', 'method'] else None,\
      \ f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not\
      \ None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)],\
      \ f'{node_type}_calls': list(set([ast.unparse(n.func) for n in get_all_calls(node)])),\
      \ f'{node_type}_variables': list(set([ast.unparse(target) for subnode in node_walk\
      \ if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target,\
      \ ast.Name)])), f'{node_type}_decorators': list(set((ast.unparse(decorator)\
      \ for decorator in node.decorator_list))) if node.decorator_list else [], f'{node_type}_annotations':\
      \ list(set((ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode,\
      \ ast.AnnAssign) and subnode.annotation is not None))), f'{node_type}_properties':\
      \ list(set([ast.unparse(subnode) for subnode in node_walk if isinstance(subnode,\
      \ ast.Attribute) and isinstance(subnode.ctx, ast.Store)]))}\n        if node_type\
      \ == 'class' or node_type == 'method':\n            if node_type == 'method'\
      \ and self.current_class:\n                attributes = [target.attr for subnode\
      \ in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets\
      \ if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name)\
      \ and (target.value.id == 'self')]\n                if attributes:\n       \
      \             if 'class_attributes' in self.classes[self.current_class]:\n \
      \                       self.classes[self.current_class]['class_attributes'].extend(attributes)\n\
      \                    else:\n                        self.classes[self.current_class]['class_attributes']\
      \ = attributes\n            if node_type == 'class':\n                details.update({'class_attributes':\
      \ [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for\
      \ target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods':\
      \ [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)\
      \ and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for\
      \ base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name\
      \ for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name\
      \ != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id ==\
      \ 'staticmethod' for decorator in subnode.decorator_list))]})\n        return\
      \ details\n\n    def analyze(self, node: ast.AST) -> None:\n        node_walk\
      \ = list(ast.walk(node))\n        self.visit(node)\n        self.file_info =\
      \ {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies':\
      \ list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import)\
      \ for alias in subnode.names} | {subnode.module for subnode in node_walk if\
      \ isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()),\
      \ 'file_classes': list(self.classes.keys()), 'file_control_flow': get_control_flow(self.code)}\n\
      \        dependencies = self.file_info['file_dependencies']\n        function_defs\
      \ = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'],\
      \ 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n\
      \        class_defs = []\n        for class_name, class_details in self.classes.items():\n\
      \            method_defs = {}\n            for method_name, details in class_details.items():\n\
      \                if method_name.startswith('class_method_'):\n             \
      \       method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'],\
      \ 'calls': details['method_calls'], 'returns': details['method_returns']}\n\
      \            class_defs.append({class_name: {'method_defs': method_defs}})\n\
      \        self.file_info['file_summary'] = {'dependencies': dependencies, 'function_defs':\
      \ function_defs, 'class_defs': class_defs}"
    class_ast: 'ClassDef(name=''CodeVisitor'', bases=[Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=105, col_offset=18, end_lineno=105, end_col_offset=21), attr=''NodeVisitor'',
      ctx=Load(), lineno=105, col_offset=18, end_lineno=105, end_col_offset=33)],
      keywords=[], body=[Expr(value=Constant(value=''\n    Visitor class for traversing
      an AST (Abstract Syntax Tree) and extracting\n    details about the code.\n    Attributes:\n        code
      (str): The source code.\n        functions(Dict): details about functions in
      the code.\n        classes (Dict): details about classes in the code.\n        file_info
      (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node:
      ast.FunctionDef) -> None: Extract details \n            about a function.\n        visit_ClassDef(node:
      ast.ClassDef) -> None: Extract details about a \n            class.\n        extract_details(node:
      ast.AST, node_type: str) -> \n            Dict[str, Union[str, List[str]]]:
      Extract details about a node.\n        analyze(node: ast.AST) -> None: Populate
      file_info with details about\n                the file.\n    '', lineno=106,
      col_offset=4, end_lineno=123, end_col_offset=7), lineno=106, col_offset=4, end_lineno=123,
      end_col_offset=7), FunctionDef(name=''__init__'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=124, col_offset=17, end_lineno=124, end_col_offset=21),
      arg(arg=''code'', annotation=Name(id=''str'', ctx=Load(), lineno=124, col_offset=29,
      end_lineno=124, end_col_offset=32), lineno=124, col_offset=23, end_lineno=124,
      end_col_offset=32)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=126, col_offset=8, end_lineno=126, end_col_offset=12), attr=''code'',
      ctx=Store(), lineno=126, col_offset=8, end_lineno=126, end_col_offset=17), annotation=Name(id=''str'',
      ctx=Load(), lineno=126, col_offset=19, end_lineno=126, end_col_offset=22), value=Name(id=''code'',
      ctx=Load(), lineno=126, col_offset=25, end_lineno=126, end_col_offset=29), simple=0,
      lineno=126, col_offset=8, end_lineno=126, end_col_offset=29), AnnAssign(target=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=127, col_offset=8, end_lineno=127, end_col_offset=12), attr=''functions'',
      ctx=Store(), lineno=127, col_offset=8, end_lineno=127, end_col_offset=22), annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=127, col_offset=24, end_lineno=127, end_col_offset=28), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=127, col_offset=29, end_lineno=127, end_col_offset=32), Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=127, col_offset=34, end_lineno=127, end_col_offset=38), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=127, col_offset=39, end_lineno=127, end_col_offset=42), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=127, col_offset=44, end_lineno=127, end_col_offset=49), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=127, col_offset=50, end_lineno=127, end_col_offset=53), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=127, col_offset=55, end_lineno=127, end_col_offset=59), slice=Name(id=''str'',
      ctx=Load(), lineno=127, col_offset=60, end_lineno=127, end_col_offset=63), ctx=Load(),
      lineno=127, col_offset=55, end_lineno=127, end_col_offset=64)], ctx=Load(),
      lineno=127, col_offset=50, end_lineno=127, end_col_offset=64), ctx=Load(), lineno=127,
      col_offset=44, end_lineno=127, end_col_offset=65)], ctx=Load(), lineno=127,
      col_offset=39, end_lineno=127, end_col_offset=65), ctx=Load(), lineno=127, col_offset=34,
      end_lineno=127, end_col_offset=66)], ctx=Load(), lineno=127, col_offset=29,
      end_lineno=127, end_col_offset=66), ctx=Load(), lineno=127, col_offset=24, end_lineno=127,
      end_col_offset=67), value=Dict(keys=[], values=[], lineno=127, col_offset=70,
      end_lineno=127, end_col_offset=72), simple=0, lineno=127, col_offset=8, end_lineno=127,
      end_col_offset=72), AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=128, col_offset=8, end_lineno=128, end_col_offset=12), attr=''classes'',
      ctx=Store(), lineno=128, col_offset=8, end_lineno=128, end_col_offset=20), annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=128, col_offset=22, end_lineno=128, end_col_offset=26), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=128, col_offset=27, end_lineno=128, end_col_offset=30), Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=128, col_offset=32, end_lineno=128, end_col_offset=36), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=128, col_offset=37, end_lineno=128, end_col_offset=40), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=128, col_offset=42, end_lineno=128, end_col_offset=47), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=128, col_offset=48, end_lineno=128, end_col_offset=51), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=128, col_offset=53, end_lineno=128, end_col_offset=57), slice=Name(id=''str'',
      ctx=Load(), lineno=128, col_offset=58, end_lineno=128, end_col_offset=61), ctx=Load(),
      lineno=128, col_offset=53, end_lineno=128, end_col_offset=62)], ctx=Load(),
      lineno=128, col_offset=48, end_lineno=128, end_col_offset=62), ctx=Load(), lineno=128,
      col_offset=42, end_lineno=128, end_col_offset=63)], ctx=Load(), lineno=128,
      col_offset=37, end_lineno=128, end_col_offset=63), ctx=Load(), lineno=128, col_offset=32,
      end_lineno=128, end_col_offset=64)], ctx=Load(), lineno=128, col_offset=27,
      end_lineno=128, end_col_offset=64), ctx=Load(), lineno=128, col_offset=22, end_lineno=128,
      end_col_offset=65), value=Dict(keys=[], values=[], lineno=128, col_offset=68,
      end_lineno=128, end_col_offset=70), simple=0, lineno=128, col_offset=8, end_lineno=128,
      end_col_offset=70), AnnAssign(target=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=129, col_offset=8, end_lineno=129, end_col_offset=12), attr=''file_info'',
      ctx=Store(), lineno=129, col_offset=8, end_lineno=129, end_col_offset=22), annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=129, col_offset=24, end_lineno=129, end_col_offset=28), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=129, col_offset=29, end_lineno=129, end_col_offset=32), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=129, col_offset=34, end_lineno=129, end_col_offset=39), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=129, col_offset=40, end_lineno=129, end_col_offset=43), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=129, col_offset=45, end_lineno=129, end_col_offset=49), slice=Name(id=''str'',
      ctx=Load(), lineno=129, col_offset=50, end_lineno=129, end_col_offset=53), ctx=Load(),
      lineno=129, col_offset=45, end_lineno=129, end_col_offset=54)], ctx=Load(),
      lineno=129, col_offset=40, end_lineno=129, end_col_offset=54), ctx=Load(), lineno=129,
      col_offset=34, end_lineno=129, end_col_offset=55)], ctx=Load(), lineno=129,
      col_offset=29, end_lineno=129, end_col_offset=55), ctx=Load(), lineno=129, col_offset=24,
      end_lineno=129, end_col_offset=56), value=Dict(keys=[], values=[], lineno=129,
      col_offset=59, end_lineno=129, end_col_offset=61), simple=0, lineno=129, col_offset=8,
      end_lineno=129, end_col_offset=61), AnnAssign(target=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=130, col_offset=8, end_lineno=130, end_col_offset=12), attr=''current_class'',
      ctx=Store(), lineno=130, col_offset=8, end_lineno=130, end_col_offset=26), annotation=Name(id=''str'',
      ctx=Load(), lineno=130, col_offset=28, end_lineno=130, end_col_offset=31), value=Constant(value=None,
      lineno=130, col_offset=34, end_lineno=130, end_col_offset=38), simple=0, lineno=130,
      col_offset=8, end_lineno=130, end_col_offset=38)], decorator_list=[], lineno=124,
      col_offset=4, end_lineno=130, end_col_offset=38), FunctionDef(name=''visit_FunctionDef'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=131, col_offset=26,
      end_lineno=131, end_col_offset=30), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=131, col_offset=38, end_lineno=131, end_col_offset=41), attr=''FunctionDef'',
      ctx=Load(), lineno=131, col_offset=38, end_lineno=131, end_col_offset=53), lineno=131,
      col_offset=32, end_lineno=131, end_col_offset=53)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[If(test=Attribute(value=Name(id=''self'', ctx=Load(), lineno=132,
      col_offset=11, end_lineno=132, end_col_offset=15), attr=''current_class'', ctx=Load(),
      lineno=132, col_offset=11, end_lineno=132, end_col_offset=29), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=133, col_offset=12, end_lineno=133, end_col_offset=16), attr=''classes'',
      ctx=Load(), lineno=133, col_offset=12, end_lineno=133, end_col_offset=24), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=133, col_offset=25, end_lineno=133, end_col_offset=29), attr=''current_class'',
      ctx=Load(), lineno=133, col_offset=25, end_lineno=133, end_col_offset=43), ctx=Load(),
      lineno=133, col_offset=12, end_lineno=133, end_col_offset=44), slice=JoinedStr(values=[Constant(value=''class_method_'',
      lineno=133, col_offset=45, end_lineno=133, end_col_offset=72), FormattedValue(value=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=133, col_offset=61, end_lineno=133, end_col_offset=65), attr=''name'',
      ctx=Load(), lineno=133, col_offset=61, end_lineno=133, end_col_offset=70), conversion=-1,
      lineno=133, col_offset=45, end_lineno=133, end_col_offset=72)], lineno=133,
      col_offset=45, end_lineno=133, end_col_offset=72), ctx=Store(), lineno=133,
      col_offset=12, end_lineno=133, end_col_offset=73)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=133, col_offset=76, end_lineno=133, end_col_offset=80), attr=''extract_details'',
      ctx=Load(), lineno=133, col_offset=76, end_lineno=133, end_col_offset=96), args=[Name(id=''node'',
      ctx=Load(), lineno=133, col_offset=97, end_lineno=133, end_col_offset=101),
      Constant(value=''method'', lineno=133, col_offset=103, end_lineno=133, end_col_offset=111)],
      keywords=[], lineno=133, col_offset=76, end_lineno=133, end_col_offset=112),
      lineno=133, col_offset=12, end_lineno=133, end_col_offset=112)], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=135, col_offset=12, end_lineno=135, end_col_offset=16), attr=''functions'',
      ctx=Load(), lineno=135, col_offset=12, end_lineno=135, end_col_offset=26), slice=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=135, col_offset=27, end_lineno=135, end_col_offset=31), attr=''name'',
      ctx=Load(), lineno=135, col_offset=27, end_lineno=135, end_col_offset=36), ctx=Store(),
      lineno=135, col_offset=12, end_lineno=135, end_col_offset=37)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=135, col_offset=40, end_lineno=135, end_col_offset=44), attr=''extract_details'',
      ctx=Load(), lineno=135, col_offset=40, end_lineno=135, end_col_offset=60), args=[Name(id=''node'',
      ctx=Load(), lineno=135, col_offset=61, end_lineno=135, end_col_offset=65), Constant(value=''function'',
      lineno=135, col_offset=67, end_lineno=135, end_col_offset=77)], keywords=[],
      lineno=135, col_offset=40, end_lineno=135, end_col_offset=78), lineno=135, col_offset=12,
      end_lineno=135, end_col_offset=78)], lineno=132, col_offset=8, end_lineno=135,
      end_col_offset=78), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=136, col_offset=8, end_lineno=136, end_col_offset=12), attr=''generic_visit'',
      ctx=Load(), lineno=136, col_offset=8, end_lineno=136, end_col_offset=26), args=[Name(id=''node'',
      ctx=Load(), lineno=136, col_offset=27, end_lineno=136, end_col_offset=31)],
      keywords=[], lineno=136, col_offset=8, end_lineno=136, end_col_offset=32), lineno=136,
      col_offset=8, end_lineno=136, end_col_offset=32)], decorator_list=[], returns=Constant(value=None,
      lineno=131, col_offset=58, end_lineno=131, end_col_offset=62), lineno=131, col_offset=4,
      end_lineno=136, end_col_offset=32), FunctionDef(name=''visit_ClassDef'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=137, col_offset=23, end_lineno=137, end_col_offset=27),
      arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=137,
      col_offset=35, end_lineno=137, end_col_offset=38), attr=''ClassDef'', ctx=Load(),
      lineno=137, col_offset=35, end_lineno=137, end_col_offset=47), lineno=137, col_offset=29,
      end_lineno=137, end_col_offset=47)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=138, col_offset=8, end_lineno=138, end_col_offset=12), attr=''classes'',
      ctx=Load(), lineno=138, col_offset=8, end_lineno=138, end_col_offset=20), slice=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=138, col_offset=21, end_lineno=138, end_col_offset=25), attr=''name'',
      ctx=Load(), lineno=138, col_offset=21, end_lineno=138, end_col_offset=30), ctx=Store(),
      lineno=138, col_offset=8, end_lineno=138, end_col_offset=31)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=138, col_offset=34, end_lineno=138, end_col_offset=38), attr=''extract_details'',
      ctx=Load(), lineno=138, col_offset=34, end_lineno=138, end_col_offset=54), args=[Name(id=''node'',
      ctx=Load(), lineno=138, col_offset=55, end_lineno=138, end_col_offset=59), Constant(value=''class'',
      lineno=138, col_offset=61, end_lineno=138, end_col_offset=68)], keywords=[],
      lineno=138, col_offset=34, end_lineno=138, end_col_offset=69), lineno=138, col_offset=8,
      end_lineno=138, end_col_offset=69), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=139, col_offset=8, end_lineno=139, end_col_offset=12), attr=''current_class'',
      ctx=Store(), lineno=139, col_offset=8, end_lineno=139, end_col_offset=26)],
      value=Attribute(value=Name(id=''node'', ctx=Load(), lineno=139, col_offset=29,
      end_lineno=139, end_col_offset=33), attr=''name'', ctx=Load(), lineno=139, col_offset=29,
      end_lineno=139, end_col_offset=38), lineno=139, col_offset=8, end_lineno=139,
      end_col_offset=38), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=140, col_offset=8, end_lineno=140, end_col_offset=12), attr=''generic_visit'',
      ctx=Load(), lineno=140, col_offset=8, end_lineno=140, end_col_offset=26), args=[Name(id=''node'',
      ctx=Load(), lineno=140, col_offset=27, end_lineno=140, end_col_offset=31)],
      keywords=[], lineno=140, col_offset=8, end_lineno=140, end_col_offset=32), lineno=140,
      col_offset=8, end_lineno=140, end_col_offset=32), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=141, col_offset=8, end_lineno=141, end_col_offset=12), attr=''current_class'',
      ctx=Store(), lineno=141, col_offset=8, end_lineno=141, end_col_offset=26)],
      value=Constant(value=None, lineno=141, col_offset=29, end_lineno=141, end_col_offset=33),
      lineno=141, col_offset=8, end_lineno=141, end_col_offset=33)], decorator_list=[],
      returns=Constant(value=None, lineno=137, col_offset=52, end_lineno=137, end_col_offset=56),
      lineno=137, col_offset=4, end_lineno=141, end_col_offset=33), FunctionDef(name=''extract_details'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=142, col_offset=24,
      end_lineno=142, end_col_offset=28), arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=142, col_offset=36, end_lineno=142, end_col_offset=39), attr=''AST'',
      ctx=Load(), lineno=142, col_offset=36, end_lineno=142, end_col_offset=43), lineno=142,
      col_offset=30, end_lineno=142, end_col_offset=43), arg(arg=''node_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=142, col_offset=56, end_lineno=142, end_col_offset=59), lineno=142,
      col_offset=45, end_lineno=142, end_col_offset=59)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Assign(targets=[Name(id=''node_walk'', ctx=Store(), lineno=143,
      col_offset=8, end_lineno=143, end_col_offset=17)], value=Call(func=Name(id=''list'',
      ctx=Load(), lineno=143, col_offset=20, end_lineno=143, end_col_offset=24), args=[Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=143, col_offset=25, end_lineno=143, end_col_offset=28), attr=''walk'',
      ctx=Load(), lineno=143, col_offset=25, end_lineno=143, end_col_offset=33), args=[Name(id=''node'',
      ctx=Load(), lineno=143, col_offset=34, end_lineno=143, end_col_offset=38)],
      keywords=[], lineno=143, col_offset=25, end_lineno=143, end_col_offset=39)],
      keywords=[], lineno=143, col_offset=20, end_lineno=143, end_col_offset=40),
      lineno=143, col_offset=8, end_lineno=143, end_col_offset=40), Assign(targets=[Name(id=''details'',
      ctx=Store(), lineno=144, col_offset=8, end_lineno=144, end_col_offset=15)],
      value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=145, col_offset=15, end_lineno=145, end_col_offset=24), conversion=-1,
      lineno=145, col_offset=12, end_lineno=145, end_col_offset=31), Constant(value=''_name'',
      lineno=145, col_offset=12, end_lineno=145, end_col_offset=31)], lineno=145,
      col_offset=12, end_lineno=145, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=146, col_offset=15, end_lineno=146, end_col_offset=24), conversion=-1,
      lineno=146, col_offset=12, end_lineno=146, end_col_offset=31), Constant(value=''_code'',
      lineno=146, col_offset=12, end_lineno=146, end_col_offset=31)], lineno=146,
      col_offset=12, end_lineno=146, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=147, col_offset=15, end_lineno=147, end_col_offset=24), conversion=-1,
      lineno=147, col_offset=12, end_lineno=147, end_col_offset=30), Constant(value=''_ast'',
      lineno=147, col_offset=12, end_lineno=147, end_col_offset=30)], lineno=147,
      col_offset=12, end_lineno=147, end_col_offset=30), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=148, col_offset=15, end_lineno=148, end_col_offset=24), conversion=-1,
      lineno=148, col_offset=12, end_lineno=148, end_col_offset=36), Constant(value=''_docstring'',
      lineno=148, col_offset=12, end_lineno=148, end_col_offset=36)], lineno=148,
      col_offset=12, end_lineno=148, end_col_offset=36), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=149, col_offset=15, end_lineno=149, end_col_offset=24), conversion=-1,
      lineno=149, col_offset=12, end_lineno=149, end_col_offset=33), Constant(value=''_inputs'',
      lineno=149, col_offset=12, end_lineno=149, end_col_offset=33)], lineno=149,
      col_offset=12, end_lineno=149, end_col_offset=33), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=150, col_offset=15, end_lineno=150, end_col_offset=24), conversion=-1,
      lineno=150, col_offset=12, end_lineno=150, end_col_offset=35), Constant(value=''_defaults'',
      lineno=150, col_offset=12, end_lineno=150, end_col_offset=35)], lineno=150,
      col_offset=12, end_lineno=150, end_col_offset=35), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=151, col_offset=15, end_lineno=151, end_col_offset=24), conversion=-1,
      lineno=151, col_offset=12, end_lineno=151, end_col_offset=34), Constant(value=''_returns'',
      lineno=151, col_offset=12, end_lineno=151, end_col_offset=34)], lineno=151,
      col_offset=12, end_lineno=151, end_col_offset=34), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=152, col_offset=15, end_lineno=152, end_col_offset=24), conversion=-1,
      lineno=152, col_offset=12, end_lineno=152, end_col_offset=32), Constant(value=''_calls'',
      lineno=152, col_offset=12, end_lineno=152, end_col_offset=32)], lineno=152,
      col_offset=12, end_lineno=152, end_col_offset=32), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=153, col_offset=15, end_lineno=153, end_col_offset=24), conversion=-1,
      lineno=153, col_offset=12, end_lineno=153, end_col_offset=36), Constant(value=''_variables'',
      lineno=153, col_offset=12, end_lineno=153, end_col_offset=36)], lineno=153,
      col_offset=12, end_lineno=153, end_col_offset=36), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=154, col_offset=15, end_lineno=154, end_col_offset=24), conversion=-1,
      lineno=154, col_offset=12, end_lineno=154, end_col_offset=37), Constant(value=''_decorators'',
      lineno=154, col_offset=12, end_lineno=154, end_col_offset=37)], lineno=154,
      col_offset=12, end_lineno=154, end_col_offset=37), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=155, col_offset=15, end_lineno=155, end_col_offset=24), conversion=-1,
      lineno=155, col_offset=12, end_lineno=155, end_col_offset=38), Constant(value=''_annotations'',
      lineno=155, col_offset=12, end_lineno=155, end_col_offset=38)], lineno=155,
      col_offset=12, end_lineno=155, end_col_offset=38), JoinedStr(values=[FormattedValue(value=Name(id=''node_type'',
      ctx=Load(), lineno=156, col_offset=15, end_lineno=156, end_col_offset=24), conversion=-1,
      lineno=156, col_offset=12, end_lineno=156, end_col_offset=37), Constant(value=''_properties'',
      lineno=156, col_offset=12, end_lineno=156, end_col_offset=37)], lineno=156,
      col_offset=12, end_lineno=156, end_col_offset=37)], values=[Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=145, col_offset=33, end_lineno=145, end_col_offset=37), attr=''name'',
      ctx=Load(), lineno=145, col_offset=33, end_lineno=145, end_col_offset=42), Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=146, col_offset=33, end_lineno=146, end_col_offset=36), attr=''unparse'',
      ctx=Load(), lineno=146, col_offset=33, end_lineno=146, end_col_offset=44), args=[Name(id=''node'',
      ctx=Load(), lineno=146, col_offset=45, end_lineno=146, end_col_offset=49)],
      keywords=[], lineno=146, col_offset=33, end_lineno=146, end_col_offset=50),
      Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=147, col_offset=32,
      end_lineno=147, end_col_offset=35), attr=''dump'', ctx=Load(), lineno=147, col_offset=32,
      end_lineno=147, end_col_offset=40), args=[Name(id=''node'', ctx=Load(), lineno=147,
      col_offset=41, end_lineno=147, end_col_offset=45)], keywords=[keyword(arg=''include_attributes'',
      value=Constant(value=True, lineno=147, col_offset=66, end_lineno=147, end_col_offset=70),
      lineno=147, col_offset=47, end_lineno=147, end_col_offset=70)], lineno=147,
      col_offset=32, end_lineno=147, end_col_offset=71), Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=148, col_offset=38, end_lineno=148, end_col_offset=41), attr=''get_docstring'',
      ctx=Load(), lineno=148, col_offset=38, end_lineno=148, end_col_offset=55), args=[Name(id=''node'',
      ctx=Load(), lineno=148, col_offset=56, end_lineno=148, end_col_offset=60)],
      keywords=[], lineno=148, col_offset=38, end_lineno=148, end_col_offset=61),
      IfExp(test=Compare(left=Name(id=''node_type'', ctx=Load(), lineno=149, col_offset=74,
      end_lineno=149, end_col_offset=83), ops=[In()], comparators=[List(elts=[Constant(value=''function'',
      lineno=149, col_offset=88, end_lineno=149, end_col_offset=98), Constant(value=''method'',
      lineno=149, col_offset=100, end_lineno=149, end_col_offset=108)], ctx=Load(),
      lineno=149, col_offset=87, end_lineno=149, end_col_offset=109)], lineno=149,
      col_offset=74, end_lineno=149, end_col_offset=109), body=ListComp(elt=Attribute(value=Name(id=''arg'',
      ctx=Load(), lineno=149, col_offset=36, end_lineno=149, end_col_offset=39), attr=''arg'',
      ctx=Load(), lineno=149, col_offset=36, end_lineno=149, end_col_offset=43), generators=[comprehension(target=Name(id=''arg'',
      ctx=Store(), lineno=149, col_offset=48, end_lineno=149, end_col_offset=51),
      iter=Attribute(value=Attribute(value=Name(id=''node'', ctx=Load(), lineno=149,
      col_offset=55, end_lineno=149, end_col_offset=59), attr=''args'', ctx=Load(),
      lineno=149, col_offset=55, end_lineno=149, end_col_offset=64), attr=''args'',
      ctx=Load(), lineno=149, col_offset=55, end_lineno=149, end_col_offset=69), ifs=[],
      is_async=0)], lineno=149, col_offset=35, end_lineno=149, end_col_offset=70),
      orelse=Constant(value=None, lineno=149, col_offset=115, end_lineno=149, end_col_offset=119),
      lineno=149, col_offset=35, end_lineno=149, end_col_offset=119), IfExp(test=Compare(left=Name(id=''node_type'',
      ctx=Load(), lineno=150, col_offset=85, end_lineno=150, end_col_offset=94), ops=[In()],
      comparators=[List(elts=[Constant(value=''function'', lineno=150, col_offset=99,
      end_lineno=150, end_col_offset=109), Constant(value=''method'', lineno=150,
      col_offset=111, end_lineno=150, end_col_offset=119)], ctx=Load(), lineno=150,
      col_offset=98, end_lineno=150, end_col_offset=120)], lineno=150, col_offset=85,
      end_lineno=150, end_col_offset=120), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=150, col_offset=38, end_lineno=150, end_col_offset=41), attr=''unparse'',
      ctx=Load(), lineno=150, col_offset=38, end_lineno=150, end_col_offset=49), args=[Name(id=''d'',
      ctx=Load(), lineno=150, col_offset=50, end_lineno=150, end_col_offset=51)],
      keywords=[], lineno=150, col_offset=38, end_lineno=150, end_col_offset=52),
      generators=[comprehension(target=Name(id=''d'', ctx=Store(), lineno=150, col_offset=57,
      end_lineno=150, end_col_offset=58), iter=Attribute(value=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=150, col_offset=62, end_lineno=150, end_col_offset=66), attr=''args'',
      ctx=Load(), lineno=150, col_offset=62, end_lineno=150, end_col_offset=71), attr=''defaults'',
      ctx=Load(), lineno=150, col_offset=62, end_lineno=150, end_col_offset=80), ifs=[],
      is_async=0)], lineno=150, col_offset=37, end_lineno=150, end_col_offset=81),
      orelse=Constant(value=None, lineno=150, col_offset=126, end_lineno=150, end_col_offset=130),
      lineno=150, col_offset=37, end_lineno=150, end_col_offset=130), ListComp(elt=IfExp(test=Compare(left=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=151, col_offset=67, end_lineno=151, end_col_offset=74), attr=''value'',
      ctx=Load(), lineno=151, col_offset=67, end_lineno=151, end_col_offset=80), ops=[IsNot()],
      comparators=[Constant(value=None, lineno=151, col_offset=88, end_lineno=151,
      end_col_offset=92)], lineno=151, col_offset=67, end_lineno=151, end_col_offset=92),
      body=Call(func=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=151, col_offset=37,
      end_lineno=151, end_col_offset=40), attr=''unparse'', ctx=Load(), lineno=151,
      col_offset=37, end_lineno=151, end_col_offset=48), args=[Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=151, col_offset=49, end_lineno=151, end_col_offset=56), attr=''value'',
      ctx=Load(), lineno=151, col_offset=49, end_lineno=151, end_col_offset=62)],
      keywords=[], lineno=151, col_offset=37, end_lineno=151, end_col_offset=63),
      orelse=Constant(value=''None'', lineno=151, col_offset=98, end_lineno=151, end_col_offset=104),
      lineno=151, col_offset=37, end_lineno=151, end_col_offset=104), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=151, col_offset=109, end_lineno=151, end_col_offset=116),
      iter=Name(id=''node_walk'', ctx=Load(), lineno=151, col_offset=120, end_lineno=151,
      end_col_offset=129), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=151,
      col_offset=133, end_lineno=151, end_col_offset=143), args=[Name(id=''subnode'',
      ctx=Load(), lineno=151, col_offset=144, end_lineno=151, end_col_offset=151),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=151, col_offset=153, end_lineno=151,
      end_col_offset=156), attr=''Return'', ctx=Load(), lineno=151, col_offset=153,
      end_lineno=151, end_col_offset=163)], keywords=[], lineno=151, col_offset=133,
      end_lineno=151, end_col_offset=164)], is_async=0)], lineno=151, col_offset=36,
      end_lineno=151, end_col_offset=165), Call(func=Name(id=''list'', ctx=Load(),
      lineno=152, col_offset=34, end_lineno=152, end_col_offset=38), args=[Call(func=Name(id=''set'',
      ctx=Load(), lineno=152, col_offset=39, end_lineno=152, end_col_offset=42), args=[ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=152, col_offset=44, end_lineno=152, end_col_offset=47), attr=''unparse'',
      ctx=Load(), lineno=152, col_offset=44, end_lineno=152, end_col_offset=55), args=[Attribute(value=Name(id=''n'',
      ctx=Load(), lineno=152, col_offset=56, end_lineno=152, end_col_offset=57), attr=''func'',
      ctx=Load(), lineno=152, col_offset=56, end_lineno=152, end_col_offset=62)],
      keywords=[], lineno=152, col_offset=44, end_lineno=152, end_col_offset=63),
      generators=[comprehension(target=Name(id=''n'', ctx=Store(), lineno=152, col_offset=68,
      end_lineno=152, end_col_offset=69), iter=Call(func=Name(id=''get_all_calls'',
      ctx=Load(), lineno=152, col_offset=73, end_lineno=152, end_col_offset=86), args=[Name(id=''node'',
      ctx=Load(), lineno=152, col_offset=87, end_lineno=152, end_col_offset=91)],
      keywords=[], lineno=152, col_offset=73, end_lineno=152, end_col_offset=92),
      ifs=[], is_async=0)], lineno=152, col_offset=43, end_lineno=152, end_col_offset=93)],
      keywords=[], lineno=152, col_offset=39, end_lineno=152, end_col_offset=94)],
      keywords=[], lineno=152, col_offset=34, end_lineno=152, end_col_offset=95),
      Call(func=Name(id=''list'', ctx=Load(), lineno=153, col_offset=38, end_lineno=153,
      end_col_offset=42), args=[Call(func=Name(id=''set'', ctx=Load(), lineno=153,
      col_offset=43, end_lineno=153, end_col_offset=46), args=[ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=153, col_offset=48, end_lineno=153, end_col_offset=51), attr=''unparse'',
      ctx=Load(), lineno=153, col_offset=48, end_lineno=153, end_col_offset=59), args=[Name(id=''target'',
      ctx=Load(), lineno=153, col_offset=60, end_lineno=153, end_col_offset=66)],
      keywords=[], lineno=153, col_offset=48, end_lineno=153, end_col_offset=67),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=153,
      col_offset=72, end_lineno=153, end_col_offset=79), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=153, col_offset=83, end_lineno=153, end_col_offset=92), ifs=[Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=153, col_offset=96, end_lineno=153, end_col_offset=106),
      args=[Name(id=''subnode'', ctx=Load(), lineno=153, col_offset=107, end_lineno=153,
      end_col_offset=114), Attribute(value=Name(id=''ast'', ctx=Load(), lineno=153,
      col_offset=116, end_lineno=153, end_col_offset=119), attr=''Assign'', ctx=Load(),
      lineno=153, col_offset=116, end_lineno=153, end_col_offset=126)], keywords=[],
      lineno=153, col_offset=96, end_lineno=153, end_col_offset=127)], is_async=0),
      comprehension(target=Name(id=''target'', ctx=Store(), lineno=153, col_offset=132,
      end_lineno=153, end_col_offset=138), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=153, col_offset=142, end_lineno=153, end_col_offset=149),
      attr=''targets'', ctx=Load(), lineno=153, col_offset=142, end_lineno=153, end_col_offset=157),
      ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=153, col_offset=161,
      end_lineno=153, end_col_offset=171), args=[Name(id=''target'', ctx=Load(), lineno=153,
      col_offset=172, end_lineno=153, end_col_offset=178), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=153, col_offset=180, end_lineno=153, end_col_offset=183),
      attr=''Name'', ctx=Load(), lineno=153, col_offset=180, end_lineno=153, end_col_offset=188)],
      keywords=[], lineno=153, col_offset=161, end_lineno=153, end_col_offset=189)],
      is_async=0)], lineno=153, col_offset=47, end_lineno=153, end_col_offset=190)],
      keywords=[], lineno=153, col_offset=43, end_lineno=153, end_col_offset=191)],
      keywords=[], lineno=153, col_offset=38, end_lineno=153, end_col_offset=192),
      IfExp(test=Attribute(value=Name(id=''node'', ctx=Load(), lineno=154, col_offset=113,
      end_lineno=154, end_col_offset=117), attr=''decorator_list'', ctx=Load(), lineno=154,
      col_offset=113, end_lineno=154, end_col_offset=132), body=Call(func=Name(id=''list'',
      ctx=Load(), lineno=154, col_offset=39, end_lineno=154, end_col_offset=43), args=[Call(func=Name(id=''set'',
      ctx=Load(), lineno=154, col_offset=44, end_lineno=154, end_col_offset=47), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=154, col_offset=48, end_lineno=154, end_col_offset=51), attr=''unparse'',
      ctx=Load(), lineno=154, col_offset=48, end_lineno=154, end_col_offset=59), args=[Name(id=''decorator'',
      ctx=Load(), lineno=154, col_offset=60, end_lineno=154, end_col_offset=69)],
      keywords=[], lineno=154, col_offset=48, end_lineno=154, end_col_offset=70),
      generators=[comprehension(target=Name(id=''decorator'', ctx=Store(), lineno=154,
      col_offset=75, end_lineno=154, end_col_offset=84), iter=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=154, col_offset=88, end_lineno=154, end_col_offset=92), attr=''decorator_list'',
      ctx=Load(), lineno=154, col_offset=88, end_lineno=154, end_col_offset=107),
      ifs=[], is_async=0)], lineno=154, col_offset=47, end_lineno=154, end_col_offset=108)],
      keywords=[], lineno=154, col_offset=44, end_lineno=154, end_col_offset=108)],
      keywords=[], lineno=154, col_offset=39, end_lineno=154, end_col_offset=109),
      orelse=List(elts=[], ctx=Load(), lineno=154, col_offset=138, end_lineno=154,
      end_col_offset=140), lineno=154, col_offset=39, end_lineno=154, end_col_offset=140),
      Call(func=Name(id=''list'', ctx=Load(), lineno=155, col_offset=40, end_lineno=155,
      end_col_offset=44), args=[Call(func=Name(id=''set'', ctx=Load(), lineno=155,
      col_offset=45, end_lineno=155, end_col_offset=48), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=155, col_offset=49, end_lineno=155, end_col_offset=52), attr=''unparse'',
      ctx=Load(), lineno=155, col_offset=49, end_lineno=155, end_col_offset=60), args=[Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=155, col_offset=61, end_lineno=155, end_col_offset=68), attr=''annotation'',
      ctx=Load(), lineno=155, col_offset=61, end_lineno=155, end_col_offset=79)],
      keywords=[], lineno=155, col_offset=49, end_lineno=155, end_col_offset=80),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=155,
      col_offset=85, end_lineno=155, end_col_offset=92), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=155, col_offset=96, end_lineno=155, end_col_offset=105),
      ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=155, col_offset=109, end_lineno=155, end_col_offset=119), args=[Name(id=''subnode'',
      ctx=Load(), lineno=155, col_offset=120, end_lineno=155, end_col_offset=127),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=155, col_offset=129, end_lineno=155,
      end_col_offset=132), attr=''AnnAssign'', ctx=Load(), lineno=155, col_offset=129,
      end_lineno=155, end_col_offset=142)], keywords=[], lineno=155, col_offset=109,
      end_lineno=155, end_col_offset=143), Compare(left=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=155, col_offset=148, end_lineno=155, end_col_offset=155),
      attr=''annotation'', ctx=Load(), lineno=155, col_offset=148, end_lineno=155,
      end_col_offset=166), ops=[IsNot()], comparators=[Constant(value=None, lineno=155,
      col_offset=174, end_lineno=155, end_col_offset=178)], lineno=155, col_offset=148,
      end_lineno=155, end_col_offset=178)], lineno=155, col_offset=109, end_lineno=155,
      end_col_offset=178)], is_async=0)], lineno=155, col_offset=48, end_lineno=155,
      end_col_offset=179)], keywords=[], lineno=155, col_offset=45, end_lineno=155,
      end_col_offset=179)], keywords=[], lineno=155, col_offset=40, end_lineno=155,
      end_col_offset=180), Call(func=Name(id=''list'', ctx=Load(), lineno=156, col_offset=39,
      end_lineno=156, end_col_offset=43), args=[Call(func=Name(id=''set'', ctx=Load(),
      lineno=156, col_offset=44, end_lineno=156, end_col_offset=47), args=[ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=156, col_offset=49, end_lineno=156, end_col_offset=52), attr=''unparse'',
      ctx=Load(), lineno=156, col_offset=49, end_lineno=156, end_col_offset=60), args=[Name(id=''subnode'',
      ctx=Load(), lineno=156, col_offset=61, end_lineno=156, end_col_offset=68)],
      keywords=[], lineno=156, col_offset=49, end_lineno=156, end_col_offset=69),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=156,
      col_offset=74, end_lineno=156, end_col_offset=81), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=156, col_offset=85, end_lineno=156, end_col_offset=94), ifs=[BoolOp(op=And(),
      values=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=156, col_offset=98,
      end_lineno=156, end_col_offset=108), args=[Name(id=''subnode'', ctx=Load(),
      lineno=156, col_offset=109, end_lineno=156, end_col_offset=116), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=156, col_offset=118, end_lineno=156, end_col_offset=121),
      attr=''Attribute'', ctx=Load(), lineno=156, col_offset=118, end_lineno=156,
      end_col_offset=131)], keywords=[], lineno=156, col_offset=98, end_lineno=156,
      end_col_offset=132), Call(func=Name(id=''isinstance'', ctx=Load(), lineno=156,
      col_offset=137, end_lineno=156, end_col_offset=147), args=[Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=156, col_offset=148, end_lineno=156, end_col_offset=155),
      attr=''ctx'', ctx=Load(), lineno=156, col_offset=148, end_lineno=156, end_col_offset=159),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=156, col_offset=161, end_lineno=156,
      end_col_offset=164), attr=''Store'', ctx=Load(), lineno=156, col_offset=161,
      end_lineno=156, end_col_offset=170)], keywords=[], lineno=156, col_offset=137,
      end_lineno=156, end_col_offset=171)], lineno=156, col_offset=98, end_lineno=156,
      end_col_offset=171)], is_async=0)], lineno=156, col_offset=48, end_lineno=156,
      end_col_offset=172)], keywords=[], lineno=156, col_offset=44, end_lineno=156,
      end_col_offset=173)], keywords=[], lineno=156, col_offset=39, end_lineno=156,
      end_col_offset=174)], lineno=144, col_offset=18, end_lineno=157, end_col_offset=9),
      lineno=144, col_offset=8, end_lineno=157, end_col_offset=9), If(test=BoolOp(op=Or(),
      values=[Compare(left=Name(id=''node_type'', ctx=Load(), lineno=158, col_offset=11,
      end_lineno=158, end_col_offset=20), ops=[Eq()], comparators=[Constant(value=''class'',
      lineno=158, col_offset=24, end_lineno=158, end_col_offset=31)], lineno=158,
      col_offset=11, end_lineno=158, end_col_offset=31), Compare(left=Name(id=''node_type'',
      ctx=Load(), lineno=158, col_offset=35, end_lineno=158, end_col_offset=44), ops=[Eq()],
      comparators=[Constant(value=''method'', lineno=158, col_offset=48, end_lineno=158,
      end_col_offset=56)], lineno=158, col_offset=35, end_lineno=158, end_col_offset=56)],
      lineno=158, col_offset=11, end_lineno=158, end_col_offset=56), body=[If(test=BoolOp(op=And(),
      values=[Compare(left=Name(id=''node_type'', ctx=Load(), lineno=159, col_offset=15,
      end_lineno=159, end_col_offset=24), ops=[Eq()], comparators=[Constant(value=''method'',
      lineno=159, col_offset=28, end_lineno=159, end_col_offset=36)], lineno=159,
      col_offset=15, end_lineno=159, end_col_offset=36), Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=159, col_offset=41, end_lineno=159, end_col_offset=45), attr=''current_class'',
      ctx=Load(), lineno=159, col_offset=41, end_lineno=159, end_col_offset=59)],
      lineno=159, col_offset=15, end_lineno=159, end_col_offset=59), body=[Assign(targets=[Name(id=''attributes'',
      ctx=Store(), lineno=160, col_offset=16, end_lineno=160, end_col_offset=26)],
      value=ListComp(elt=Attribute(value=Name(id=''target'', ctx=Load(), lineno=160,
      col_offset=30, end_lineno=160, end_col_offset=36), attr=''attr'', ctx=Load(),
      lineno=160, col_offset=30, end_lineno=160, end_col_offset=41), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=160, col_offset=46, end_lineno=160, end_col_offset=53),
      iter=Name(id=''node_walk'', ctx=Load(), lineno=160, col_offset=57, end_lineno=160,
      end_col_offset=66), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=160,
      col_offset=70, end_lineno=160, end_col_offset=80), args=[Name(id=''subnode'',
      ctx=Load(), lineno=160, col_offset=81, end_lineno=160, end_col_offset=88), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=160, col_offset=90, end_lineno=160, end_col_offset=93), attr=''Assign'',
      ctx=Load(), lineno=160, col_offset=90, end_lineno=160, end_col_offset=100)],
      keywords=[], lineno=160, col_offset=70, end_lineno=160, end_col_offset=101)],
      is_async=0), comprehension(target=Name(id=''target'', ctx=Store(), lineno=160,
      col_offset=106, end_lineno=160, end_col_offset=112), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=160, col_offset=116, end_lineno=160, end_col_offset=123),
      attr=''targets'', ctx=Load(), lineno=160, col_offset=116, end_lineno=160, end_col_offset=131),
      ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=160, col_offset=135, end_lineno=160, end_col_offset=145), args=[Name(id=''target'',
      ctx=Load(), lineno=160, col_offset=146, end_lineno=160, end_col_offset=152),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=160, col_offset=154, end_lineno=160,
      end_col_offset=157), attr=''Attribute'', ctx=Load(), lineno=160, col_offset=154,
      end_lineno=160, end_col_offset=167)], keywords=[], lineno=160, col_offset=135,
      end_lineno=160, end_col_offset=168), Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=160, col_offset=173, end_lineno=160, end_col_offset=183), args=[Attribute(value=Name(id=''target'',
      ctx=Load(), lineno=160, col_offset=184, end_lineno=160, end_col_offset=190),
      attr=''value'', ctx=Load(), lineno=160, col_offset=184, end_lineno=160, end_col_offset=196),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=160, col_offset=198, end_lineno=160,
      end_col_offset=201), attr=''Name'', ctx=Load(), lineno=160, col_offset=198,
      end_lineno=160, end_col_offset=206)], keywords=[], lineno=160, col_offset=173,
      end_lineno=160, end_col_offset=207), Compare(left=Attribute(value=Attribute(value=Name(id=''target'',
      ctx=Load(), lineno=160, col_offset=212, end_lineno=160, end_col_offset=218),
      attr=''value'', ctx=Load(), lineno=160, col_offset=212, end_lineno=160, end_col_offset=224),
      attr=''id'', ctx=Load(), lineno=160, col_offset=212, end_lineno=160, end_col_offset=227),
      ops=[Eq()], comparators=[Constant(value=''self'', lineno=160, col_offset=231,
      end_lineno=160, end_col_offset=237)], lineno=160, col_offset=212, end_lineno=160,
      end_col_offset=237)], lineno=160, col_offset=135, end_lineno=160, end_col_offset=237)],
      is_async=0)], lineno=160, col_offset=29, end_lineno=160, end_col_offset=238),
      lineno=160, col_offset=16, end_lineno=160, end_col_offset=238), If(test=Name(id=''attributes'',
      ctx=Load(), lineno=161, col_offset=19, end_lineno=161, end_col_offset=29), body=[If(test=Compare(left=Constant(value=''class_attributes'',
      lineno=162, col_offset=23, end_lineno=162, end_col_offset=41), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=162, col_offset=45, end_lineno=162, end_col_offset=49), attr=''classes'',
      ctx=Load(), lineno=162, col_offset=45, end_lineno=162, end_col_offset=57), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=162, col_offset=58, end_lineno=162, end_col_offset=62), attr=''current_class'',
      ctx=Load(), lineno=162, col_offset=58, end_lineno=162, end_col_offset=76), ctx=Load(),
      lineno=162, col_offset=45, end_lineno=162, end_col_offset=77)], lineno=162,
      col_offset=23, end_lineno=162, end_col_offset=77), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=163, col_offset=24, end_lineno=163, end_col_offset=28), attr=''classes'',
      ctx=Load(), lineno=163, col_offset=24, end_lineno=163, end_col_offset=36), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=163, col_offset=37, end_lineno=163, end_col_offset=41), attr=''current_class'',
      ctx=Load(), lineno=163, col_offset=37, end_lineno=163, end_col_offset=55), ctx=Load(),
      lineno=163, col_offset=24, end_lineno=163, end_col_offset=56), slice=Constant(value=''class_attributes'',
      lineno=163, col_offset=57, end_lineno=163, end_col_offset=75), ctx=Load(), lineno=163,
      col_offset=24, end_lineno=163, end_col_offset=76), attr=''extend'', ctx=Load(),
      lineno=163, col_offset=24, end_lineno=163, end_col_offset=83), args=[Name(id=''attributes'',
      ctx=Load(), lineno=163, col_offset=84, end_lineno=163, end_col_offset=94)],
      keywords=[], lineno=163, col_offset=24, end_lineno=163, end_col_offset=95),
      lineno=163, col_offset=24, end_lineno=163, end_col_offset=95)], orelse=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=165, col_offset=24, end_lineno=165, end_col_offset=28), attr=''classes'',
      ctx=Load(), lineno=165, col_offset=24, end_lineno=165, end_col_offset=36), slice=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=165, col_offset=37, end_lineno=165, end_col_offset=41), attr=''current_class'',
      ctx=Load(), lineno=165, col_offset=37, end_lineno=165, end_col_offset=55), ctx=Load(),
      lineno=165, col_offset=24, end_lineno=165, end_col_offset=56), slice=Constant(value=''class_attributes'',
      lineno=165, col_offset=57, end_lineno=165, end_col_offset=75), ctx=Store(),
      lineno=165, col_offset=24, end_lineno=165, end_col_offset=76)], value=Name(id=''attributes'',
      ctx=Load(), lineno=165, col_offset=79, end_lineno=165, end_col_offset=89), lineno=165,
      col_offset=24, end_lineno=165, end_col_offset=89)], lineno=162, col_offset=20,
      end_lineno=165, end_col_offset=89)], orelse=[], lineno=161, col_offset=16, end_lineno=165,
      end_col_offset=89)], orelse=[], lineno=159, col_offset=12, end_lineno=165, end_col_offset=89),
      If(test=Compare(left=Name(id=''node_type'', ctx=Load(), lineno=166, col_offset=15,
      end_lineno=166, end_col_offset=24), ops=[Eq()], comparators=[Constant(value=''class'',
      lineno=166, col_offset=28, end_lineno=166, end_col_offset=35)], lineno=166,
      col_offset=15, end_lineno=166, end_col_offset=35), body=[Expr(value=Call(func=Attribute(value=Name(id=''details'',
      ctx=Load(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=23), attr=''update'',
      ctx=Load(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=30), args=[Dict(keys=[Constant(value=''class_attributes'',
      lineno=168, col_offset=20, end_lineno=168, end_col_offset=38), Constant(value=''class_methods'',
      lineno=169, col_offset=20, end_lineno=169, end_col_offset=35), Constant(value=''class_inheritance'',
      lineno=170, col_offset=20, end_lineno=170, end_col_offset=39), Constant(value=''class_static_methods'',
      lineno=171, col_offset=20, end_lineno=171, end_col_offset=42)], values=[ListComp(elt=Attribute(value=Name(id=''target'',
      ctx=Load(), lineno=168, col_offset=41, end_lineno=168, end_col_offset=47), attr=''attr'',
      ctx=Load(), lineno=168, col_offset=41, end_lineno=168, end_col_offset=52), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=168, col_offset=57, end_lineno=168, end_col_offset=64),
      iter=Attribute(value=Name(id=''node'', ctx=Load(), lineno=168, col_offset=68,
      end_lineno=168, end_col_offset=72), attr=''body'', ctx=Load(), lineno=168, col_offset=68,
      end_lineno=168, end_col_offset=77), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(),
      lineno=168, col_offset=81, end_lineno=168, end_col_offset=91), args=[Name(id=''subnode'',
      ctx=Load(), lineno=168, col_offset=92, end_lineno=168, end_col_offset=99), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=168, col_offset=101, end_lineno=168, end_col_offset=104),
      attr=''Assign'', ctx=Load(), lineno=168, col_offset=101, end_lineno=168, end_col_offset=111)],
      keywords=[], lineno=168, col_offset=81, end_lineno=168, end_col_offset=112)],
      is_async=0), comprehension(target=Name(id=''target'', ctx=Store(), lineno=168,
      col_offset=117, end_lineno=168, end_col_offset=123), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=168, col_offset=127, end_lineno=168, end_col_offset=134),
      attr=''targets'', ctx=Load(), lineno=168, col_offset=127, end_lineno=168, end_col_offset=142),
      ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=168, col_offset=146,
      end_lineno=168, end_col_offset=156), args=[Name(id=''target'', ctx=Load(), lineno=168,
      col_offset=157, end_lineno=168, end_col_offset=163), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=168, col_offset=165, end_lineno=168, end_col_offset=168),
      attr=''Attribute'', ctx=Load(), lineno=168, col_offset=165, end_lineno=168,
      end_col_offset=178)], keywords=[], lineno=168, col_offset=146, end_lineno=168,
      end_col_offset=179)], is_async=0)], lineno=168, col_offset=40, end_lineno=168,
      end_col_offset=180), ListComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(),
      lineno=169, col_offset=38, end_lineno=169, end_col_offset=45), attr=''name'',
      ctx=Load(), lineno=169, col_offset=38, end_lineno=169, end_col_offset=50), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=169, col_offset=55, end_lineno=169, end_col_offset=62),
      iter=Attribute(value=Name(id=''node'', ctx=Load(), lineno=169, col_offset=66,
      end_lineno=169, end_col_offset=70), attr=''body'', ctx=Load(), lineno=169, col_offset=66,
      end_lineno=169, end_col_offset=75), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=169, col_offset=79, end_lineno=169, end_col_offset=89), args=[Name(id=''subnode'',
      ctx=Load(), lineno=169, col_offset=90, end_lineno=169, end_col_offset=97), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=169, col_offset=99, end_lineno=169, end_col_offset=102),
      attr=''FunctionDef'', ctx=Load(), lineno=169, col_offset=99, end_lineno=169,
      end_col_offset=114)], keywords=[], lineno=169, col_offset=79, end_lineno=169,
      end_col_offset=115), Compare(left=Attribute(value=Name(id=''subnode'', ctx=Load(),
      lineno=169, col_offset=120, end_lineno=169, end_col_offset=127), attr=''name'',
      ctx=Load(), lineno=169, col_offset=120, end_lineno=169, end_col_offset=132),
      ops=[NotEq()], comparators=[Constant(value=''__init__'', lineno=169, col_offset=136,
      end_lineno=169, end_col_offset=146)], lineno=169, col_offset=120, end_lineno=169,
      end_col_offset=146)], lineno=169, col_offset=79, end_lineno=169, end_col_offset=146)],
      is_async=0)], lineno=169, col_offset=37, end_lineno=169, end_col_offset=147),
      IfExp(test=Attribute(value=Name(id=''node'', ctx=Load(), lineno=170, col_offset=87,
      end_lineno=170, end_col_offset=91), attr=''bases'', ctx=Load(), lineno=170,
      col_offset=87, end_lineno=170, end_col_offset=97), body=ListComp(elt=Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=170, col_offset=42, end_lineno=170, end_col_offset=45), attr=''unparse'',
      ctx=Load(), lineno=170, col_offset=42, end_lineno=170, end_col_offset=53), args=[Name(id=''base'',
      ctx=Load(), lineno=170, col_offset=54, end_lineno=170, end_col_offset=58)],
      keywords=[], lineno=170, col_offset=42, end_lineno=170, end_col_offset=59),
      generators=[comprehension(target=Name(id=''base'', ctx=Store(), lineno=170,
      col_offset=64, end_lineno=170, end_col_offset=68), iter=Attribute(value=Name(id=''node'',
      ctx=Load(), lineno=170, col_offset=72, end_lineno=170, end_col_offset=76), attr=''bases'',
      ctx=Load(), lineno=170, col_offset=72, end_lineno=170, end_col_offset=82), ifs=[],
      is_async=0)], lineno=170, col_offset=41, end_lineno=170, end_col_offset=83),
      orelse=List(elts=[], ctx=Load(), lineno=170, col_offset=103, end_lineno=170,
      end_col_offset=105), lineno=170, col_offset=41, end_lineno=170, end_col_offset=105),
      ListComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=171, col_offset=45,
      end_lineno=171, end_col_offset=52), attr=''name'', ctx=Load(), lineno=171, col_offset=45,
      end_lineno=171, end_col_offset=57), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=171, col_offset=62, end_lineno=171, end_col_offset=69),
      iter=Attribute(value=Name(id=''node'', ctx=Load(), lineno=171, col_offset=73,
      end_lineno=171, end_col_offset=77), attr=''body'', ctx=Load(), lineno=171, col_offset=73,
      end_lineno=171, end_col_offset=82), ifs=[BoolOp(op=And(), values=[Call(func=Name(id=''isinstance'',
      ctx=Load(), lineno=171, col_offset=86, end_lineno=171, end_col_offset=96), args=[Name(id=''subnode'',
      ctx=Load(), lineno=171, col_offset=97, end_lineno=171, end_col_offset=104),
      Attribute(value=Name(id=''ast'', ctx=Load(), lineno=171, col_offset=106, end_lineno=171,
      end_col_offset=109), attr=''FunctionDef'', ctx=Load(), lineno=171, col_offset=106,
      end_lineno=171, end_col_offset=121)], keywords=[], lineno=171, col_offset=86,
      end_lineno=171, end_col_offset=122), Compare(left=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=171, col_offset=127, end_lineno=171, end_col_offset=134),
      attr=''name'', ctx=Load(), lineno=171, col_offset=127, end_lineno=171, end_col_offset=139),
      ops=[NotEq()], comparators=[Constant(value=''__init__'', lineno=171, col_offset=143,
      end_lineno=171, end_col_offset=153)], lineno=171, col_offset=127, end_lineno=171,
      end_col_offset=153), Call(func=Name(id=''any'', ctx=Load(), lineno=171, col_offset=158,
      end_lineno=171, end_col_offset=161), args=[GeneratorExp(elt=BoolOp(op=And(),
      values=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=171, col_offset=162,
      end_lineno=171, end_col_offset=172), args=[Name(id=''decorator'', ctx=Load(),
      lineno=171, col_offset=173, end_lineno=171, end_col_offset=182), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=171, col_offset=184, end_lineno=171, end_col_offset=187),
      attr=''Name'', ctx=Load(), lineno=171, col_offset=184, end_lineno=171, end_col_offset=192)],
      keywords=[], lineno=171, col_offset=162, end_lineno=171, end_col_offset=193),
      Compare(left=Attribute(value=Name(id=''decorator'', ctx=Load(), lineno=171,
      col_offset=198, end_lineno=171, end_col_offset=207), attr=''id'', ctx=Load(),
      lineno=171, col_offset=198, end_lineno=171, end_col_offset=210), ops=[Eq()],
      comparators=[Constant(value=''staticmethod'', lineno=171, col_offset=214, end_lineno=171,
      end_col_offset=228)], lineno=171, col_offset=198, end_lineno=171, end_col_offset=228)],
      lineno=171, col_offset=162, end_lineno=171, end_col_offset=228), generators=[comprehension(target=Name(id=''decorator'',
      ctx=Store(), lineno=171, col_offset=233, end_lineno=171, end_col_offset=242),
      iter=Attribute(value=Name(id=''subnode'', ctx=Load(), lineno=171, col_offset=246,
      end_lineno=171, end_col_offset=253), attr=''decorator_list'', ctx=Load(), lineno=171,
      col_offset=246, end_lineno=171, end_col_offset=268), ifs=[], is_async=0)], lineno=171,
      col_offset=161, end_lineno=171, end_col_offset=269)], keywords=[], lineno=171,
      col_offset=158, end_lineno=171, end_col_offset=269)], lineno=171, col_offset=86,
      end_lineno=171, end_col_offset=269)], is_async=0)], lineno=171, col_offset=44,
      end_lineno=171, end_col_offset=270)], lineno=167, col_offset=31, end_lineno=172,
      end_col_offset=21)], keywords=[], lineno=167, col_offset=16, end_lineno=172,
      end_col_offset=22), lineno=167, col_offset=16, end_lineno=172, end_col_offset=22)],
      orelse=[], lineno=166, col_offset=12, end_lineno=172, end_col_offset=22)], orelse=[],
      lineno=158, col_offset=8, end_lineno=172, end_col_offset=22), Return(value=Name(id=''details'',
      ctx=Load(), lineno=173, col_offset=15, end_lineno=173, end_col_offset=22), lineno=173,
      col_offset=8, end_lineno=173, end_col_offset=22)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=142, col_offset=64, end_lineno=142, end_col_offset=68), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=142, col_offset=69, end_lineno=142, end_col_offset=72), Subscript(value=Name(id=''Union'',
      ctx=Load(), lineno=142, col_offset=74, end_lineno=142, end_col_offset=79), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=142, col_offset=80, end_lineno=142, end_col_offset=83), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=142, col_offset=85, end_lineno=142, end_col_offset=89), slice=Name(id=''str'',
      ctx=Load(), lineno=142, col_offset=90, end_lineno=142, end_col_offset=93), ctx=Load(),
      lineno=142, col_offset=85, end_lineno=142, end_col_offset=94)], ctx=Load(),
      lineno=142, col_offset=80, end_lineno=142, end_col_offset=94), ctx=Load(), lineno=142,
      col_offset=74, end_lineno=142, end_col_offset=95)], ctx=Load(), lineno=142,
      col_offset=69, end_lineno=142, end_col_offset=95), ctx=Load(), lineno=142, col_offset=64,
      end_lineno=142, end_col_offset=96), lineno=142, col_offset=4, end_lineno=173,
      end_col_offset=22), FunctionDef(name=''analyze'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=175, col_offset=16, end_lineno=175, end_col_offset=20),
      arg(arg=''node'', annotation=Attribute(value=Name(id=''ast'', ctx=Load(), lineno=175,
      col_offset=28, end_lineno=175, end_col_offset=31), attr=''AST'', ctx=Load(),
      lineno=175, col_offset=28, end_lineno=175, end_col_offset=35), lineno=175, col_offset=22,
      end_lineno=175, end_col_offset=35)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Assign(targets=[Name(id=''node_walk'', ctx=Store(), lineno=177, col_offset=8,
      end_lineno=177, end_col_offset=17)], value=Call(func=Name(id=''list'', ctx=Load(),
      lineno=177, col_offset=20, end_lineno=177, end_col_offset=24), args=[Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=177, col_offset=25, end_lineno=177, end_col_offset=28), attr=''walk'',
      ctx=Load(), lineno=177, col_offset=25, end_lineno=177, end_col_offset=33), args=[Name(id=''node'',
      ctx=Load(), lineno=177, col_offset=34, end_lineno=177, end_col_offset=38)],
      keywords=[], lineno=177, col_offset=25, end_lineno=177, end_col_offset=39)],
      keywords=[], lineno=177, col_offset=20, end_lineno=177, end_col_offset=40),
      lineno=177, col_offset=8, end_lineno=177, end_col_offset=40), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=178, col_offset=8, end_lineno=178, end_col_offset=12), attr=''visit'',
      ctx=Load(), lineno=178, col_offset=8, end_lineno=178, end_col_offset=18), args=[Name(id=''node'',
      ctx=Load(), lineno=178, col_offset=19, end_lineno=178, end_col_offset=23)],
      keywords=[], lineno=178, col_offset=8, end_lineno=178, end_col_offset=24), lineno=178,
      col_offset=8, end_lineno=178, end_col_offset=24), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=179, col_offset=8, end_lineno=179, end_col_offset=12), attr=''file_info'',
      ctx=Store(), lineno=179, col_offset=8, end_lineno=179, end_col_offset=22)],
      value=Dict(keys=[Constant(value=''file_code'', lineno=180, col_offset=12, end_lineno=180,
      end_col_offset=23), Constant(value=''file_ast'', lineno=181, col_offset=12,
      end_lineno=181, end_col_offset=22), Constant(value=''file_dependencies'', lineno=182,
      col_offset=12, end_lineno=182, end_col_offset=31), Constant(value=''file_functions'',
      lineno=183, col_offset=12, end_lineno=183, end_col_offset=28), Constant(value=''file_classes'',
      lineno=184, col_offset=12, end_lineno=184, end_col_offset=26), Constant(value=''file_control_flow'',
      lineno=185, col_offset=12, end_lineno=185, end_col_offset=31)], values=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=180, col_offset=25, end_lineno=180, end_col_offset=29), attr=''code'',
      ctx=Load(), lineno=180, col_offset=25, end_lineno=180, end_col_offset=34), Call(func=Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=181, col_offset=25, end_lineno=181, end_col_offset=28), attr=''dump'',
      ctx=Load(), lineno=181, col_offset=25, end_lineno=181, end_col_offset=33), args=[Name(id=''node'',
      ctx=Load(), lineno=181, col_offset=34, end_lineno=181, end_col_offset=38)],
      keywords=[], lineno=181, col_offset=25, end_lineno=181, end_col_offset=39),
      Call(func=Name(id=''list'', ctx=Load(), lineno=182, col_offset=33, end_lineno=182,
      end_col_offset=37), args=[BinOp(left=SetComp(elt=Attribute(value=Name(id=''alias'',
      ctx=Load(), lineno=182, col_offset=39, end_lineno=182, end_col_offset=44), attr=''name'',
      ctx=Load(), lineno=182, col_offset=39, end_lineno=182, end_col_offset=49), generators=[comprehension(target=Name(id=''subnode'',
      ctx=Store(), lineno=182, col_offset=54, end_lineno=182, end_col_offset=61),
      iter=Name(id=''node_walk'', ctx=Load(), lineno=182, col_offset=65, end_lineno=182,
      end_col_offset=74), ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=182,
      col_offset=78, end_lineno=182, end_col_offset=88), args=[Name(id=''subnode'',
      ctx=Load(), lineno=182, col_offset=89, end_lineno=182, end_col_offset=96), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=182, col_offset=98, end_lineno=182, end_col_offset=101),
      attr=''Import'', ctx=Load(), lineno=182, col_offset=98, end_lineno=182, end_col_offset=108)],
      keywords=[], lineno=182, col_offset=78, end_lineno=182, end_col_offset=109)],
      is_async=0), comprehension(target=Name(id=''alias'', ctx=Store(), lineno=182,
      col_offset=114, end_lineno=182, end_col_offset=119), iter=Attribute(value=Name(id=''subnode'',
      ctx=Load(), lineno=182, col_offset=123, end_lineno=182, end_col_offset=130),
      attr=''names'', ctx=Load(), lineno=182, col_offset=123, end_lineno=182, end_col_offset=136),
      ifs=[], is_async=0)], lineno=182, col_offset=38, end_lineno=182, end_col_offset=137),
      op=BitOr(), right=SetComp(elt=Attribute(value=Name(id=''subnode'', ctx=Load(),
      lineno=182, col_offset=141, end_lineno=182, end_col_offset=148), attr=''module'',
      ctx=Load(), lineno=182, col_offset=141, end_lineno=182, end_col_offset=155),
      generators=[comprehension(target=Name(id=''subnode'', ctx=Store(), lineno=182,
      col_offset=160, end_lineno=182, end_col_offset=167), iter=Name(id=''node_walk'',
      ctx=Load(), lineno=182, col_offset=171, end_lineno=182, end_col_offset=180),
      ifs=[Call(func=Name(id=''isinstance'', ctx=Load(), lineno=182, col_offset=184,
      end_lineno=182, end_col_offset=194), args=[Name(id=''subnode'', ctx=Load(),
      lineno=182, col_offset=195, end_lineno=182, end_col_offset=202), Attribute(value=Name(id=''ast'',
      ctx=Load(), lineno=182, col_offset=204, end_lineno=182, end_col_offset=207),
      attr=''ImportFrom'', ctx=Load(), lineno=182, col_offset=204, end_lineno=182,
      end_col_offset=218)], keywords=[], lineno=182, col_offset=184, end_lineno=182,
      end_col_offset=219)], is_async=0)], lineno=182, col_offset=140, end_lineno=182,
      end_col_offset=220), lineno=182, col_offset=38, end_lineno=182, end_col_offset=220)],
      keywords=[], lineno=182, col_offset=33, end_lineno=182, end_col_offset=221),
      Call(func=Name(id=''list'', ctx=Load(), lineno=183, col_offset=30, end_lineno=183,
      end_col_offset=34), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=183, col_offset=35, end_lineno=183, end_col_offset=39), attr=''functions'',
      ctx=Load(), lineno=183, col_offset=35, end_lineno=183, end_col_offset=49), attr=''keys'',
      ctx=Load(), lineno=183, col_offset=35, end_lineno=183, end_col_offset=54), args=[],
      keywords=[], lineno=183, col_offset=35, end_lineno=183, end_col_offset=56)],
      keywords=[], lineno=183, col_offset=30, end_lineno=183, end_col_offset=57),
      Call(func=Name(id=''list'', ctx=Load(), lineno=184, col_offset=28, end_lineno=184,
      end_col_offset=32), args=[Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=184, col_offset=33, end_lineno=184, end_col_offset=37), attr=''classes'',
      ctx=Load(), lineno=184, col_offset=33, end_lineno=184, end_col_offset=45), attr=''keys'',
      ctx=Load(), lineno=184, col_offset=33, end_lineno=184, end_col_offset=50), args=[],
      keywords=[], lineno=184, col_offset=33, end_lineno=184, end_col_offset=52)],
      keywords=[], lineno=184, col_offset=28, end_lineno=184, end_col_offset=53),
      Call(func=Name(id=''get_control_flow'', ctx=Load(), lineno=185, col_offset=33,
      end_lineno=185, end_col_offset=49), args=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=185, col_offset=50, end_lineno=185, end_col_offset=54), attr=''code'',
      ctx=Load(), lineno=185, col_offset=50, end_lineno=185, end_col_offset=59)],
      keywords=[], lineno=185, col_offset=33, end_lineno=185, end_col_offset=60)],
      lineno=179, col_offset=25, end_lineno=186, end_col_offset=9), lineno=179, col_offset=8,
      end_lineno=186, end_col_offset=9), Assign(targets=[Name(id=''dependencies'',
      ctx=Store(), lineno=189, col_offset=8, end_lineno=189, end_col_offset=20)],
      value=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=189,
      col_offset=23, end_lineno=189, end_col_offset=27), attr=''file_info'', ctx=Load(),
      lineno=189, col_offset=23, end_lineno=189, end_col_offset=37), slice=Constant(value=''file_dependencies'',
      lineno=189, col_offset=38, end_lineno=189, end_col_offset=57), ctx=Load(), lineno=189,
      col_offset=23, end_lineno=189, end_col_offset=58), lineno=189, col_offset=8,
      end_lineno=189, end_col_offset=58), Assign(targets=[Name(id=''function_defs'',
      ctx=Store(), lineno=190, col_offset=8, end_lineno=190, end_col_offset=21)],
      value=ListComp(elt=Dict(keys=[Name(id=''func_name'', ctx=Load(), lineno=190,
      col_offset=26, end_lineno=190, end_col_offset=35)], values=[Dict(keys=[Constant(value=''inputs'',
      lineno=190, col_offset=38, end_lineno=190, end_col_offset=46), Constant(value=''calls'',
      lineno=190, col_offset=76, end_lineno=190, end_col_offset=83), Constant(value=''returns'',
      lineno=190, col_offset=112, end_lineno=190, end_col_offset=121)], values=[Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=190, col_offset=48, end_lineno=190, end_col_offset=55), slice=Constant(value=''function_inputs'',
      lineno=190, col_offset=56, end_lineno=190, end_col_offset=73), ctx=Load(), lineno=190,
      col_offset=48, end_lineno=190, end_col_offset=74), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=190, col_offset=85, end_lineno=190, end_col_offset=92), slice=Constant(value=''function_calls'',
      lineno=190, col_offset=93, end_lineno=190, end_col_offset=109), ctx=Load(),
      lineno=190, col_offset=85, end_lineno=190, end_col_offset=110), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=190, col_offset=123, end_lineno=190, end_col_offset=130),
      slice=Constant(value=''function_returns'', lineno=190, col_offset=131, end_lineno=190,
      end_col_offset=149), ctx=Load(), lineno=190, col_offset=123, end_lineno=190,
      end_col_offset=150)], lineno=190, col_offset=37, end_lineno=190, end_col_offset=151)],
      lineno=190, col_offset=25, end_lineno=190, end_col_offset=152), generators=[comprehension(target=Tuple(elts=[Name(id=''func_name'',
      ctx=Store(), lineno=190, col_offset=157, end_lineno=190, end_col_offset=166),
      Name(id=''details'', ctx=Store(), lineno=190, col_offset=168, end_lineno=190,
      end_col_offset=175)], ctx=Store(), lineno=190, col_offset=157, end_lineno=190,
      end_col_offset=175), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=190, col_offset=179, end_lineno=190, end_col_offset=183),
      attr=''functions'', ctx=Load(), lineno=190, col_offset=179, end_lineno=190,
      end_col_offset=193), attr=''items'', ctx=Load(), lineno=190, col_offset=179,
      end_lineno=190, end_col_offset=199), args=[], keywords=[], lineno=190, col_offset=179,
      end_lineno=190, end_col_offset=201), ifs=[], is_async=0)], lineno=190, col_offset=24,
      end_lineno=190, end_col_offset=202), lineno=190, col_offset=8, end_lineno=190,
      end_col_offset=202), Assign(targets=[Name(id=''class_defs'', ctx=Store(), lineno=191,
      col_offset=8, end_lineno=191, end_col_offset=18)], value=List(elts=[], ctx=Load(),
      lineno=191, col_offset=21, end_lineno=191, end_col_offset=23), lineno=191, col_offset=8,
      end_lineno=191, end_col_offset=23), For(target=Tuple(elts=[Name(id=''class_name'',
      ctx=Store(), lineno=192, col_offset=12, end_lineno=192, end_col_offset=22),
      Name(id=''class_details'', ctx=Store(), lineno=192, col_offset=24, end_lineno=192,
      end_col_offset=37)], ctx=Store(), lineno=192, col_offset=12, end_lineno=192,
      end_col_offset=37), iter=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=192, col_offset=41, end_lineno=192, end_col_offset=45), attr=''classes'',
      ctx=Load(), lineno=192, col_offset=41, end_lineno=192, end_col_offset=53), attr=''items'',
      ctx=Load(), lineno=192, col_offset=41, end_lineno=192, end_col_offset=59), args=[],
      keywords=[], lineno=192, col_offset=41, end_lineno=192, end_col_offset=61),
      body=[Assign(targets=[Name(id=''method_defs'', ctx=Store(), lineno=193, col_offset=12,
      end_lineno=193, end_col_offset=23)], value=Dict(keys=[], values=[], lineno=193,
      col_offset=26, end_lineno=193, end_col_offset=28), lineno=193, col_offset=12,
      end_lineno=193, end_col_offset=28), For(target=Tuple(elts=[Name(id=''method_name'',
      ctx=Store(), lineno=194, col_offset=16, end_lineno=194, end_col_offset=27),
      Name(id=''details'', ctx=Store(), lineno=194, col_offset=29, end_lineno=194,
      end_col_offset=36)], ctx=Store(), lineno=194, col_offset=16, end_lineno=194,
      end_col_offset=36), iter=Call(func=Attribute(value=Name(id=''class_details'',
      ctx=Load(), lineno=194, col_offset=40, end_lineno=194, end_col_offset=53), attr=''items'',
      ctx=Load(), lineno=194, col_offset=40, end_lineno=194, end_col_offset=59), args=[],
      keywords=[], lineno=194, col_offset=40, end_lineno=194, end_col_offset=61),
      body=[If(test=Call(func=Attribute(value=Name(id=''method_name'', ctx=Load(),
      lineno=195, col_offset=19, end_lineno=195, end_col_offset=30), attr=''startswith'',
      ctx=Load(), lineno=195, col_offset=19, end_lineno=195, end_col_offset=41), args=[Constant(value=''class_method_'',
      lineno=195, col_offset=42, end_lineno=195, end_col_offset=57)], keywords=[],
      lineno=195, col_offset=19, end_lineno=195, end_col_offset=58), body=[Assign(targets=[Subscript(value=Name(id=''method_defs'',
      ctx=Load(), lineno=196, col_offset=20, end_lineno=196, end_col_offset=31), slice=Subscript(value=Name(id=''method_name'',
      ctx=Load(), lineno=196, col_offset=32, end_lineno=196, end_col_offset=43), slice=Slice(lower=Call(func=Name(id=''len'',
      ctx=Load(), lineno=196, col_offset=44, end_lineno=196, end_col_offset=47), args=[Constant(value=''class_method_'',
      lineno=196, col_offset=48, end_lineno=196, end_col_offset=63)], keywords=[],
      lineno=196, col_offset=44, end_lineno=196, end_col_offset=64), lineno=196, col_offset=44,
      end_lineno=196, end_col_offset=65), ctx=Load(), lineno=196, col_offset=32, end_lineno=196,
      end_col_offset=66), ctx=Store(), lineno=196, col_offset=20, end_lineno=196,
      end_col_offset=67)], value=Dict(keys=[Constant(value=''inputs'', lineno=196,
      col_offset=71, end_lineno=196, end_col_offset=79), Constant(value=''calls'',
      lineno=196, col_offset=107, end_lineno=196, end_col_offset=114), Constant(value=''returns'',
      lineno=196, col_offset=141, end_lineno=196, end_col_offset=150)], values=[Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=196, col_offset=81, end_lineno=196, end_col_offset=88), slice=Constant(value=''method_inputs'',
      lineno=196, col_offset=89, end_lineno=196, end_col_offset=104), ctx=Load(),
      lineno=196, col_offset=81, end_lineno=196, end_col_offset=105), Subscript(value=Name(id=''details'',
      ctx=Load(), lineno=196, col_offset=116, end_lineno=196, end_col_offset=123),
      slice=Constant(value=''method_calls'', lineno=196, col_offset=124, end_lineno=196,
      end_col_offset=138), ctx=Load(), lineno=196, col_offset=116, end_lineno=196,
      end_col_offset=139), Subscript(value=Name(id=''details'', ctx=Load(), lineno=196,
      col_offset=152, end_lineno=196, end_col_offset=159), slice=Constant(value=''method_returns'',
      lineno=196, col_offset=160, end_lineno=196, end_col_offset=176), ctx=Load(),
      lineno=196, col_offset=152, end_lineno=196, end_col_offset=177)], lineno=196,
      col_offset=70, end_lineno=196, end_col_offset=178), lineno=196, col_offset=20,
      end_lineno=196, end_col_offset=178)], orelse=[], lineno=195, col_offset=16,
      end_lineno=196, end_col_offset=178)], orelse=[], lineno=194, col_offset=12,
      end_lineno=196, end_col_offset=178), Expr(value=Call(func=Attribute(value=Name(id=''class_defs'',
      ctx=Load(), lineno=197, col_offset=12, end_lineno=197, end_col_offset=22), attr=''append'',
      ctx=Load(), lineno=197, col_offset=12, end_lineno=197, end_col_offset=29), args=[Dict(keys=[Name(id=''class_name'',
      ctx=Load(), lineno=197, col_offset=31, end_lineno=197, end_col_offset=41)],
      values=[Dict(keys=[Constant(value=''method_defs'', lineno=197, col_offset=44,
      end_lineno=197, end_col_offset=57)], values=[Name(id=''method_defs'', ctx=Load(),
      lineno=197, col_offset=59, end_lineno=197, end_col_offset=70)], lineno=197,
      col_offset=43, end_lineno=197, end_col_offset=71)], lineno=197, col_offset=30,
      end_lineno=197, end_col_offset=72)], keywords=[], lineno=197, col_offset=12,
      end_lineno=197, end_col_offset=73), lineno=197, col_offset=12, end_lineno=197,
      end_col_offset=73)], orelse=[], lineno=192, col_offset=8, end_lineno=197, end_col_offset=73),
      Assign(targets=[Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=198, col_offset=8, end_lineno=198, end_col_offset=12), attr=''file_info'',
      ctx=Load(), lineno=198, col_offset=8, end_lineno=198, end_col_offset=22), slice=Constant(value=''file_summary'',
      lineno=198, col_offset=23, end_lineno=198, end_col_offset=37), ctx=Store(),
      lineno=198, col_offset=8, end_lineno=198, end_col_offset=38)], value=Dict(keys=[Constant(value=''dependencies'',
      lineno=198, col_offset=43, end_lineno=198, end_col_offset=57), Constant(value=''function_defs'',
      lineno=198, col_offset=73, end_lineno=198, end_col_offset=88), Constant(value=''class_defs'',
      lineno=198, col_offset=106, end_lineno=198, end_col_offset=118)], values=[Name(id=''dependencies'',
      ctx=Load(), lineno=198, col_offset=59, end_lineno=198, end_col_offset=71), Name(id=''function_defs'',
      ctx=Load(), lineno=198, col_offset=91, end_lineno=198, end_col_offset=104),
      Name(id=''class_defs'', ctx=Load(), lineno=198, col_offset=121, end_lineno=198,
      end_col_offset=131)], lineno=198, col_offset=41, end_lineno=198, end_col_offset=132),
      lineno=198, col_offset=8, end_lineno=198, end_col_offset=132)], decorator_list=[],
      returns=Constant(value=None, lineno=175, col_offset=40, end_lineno=175, end_col_offset=44),
      lineno=175, col_offset=4, end_lineno=198, end_col_offset=132)], decorator_list=[],
      lineno=105, col_offset=0, end_lineno=198, end_col_offset=132)'
    class_docstring: "Visitor class for traversing an AST (Abstract Syntax Tree) and\
      \ extracting\ndetails about the code.\nAttributes:\n    code (str): The source\
      \ code.\n    functions(Dict): details about functions in the code.\n    classes\
      \ (Dict): details about classes in the code.\n    file_info (Dict): details\
      \ about the file.\nMethods:\n    visit_FunctionDef(node: ast.FunctionDef) ->\
      \ None: Extract details \n        about a function.\n    visit_ClassDef(node:\
      \ ast.ClassDef) -> None: Extract details about a \n        class.\n    extract_details(node:\
      \ ast.AST, node_type: str) -> \n        Dict[str, Union[str, List[str]]]: Extract\
      \ details about a node.\n    analyze(node: ast.AST) -> None: Populate file_info\
      \ with details about\n            the file."
    class_inputs: null
    class_defaults: null
    class_returns:
    - details
    class_calls:
    - get_control_flow
    - self.generic_visit
    - ast.get_docstring
    - self.functions.items
    - ast.dump
    - set
    - self.functions.keys
    - self.classes.keys
    - len
    - class_details.items
    - ast.walk
    - class_defs.append
    - self.extract_details
    - isinstance
    - method_name.startswith
    - self.classes[self.current_class]['class_attributes'].extend
    - any
    - self.classes.items
    - self.visit
    - get_all_calls
    - ast.unparse
    - details.update
    - list
    class_variables:
    - method_defs
    - details
    - node_walk
    - function_defs
    - attributes
    - class_defs
    - dependencies
    class_decorators: []
    class_annotations:
    - str
    - Dict[str, Union[str, List[str]]]
    - Dict[str, Dict[str, Union[str, List[str]]]]
    class_properties:
    - self.file_info
    - self.functions
    - self.current_class
    - self.classes
    - self.code
    class_attributes:
    - current_class
    - current_class
    - file_info
    class_methods:
    - visit_FunctionDef
    - visit_ClassDef
    - extract_details
    - analyze
    class_inheritance:
    - ast.NodeVisitor
    class_static_methods: []
    class_method___init__:
      method_name: __init__
      method_code: "def __init__(self, code: str):\n    self.code: str = code\n  \
        \  self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.classes:\
        \ Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.file_info: Dict[str,\
        \ Union[str, List[str]]] = {}\n    self.current_class: str = None"
      method_ast: FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self',
        lineno=124, col_offset=17, end_lineno=124, end_col_offset=21), arg(arg='code',
        annotation=Name(id='str', ctx=Load(), lineno=124, col_offset=29, end_lineno=124,
        end_col_offset=32), lineno=124, col_offset=23, end_lineno=124, end_col_offset=32)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self',
        ctx=Load(), lineno=126, col_offset=8, end_lineno=126, end_col_offset=12),
        attr='code', ctx=Store(), lineno=126, col_offset=8, end_lineno=126, end_col_offset=17),
        annotation=Name(id='str', ctx=Load(), lineno=126, col_offset=19, end_lineno=126,
        end_col_offset=22), value=Name(id='code', ctx=Load(), lineno=126, col_offset=25,
        end_lineno=126, end_col_offset=29), simple=0, lineno=126, col_offset=8, end_lineno=126,
        end_col_offset=29), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load(),
        lineno=127, col_offset=8, end_lineno=127, end_col_offset=12), attr='functions',
        ctx=Store(), lineno=127, col_offset=8, end_lineno=127, end_col_offset=22),
        annotation=Subscript(value=Name(id='Dict', ctx=Load(), lineno=127, col_offset=24,
        end_lineno=127, end_col_offset=28), slice=Tuple(elts=[Name(id='str', ctx=Load(),
        lineno=127, col_offset=29, end_lineno=127, end_col_offset=32), Subscript(value=Name(id='Dict',
        ctx=Load(), lineno=127, col_offset=34, end_lineno=127, end_col_offset=38),
        slice=Tuple(elts=[Name(id='str', ctx=Load(), lineno=127, col_offset=39, end_lineno=127,
        end_col_offset=42), Subscript(value=Name(id='Union', ctx=Load(), lineno=127,
        col_offset=44, end_lineno=127, end_col_offset=49), slice=Tuple(elts=[Name(id='str',
        ctx=Load(), lineno=127, col_offset=50, end_lineno=127, end_col_offset=53),
        Subscript(value=Name(id='List', ctx=Load(), lineno=127, col_offset=55, end_lineno=127,
        end_col_offset=59), slice=Name(id='str', ctx=Load(), lineno=127, col_offset=60,
        end_lineno=127, end_col_offset=63), ctx=Load(), lineno=127, col_offset=55,
        end_lineno=127, end_col_offset=64)], ctx=Load(), lineno=127, col_offset=50,
        end_lineno=127, end_col_offset=64), ctx=Load(), lineno=127, col_offset=44,
        end_lineno=127, end_col_offset=65)], ctx=Load(), lineno=127, col_offset=39,
        end_lineno=127, end_col_offset=65), ctx=Load(), lineno=127, col_offset=34,
        end_lineno=127, end_col_offset=66)], ctx=Load(), lineno=127, col_offset=29,
        end_lineno=127, end_col_offset=66), ctx=Load(), lineno=127, col_offset=24,
        end_lineno=127, end_col_offset=67), value=Dict(keys=[], values=[], lineno=127,
        col_offset=70, end_lineno=127, end_col_offset=72), simple=0, lineno=127, col_offset=8,
        end_lineno=127, end_col_offset=72), AnnAssign(target=Attribute(value=Name(id='self',
        ctx=Load(), lineno=128, col_offset=8, end_lineno=128, end_col_offset=12),
        attr='classes', ctx=Store(), lineno=128, col_offset=8, end_lineno=128, end_col_offset=20),
        annotation=Subscript(value=Name(id='Dict', ctx=Load(), lineno=128, col_offset=22,
        end_lineno=128, end_col_offset=26), slice=Tuple(elts=[Name(id='str', ctx=Load(),
        lineno=128, col_offset=27, end_lineno=128, end_col_offset=30), Subscript(value=Name(id='Dict',
        ctx=Load(), lineno=128, col_offset=32, end_lineno=128, end_col_offset=36),
        slice=Tuple(elts=[Name(id='str', ctx=Load(), lineno=128, col_offset=37, end_lineno=128,
        end_col_offset=40), Subscript(value=Name(id='Union', ctx=Load(), lineno=128,
        col_offset=42, end_lineno=128, end_col_offset=47), slice=Tuple(elts=[Name(id='str',
        ctx=Load(), lineno=128, col_offset=48, end_lineno=128, end_col_offset=51),
        Subscript(value=Name(id='List', ctx=Load(), lineno=128, col_offset=53, end_lineno=128,
        end_col_offset=57), slice=Name(id='str', ctx=Load(), lineno=128, col_offset=58,
        end_lineno=128, end_col_offset=61), ctx=Load(), lineno=128, col_offset=53,
        end_lineno=128, end_col_offset=62)], ctx=Load(), lineno=128, col_offset=48,
        end_lineno=128, end_col_offset=62), ctx=Load(), lineno=128, col_offset=42,
        end_lineno=128, end_col_offset=63)], ctx=Load(), lineno=128, col_offset=37,
        end_lineno=128, end_col_offset=63), ctx=Load(), lineno=128, col_offset=32,
        end_lineno=128, end_col_offset=64)], ctx=Load(), lineno=128, col_offset=27,
        end_lineno=128, end_col_offset=64), ctx=Load(), lineno=128, col_offset=22,
        end_lineno=128, end_col_offset=65), value=Dict(keys=[], values=[], lineno=128,
        col_offset=68, end_lineno=128, end_col_offset=70), simple=0, lineno=128, col_offset=8,
        end_lineno=128, end_col_offset=70), AnnAssign(target=Attribute(value=Name(id='self',
        ctx=Load(), lineno=129, col_offset=8, end_lineno=129, end_col_offset=12),
        attr='file_info', ctx=Store(), lineno=129, col_offset=8, end_lineno=129, end_col_offset=22),
        annotation=Subscript(value=Name(id='Dict', ctx=Load(), lineno=129, col_offset=24,
        end_lineno=129, end_col_offset=28), slice=Tuple(elts=[Name(id='str', ctx=Load(),
        lineno=129, col_offset=29, end_lineno=129, end_col_offset=32), Subscript(value=Name(id='Union',
        ctx=Load(), lineno=129, col_offset=34, end_lineno=129, end_col_offset=39),
        slice=Tuple(elts=[Name(id='str', ctx=Load(), lineno=129, col_offset=40, end_lineno=129,
        end_col_offset=43), Subscript(value=Name(id='List', ctx=Load(), lineno=129,
        col_offset=45, end_lineno=129, end_col_offset=49), slice=Name(id='str', ctx=Load(),
        lineno=129, col_offset=50, end_lineno=129, end_col_offset=53), ctx=Load(),
        lineno=129, col_offset=45, end_lineno=129, end_col_offset=54)], ctx=Load(),
        lineno=129, col_offset=40, end_lineno=129, end_col_offset=54), ctx=Load(),
        lineno=129, col_offset=34, end_lineno=129, end_col_offset=55)], ctx=Load(),
        lineno=129, col_offset=29, end_lineno=129, end_col_offset=55), ctx=Load(),
        lineno=129, col_offset=24, end_lineno=129, end_col_offset=56), value=Dict(keys=[],
        values=[], lineno=129, col_offset=59, end_lineno=129, end_col_offset=61),
        simple=0, lineno=129, col_offset=8, end_lineno=129, end_col_offset=61), AnnAssign(target=Attribute(value=Name(id='self',
        ctx=Load(), lineno=130, col_offset=8, end_lineno=130, end_col_offset=12),
        attr='current_class', ctx=Store(), lineno=130, col_offset=8, end_lineno=130,
        end_col_offset=26), annotation=Name(id='str', ctx=Load(), lineno=130, col_offset=28,
        end_lineno=130, end_col_offset=31), value=Constant(value=None, lineno=130,
        col_offset=34, end_lineno=130, end_col_offset=38), simple=0, lineno=130, col_offset=8,
        end_lineno=130, end_col_offset=38)], decorator_list=[], lineno=124, col_offset=4,
        end_lineno=130, end_col_offset=38)
      method_docstring: null
      method_inputs:
      - self
      - code
      method_defaults: []
      method_returns: []
      method_calls: []
      method_variables: []
      method_decorators: []
      method_annotations:
      - str
      - Dict[str, Union[str, List[str]]]
      - Dict[str, Dict[str, Union[str, List[str]]]]
      method_properties:
      - self.file_info
      - self.functions
      - self.current_class
      - self.classes
      - self.code
    class_method_visit_FunctionDef:
      method_name: visit_FunctionDef
      method_code: "def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n\
        \    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}']\
        \ = self.extract_details(node, 'method')\n    else:\n        self.functions[node.name]\
        \ = self.extract_details(node, 'function')\n    self.generic_visit(node)"
      method_ast: FunctionDef(name='visit_FunctionDef', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=131, col_offset=26, end_lineno=131, end_col_offset=30),
        arg(arg='node', annotation=Attribute(value=Name(id='ast', ctx=Load(), lineno=131,
        col_offset=38, end_lineno=131, end_col_offset=41), attr='FunctionDef', ctx=Load(),
        lineno=131, col_offset=38, end_lineno=131, end_col_offset=53), lineno=131,
        col_offset=32, end_lineno=131, end_col_offset=53)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load(), lineno=132,
        col_offset=11, end_lineno=132, end_col_offset=15), attr='current_class', ctx=Load(),
        lineno=132, col_offset=11, end_lineno=132, end_col_offset=29), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=133, col_offset=12, end_lineno=133, end_col_offset=16),
        attr='classes', ctx=Load(), lineno=133, col_offset=12, end_lineno=133, end_col_offset=24),
        slice=Attribute(value=Name(id='self', ctx=Load(), lineno=133, col_offset=25,
        end_lineno=133, end_col_offset=29), attr='current_class', ctx=Load(), lineno=133,
        col_offset=25, end_lineno=133, end_col_offset=43), ctx=Load(), lineno=133,
        col_offset=12, end_lineno=133, end_col_offset=44), slice=JoinedStr(values=[Constant(value='class_method_',
        lineno=133, col_offset=45, end_lineno=133, end_col_offset=72), FormattedValue(value=Attribute(value=Name(id='node',
        ctx=Load(), lineno=133, col_offset=61, end_lineno=133, end_col_offset=65),
        attr='name', ctx=Load(), lineno=133, col_offset=61, end_lineno=133, end_col_offset=70),
        conversion=-1, lineno=133, col_offset=45, end_lineno=133, end_col_offset=72)],
        lineno=133, col_offset=45, end_lineno=133, end_col_offset=72), ctx=Store(),
        lineno=133, col_offset=12, end_lineno=133, end_col_offset=73)], value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=133, col_offset=76, end_lineno=133, end_col_offset=80),
        attr='extract_details', ctx=Load(), lineno=133, col_offset=76, end_lineno=133,
        end_col_offset=96), args=[Name(id='node', ctx=Load(), lineno=133, col_offset=97,
        end_lineno=133, end_col_offset=101), Constant(value='method', lineno=133,
        col_offset=103, end_lineno=133, end_col_offset=111)], keywords=[], lineno=133,
        col_offset=76, end_lineno=133, end_col_offset=112), lineno=133, col_offset=12,
        end_lineno=133, end_col_offset=112)], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=135, col_offset=12, end_lineno=135, end_col_offset=16),
        attr='functions', ctx=Load(), lineno=135, col_offset=12, end_lineno=135, end_col_offset=26),
        slice=Attribute(value=Name(id='node', ctx=Load(), lineno=135, col_offset=27,
        end_lineno=135, end_col_offset=31), attr='name', ctx=Load(), lineno=135, col_offset=27,
        end_lineno=135, end_col_offset=36), ctx=Store(), lineno=135, col_offset=12,
        end_lineno=135, end_col_offset=37)], value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=135, col_offset=40, end_lineno=135, end_col_offset=44),
        attr='extract_details', ctx=Load(), lineno=135, col_offset=40, end_lineno=135,
        end_col_offset=60), args=[Name(id='node', ctx=Load(), lineno=135, col_offset=61,
        end_lineno=135, end_col_offset=65), Constant(value='function', lineno=135,
        col_offset=67, end_lineno=135, end_col_offset=77)], keywords=[], lineno=135,
        col_offset=40, end_lineno=135, end_col_offset=78), lineno=135, col_offset=12,
        end_lineno=135, end_col_offset=78)], lineno=132, col_offset=8, end_lineno=135,
        end_col_offset=78), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=136, col_offset=8, end_lineno=136, end_col_offset=12), attr='generic_visit',
        ctx=Load(), lineno=136, col_offset=8, end_lineno=136, end_col_offset=26),
        args=[Name(id='node', ctx=Load(), lineno=136, col_offset=27, end_lineno=136,
        end_col_offset=31)], keywords=[], lineno=136, col_offset=8, end_lineno=136,
        end_col_offset=32), lineno=136, col_offset=8, end_lineno=136, end_col_offset=32)],
        decorator_list=[], returns=Constant(value=None, lineno=131, col_offset=58,
        end_lineno=131, end_col_offset=62), lineno=131, col_offset=4, end_lineno=136,
        end_col_offset=32)
      method_docstring: null
      method_inputs:
      - self
      - node
      method_defaults: []
      method_returns: []
      method_calls:
      - self.generic_visit
      - self.extract_details
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_visit_ClassDef:
      method_name: visit_ClassDef
      method_code: "def visit_ClassDef(self, node: ast.ClassDef) -> None:\n    self.classes[node.name]\
        \ = self.extract_details(node, 'class')\n    self.current_class = node.name\n\
        \    self.generic_visit(node)\n    self.current_class = None"
      method_ast: FunctionDef(name='visit_ClassDef', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=137, col_offset=23, end_lineno=137, end_col_offset=27),
        arg(arg='node', annotation=Attribute(value=Name(id='ast', ctx=Load(), lineno=137,
        col_offset=35, end_lineno=137, end_col_offset=38), attr='ClassDef', ctx=Load(),
        lineno=137, col_offset=35, end_lineno=137, end_col_offset=47), lineno=137,
        col_offset=29, end_lineno=137, end_col_offset=47)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=138, col_offset=8, end_lineno=138, end_col_offset=12),
        attr='classes', ctx=Load(), lineno=138, col_offset=8, end_lineno=138, end_col_offset=20),
        slice=Attribute(value=Name(id='node', ctx=Load(), lineno=138, col_offset=21,
        end_lineno=138, end_col_offset=25), attr='name', ctx=Load(), lineno=138, col_offset=21,
        end_lineno=138, end_col_offset=30), ctx=Store(), lineno=138, col_offset=8,
        end_lineno=138, end_col_offset=31)], value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=138, col_offset=34, end_lineno=138, end_col_offset=38),
        attr='extract_details', ctx=Load(), lineno=138, col_offset=34, end_lineno=138,
        end_col_offset=54), args=[Name(id='node', ctx=Load(), lineno=138, col_offset=55,
        end_lineno=138, end_col_offset=59), Constant(value='class', lineno=138, col_offset=61,
        end_lineno=138, end_col_offset=68)], keywords=[], lineno=138, col_offset=34,
        end_lineno=138, end_col_offset=69), lineno=138, col_offset=8, end_lineno=138,
        end_col_offset=69), Assign(targets=[Attribute(value=Name(id='self', ctx=Load(),
        lineno=139, col_offset=8, end_lineno=139, end_col_offset=12), attr='current_class',
        ctx=Store(), lineno=139, col_offset=8, end_lineno=139, end_col_offset=26)],
        value=Attribute(value=Name(id='node', ctx=Load(), lineno=139, col_offset=29,
        end_lineno=139, end_col_offset=33), attr='name', ctx=Load(), lineno=139, col_offset=29,
        end_lineno=139, end_col_offset=38), lineno=139, col_offset=8, end_lineno=139,
        end_col_offset=38), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=140, col_offset=8, end_lineno=140, end_col_offset=12), attr='generic_visit',
        ctx=Load(), lineno=140, col_offset=8, end_lineno=140, end_col_offset=26),
        args=[Name(id='node', ctx=Load(), lineno=140, col_offset=27, end_lineno=140,
        end_col_offset=31)], keywords=[], lineno=140, col_offset=8, end_lineno=140,
        end_col_offset=32), lineno=140, col_offset=8, end_lineno=140, end_col_offset=32),
        Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=141, col_offset=8,
        end_lineno=141, end_col_offset=12), attr='current_class', ctx=Store(), lineno=141,
        col_offset=8, end_lineno=141, end_col_offset=26)], value=Constant(value=None,
        lineno=141, col_offset=29, end_lineno=141, end_col_offset=33), lineno=141,
        col_offset=8, end_lineno=141, end_col_offset=33)], decorator_list=[], returns=Constant(value=None,
        lineno=137, col_offset=52, end_lineno=137, end_col_offset=56), lineno=137,
        col_offset=4, end_lineno=141, end_col_offset=33)
      method_docstring: null
      method_inputs:
      - self
      - node
      method_defaults: []
      method_returns: []
      method_calls:
      - self.generic_visit
      - self.extract_details
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.current_class
    class_method_extract_details:
      method_name: extract_details
      method_code: "def extract_details(self, node: ast.AST, node_type: str) -> Dict[str,\
        \ Union[str, List[str]]]:\n    node_walk = list(ast.walk(node))\n    details\
        \ = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node),\
        \ f'{node_type}_ast': ast.dump(node, include_attributes=True), f'{node_type}_docstring':\
        \ ast.get_docstring(node), f'{node_type}_inputs': [arg.arg for arg in node.args.args]\
        \ if node_type in ['function', 'method'] else None, f'{node_type}_defaults':\
        \ [ast.unparse(d) for d in node.args.defaults] if node_type in ['function',\
        \ 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value)\
        \ if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode,\
        \ ast.Return)], f'{node_type}_calls': list(set([ast.unparse(n.func) for n\
        \ in get_all_calls(node)])), f'{node_type}_variables': list(set([ast.unparse(target)\
        \ for subnode in node_walk if isinstance(subnode, ast.Assign) for target in\
        \ subnode.targets if isinstance(target, ast.Name)])), f'{node_type}_decorators':\
        \ list(set((ast.unparse(decorator) for decorator in node.decorator_list)))\
        \ if node.decorator_list else [], f'{node_type}_annotations': list(set((ast.unparse(subnode.annotation)\
        \ for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation\
        \ is not None))), f'{node_type}_properties': list(set([ast.unparse(subnode)\
        \ for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx,\
        \ ast.Store)]))}\n    if node_type == 'class' or node_type == 'method':\n\
        \        if node_type == 'method' and self.current_class:\n            attributes\
        \ = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign)\
        \ for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value,\
        \ ast.Name) and (target.value.id == 'self')]\n            if attributes:\n\
        \                if 'class_attributes' in self.classes[self.current_class]:\n\
        \                    self.classes[self.current_class]['class_attributes'].extend(attributes)\n\
        \                else:\n                    self.classes[self.current_class]['class_attributes']\
        \ = attributes\n        if node_type == 'class':\n            details.update({'class_attributes':\
        \ [target.attr for subnode in node.body if isinstance(subnode, ast.Assign)\
        \ for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods':\
        \ [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)\
        \ and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base)\
        \ for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name\
        \ for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name\
        \ != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id\
        \ == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return\
        \ details"
      method_ast: FunctionDef(name='extract_details', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=142, col_offset=24, end_lineno=142, end_col_offset=28),
        arg(arg='node', annotation=Attribute(value=Name(id='ast', ctx=Load(), lineno=142,
        col_offset=36, end_lineno=142, end_col_offset=39), attr='AST', ctx=Load(),
        lineno=142, col_offset=36, end_lineno=142, end_col_offset=43), lineno=142,
        col_offset=30, end_lineno=142, end_col_offset=43), arg(arg='node_type', annotation=Name(id='str',
        ctx=Load(), lineno=142, col_offset=56, end_lineno=142, end_col_offset=59),
        lineno=142, col_offset=45, end_lineno=142, end_col_offset=59)], kwonlyargs=[],
        kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='node_walk', ctx=Store(),
        lineno=143, col_offset=8, end_lineno=143, end_col_offset=17)], value=Call(func=Name(id='list',
        ctx=Load(), lineno=143, col_offset=20, end_lineno=143, end_col_offset=24),
        args=[Call(func=Attribute(value=Name(id='ast', ctx=Load(), lineno=143, col_offset=25,
        end_lineno=143, end_col_offset=28), attr='walk', ctx=Load(), lineno=143, col_offset=25,
        end_lineno=143, end_col_offset=33), args=[Name(id='node', ctx=Load(), lineno=143,
        col_offset=34, end_lineno=143, end_col_offset=38)], keywords=[], lineno=143,
        col_offset=25, end_lineno=143, end_col_offset=39)], keywords=[], lineno=143,
        col_offset=20, end_lineno=143, end_col_offset=40), lineno=143, col_offset=8,
        end_lineno=143, end_col_offset=40), Assign(targets=[Name(id='details', ctx=Store(),
        lineno=144, col_offset=8, end_lineno=144, end_col_offset=15)], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=145, col_offset=15, end_lineno=145, end_col_offset=24),
        conversion=-1, lineno=145, col_offset=12, end_lineno=145, end_col_offset=31),
        Constant(value='_name', lineno=145, col_offset=12, end_lineno=145, end_col_offset=31)],
        lineno=145, col_offset=12, end_lineno=145, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=146, col_offset=15, end_lineno=146, end_col_offset=24),
        conversion=-1, lineno=146, col_offset=12, end_lineno=146, end_col_offset=31),
        Constant(value='_code', lineno=146, col_offset=12, end_lineno=146, end_col_offset=31)],
        lineno=146, col_offset=12, end_lineno=146, end_col_offset=31), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=147, col_offset=15, end_lineno=147, end_col_offset=24),
        conversion=-1, lineno=147, col_offset=12, end_lineno=147, end_col_offset=30),
        Constant(value='_ast', lineno=147, col_offset=12, end_lineno=147, end_col_offset=30)],
        lineno=147, col_offset=12, end_lineno=147, end_col_offset=30), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=148, col_offset=15, end_lineno=148, end_col_offset=24),
        conversion=-1, lineno=148, col_offset=12, end_lineno=148, end_col_offset=36),
        Constant(value='_docstring', lineno=148, col_offset=12, end_lineno=148, end_col_offset=36)],
        lineno=148, col_offset=12, end_lineno=148, end_col_offset=36), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=149, col_offset=15, end_lineno=149, end_col_offset=24),
        conversion=-1, lineno=149, col_offset=12, end_lineno=149, end_col_offset=33),
        Constant(value='_inputs', lineno=149, col_offset=12, end_lineno=149, end_col_offset=33)],
        lineno=149, col_offset=12, end_lineno=149, end_col_offset=33), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=150, col_offset=15, end_lineno=150, end_col_offset=24),
        conversion=-1, lineno=150, col_offset=12, end_lineno=150, end_col_offset=35),
        Constant(value='_defaults', lineno=150, col_offset=12, end_lineno=150, end_col_offset=35)],
        lineno=150, col_offset=12, end_lineno=150, end_col_offset=35), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=151, col_offset=15, end_lineno=151, end_col_offset=24),
        conversion=-1, lineno=151, col_offset=12, end_lineno=151, end_col_offset=34),
        Constant(value='_returns', lineno=151, col_offset=12, end_lineno=151, end_col_offset=34)],
        lineno=151, col_offset=12, end_lineno=151, end_col_offset=34), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=152, col_offset=15, end_lineno=152, end_col_offset=24),
        conversion=-1, lineno=152, col_offset=12, end_lineno=152, end_col_offset=32),
        Constant(value='_calls', lineno=152, col_offset=12, end_lineno=152, end_col_offset=32)],
        lineno=152, col_offset=12, end_lineno=152, end_col_offset=32), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=153, col_offset=15, end_lineno=153, end_col_offset=24),
        conversion=-1, lineno=153, col_offset=12, end_lineno=153, end_col_offset=36),
        Constant(value='_variables', lineno=153, col_offset=12, end_lineno=153, end_col_offset=36)],
        lineno=153, col_offset=12, end_lineno=153, end_col_offset=36), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=154, col_offset=15, end_lineno=154, end_col_offset=24),
        conversion=-1, lineno=154, col_offset=12, end_lineno=154, end_col_offset=37),
        Constant(value='_decorators', lineno=154, col_offset=12, end_lineno=154, end_col_offset=37)],
        lineno=154, col_offset=12, end_lineno=154, end_col_offset=37), JoinedStr(values=[FormattedValue(value=Name(id='node_type',
        ctx=Load(), lineno=155, col_offset=15, end_lineno=155, end_col_offset=24),
        conversion=-1, lineno=155, col_offset=12, end_lineno=155, end_col_offset=38),
        Constant(value='_annotations', lineno=155, col_offset=12, end_lineno=155,
        end_col_offset=38)], lineno=155, col_offset=12, end_lineno=155, end_col_offset=38),
        JoinedStr(values=[FormattedValue(value=Name(id='node_type', ctx=Load(), lineno=156,
        col_offset=15, end_lineno=156, end_col_offset=24), conversion=-1, lineno=156,
        col_offset=12, end_lineno=156, end_col_offset=37), Constant(value='_properties',
        lineno=156, col_offset=12, end_lineno=156, end_col_offset=37)], lineno=156,
        col_offset=12, end_lineno=156, end_col_offset=37)], values=[Attribute(value=Name(id='node',
        ctx=Load(), lineno=145, col_offset=33, end_lineno=145, end_col_offset=37),
        attr='name', ctx=Load(), lineno=145, col_offset=33, end_lineno=145, end_col_offset=42),
        Call(func=Attribute(value=Name(id='ast', ctx=Load(), lineno=146, col_offset=33,
        end_lineno=146, end_col_offset=36), attr='unparse', ctx=Load(), lineno=146,
        col_offset=33, end_lineno=146, end_col_offset=44), args=[Name(id='node', ctx=Load(),
        lineno=146, col_offset=45, end_lineno=146, end_col_offset=49)], keywords=[],
        lineno=146, col_offset=33, end_lineno=146, end_col_offset=50), Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=147, col_offset=32, end_lineno=147, end_col_offset=35),
        attr='dump', ctx=Load(), lineno=147, col_offset=32, end_lineno=147, end_col_offset=40),
        args=[Name(id='node', ctx=Load(), lineno=147, col_offset=41, end_lineno=147,
        end_col_offset=45)], keywords=[keyword(arg='include_attributes', value=Constant(value=True,
        lineno=147, col_offset=66, end_lineno=147, end_col_offset=70), lineno=147,
        col_offset=47, end_lineno=147, end_col_offset=70)], lineno=147, col_offset=32,
        end_lineno=147, end_col_offset=71), Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=148, col_offset=38, end_lineno=148, end_col_offset=41),
        attr='get_docstring', ctx=Load(), lineno=148, col_offset=38, end_lineno=148,
        end_col_offset=55), args=[Name(id='node', ctx=Load(), lineno=148, col_offset=56,
        end_lineno=148, end_col_offset=60)], keywords=[], lineno=148, col_offset=38,
        end_lineno=148, end_col_offset=61), IfExp(test=Compare(left=Name(id='node_type',
        ctx=Load(), lineno=149, col_offset=74, end_lineno=149, end_col_offset=83),
        ops=[In()], comparators=[List(elts=[Constant(value='function', lineno=149,
        col_offset=88, end_lineno=149, end_col_offset=98), Constant(value='method',
        lineno=149, col_offset=100, end_lineno=149, end_col_offset=108)], ctx=Load(),
        lineno=149, col_offset=87, end_lineno=149, end_col_offset=109)], lineno=149,
        col_offset=74, end_lineno=149, end_col_offset=109), body=ListComp(elt=Attribute(value=Name(id='arg',
        ctx=Load(), lineno=149, col_offset=36, end_lineno=149, end_col_offset=39),
        attr='arg', ctx=Load(), lineno=149, col_offset=36, end_lineno=149, end_col_offset=43),
        generators=[comprehension(target=Name(id='arg', ctx=Store(), lineno=149, col_offset=48,
        end_lineno=149, end_col_offset=51), iter=Attribute(value=Attribute(value=Name(id='node',
        ctx=Load(), lineno=149, col_offset=55, end_lineno=149, end_col_offset=59),
        attr='args', ctx=Load(), lineno=149, col_offset=55, end_lineno=149, end_col_offset=64),
        attr='args', ctx=Load(), lineno=149, col_offset=55, end_lineno=149, end_col_offset=69),
        ifs=[], is_async=0)], lineno=149, col_offset=35, end_lineno=149, end_col_offset=70),
        orelse=Constant(value=None, lineno=149, col_offset=115, end_lineno=149, end_col_offset=119),
        lineno=149, col_offset=35, end_lineno=149, end_col_offset=119), IfExp(test=Compare(left=Name(id='node_type',
        ctx=Load(), lineno=150, col_offset=85, end_lineno=150, end_col_offset=94),
        ops=[In()], comparators=[List(elts=[Constant(value='function', lineno=150,
        col_offset=99, end_lineno=150, end_col_offset=109), Constant(value='method',
        lineno=150, col_offset=111, end_lineno=150, end_col_offset=119)], ctx=Load(),
        lineno=150, col_offset=98, end_lineno=150, end_col_offset=120)], lineno=150,
        col_offset=85, end_lineno=150, end_col_offset=120), body=ListComp(elt=Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=150, col_offset=38, end_lineno=150, end_col_offset=41),
        attr='unparse', ctx=Load(), lineno=150, col_offset=38, end_lineno=150, end_col_offset=49),
        args=[Name(id='d', ctx=Load(), lineno=150, col_offset=50, end_lineno=150,
        end_col_offset=51)], keywords=[], lineno=150, col_offset=38, end_lineno=150,
        end_col_offset=52), generators=[comprehension(target=Name(id='d', ctx=Store(),
        lineno=150, col_offset=57, end_lineno=150, end_col_offset=58), iter=Attribute(value=Attribute(value=Name(id='node',
        ctx=Load(), lineno=150, col_offset=62, end_lineno=150, end_col_offset=66),
        attr='args', ctx=Load(), lineno=150, col_offset=62, end_lineno=150, end_col_offset=71),
        attr='defaults', ctx=Load(), lineno=150, col_offset=62, end_lineno=150, end_col_offset=80),
        ifs=[], is_async=0)], lineno=150, col_offset=37, end_lineno=150, end_col_offset=81),
        orelse=Constant(value=None, lineno=150, col_offset=126, end_lineno=150, end_col_offset=130),
        lineno=150, col_offset=37, end_lineno=150, end_col_offset=130), ListComp(elt=IfExp(test=Compare(left=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=151, col_offset=67, end_lineno=151, end_col_offset=74),
        attr='value', ctx=Load(), lineno=151, col_offset=67, end_lineno=151, end_col_offset=80),
        ops=[IsNot()], comparators=[Constant(value=None, lineno=151, col_offset=88,
        end_lineno=151, end_col_offset=92)], lineno=151, col_offset=67, end_lineno=151,
        end_col_offset=92), body=Call(func=Attribute(value=Name(id='ast', ctx=Load(),
        lineno=151, col_offset=37, end_lineno=151, end_col_offset=40), attr='unparse',
        ctx=Load(), lineno=151, col_offset=37, end_lineno=151, end_col_offset=48),
        args=[Attribute(value=Name(id='subnode', ctx=Load(), lineno=151, col_offset=49,
        end_lineno=151, end_col_offset=56), attr='value', ctx=Load(), lineno=151,
        col_offset=49, end_lineno=151, end_col_offset=62)], keywords=[], lineno=151,
        col_offset=37, end_lineno=151, end_col_offset=63), orelse=Constant(value='None',
        lineno=151, col_offset=98, end_lineno=151, end_col_offset=104), lineno=151,
        col_offset=37, end_lineno=151, end_col_offset=104), generators=[comprehension(target=Name(id='subnode',
        ctx=Store(), lineno=151, col_offset=109, end_lineno=151, end_col_offset=116),
        iter=Name(id='node_walk', ctx=Load(), lineno=151, col_offset=120, end_lineno=151,
        end_col_offset=129), ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=151,
        col_offset=133, end_lineno=151, end_col_offset=143), args=[Name(id='subnode',
        ctx=Load(), lineno=151, col_offset=144, end_lineno=151, end_col_offset=151),
        Attribute(value=Name(id='ast', ctx=Load(), lineno=151, col_offset=153, end_lineno=151,
        end_col_offset=156), attr='Return', ctx=Load(), lineno=151, col_offset=153,
        end_lineno=151, end_col_offset=163)], keywords=[], lineno=151, col_offset=133,
        end_lineno=151, end_col_offset=164)], is_async=0)], lineno=151, col_offset=36,
        end_lineno=151, end_col_offset=165), Call(func=Name(id='list', ctx=Load(),
        lineno=152, col_offset=34, end_lineno=152, end_col_offset=38), args=[Call(func=Name(id='set',
        ctx=Load(), lineno=152, col_offset=39, end_lineno=152, end_col_offset=42),
        args=[ListComp(elt=Call(func=Attribute(value=Name(id='ast', ctx=Load(), lineno=152,
        col_offset=44, end_lineno=152, end_col_offset=47), attr='unparse', ctx=Load(),
        lineno=152, col_offset=44, end_lineno=152, end_col_offset=55), args=[Attribute(value=Name(id='n',
        ctx=Load(), lineno=152, col_offset=56, end_lineno=152, end_col_offset=57),
        attr='func', ctx=Load(), lineno=152, col_offset=56, end_lineno=152, end_col_offset=62)],
        keywords=[], lineno=152, col_offset=44, end_lineno=152, end_col_offset=63),
        generators=[comprehension(target=Name(id='n', ctx=Store(), lineno=152, col_offset=68,
        end_lineno=152, end_col_offset=69), iter=Call(func=Name(id='get_all_calls',
        ctx=Load(), lineno=152, col_offset=73, end_lineno=152, end_col_offset=86),
        args=[Name(id='node', ctx=Load(), lineno=152, col_offset=87, end_lineno=152,
        end_col_offset=91)], keywords=[], lineno=152, col_offset=73, end_lineno=152,
        end_col_offset=92), ifs=[], is_async=0)], lineno=152, col_offset=43, end_lineno=152,
        end_col_offset=93)], keywords=[], lineno=152, col_offset=39, end_lineno=152,
        end_col_offset=94)], keywords=[], lineno=152, col_offset=34, end_lineno=152,
        end_col_offset=95), Call(func=Name(id='list', ctx=Load(), lineno=153, col_offset=38,
        end_lineno=153, end_col_offset=42), args=[Call(func=Name(id='set', ctx=Load(),
        lineno=153, col_offset=43, end_lineno=153, end_col_offset=46), args=[ListComp(elt=Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=153, col_offset=48, end_lineno=153, end_col_offset=51),
        attr='unparse', ctx=Load(), lineno=153, col_offset=48, end_lineno=153, end_col_offset=59),
        args=[Name(id='target', ctx=Load(), lineno=153, col_offset=60, end_lineno=153,
        end_col_offset=66)], keywords=[], lineno=153, col_offset=48, end_lineno=153,
        end_col_offset=67), generators=[comprehension(target=Name(id='subnode', ctx=Store(),
        lineno=153, col_offset=72, end_lineno=153, end_col_offset=79), iter=Name(id='node_walk',
        ctx=Load(), lineno=153, col_offset=83, end_lineno=153, end_col_offset=92),
        ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=153, col_offset=96,
        end_lineno=153, end_col_offset=106), args=[Name(id='subnode', ctx=Load(),
        lineno=153, col_offset=107, end_lineno=153, end_col_offset=114), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=153, col_offset=116, end_lineno=153, end_col_offset=119),
        attr='Assign', ctx=Load(), lineno=153, col_offset=116, end_lineno=153, end_col_offset=126)],
        keywords=[], lineno=153, col_offset=96, end_lineno=153, end_col_offset=127)],
        is_async=0), comprehension(target=Name(id='target', ctx=Store(), lineno=153,
        col_offset=132, end_lineno=153, end_col_offset=138), iter=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=153, col_offset=142, end_lineno=153, end_col_offset=149),
        attr='targets', ctx=Load(), lineno=153, col_offset=142, end_lineno=153, end_col_offset=157),
        ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=153, col_offset=161,
        end_lineno=153, end_col_offset=171), args=[Name(id='target', ctx=Load(), lineno=153,
        col_offset=172, end_lineno=153, end_col_offset=178), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=153, col_offset=180, end_lineno=153, end_col_offset=183),
        attr='Name', ctx=Load(), lineno=153, col_offset=180, end_lineno=153, end_col_offset=188)],
        keywords=[], lineno=153, col_offset=161, end_lineno=153, end_col_offset=189)],
        is_async=0)], lineno=153, col_offset=47, end_lineno=153, end_col_offset=190)],
        keywords=[], lineno=153, col_offset=43, end_lineno=153, end_col_offset=191)],
        keywords=[], lineno=153, col_offset=38, end_lineno=153, end_col_offset=192),
        IfExp(test=Attribute(value=Name(id='node', ctx=Load(), lineno=154, col_offset=113,
        end_lineno=154, end_col_offset=117), attr='decorator_list', ctx=Load(), lineno=154,
        col_offset=113, end_lineno=154, end_col_offset=132), body=Call(func=Name(id='list',
        ctx=Load(), lineno=154, col_offset=39, end_lineno=154, end_col_offset=43),
        args=[Call(func=Name(id='set', ctx=Load(), lineno=154, col_offset=44, end_lineno=154,
        end_col_offset=47), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=154, col_offset=48, end_lineno=154, end_col_offset=51),
        attr='unparse', ctx=Load(), lineno=154, col_offset=48, end_lineno=154, end_col_offset=59),
        args=[Name(id='decorator', ctx=Load(), lineno=154, col_offset=60, end_lineno=154,
        end_col_offset=69)], keywords=[], lineno=154, col_offset=48, end_lineno=154,
        end_col_offset=70), generators=[comprehension(target=Name(id='decorator',
        ctx=Store(), lineno=154, col_offset=75, end_lineno=154, end_col_offset=84),
        iter=Attribute(value=Name(id='node', ctx=Load(), lineno=154, col_offset=88,
        end_lineno=154, end_col_offset=92), attr='decorator_list', ctx=Load(), lineno=154,
        col_offset=88, end_lineno=154, end_col_offset=107), ifs=[], is_async=0)],
        lineno=154, col_offset=47, end_lineno=154, end_col_offset=108)], keywords=[],
        lineno=154, col_offset=44, end_lineno=154, end_col_offset=108)], keywords=[],
        lineno=154, col_offset=39, end_lineno=154, end_col_offset=109), orelse=List(elts=[],
        ctx=Load(), lineno=154, col_offset=138, end_lineno=154, end_col_offset=140),
        lineno=154, col_offset=39, end_lineno=154, end_col_offset=140), Call(func=Name(id='list',
        ctx=Load(), lineno=155, col_offset=40, end_lineno=155, end_col_offset=44),
        args=[Call(func=Name(id='set', ctx=Load(), lineno=155, col_offset=45, end_lineno=155,
        end_col_offset=48), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=155, col_offset=49, end_lineno=155, end_col_offset=52),
        attr='unparse', ctx=Load(), lineno=155, col_offset=49, end_lineno=155, end_col_offset=60),
        args=[Attribute(value=Name(id='subnode', ctx=Load(), lineno=155, col_offset=61,
        end_lineno=155, end_col_offset=68), attr='annotation', ctx=Load(), lineno=155,
        col_offset=61, end_lineno=155, end_col_offset=79)], keywords=[], lineno=155,
        col_offset=49, end_lineno=155, end_col_offset=80), generators=[comprehension(target=Name(id='subnode',
        ctx=Store(), lineno=155, col_offset=85, end_lineno=155, end_col_offset=92),
        iter=Name(id='node_walk', ctx=Load(), lineno=155, col_offset=96, end_lineno=155,
        end_col_offset=105), ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance',
        ctx=Load(), lineno=155, col_offset=109, end_lineno=155, end_col_offset=119),
        args=[Name(id='subnode', ctx=Load(), lineno=155, col_offset=120, end_lineno=155,
        end_col_offset=127), Attribute(value=Name(id='ast', ctx=Load(), lineno=155,
        col_offset=129, end_lineno=155, end_col_offset=132), attr='AnnAssign', ctx=Load(),
        lineno=155, col_offset=129, end_lineno=155, end_col_offset=142)], keywords=[],
        lineno=155, col_offset=109, end_lineno=155, end_col_offset=143), Compare(left=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=155, col_offset=148, end_lineno=155, end_col_offset=155),
        attr='annotation', ctx=Load(), lineno=155, col_offset=148, end_lineno=155,
        end_col_offset=166), ops=[IsNot()], comparators=[Constant(value=None, lineno=155,
        col_offset=174, end_lineno=155, end_col_offset=178)], lineno=155, col_offset=148,
        end_lineno=155, end_col_offset=178)], lineno=155, col_offset=109, end_lineno=155,
        end_col_offset=178)], is_async=0)], lineno=155, col_offset=48, end_lineno=155,
        end_col_offset=179)], keywords=[], lineno=155, col_offset=45, end_lineno=155,
        end_col_offset=179)], keywords=[], lineno=155, col_offset=40, end_lineno=155,
        end_col_offset=180), Call(func=Name(id='list', ctx=Load(), lineno=156, col_offset=39,
        end_lineno=156, end_col_offset=43), args=[Call(func=Name(id='set', ctx=Load(),
        lineno=156, col_offset=44, end_lineno=156, end_col_offset=47), args=[ListComp(elt=Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=156, col_offset=49, end_lineno=156, end_col_offset=52),
        attr='unparse', ctx=Load(), lineno=156, col_offset=49, end_lineno=156, end_col_offset=60),
        args=[Name(id='subnode', ctx=Load(), lineno=156, col_offset=61, end_lineno=156,
        end_col_offset=68)], keywords=[], lineno=156, col_offset=49, end_lineno=156,
        end_col_offset=69), generators=[comprehension(target=Name(id='subnode', ctx=Store(),
        lineno=156, col_offset=74, end_lineno=156, end_col_offset=81), iter=Name(id='node_walk',
        ctx=Load(), lineno=156, col_offset=85, end_lineno=156, end_col_offset=94),
        ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load(),
        lineno=156, col_offset=98, end_lineno=156, end_col_offset=108), args=[Name(id='subnode',
        ctx=Load(), lineno=156, col_offset=109, end_lineno=156, end_col_offset=116),
        Attribute(value=Name(id='ast', ctx=Load(), lineno=156, col_offset=118, end_lineno=156,
        end_col_offset=121), attr='Attribute', ctx=Load(), lineno=156, col_offset=118,
        end_lineno=156, end_col_offset=131)], keywords=[], lineno=156, col_offset=98,
        end_lineno=156, end_col_offset=132), Call(func=Name(id='isinstance', ctx=Load(),
        lineno=156, col_offset=137, end_lineno=156, end_col_offset=147), args=[Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=156, col_offset=148, end_lineno=156, end_col_offset=155),
        attr='ctx', ctx=Load(), lineno=156, col_offset=148, end_lineno=156, end_col_offset=159),
        Attribute(value=Name(id='ast', ctx=Load(), lineno=156, col_offset=161, end_lineno=156,
        end_col_offset=164), attr='Store', ctx=Load(), lineno=156, col_offset=161,
        end_lineno=156, end_col_offset=170)], keywords=[], lineno=156, col_offset=137,
        end_lineno=156, end_col_offset=171)], lineno=156, col_offset=98, end_lineno=156,
        end_col_offset=171)], is_async=0)], lineno=156, col_offset=48, end_lineno=156,
        end_col_offset=172)], keywords=[], lineno=156, col_offset=44, end_lineno=156,
        end_col_offset=173)], keywords=[], lineno=156, col_offset=39, end_lineno=156,
        end_col_offset=174)], lineno=144, col_offset=18, end_lineno=157, end_col_offset=9),
        lineno=144, col_offset=8, end_lineno=157, end_col_offset=9), If(test=BoolOp(op=Or(),
        values=[Compare(left=Name(id='node_type', ctx=Load(), lineno=158, col_offset=11,
        end_lineno=158, end_col_offset=20), ops=[Eq()], comparators=[Constant(value='class',
        lineno=158, col_offset=24, end_lineno=158, end_col_offset=31)], lineno=158,
        col_offset=11, end_lineno=158, end_col_offset=31), Compare(left=Name(id='node_type',
        ctx=Load(), lineno=158, col_offset=35, end_lineno=158, end_col_offset=44),
        ops=[Eq()], comparators=[Constant(value='method', lineno=158, col_offset=48,
        end_lineno=158, end_col_offset=56)], lineno=158, col_offset=35, end_lineno=158,
        end_col_offset=56)], lineno=158, col_offset=11, end_lineno=158, end_col_offset=56),
        body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='node_type', ctx=Load(),
        lineno=159, col_offset=15, end_lineno=159, end_col_offset=24), ops=[Eq()],
        comparators=[Constant(value='method', lineno=159, col_offset=28, end_lineno=159,
        end_col_offset=36)], lineno=159, col_offset=15, end_lineno=159, end_col_offset=36),
        Attribute(value=Name(id='self', ctx=Load(), lineno=159, col_offset=41, end_lineno=159,
        end_col_offset=45), attr='current_class', ctx=Load(), lineno=159, col_offset=41,
        end_lineno=159, end_col_offset=59)], lineno=159, col_offset=15, end_lineno=159,
        end_col_offset=59), body=[Assign(targets=[Name(id='attributes', ctx=Store(),
        lineno=160, col_offset=16, end_lineno=160, end_col_offset=26)], value=ListComp(elt=Attribute(value=Name(id='target',
        ctx=Load(), lineno=160, col_offset=30, end_lineno=160, end_col_offset=36),
        attr='attr', ctx=Load(), lineno=160, col_offset=30, end_lineno=160, end_col_offset=41),
        generators=[comprehension(target=Name(id='subnode', ctx=Store(), lineno=160,
        col_offset=46, end_lineno=160, end_col_offset=53), iter=Name(id='node_walk',
        ctx=Load(), lineno=160, col_offset=57, end_lineno=160, end_col_offset=66),
        ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=160, col_offset=70,
        end_lineno=160, end_col_offset=80), args=[Name(id='subnode', ctx=Load(), lineno=160,
        col_offset=81, end_lineno=160, end_col_offset=88), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=160, col_offset=90, end_lineno=160, end_col_offset=93),
        attr='Assign', ctx=Load(), lineno=160, col_offset=90, end_lineno=160, end_col_offset=100)],
        keywords=[], lineno=160, col_offset=70, end_lineno=160, end_col_offset=101)],
        is_async=0), comprehension(target=Name(id='target', ctx=Store(), lineno=160,
        col_offset=106, end_lineno=160, end_col_offset=112), iter=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=160, col_offset=116, end_lineno=160, end_col_offset=123),
        attr='targets', ctx=Load(), lineno=160, col_offset=116, end_lineno=160, end_col_offset=131),
        ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load(),
        lineno=160, col_offset=135, end_lineno=160, end_col_offset=145), args=[Name(id='target',
        ctx=Load(), lineno=160, col_offset=146, end_lineno=160, end_col_offset=152),
        Attribute(value=Name(id='ast', ctx=Load(), lineno=160, col_offset=154, end_lineno=160,
        end_col_offset=157), attr='Attribute', ctx=Load(), lineno=160, col_offset=154,
        end_lineno=160, end_col_offset=167)], keywords=[], lineno=160, col_offset=135,
        end_lineno=160, end_col_offset=168), Call(func=Name(id='isinstance', ctx=Load(),
        lineno=160, col_offset=173, end_lineno=160, end_col_offset=183), args=[Attribute(value=Name(id='target',
        ctx=Load(), lineno=160, col_offset=184, end_lineno=160, end_col_offset=190),
        attr='value', ctx=Load(), lineno=160, col_offset=184, end_lineno=160, end_col_offset=196),
        Attribute(value=Name(id='ast', ctx=Load(), lineno=160, col_offset=198, end_lineno=160,
        end_col_offset=201), attr='Name', ctx=Load(), lineno=160, col_offset=198,
        end_lineno=160, end_col_offset=206)], keywords=[], lineno=160, col_offset=173,
        end_lineno=160, end_col_offset=207), Compare(left=Attribute(value=Attribute(value=Name(id='target',
        ctx=Load(), lineno=160, col_offset=212, end_lineno=160, end_col_offset=218),
        attr='value', ctx=Load(), lineno=160, col_offset=212, end_lineno=160, end_col_offset=224),
        attr='id', ctx=Load(), lineno=160, col_offset=212, end_lineno=160, end_col_offset=227),
        ops=[Eq()], comparators=[Constant(value='self', lineno=160, col_offset=231,
        end_lineno=160, end_col_offset=237)], lineno=160, col_offset=212, end_lineno=160,
        end_col_offset=237)], lineno=160, col_offset=135, end_lineno=160, end_col_offset=237)],
        is_async=0)], lineno=160, col_offset=29, end_lineno=160, end_col_offset=238),
        lineno=160, col_offset=16, end_lineno=160, end_col_offset=238), If(test=Name(id='attributes',
        ctx=Load(), lineno=161, col_offset=19, end_lineno=161, end_col_offset=29),
        body=[If(test=Compare(left=Constant(value='class_attributes', lineno=162,
        col_offset=23, end_lineno=162, end_col_offset=41), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=162, col_offset=45, end_lineno=162, end_col_offset=49),
        attr='classes', ctx=Load(), lineno=162, col_offset=45, end_lineno=162, end_col_offset=57),
        slice=Attribute(value=Name(id='self', ctx=Load(), lineno=162, col_offset=58,
        end_lineno=162, end_col_offset=62), attr='current_class', ctx=Load(), lineno=162,
        col_offset=58, end_lineno=162, end_col_offset=76), ctx=Load(), lineno=162,
        col_offset=45, end_lineno=162, end_col_offset=77)], lineno=162, col_offset=23,
        end_lineno=162, end_col_offset=77), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=163, col_offset=24, end_lineno=163, end_col_offset=28),
        attr='classes', ctx=Load(), lineno=163, col_offset=24, end_lineno=163, end_col_offset=36),
        slice=Attribute(value=Name(id='self', ctx=Load(), lineno=163, col_offset=37,
        end_lineno=163, end_col_offset=41), attr='current_class', ctx=Load(), lineno=163,
        col_offset=37, end_lineno=163, end_col_offset=55), ctx=Load(), lineno=163,
        col_offset=24, end_lineno=163, end_col_offset=56), slice=Constant(value='class_attributes',
        lineno=163, col_offset=57, end_lineno=163, end_col_offset=75), ctx=Load(),
        lineno=163, col_offset=24, end_lineno=163, end_col_offset=76), attr='extend',
        ctx=Load(), lineno=163, col_offset=24, end_lineno=163, end_col_offset=83),
        args=[Name(id='attributes', ctx=Load(), lineno=163, col_offset=84, end_lineno=163,
        end_col_offset=94)], keywords=[], lineno=163, col_offset=24, end_lineno=163,
        end_col_offset=95), lineno=163, col_offset=24, end_lineno=163, end_col_offset=95)],
        orelse=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=165, col_offset=24, end_lineno=165, end_col_offset=28),
        attr='classes', ctx=Load(), lineno=165, col_offset=24, end_lineno=165, end_col_offset=36),
        slice=Attribute(value=Name(id='self', ctx=Load(), lineno=165, col_offset=37,
        end_lineno=165, end_col_offset=41), attr='current_class', ctx=Load(), lineno=165,
        col_offset=37, end_lineno=165, end_col_offset=55), ctx=Load(), lineno=165,
        col_offset=24, end_lineno=165, end_col_offset=56), slice=Constant(value='class_attributes',
        lineno=165, col_offset=57, end_lineno=165, end_col_offset=75), ctx=Store(),
        lineno=165, col_offset=24, end_lineno=165, end_col_offset=76)], value=Name(id='attributes',
        ctx=Load(), lineno=165, col_offset=79, end_lineno=165, end_col_offset=89),
        lineno=165, col_offset=24, end_lineno=165, end_col_offset=89)], lineno=162,
        col_offset=20, end_lineno=165, end_col_offset=89)], orelse=[], lineno=161,
        col_offset=16, end_lineno=165, end_col_offset=89)], orelse=[], lineno=159,
        col_offset=12, end_lineno=165, end_col_offset=89), If(test=Compare(left=Name(id='node_type',
        ctx=Load(), lineno=166, col_offset=15, end_lineno=166, end_col_offset=24),
        ops=[Eq()], comparators=[Constant(value='class', lineno=166, col_offset=28,
        end_lineno=166, end_col_offset=35)], lineno=166, col_offset=15, end_lineno=166,
        end_col_offset=35), body=[Expr(value=Call(func=Attribute(value=Name(id='details',
        ctx=Load(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=23),
        attr='update', ctx=Load(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=30),
        args=[Dict(keys=[Constant(value='class_attributes', lineno=168, col_offset=20,
        end_lineno=168, end_col_offset=38), Constant(value='class_methods', lineno=169,
        col_offset=20, end_lineno=169, end_col_offset=35), Constant(value='class_inheritance',
        lineno=170, col_offset=20, end_lineno=170, end_col_offset=39), Constant(value='class_static_methods',
        lineno=171, col_offset=20, end_lineno=171, end_col_offset=42)], values=[ListComp(elt=Attribute(value=Name(id='target',
        ctx=Load(), lineno=168, col_offset=41, end_lineno=168, end_col_offset=47),
        attr='attr', ctx=Load(), lineno=168, col_offset=41, end_lineno=168, end_col_offset=52),
        generators=[comprehension(target=Name(id='subnode', ctx=Store(), lineno=168,
        col_offset=57, end_lineno=168, end_col_offset=64), iter=Attribute(value=Name(id='node',
        ctx=Load(), lineno=168, col_offset=68, end_lineno=168, end_col_offset=72),
        attr='body', ctx=Load(), lineno=168, col_offset=68, end_lineno=168, end_col_offset=77),
        ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=168, col_offset=81,
        end_lineno=168, end_col_offset=91), args=[Name(id='subnode', ctx=Load(), lineno=168,
        col_offset=92, end_lineno=168, end_col_offset=99), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=168, col_offset=101, end_lineno=168, end_col_offset=104),
        attr='Assign', ctx=Load(), lineno=168, col_offset=101, end_lineno=168, end_col_offset=111)],
        keywords=[], lineno=168, col_offset=81, end_lineno=168, end_col_offset=112)],
        is_async=0), comprehension(target=Name(id='target', ctx=Store(), lineno=168,
        col_offset=117, end_lineno=168, end_col_offset=123), iter=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=168, col_offset=127, end_lineno=168, end_col_offset=134),
        attr='targets', ctx=Load(), lineno=168, col_offset=127, end_lineno=168, end_col_offset=142),
        ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=168, col_offset=146,
        end_lineno=168, end_col_offset=156), args=[Name(id='target', ctx=Load(), lineno=168,
        col_offset=157, end_lineno=168, end_col_offset=163), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=168, col_offset=165, end_lineno=168, end_col_offset=168),
        attr='Attribute', ctx=Load(), lineno=168, col_offset=165, end_lineno=168,
        end_col_offset=178)], keywords=[], lineno=168, col_offset=146, end_lineno=168,
        end_col_offset=179)], is_async=0)], lineno=168, col_offset=40, end_lineno=168,
        end_col_offset=180), ListComp(elt=Attribute(value=Name(id='subnode', ctx=Load(),
        lineno=169, col_offset=38, end_lineno=169, end_col_offset=45), attr='name',
        ctx=Load(), lineno=169, col_offset=38, end_lineno=169, end_col_offset=50),
        generators=[comprehension(target=Name(id='subnode', ctx=Store(), lineno=169,
        col_offset=55, end_lineno=169, end_col_offset=62), iter=Attribute(value=Name(id='node',
        ctx=Load(), lineno=169, col_offset=66, end_lineno=169, end_col_offset=70),
        attr='body', ctx=Load(), lineno=169, col_offset=66, end_lineno=169, end_col_offset=75),
        ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load(),
        lineno=169, col_offset=79, end_lineno=169, end_col_offset=89), args=[Name(id='subnode',
        ctx=Load(), lineno=169, col_offset=90, end_lineno=169, end_col_offset=97),
        Attribute(value=Name(id='ast', ctx=Load(), lineno=169, col_offset=99, end_lineno=169,
        end_col_offset=102), attr='FunctionDef', ctx=Load(), lineno=169, col_offset=99,
        end_lineno=169, end_col_offset=114)], keywords=[], lineno=169, col_offset=79,
        end_lineno=169, end_col_offset=115), Compare(left=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=169, col_offset=120, end_lineno=169, end_col_offset=127),
        attr='name', ctx=Load(), lineno=169, col_offset=120, end_lineno=169, end_col_offset=132),
        ops=[NotEq()], comparators=[Constant(value='__init__', lineno=169, col_offset=136,
        end_lineno=169, end_col_offset=146)], lineno=169, col_offset=120, end_lineno=169,
        end_col_offset=146)], lineno=169, col_offset=79, end_lineno=169, end_col_offset=146)],
        is_async=0)], lineno=169, col_offset=37, end_lineno=169, end_col_offset=147),
        IfExp(test=Attribute(value=Name(id='node', ctx=Load(), lineno=170, col_offset=87,
        end_lineno=170, end_col_offset=91), attr='bases', ctx=Load(), lineno=170,
        col_offset=87, end_lineno=170, end_col_offset=97), body=ListComp(elt=Call(func=Attribute(value=Name(id='ast',
        ctx=Load(), lineno=170, col_offset=42, end_lineno=170, end_col_offset=45),
        attr='unparse', ctx=Load(), lineno=170, col_offset=42, end_lineno=170, end_col_offset=53),
        args=[Name(id='base', ctx=Load(), lineno=170, col_offset=54, end_lineno=170,
        end_col_offset=58)], keywords=[], lineno=170, col_offset=42, end_lineno=170,
        end_col_offset=59), generators=[comprehension(target=Name(id='base', ctx=Store(),
        lineno=170, col_offset=64, end_lineno=170, end_col_offset=68), iter=Attribute(value=Name(id='node',
        ctx=Load(), lineno=170, col_offset=72, end_lineno=170, end_col_offset=76),
        attr='bases', ctx=Load(), lineno=170, col_offset=72, end_lineno=170, end_col_offset=82),
        ifs=[], is_async=0)], lineno=170, col_offset=41, end_lineno=170, end_col_offset=83),
        orelse=List(elts=[], ctx=Load(), lineno=170, col_offset=103, end_lineno=170,
        end_col_offset=105), lineno=170, col_offset=41, end_lineno=170, end_col_offset=105),
        ListComp(elt=Attribute(value=Name(id='subnode', ctx=Load(), lineno=171, col_offset=45,
        end_lineno=171, end_col_offset=52), attr='name', ctx=Load(), lineno=171, col_offset=45,
        end_lineno=171, end_col_offset=57), generators=[comprehension(target=Name(id='subnode',
        ctx=Store(), lineno=171, col_offset=62, end_lineno=171, end_col_offset=69),
        iter=Attribute(value=Name(id='node', ctx=Load(), lineno=171, col_offset=73,
        end_lineno=171, end_col_offset=77), attr='body', ctx=Load(), lineno=171, col_offset=73,
        end_lineno=171, end_col_offset=82), ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance',
        ctx=Load(), lineno=171, col_offset=86, end_lineno=171, end_col_offset=96),
        args=[Name(id='subnode', ctx=Load(), lineno=171, col_offset=97, end_lineno=171,
        end_col_offset=104), Attribute(value=Name(id='ast', ctx=Load(), lineno=171,
        col_offset=106, end_lineno=171, end_col_offset=109), attr='FunctionDef', ctx=Load(),
        lineno=171, col_offset=106, end_lineno=171, end_col_offset=121)], keywords=[],
        lineno=171, col_offset=86, end_lineno=171, end_col_offset=122), Compare(left=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=171, col_offset=127, end_lineno=171, end_col_offset=134),
        attr='name', ctx=Load(), lineno=171, col_offset=127, end_lineno=171, end_col_offset=139),
        ops=[NotEq()], comparators=[Constant(value='__init__', lineno=171, col_offset=143,
        end_lineno=171, end_col_offset=153)], lineno=171, col_offset=127, end_lineno=171,
        end_col_offset=153), Call(func=Name(id='any', ctx=Load(), lineno=171, col_offset=158,
        end_lineno=171, end_col_offset=161), args=[GeneratorExp(elt=BoolOp(op=And(),
        values=[Call(func=Name(id='isinstance', ctx=Load(), lineno=171, col_offset=162,
        end_lineno=171, end_col_offset=172), args=[Name(id='decorator', ctx=Load(),
        lineno=171, col_offset=173, end_lineno=171, end_col_offset=182), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=171, col_offset=184, end_lineno=171, end_col_offset=187),
        attr='Name', ctx=Load(), lineno=171, col_offset=184, end_lineno=171, end_col_offset=192)],
        keywords=[], lineno=171, col_offset=162, end_lineno=171, end_col_offset=193),
        Compare(left=Attribute(value=Name(id='decorator', ctx=Load(), lineno=171,
        col_offset=198, end_lineno=171, end_col_offset=207), attr='id', ctx=Load(),
        lineno=171, col_offset=198, end_lineno=171, end_col_offset=210), ops=[Eq()],
        comparators=[Constant(value='staticmethod', lineno=171, col_offset=214, end_lineno=171,
        end_col_offset=228)], lineno=171, col_offset=198, end_lineno=171, end_col_offset=228)],
        lineno=171, col_offset=162, end_lineno=171, end_col_offset=228), generators=[comprehension(target=Name(id='decorator',
        ctx=Store(), lineno=171, col_offset=233, end_lineno=171, end_col_offset=242),
        iter=Attribute(value=Name(id='subnode', ctx=Load(), lineno=171, col_offset=246,
        end_lineno=171, end_col_offset=253), attr='decorator_list', ctx=Load(), lineno=171,
        col_offset=246, end_lineno=171, end_col_offset=268), ifs=[], is_async=0)],
        lineno=171, col_offset=161, end_lineno=171, end_col_offset=269)], keywords=[],
        lineno=171, col_offset=158, end_lineno=171, end_col_offset=269)], lineno=171,
        col_offset=86, end_lineno=171, end_col_offset=269)], is_async=0)], lineno=171,
        col_offset=44, end_lineno=171, end_col_offset=270)], lineno=167, col_offset=31,
        end_lineno=172, end_col_offset=21)], keywords=[], lineno=167, col_offset=16,
        end_lineno=172, end_col_offset=22), lineno=167, col_offset=16, end_lineno=172,
        end_col_offset=22)], orelse=[], lineno=166, col_offset=12, end_lineno=172,
        end_col_offset=22)], orelse=[], lineno=158, col_offset=8, end_lineno=172,
        end_col_offset=22), Return(value=Name(id='details', ctx=Load(), lineno=173,
        col_offset=15, end_lineno=173, end_col_offset=22), lineno=173, col_offset=8,
        end_lineno=173, end_col_offset=22)], decorator_list=[], returns=Subscript(value=Name(id='Dict',
        ctx=Load(), lineno=142, col_offset=64, end_lineno=142, end_col_offset=68),
        slice=Tuple(elts=[Name(id='str', ctx=Load(), lineno=142, col_offset=69, end_lineno=142,
        end_col_offset=72), Subscript(value=Name(id='Union', ctx=Load(), lineno=142,
        col_offset=74, end_lineno=142, end_col_offset=79), slice=Tuple(elts=[Name(id='str',
        ctx=Load(), lineno=142, col_offset=80, end_lineno=142, end_col_offset=83),
        Subscript(value=Name(id='List', ctx=Load(), lineno=142, col_offset=85, end_lineno=142,
        end_col_offset=89), slice=Name(id='str', ctx=Load(), lineno=142, col_offset=90,
        end_lineno=142, end_col_offset=93), ctx=Load(), lineno=142, col_offset=85,
        end_lineno=142, end_col_offset=94)], ctx=Load(), lineno=142, col_offset=80,
        end_lineno=142, end_col_offset=94), ctx=Load(), lineno=142, col_offset=74,
        end_lineno=142, end_col_offset=95)], ctx=Load(), lineno=142, col_offset=69,
        end_lineno=142, end_col_offset=95), ctx=Load(), lineno=142, col_offset=64,
        end_lineno=142, end_col_offset=96), lineno=142, col_offset=4, end_lineno=173,
        end_col_offset=22)
      method_docstring: null
      method_inputs:
      - self
      - node
      - node_type
      method_defaults: []
      method_returns:
      - details
      method_calls:
      - isinstance
      - any
      - get_all_calls
      - details.update
      - ast.unparse
      - ast.get_docstring
      - self.classes[self.current_class]['class_attributes'].extend
      - ast.dump
      - ast.walk
      - set
      - list
      method_variables:
      - node_walk
      - attributes
      - details
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_analyze:
      method_name: analyze
      method_code: "def analyze(self, node: ast.AST) -> None:\n    node_walk = list(ast.walk(node))\n\
        \    self.visit(node)\n    self.file_info = {'file_code': self.code, 'file_ast':\
        \ ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk\
        \ if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module\
        \ for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions':\
        \ list(self.functions.keys()), 'file_classes': list(self.classes.keys()),\
        \ 'file_control_flow': get_control_flow(self.code)}\n    dependencies = self.file_info['file_dependencies']\n\
        \    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls':\
        \ details['function_calls'], 'returns': details['function_returns']}} for\
        \ func_name, details in self.functions.items()]\n    class_defs = []\n   \
        \ for class_name, class_details in self.classes.items():\n        method_defs\
        \ = {}\n        for method_name, details in class_details.items():\n     \
        \       if method_name.startswith('class_method_'):\n                method_defs[method_name[len('class_method_'):]]\
        \ = {'inputs': details['method_inputs'], 'calls': details['method_calls'],\
        \ 'returns': details['method_returns']}\n        class_defs.append({class_name:\
        \ {'method_defs': method_defs}})\n    self.file_info['file_summary'] = {'dependencies':\
        \ dependencies, 'function_defs': function_defs, 'class_defs': class_defs}"
      method_ast: FunctionDef(name='analyze', args=arguments(posonlyargs=[], args=[arg(arg='self',
        lineno=175, col_offset=16, end_lineno=175, end_col_offset=20), arg(arg='node',
        annotation=Attribute(value=Name(id='ast', ctx=Load(), lineno=175, col_offset=28,
        end_lineno=175, end_col_offset=31), attr='AST', ctx=Load(), lineno=175, col_offset=28,
        end_lineno=175, end_col_offset=35), lineno=175, col_offset=22, end_lineno=175,
        end_col_offset=35)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='node_walk',
        ctx=Store(), lineno=177, col_offset=8, end_lineno=177, end_col_offset=17)],
        value=Call(func=Name(id='list', ctx=Load(), lineno=177, col_offset=20, end_lineno=177,
        end_col_offset=24), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load(),
        lineno=177, col_offset=25, end_lineno=177, end_col_offset=28), attr='walk',
        ctx=Load(), lineno=177, col_offset=25, end_lineno=177, end_col_offset=33),
        args=[Name(id='node', ctx=Load(), lineno=177, col_offset=34, end_lineno=177,
        end_col_offset=38)], keywords=[], lineno=177, col_offset=25, end_lineno=177,
        end_col_offset=39)], keywords=[], lineno=177, col_offset=20, end_lineno=177,
        end_col_offset=40), lineno=177, col_offset=8, end_lineno=177, end_col_offset=40),
        Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(), lineno=178,
        col_offset=8, end_lineno=178, end_col_offset=12), attr='visit', ctx=Load(),
        lineno=178, col_offset=8, end_lineno=178, end_col_offset=18), args=[Name(id='node',
        ctx=Load(), lineno=178, col_offset=19, end_lineno=178, end_col_offset=23)],
        keywords=[], lineno=178, col_offset=8, end_lineno=178, end_col_offset=24),
        lineno=178, col_offset=8, end_lineno=178, end_col_offset=24), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=179, col_offset=8, end_lineno=179, end_col_offset=12),
        attr='file_info', ctx=Store(), lineno=179, col_offset=8, end_lineno=179, end_col_offset=22)],
        value=Dict(keys=[Constant(value='file_code', lineno=180, col_offset=12, end_lineno=180,
        end_col_offset=23), Constant(value='file_ast', lineno=181, col_offset=12,
        end_lineno=181, end_col_offset=22), Constant(value='file_dependencies', lineno=182,
        col_offset=12, end_lineno=182, end_col_offset=31), Constant(value='file_functions',
        lineno=183, col_offset=12, end_lineno=183, end_col_offset=28), Constant(value='file_classes',
        lineno=184, col_offset=12, end_lineno=184, end_col_offset=26), Constant(value='file_control_flow',
        lineno=185, col_offset=12, end_lineno=185, end_col_offset=31)], values=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=180, col_offset=25, end_lineno=180, end_col_offset=29),
        attr='code', ctx=Load(), lineno=180, col_offset=25, end_lineno=180, end_col_offset=34),
        Call(func=Attribute(value=Name(id='ast', ctx=Load(), lineno=181, col_offset=25,
        end_lineno=181, end_col_offset=28), attr='dump', ctx=Load(), lineno=181, col_offset=25,
        end_lineno=181, end_col_offset=33), args=[Name(id='node', ctx=Load(), lineno=181,
        col_offset=34, end_lineno=181, end_col_offset=38)], keywords=[], lineno=181,
        col_offset=25, end_lineno=181, end_col_offset=39), Call(func=Name(id='list',
        ctx=Load(), lineno=182, col_offset=33, end_lineno=182, end_col_offset=37),
        args=[BinOp(left=SetComp(elt=Attribute(value=Name(id='alias', ctx=Load(),
        lineno=182, col_offset=39, end_lineno=182, end_col_offset=44), attr='name',
        ctx=Load(), lineno=182, col_offset=39, end_lineno=182, end_col_offset=49),
        generators=[comprehension(target=Name(id='subnode', ctx=Store(), lineno=182,
        col_offset=54, end_lineno=182, end_col_offset=61), iter=Name(id='node_walk',
        ctx=Load(), lineno=182, col_offset=65, end_lineno=182, end_col_offset=74),
        ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=182, col_offset=78,
        end_lineno=182, end_col_offset=88), args=[Name(id='subnode', ctx=Load(), lineno=182,
        col_offset=89, end_lineno=182, end_col_offset=96), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=182, col_offset=98, end_lineno=182, end_col_offset=101),
        attr='Import', ctx=Load(), lineno=182, col_offset=98, end_lineno=182, end_col_offset=108)],
        keywords=[], lineno=182, col_offset=78, end_lineno=182, end_col_offset=109)],
        is_async=0), comprehension(target=Name(id='alias', ctx=Store(), lineno=182,
        col_offset=114, end_lineno=182, end_col_offset=119), iter=Attribute(value=Name(id='subnode',
        ctx=Load(), lineno=182, col_offset=123, end_lineno=182, end_col_offset=130),
        attr='names', ctx=Load(), lineno=182, col_offset=123, end_lineno=182, end_col_offset=136),
        ifs=[], is_async=0)], lineno=182, col_offset=38, end_lineno=182, end_col_offset=137),
        op=BitOr(), right=SetComp(elt=Attribute(value=Name(id='subnode', ctx=Load(),
        lineno=182, col_offset=141, end_lineno=182, end_col_offset=148), attr='module',
        ctx=Load(), lineno=182, col_offset=141, end_lineno=182, end_col_offset=155),
        generators=[comprehension(target=Name(id='subnode', ctx=Store(), lineno=182,
        col_offset=160, end_lineno=182, end_col_offset=167), iter=Name(id='node_walk',
        ctx=Load(), lineno=182, col_offset=171, end_lineno=182, end_col_offset=180),
        ifs=[Call(func=Name(id='isinstance', ctx=Load(), lineno=182, col_offset=184,
        end_lineno=182, end_col_offset=194), args=[Name(id='subnode', ctx=Load(),
        lineno=182, col_offset=195, end_lineno=182, end_col_offset=202), Attribute(value=Name(id='ast',
        ctx=Load(), lineno=182, col_offset=204, end_lineno=182, end_col_offset=207),
        attr='ImportFrom', ctx=Load(), lineno=182, col_offset=204, end_lineno=182,
        end_col_offset=218)], keywords=[], lineno=182, col_offset=184, end_lineno=182,
        end_col_offset=219)], is_async=0)], lineno=182, col_offset=140, end_lineno=182,
        end_col_offset=220), lineno=182, col_offset=38, end_lineno=182, end_col_offset=220)],
        keywords=[], lineno=182, col_offset=33, end_lineno=182, end_col_offset=221),
        Call(func=Name(id='list', ctx=Load(), lineno=183, col_offset=30, end_lineno=183,
        end_col_offset=34), args=[Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=183, col_offset=35, end_lineno=183, end_col_offset=39),
        attr='functions', ctx=Load(), lineno=183, col_offset=35, end_lineno=183, end_col_offset=49),
        attr='keys', ctx=Load(), lineno=183, col_offset=35, end_lineno=183, end_col_offset=54),
        args=[], keywords=[], lineno=183, col_offset=35, end_lineno=183, end_col_offset=56)],
        keywords=[], lineno=183, col_offset=30, end_lineno=183, end_col_offset=57),
        Call(func=Name(id='list', ctx=Load(), lineno=184, col_offset=28, end_lineno=184,
        end_col_offset=32), args=[Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=184, col_offset=33, end_lineno=184, end_col_offset=37),
        attr='classes', ctx=Load(), lineno=184, col_offset=33, end_lineno=184, end_col_offset=45),
        attr='keys', ctx=Load(), lineno=184, col_offset=33, end_lineno=184, end_col_offset=50),
        args=[], keywords=[], lineno=184, col_offset=33, end_lineno=184, end_col_offset=52)],
        keywords=[], lineno=184, col_offset=28, end_lineno=184, end_col_offset=53),
        Call(func=Name(id='get_control_flow', ctx=Load(), lineno=185, col_offset=33,
        end_lineno=185, end_col_offset=49), args=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=185, col_offset=50, end_lineno=185, end_col_offset=54),
        attr='code', ctx=Load(), lineno=185, col_offset=50, end_lineno=185, end_col_offset=59)],
        keywords=[], lineno=185, col_offset=33, end_lineno=185, end_col_offset=60)],
        lineno=179, col_offset=25, end_lineno=186, end_col_offset=9), lineno=179,
        col_offset=8, end_lineno=186, end_col_offset=9), Assign(targets=[Name(id='dependencies',
        ctx=Store(), lineno=189, col_offset=8, end_lineno=189, end_col_offset=20)],
        value=Subscript(value=Attribute(value=Name(id='self', ctx=Load(), lineno=189,
        col_offset=23, end_lineno=189, end_col_offset=27), attr='file_info', ctx=Load(),
        lineno=189, col_offset=23, end_lineno=189, end_col_offset=37), slice=Constant(value='file_dependencies',
        lineno=189, col_offset=38, end_lineno=189, end_col_offset=57), ctx=Load(),
        lineno=189, col_offset=23, end_lineno=189, end_col_offset=58), lineno=189,
        col_offset=8, end_lineno=189, end_col_offset=58), Assign(targets=[Name(id='function_defs',
        ctx=Store(), lineno=190, col_offset=8, end_lineno=190, end_col_offset=21)],
        value=ListComp(elt=Dict(keys=[Name(id='func_name', ctx=Load(), lineno=190,
        col_offset=26, end_lineno=190, end_col_offset=35)], values=[Dict(keys=[Constant(value='inputs',
        lineno=190, col_offset=38, end_lineno=190, end_col_offset=46), Constant(value='calls',
        lineno=190, col_offset=76, end_lineno=190, end_col_offset=83), Constant(value='returns',
        lineno=190, col_offset=112, end_lineno=190, end_col_offset=121)], values=[Subscript(value=Name(id='details',
        ctx=Load(), lineno=190, col_offset=48, end_lineno=190, end_col_offset=55),
        slice=Constant(value='function_inputs', lineno=190, col_offset=56, end_lineno=190,
        end_col_offset=73), ctx=Load(), lineno=190, col_offset=48, end_lineno=190,
        end_col_offset=74), Subscript(value=Name(id='details', ctx=Load(), lineno=190,
        col_offset=85, end_lineno=190, end_col_offset=92), slice=Constant(value='function_calls',
        lineno=190, col_offset=93, end_lineno=190, end_col_offset=109), ctx=Load(),
        lineno=190, col_offset=85, end_lineno=190, end_col_offset=110), Subscript(value=Name(id='details',
        ctx=Load(), lineno=190, col_offset=123, end_lineno=190, end_col_offset=130),
        slice=Constant(value='function_returns', lineno=190, col_offset=131, end_lineno=190,
        end_col_offset=149), ctx=Load(), lineno=190, col_offset=123, end_lineno=190,
        end_col_offset=150)], lineno=190, col_offset=37, end_lineno=190, end_col_offset=151)],
        lineno=190, col_offset=25, end_lineno=190, end_col_offset=152), generators=[comprehension(target=Tuple(elts=[Name(id='func_name',
        ctx=Store(), lineno=190, col_offset=157, end_lineno=190, end_col_offset=166),
        Name(id='details', ctx=Store(), lineno=190, col_offset=168, end_lineno=190,
        end_col_offset=175)], ctx=Store(), lineno=190, col_offset=157, end_lineno=190,
        end_col_offset=175), iter=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=190, col_offset=179, end_lineno=190, end_col_offset=183),
        attr='functions', ctx=Load(), lineno=190, col_offset=179, end_lineno=190,
        end_col_offset=193), attr='items', ctx=Load(), lineno=190, col_offset=179,
        end_lineno=190, end_col_offset=199), args=[], keywords=[], lineno=190, col_offset=179,
        end_lineno=190, end_col_offset=201), ifs=[], is_async=0)], lineno=190, col_offset=24,
        end_lineno=190, end_col_offset=202), lineno=190, col_offset=8, end_lineno=190,
        end_col_offset=202), Assign(targets=[Name(id='class_defs', ctx=Store(), lineno=191,
        col_offset=8, end_lineno=191, end_col_offset=18)], value=List(elts=[], ctx=Load(),
        lineno=191, col_offset=21, end_lineno=191, end_col_offset=23), lineno=191,
        col_offset=8, end_lineno=191, end_col_offset=23), For(target=Tuple(elts=[Name(id='class_name',
        ctx=Store(), lineno=192, col_offset=12, end_lineno=192, end_col_offset=22),
        Name(id='class_details', ctx=Store(), lineno=192, col_offset=24, end_lineno=192,
        end_col_offset=37)], ctx=Store(), lineno=192, col_offset=12, end_lineno=192,
        end_col_offset=37), iter=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=192, col_offset=41, end_lineno=192, end_col_offset=45),
        attr='classes', ctx=Load(), lineno=192, col_offset=41, end_lineno=192, end_col_offset=53),
        attr='items', ctx=Load(), lineno=192, col_offset=41, end_lineno=192, end_col_offset=59),
        args=[], keywords=[], lineno=192, col_offset=41, end_lineno=192, end_col_offset=61),
        body=[Assign(targets=[Name(id='method_defs', ctx=Store(), lineno=193, col_offset=12,
        end_lineno=193, end_col_offset=23)], value=Dict(keys=[], values=[], lineno=193,
        col_offset=26, end_lineno=193, end_col_offset=28), lineno=193, col_offset=12,
        end_lineno=193, end_col_offset=28), For(target=Tuple(elts=[Name(id='method_name',
        ctx=Store(), lineno=194, col_offset=16, end_lineno=194, end_col_offset=27),
        Name(id='details', ctx=Store(), lineno=194, col_offset=29, end_lineno=194,
        end_col_offset=36)], ctx=Store(), lineno=194, col_offset=16, end_lineno=194,
        end_col_offset=36), iter=Call(func=Attribute(value=Name(id='class_details',
        ctx=Load(), lineno=194, col_offset=40, end_lineno=194, end_col_offset=53),
        attr='items', ctx=Load(), lineno=194, col_offset=40, end_lineno=194, end_col_offset=59),
        args=[], keywords=[], lineno=194, col_offset=40, end_lineno=194, end_col_offset=61),
        body=[If(test=Call(func=Attribute(value=Name(id='method_name', ctx=Load(),
        lineno=195, col_offset=19, end_lineno=195, end_col_offset=30), attr='startswith',
        ctx=Load(), lineno=195, col_offset=19, end_lineno=195, end_col_offset=41),
        args=[Constant(value='class_method_', lineno=195, col_offset=42, end_lineno=195,
        end_col_offset=57)], keywords=[], lineno=195, col_offset=19, end_lineno=195,
        end_col_offset=58), body=[Assign(targets=[Subscript(value=Name(id='method_defs',
        ctx=Load(), lineno=196, col_offset=20, end_lineno=196, end_col_offset=31),
        slice=Subscript(value=Name(id='method_name', ctx=Load(), lineno=196, col_offset=32,
        end_lineno=196, end_col_offset=43), slice=Slice(lower=Call(func=Name(id='len',
        ctx=Load(), lineno=196, col_offset=44, end_lineno=196, end_col_offset=47),
        args=[Constant(value='class_method_', lineno=196, col_offset=48, end_lineno=196,
        end_col_offset=63)], keywords=[], lineno=196, col_offset=44, end_lineno=196,
        end_col_offset=64), lineno=196, col_offset=44, end_lineno=196, end_col_offset=65),
        ctx=Load(), lineno=196, col_offset=32, end_lineno=196, end_col_offset=66),
        ctx=Store(), lineno=196, col_offset=20, end_lineno=196, end_col_offset=67)],
        value=Dict(keys=[Constant(value='inputs', lineno=196, col_offset=71, end_lineno=196,
        end_col_offset=79), Constant(value='calls', lineno=196, col_offset=107, end_lineno=196,
        end_col_offset=114), Constant(value='returns', lineno=196, col_offset=141,
        end_lineno=196, end_col_offset=150)], values=[Subscript(value=Name(id='details',
        ctx=Load(), lineno=196, col_offset=81, end_lineno=196, end_col_offset=88),
        slice=Constant(value='method_inputs', lineno=196, col_offset=89, end_lineno=196,
        end_col_offset=104), ctx=Load(), lineno=196, col_offset=81, end_lineno=196,
        end_col_offset=105), Subscript(value=Name(id='details', ctx=Load(), lineno=196,
        col_offset=116, end_lineno=196, end_col_offset=123), slice=Constant(value='method_calls',
        lineno=196, col_offset=124, end_lineno=196, end_col_offset=138), ctx=Load(),
        lineno=196, col_offset=116, end_lineno=196, end_col_offset=139), Subscript(value=Name(id='details',
        ctx=Load(), lineno=196, col_offset=152, end_lineno=196, end_col_offset=159),
        slice=Constant(value='method_returns', lineno=196, col_offset=160, end_lineno=196,
        end_col_offset=176), ctx=Load(), lineno=196, col_offset=152, end_lineno=196,
        end_col_offset=177)], lineno=196, col_offset=70, end_lineno=196, end_col_offset=178),
        lineno=196, col_offset=20, end_lineno=196, end_col_offset=178)], orelse=[],
        lineno=195, col_offset=16, end_lineno=196, end_col_offset=178)], orelse=[],
        lineno=194, col_offset=12, end_lineno=196, end_col_offset=178), Expr(value=Call(func=Attribute(value=Name(id='class_defs',
        ctx=Load(), lineno=197, col_offset=12, end_lineno=197, end_col_offset=22),
        attr='append', ctx=Load(), lineno=197, col_offset=12, end_lineno=197, end_col_offset=29),
        args=[Dict(keys=[Name(id='class_name', ctx=Load(), lineno=197, col_offset=31,
        end_lineno=197, end_col_offset=41)], values=[Dict(keys=[Constant(value='method_defs',
        lineno=197, col_offset=44, end_lineno=197, end_col_offset=57)], values=[Name(id='method_defs',
        ctx=Load(), lineno=197, col_offset=59, end_lineno=197, end_col_offset=70)],
        lineno=197, col_offset=43, end_lineno=197, end_col_offset=71)], lineno=197,
        col_offset=30, end_lineno=197, end_col_offset=72)], keywords=[], lineno=197,
        col_offset=12, end_lineno=197, end_col_offset=73), lineno=197, col_offset=12,
        end_lineno=197, end_col_offset=73)], orelse=[], lineno=192, col_offset=8,
        end_lineno=197, end_col_offset=73), Assign(targets=[Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=198, col_offset=8, end_lineno=198, end_col_offset=12),
        attr='file_info', ctx=Load(), lineno=198, col_offset=8, end_lineno=198, end_col_offset=22),
        slice=Constant(value='file_summary', lineno=198, col_offset=23, end_lineno=198,
        end_col_offset=37), ctx=Store(), lineno=198, col_offset=8, end_lineno=198,
        end_col_offset=38)], value=Dict(keys=[Constant(value='dependencies', lineno=198,
        col_offset=43, end_lineno=198, end_col_offset=57), Constant(value='function_defs',
        lineno=198, col_offset=73, end_lineno=198, end_col_offset=88), Constant(value='class_defs',
        lineno=198, col_offset=106, end_lineno=198, end_col_offset=118)], values=[Name(id='dependencies',
        ctx=Load(), lineno=198, col_offset=59, end_lineno=198, end_col_offset=71),
        Name(id='function_defs', ctx=Load(), lineno=198, col_offset=91, end_lineno=198,
        end_col_offset=104), Name(id='class_defs', ctx=Load(), lineno=198, col_offset=121,
        end_lineno=198, end_col_offset=131)], lineno=198, col_offset=41, end_lineno=198,
        end_col_offset=132), lineno=198, col_offset=8, end_lineno=198, end_col_offset=132)],
        decorator_list=[], returns=Constant(value=None, lineno=175, col_offset=40,
        end_lineno=175, end_col_offset=44), lineno=175, col_offset=4, end_lineno=198,
        end_col_offset=132)
      method_docstring: null
      method_inputs:
      - self
      - node
      method_defaults: []
      method_returns: []
      method_calls:
      - self.classes.items
      - get_control_flow
      - self.visit
      - isinstance
      - self.functions.keys
      - method_name.startswith
      - self.classes.keys
      - len
      - self.functions.items
      - class_details.items
      - ast.dump
      - ast.walk
      - class_defs.append
      - list
      method_variables:
      - method_defs
      - node_walk
      - function_defs
      - class_defs
      - dependencies
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.file_info
