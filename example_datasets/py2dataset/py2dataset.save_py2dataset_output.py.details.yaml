file_info:
  file_code: "\"\"\"\nRequirements:\n[req01] The `read_file` function shall:\n   \
    \     a. Accept a file path as an argument.\n        b. Read and return the contents\
    \ of a JSON or YAML file as a dictionary.\n[req02] The `write_file` function shall:\n\
    \        a. Accept a dictionary and a file path as arguments.\n        b. Write\
    \ the dictionary to a file in either JSON or YAML format.\n[req03] The `convert_json_to_html`\
    \ function shall:\n        a. Convert JSON files within a given directory to HTML\
    \ format.\n        b. Save each converted file with a .html extension.\n     \
    \   c. Preserve spacing and tabs for the 'input' field.\n[req04] The `combine_json_files`\
    \ function shall:\n        a. Accept a directory path as an argument.\n      \
    \  b. Merge all JSON files in the directory.\n        c. Remove duplicates from\
    \ the combined JSON files.\n        d. Write the combined data to 'qa.json' and\
    \ 'instruct.json' files.\n        e. Generate and save 'qa_purpose.json', 'qa_instruct.json',\
    \ and 'qa_cleaned_instruct.json' files.\n        f. Convert the merged JSON files\
    \ to HTML format if the html flag is set to True.\n        g. Return the 'qa_list'\
    \ and 'instruct_list' datasets.\n[req05] The `create_code_graph` function shall:\n\
    \        a. Accept details of a Python file, a base name, and an output directory\
    \ as arguments.\n        b. Generate code graphs based on the provided file details.\n\
    \        c. Save the graphs as PNG images in the specified output directory.\n\
    \"\"\"\nimport sys\nimport os\nimport re\nimport json\nimport logging\nimport\
    \ yaml\nimport matplotlib.pyplot as plt\nimport networkx as nx\nfrom html import\
    \ escape\nfrom pathlib import Path\nfrom typing import Dict, List, Union\n\n\n\
    def read_file(file_path: Path) -> Dict:\n    \"\"\"\n    Reads a JSON or YAML\
    \ file and returns its contents as a dictionary.\n    Args:\n        file_path\
    \ (Path): The path to the file.\n    Returns:\n        The contents of the file\
    \ as a dictionary.\n    \"\"\"\n    file_type = file_path.suffix[1:]\n    with\
    \ file_path.open() as f:\n        if file_type == 'json':\n            return\
    \ json.load(f)\n        elif file_type == 'yaml':\n            return yaml.load(f)\n\
    \n\ndef write_file(data: Dict, file_path: Path) -> None:\n    \"\"\"\n    Writes\
    \ a dictionary to a JSON or YAML file. \n    Args:\n        data (Dict): The data\
    \ to write to the file.\n        file_path (Path): The path to the file.\n   \
    \ \"\"\"\n    file_type = file_path.suffix[1:]\n    with file_path.open('w') as\
    \ f:\n        if file_type == 'json':\n            json.dump(data, f, indent=4)\n\
    \        elif file_type == 'yaml':\n            yaml.SafeDumper.ignore_aliases\
    \ = lambda *args: True\n            yaml.dump(data, f, Dumper=yaml.SafeDumper,\
    \ sort_keys=False)\n\n\ndef convert_json_to_html(directory: str) -> None:\n\n\
    \    def preserve_spacing(text: str, tab_width: int = 4) -> str:\n        \"\"\
    \"Preserve spaces and tabs in the provided text.\"\"\"\n        return text.replace(\"\
    \ \", \"&nbsp;\").replace(\"\\t\", \"&nbsp;\" * tab_width)\n\n    for json_file\
    \ in Path(directory).rglob('*.json'):\n        dataset = read_file(json_file)\n\
    \        if not dataset:\n            continue\n\n        html_file = json_file.with_suffix('.html')\n\
    \        html_content = \"\"\"\n        <html>\n        <head>\n            <style>\n\
    \                table {border-collapse: collapse;width: 100%;}\n            \
    \    th, td {border: 1px solid black; padding: 8px; text-align: left; white-space:\
    \ pre-line;}\n                td:nth-child(2) { width: 50%; overflow-wrap: anywhere;}\n\
    \            </style>\n        </head>\n        <body>\n            <table>\n\
    \                <thead>\n                    <tr>\n        \"\"\"\n        for\
    \ key in dataset[0].keys():\n            html_content += f\"<th>{key}</th>\"\n\
    \        html_content += \"\"\"\n                    </tr>\n                </thead>\n\
    \                <tbody>\n        \"\"\"\n        for entry in dataset:\n    \
    \        html_content += \"<tr>\"\n            for key in entry:\n           \
    \     # Convert \\n to HTML line breaks\n                value = escape(str(entry[key]))\n\
    \                if key == \"input\":  \n                    value = preserve_spacing(value)\n\
    \                value = value.replace('\\n', '<br/>')\n                html_content\
    \ += f\"<td>{value}</td>\"\n            html_content += \"</tr>\"\n\n        html_content\
    \ += \"\"\"\n                </tbody>\n            </table>\n        </body>\n\
    \        </html>\n        \"\"\"\n        html_file_path = json_file.with_suffix('.html')\n\
    \        try:   \n            with open(html_file_path, 'w', encoding='utf-8')\
    \ as file:\n                file.write(html_content)\n        except:\n      \
    \      logging.save(logging.info(f'Failed saving: {html_file_path}'))\n\n\ndef\
    \ combine_json_files(directory: str, html: bool) -> Dict[str, List[Dict]]:\n \
    \   \"\"\"\n    Combine all JSON files in the output directory into 'qa.json'\
    \ and \n    'instruct.json', and then remove duplicates.\n    Args:\n        directory\
    \ (str): The directory where the output files are located.\n    \"\"\"\n    file_names\
    \ = ['qa.json', 'instruct.json']\n    keys = ['question', 'instruction']\n   \
    \ combined_data = []\n    for file in file_names:\n        file_path = Path(directory)\
    \ / file\n        if file_path.exists():\n            combined_data = read_file(file_path)\n\
    \        for json_file in Path(directory).rglob(f'*.{file}'):\n            combined_data.extend(read_file(json_file))\n\
    \        combined_data = list({i[keys[file_names.index(file)]]: i for i in combined_data}.values())\n\
    \        write_file(combined_data, file_path)\n        if file == 'qa.json':\n\
    \            qa_data = combined_data.copy()\n        if file == 'instruct.json':\n\
    \            instruct_data = combined_data.copy()\n        \n        # Create\
    \ purpose-specific file\n        purpose_data = []\n        for item in combined_data:\n\
    \            if item[keys[file_names.index(file)]].startswith('Purpose of'):\n\
    \                purpose_data.append(item)\n        if purpose_data:\n       \
    \     purpose_file_path = file_path.with_name(file_path.stem + '_purpose.json')\n\
    \            write_file(purpose_data, purpose_file_path)\n\n        # Reset combined_data\
    \ for the next iteration\n        combined_data = []\n\n    # remove duplicate\
    \ \"input\" info in the instruct.json and instruct_purpose.json information \n\
    \    # to make a cleaned_instruct.json cleaned_instruct_purpose_json\n    file_names\
    \ = ['instruct.json', 'instruct_purpose.json']\n    for file in file_names:\n\
    \        seen_inputs = set()\n        file_path = Path(directory) / file\n   \
    \     if not file_path.exists():\n            continue\n        dataset = read_file(file_path)\n\
    \        if not dataset:\n            continue\n        for item in dataset:\n\
    \            if item['input'] in seen_inputs:\n                item['input'] =\
    \ ''\n            else:\n                seen_inputs.add(item['input'])\n    \
    \    cleaned_instruct_file_path = Path(directory) / ('cleaned_'+ file) \n    \
    \    write_file(dataset, cleaned_instruct_file_path)\n\n    # save html file for\
    \ each json file in the output directory\n    if html:\n        convert_json_to_html(directory)\n\
    \n    return {'qa_list': qa_data, 'instruct_list': instruct_data}\n\n\ndef create_code_graph(file_details:\
    \ Dict, base_name: str, output_subdir: Path) -> None:\n    \"\"\"\n    Generate\
    \ graphs from the file_details and save them as PNG images.\n    Args:\n     \
    \   file_details (dict): The details extracted from the Python file.\n       \
    \ base_name (str): The base name of the output files.\n        output_subdir (Path):\
    \ The subdirectory where the output files will be\n            saved.\n    \"\"\
    \"\n    for graph_type in ['internal_code_graph', 'entire_code_graph']:\n    \
    \    # Create graphs\n        output_file = output_subdir / f'{base_name}.{graph_type}.png'\
    \  \n        G = nx.DiGraph()\n        for node_name in file_details['file_info'][graph_type]['nodes']:\n\
    \            G.add_node(node_name)\n        # Add edges\n        for edge in file_details['file_info'][graph_type]['edges']:\n\
    \            source = edge['source']\n            target = edge['target']\n  \
    \          if source in G.nodes and target in G.nodes:\n                edge_data\
    \ = {}\n                if 'target_inputs' in edge:\n                    edge_data['target_inputs']\
    \ = edge['target_inputs']\n                if 'target_returns' in edge:\n    \
    \                edge_data['target_returns'] = edge['target_returns']\n      \
    \          G.add_edge(source, target, **edge_data)\n            \n        # Save\
    \ code graph as png\n        plt.figure(figsize=(20, 20))\n        pos = nx.spring_layout(G)\n\
    \        nx.draw(G, pos, with_labels=True, font_weight='bold', font_size = 8,\
    \ node_shape='s', node_size=500, width=1, arrowsize=12)\n        edge_labels =\
    \ {}\n        for edge in G.edges(data=True):\n            label = []\n      \
    \      if 'target_inputs' in edge[2] and edge[2]['target_inputs']:\n         \
    \       label.append(f\"Inputs: {', '.join(edge[2]['target_inputs'])}\")\n   \
    \         if 'target_returns' in edge[2] and edge[2]['target_returns']:\n    \
    \            label.append(f\"\\nReturns: {', '.join(edge[2]['target_returns'])}\"\
    )\n            edge_labels[(edge[0], edge[1])] = '\\n'.join(label)\n        nx.draw_networkx_edge_labels(G,\
    \ pos, edge_labels=edge_labels, font_size=6)\n        plt.savefig(output_file)\n\
    \        plt.close()  # Close the figure"
  file_ast: 'Module(body=[Expr(value=Constant(value="\nRequirements:\n[req01] The
    `read_file` function shall:\n        a. Accept a file path as an argument.\n        b.
    Read and return the contents of a JSON or YAML file as a dictionary.\n[req02]
    The `write_file` function shall:\n        a. Accept a dictionary and a file path
    as arguments.\n        b. Write the dictionary to a file in either JSON or YAML
    format.\n[req03] The `convert_json_to_html` function shall:\n        a. Convert
    JSON files within a given directory to HTML format.\n        b. Save each converted
    file with a .html extension.\n        c. Preserve spacing and tabs for the ''input''
    field.\n[req04] The `combine_json_files` function shall:\n        a. Accept a
    directory path as an argument.\n        b. Merge all JSON files in the directory.\n        c.
    Remove duplicates from the combined JSON files.\n        d. Write the combined
    data to ''qa.json'' and ''instruct.json'' files.\n        e. Generate and save
    ''qa_purpose.json'', ''qa_instruct.json'', and ''qa_cleaned_instruct.json'' files.\n        f.
    Convert the merged JSON files to HTML format if the html flag is set to True.\n        g.
    Return the ''qa_list'' and ''instruct_list'' datasets.\n[req05] The `create_code_graph`
    function shall:\n        a. Accept details of a Python file, a base name, and
    an output directory as arguments.\n        b. Generate code graphs based on the
    provided file details.\n        c. Save the graphs as PNG images in the specified
    output directory.\n")), Import(names=[alias(name=''sys'')]), Import(names=[alias(name=''os'')]),
    Import(names=[alias(name=''re'')]), Import(names=[alias(name=''json'')]), Import(names=[alias(name=''logging'')]),
    Import(names=[alias(name=''yaml'')]), Import(names=[alias(name=''matplotlib.pyplot'',
    asname=''plt'')]), Import(names=[alias(name=''networkx'', asname=''nx'')]), ImportFrom(module=''html'',
    names=[alias(name=''escape'')], level=0), ImportFrom(module=''pathlib'', names=[alias(name=''Path'')],
    level=0), ImportFrom(module=''typing'', names=[alias(name=''Dict''), alias(name=''List''),
    alias(name=''Union'')], level=0), FunctionDef(name=''read_file'', args=arguments(posonlyargs=[],
    args=[arg(arg=''file_path'', annotation=Name(id=''Path'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Reads a
    JSON or YAML file and returns its contents as a dictionary.\n    Args:\n        file_path
    (Path): The path to the file.\n    Returns:\n        The contents of the file
    as a dictionary.\n    '')), Assign(targets=[Name(id=''file_type'', ctx=Store())],
    value=Subscript(value=Attribute(value=Name(id=''file_path'', ctx=Load()), attr=''suffix'',
    ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''open'', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id=''f'',
    ctx=Store()))], body=[If(test=Compare(left=Name(id=''file_type'', ctx=Load()),
    ops=[Eq()], comparators=[Constant(value=''json'')]), body=[Return(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''load'', ctx=Load()), args=[Name(id=''f'', ctx=Load())], keywords=[]))],
    orelse=[If(test=Compare(left=Name(id=''file_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''yaml'')]),
    body=[Return(value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load()), attr=''load'',
    ctx=Load()), args=[Name(id=''f'', ctx=Load())], keywords=[]))], orelse=[])])])],
    decorator_list=[], returns=Name(id=''Dict'', ctx=Load())), FunctionDef(name=''write_file'',
    args=arguments(posonlyargs=[], args=[arg(arg=''data'', annotation=Name(id=''Dict'',
    ctx=Load())), arg(arg=''file_path'', annotation=Name(id=''Path'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Writes
    a dictionary to a JSON or YAML file. \n    Args:\n        data (Dict): The data
    to write to the file.\n        file_path (Path): The path to the file.\n    '')),
    Assign(targets=[Name(id=''file_type'', ctx=Store())], value=Subscript(value=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''suffix'', ctx=Load()), slice=Slice(lower=Constant(value=1)),
    ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''open'', ctx=Load()), args=[Constant(value=''w'')], keywords=[]),
    optional_vars=Name(id=''f'', ctx=Store()))], body=[If(test=Compare(left=Name(id=''file_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''json'')]), body=[Expr(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''data'', ctx=Load()),
    Name(id=''f'', ctx=Load())], keywords=[keyword(arg=''indent'', value=Constant(value=4))]))],
    orelse=[If(test=Compare(left=Name(id=''file_type'', ctx=Load()), ops=[Eq()], comparators=[Constant(value=''yaml'')]),
    body=[Assign(targets=[Attribute(value=Attribute(value=Name(id=''yaml'', ctx=Load()),
    attr=''SafeDumper'', ctx=Load()), attr=''ignore_aliases'', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[],
    args=[], vararg=arg(arg=''args''), kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=Constant(value=True))), Expr(value=Call(func=Attribute(value=Name(id=''yaml'',
    ctx=Load()), attr=''dump'', ctx=Load()), args=[Name(id=''data'', ctx=Load()),
    Name(id=''f'', ctx=Load())], keywords=[keyword(arg=''Dumper'', value=Attribute(value=Name(id=''yaml'',
    ctx=Load()), attr=''SafeDumper'', ctx=Load())), keyword(arg=''sort_keys'', value=Constant(value=False))]))],
    orelse=[])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''convert_json_to_html'',
    args=arguments(posonlyargs=[], args=[arg(arg=''directory'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name=''preserve_spacing'',
    args=arguments(posonlyargs=[], args=[arg(arg=''text'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''tab_width'', annotation=Name(id=''int'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4)]), body=[Expr(value=Constant(value=''Preserve
    spaces and tabs in the provided text.'')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''text'',
    ctx=Load()), attr=''replace'', ctx=Load()), args=[Constant(value='' ''), Constant(value=''&nbsp;'')],
    keywords=[]), attr=''replace'', ctx=Load()), args=[Constant(value=''\t''), BinOp(left=Constant(value=''&nbsp;''),
    op=Mult(), right=Name(id=''tab_width'', ctx=Load()))], keywords=[]))], decorator_list=[],
    returns=Name(id=''str'', ctx=Load())), For(target=Name(id=''json_file'', ctx=Store()),
    iter=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), attr=''rglob'', ctx=Load()), args=[Constant(value=''*.json'')],
    keywords=[]), body=[Assign(targets=[Name(id=''dataset'', ctx=Store())], value=Call(func=Name(id=''read_file'',
    ctx=Load()), args=[Name(id=''json_file'', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(),
    operand=Name(id=''dataset'', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id=''html_file'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''json_file'', ctx=Load()),
    attr=''with_suffix'', ctx=Load()), args=[Constant(value=''.html'')], keywords=[])),
    Assign(targets=[Name(id=''html_content'', ctx=Store())], value=Constant(value=''\n        <html>\n        <head>\n            <style>\n                table
    {border-collapse: collapse;width: 100%;}\n                th, td {border: 1px
    solid black; padding: 8px; text-align: left; white-space: pre-line;}\n                td:nth-child(2)
    { width: 50%; overflow-wrap: anywhere;}\n            </style>\n        </head>\n        <body>\n            <table>\n                <thead>\n                    <tr>\n        '')),
    For(target=Name(id=''key'', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id=''dataset'',
    ctx=Load()), slice=Constant(value=0), ctx=Load()), attr=''keys'', ctx=Load()),
    args=[], keywords=[]), body=[AugAssign(target=Name(id=''html_content'', ctx=Store()),
    op=Add(), value=JoinedStr(values=[Constant(value=''<th>''), FormattedValue(value=Name(id=''key'',
    ctx=Load()), conversion=-1), Constant(value=''</th>'')]))], orelse=[]), AugAssign(target=Name(id=''html_content'',
    ctx=Store()), op=Add(), value=Constant(value=''\n                    </tr>\n                </thead>\n                <tbody>\n        '')),
    For(target=Name(id=''entry'', ctx=Store()), iter=Name(id=''dataset'', ctx=Load()),
    body=[AugAssign(target=Name(id=''html_content'', ctx=Store()), op=Add(), value=Constant(value=''<tr>'')),
    For(target=Name(id=''key'', ctx=Store()), iter=Name(id=''entry'', ctx=Load()),
    body=[Assign(targets=[Name(id=''value'', ctx=Store())], value=Call(func=Name(id=''escape'',
    ctx=Load()), args=[Call(func=Name(id=''str'', ctx=Load()), args=[Subscript(value=Name(id=''entry'',
    ctx=Load()), slice=Name(id=''key'', ctx=Load()), ctx=Load())], keywords=[])],
    keywords=[])), If(test=Compare(left=Name(id=''key'', ctx=Load()), ops=[Eq()],
    comparators=[Constant(value=''input'')]), body=[Assign(targets=[Name(id=''value'',
    ctx=Store())], value=Call(func=Name(id=''preserve_spacing'', ctx=Load()), args=[Name(id=''value'',
    ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id=''value'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''value'', ctx=Load()), attr=''replace'',
    ctx=Load()), args=[Constant(value=''\n''), Constant(value=''<br/>'')], keywords=[])),
    AugAssign(target=Name(id=''html_content'', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=''<td>''),
    FormattedValue(value=Name(id=''value'', ctx=Load()), conversion=-1), Constant(value=''</td>'')]))],
    orelse=[]), AugAssign(target=Name(id=''html_content'', ctx=Store()), op=Add(),
    value=Constant(value=''</tr>''))], orelse=[]), AugAssign(target=Name(id=''html_content'',
    ctx=Store()), op=Add(), value=Constant(value=''\n                </tbody>\n            </table>\n        </body>\n        </html>\n        '')),
    Assign(targets=[Name(id=''html_file_path'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''json_file'',
    ctx=Load()), attr=''with_suffix'', ctx=Load()), args=[Constant(value=''.html'')],
    keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Name(id=''html_file_path'', ctx=Load()), Constant(value=''w'')],
    keywords=[keyword(arg=''encoding'', value=Constant(value=''utf-8''))]), optional_vars=Name(id=''file'',
    ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id=''file'', ctx=Load()),
    attr=''write'', ctx=Load()), args=[Name(id=''html_content'', ctx=Load())], keywords=[]))])],
    handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''save'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed
    saving: ''), FormattedValue(value=Name(id=''html_file_path'', ctx=Load()), conversion=-1)])],
    keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[],
    returns=Constant(value=None)), FunctionDef(name=''combine_json_files'', args=arguments(posonlyargs=[],
    args=[arg(arg=''directory'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''html'',
    annotation=Name(id=''bool'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[Expr(value=Constant(value="\n    Combine all JSON files in the output directory
    into ''qa.json'' and \n    ''instruct.json'', and then remove duplicates.\n    Args:\n        directory
    (str): The directory where the output files are located.\n    ")), Assign(targets=[Name(id=''file_names'',
    ctx=Store())], value=List(elts=[Constant(value=''qa.json''), Constant(value=''instruct.json'')],
    ctx=Load())), Assign(targets=[Name(id=''keys'', ctx=Store())], value=List(elts=[Constant(value=''question''),
    Constant(value=''instruction'')], ctx=Load())), Assign(targets=[Name(id=''combined_data'',
    ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id=''file'',
    ctx=Store()), iter=Name(id=''file_names'', ctx=Load()), body=[Assign(targets=[Name(id=''file_path'',
    ctx=Store())], value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), op=Div(), right=Name(id=''file'', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''exists'', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id=''combined_data'',
    ctx=Store())], value=Call(func=Name(id=''read_file'', ctx=Load()), args=[Name(id=''file_path'',
    ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id=''json_file'', ctx=Store()),
    iter=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), attr=''rglob'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''*.''),
    FormattedValue(value=Name(id=''file'', ctx=Load()), conversion=-1)])], keywords=[]),
    body=[Expr(value=Call(func=Attribute(value=Name(id=''combined_data'', ctx=Load()),
    attr=''extend'', ctx=Load()), args=[Call(func=Name(id=''read_file'', ctx=Load()),
    args=[Name(id=''json_file'', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]),
    Assign(targets=[Name(id=''combined_data'', ctx=Store())], value=Call(func=Name(id=''list'',
    ctx=Load()), args=[Call(func=Attribute(value=DictComp(key=Subscript(value=Name(id=''i'',
    ctx=Load()), slice=Subscript(value=Name(id=''keys'', ctx=Load()), slice=Call(func=Attribute(value=Name(id=''file_names'',
    ctx=Load()), attr=''index'', ctx=Load()), args=[Name(id=''file'', ctx=Load())],
    keywords=[]), ctx=Load()), ctx=Load()), value=Name(id=''i'', ctx=Load()), generators=[comprehension(target=Name(id=''i'',
    ctx=Store()), iter=Name(id=''combined_data'', ctx=Load()), ifs=[], is_async=0)]),
    attr=''values'', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id=''write_file'',
    ctx=Load()), args=[Name(id=''combined_data'', ctx=Load()), Name(id=''file_path'',
    ctx=Load())], keywords=[])), If(test=Compare(left=Name(id=''file'', ctx=Load()),
    ops=[Eq()], comparators=[Constant(value=''qa.json'')]), body=[Assign(targets=[Name(id=''qa_data'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''combined_data'', ctx=Load()),
    attr=''copy'', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id=''file'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''instruct.json'')]), body=[Assign(targets=[Name(id=''instruct_data'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''combined_data'', ctx=Load()),
    attr=''copy'', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id=''purpose_data'',
    ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id=''item'',
    ctx=Store()), iter=Name(id=''combined_data'', ctx=Load()), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id=''item'',
    ctx=Load()), slice=Subscript(value=Name(id=''keys'', ctx=Load()), slice=Call(func=Attribute(value=Name(id=''file_names'',
    ctx=Load()), attr=''index'', ctx=Load()), args=[Name(id=''file'', ctx=Load())],
    keywords=[]), ctx=Load()), ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''Purpose
    of'')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''purpose_data'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[Name(id=''item'', ctx=Load())],
    keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id=''purpose_data'', ctx=Load()),
    body=[Assign(targets=[Name(id=''purpose_file_path'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''with_name'', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id=''file_path'',
    ctx=Load()), attr=''stem'', ctx=Load()), op=Add(), right=Constant(value=''_purpose.json''))],
    keywords=[])), Expr(value=Call(func=Name(id=''write_file'', ctx=Load()), args=[Name(id=''purpose_data'',
    ctx=Load()), Name(id=''purpose_file_path'', ctx=Load())], keywords=[]))], orelse=[]),
    Assign(targets=[Name(id=''combined_data'', ctx=Store())], value=List(elts=[],
    ctx=Load()))], orelse=[]), Assign(targets=[Name(id=''file_names'', ctx=Store())],
    value=List(elts=[Constant(value=''instruct.json''), Constant(value=''instruct_purpose.json'')],
    ctx=Load())), For(target=Name(id=''file'', ctx=Store()), iter=Name(id=''file_names'',
    ctx=Load()), body=[Assign(targets=[Name(id=''seen_inputs'', ctx=Store())], value=Call(func=Name(id=''set'',
    ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id=''file_path'', ctx=Store())],
    value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), op=Div(), right=Name(id=''file'', ctx=Load()))), If(test=UnaryOp(op=Not(),
    operand=Call(func=Attribute(value=Name(id=''file_path'', ctx=Load()), attr=''exists'',
    ctx=Load()), args=[], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id=''dataset'',
    ctx=Store())], value=Call(func=Name(id=''read_file'', ctx=Load()), args=[Name(id=''file_path'',
    ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id=''dataset'',
    ctx=Load())), body=[Continue()], orelse=[]), For(target=Name(id=''item'', ctx=Store()),
    iter=Name(id=''dataset'', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id=''item'',
    ctx=Load()), slice=Constant(value=''input''), ctx=Load()), ops=[In()], comparators=[Name(id=''seen_inputs'',
    ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id=''item'', ctx=Load()),
    slice=Constant(value=''input''), ctx=Store())], value=Constant(value=''''))],
    orelse=[Expr(value=Call(func=Attribute(value=Name(id=''seen_inputs'', ctx=Load()),
    attr=''add'', ctx=Load()), args=[Subscript(value=Name(id=''item'', ctx=Load()),
    slice=Constant(value=''input''), ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id=''cleaned_instruct_file_path'',
    ctx=Store())], value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=Constant(value=''cleaned_''),
    op=Add(), right=Name(id=''file'', ctx=Load())))), Expr(value=Call(func=Name(id=''write_file'',
    ctx=Load()), args=[Name(id=''dataset'', ctx=Load()), Name(id=''cleaned_instruct_file_path'',
    ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id=''html'', ctx=Load()),
    body=[Expr(value=Call(func=Name(id=''convert_json_to_html'', ctx=Load()), args=[Name(id=''directory'',
    ctx=Load())], keywords=[]))], orelse=[]), Return(value=Dict(keys=[Constant(value=''qa_list''),
    Constant(value=''instruct_list'')], values=[Name(id=''qa_data'', ctx=Load()),
    Name(id=''instruct_data'', ctx=Load())]))], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())),
    FunctionDef(name=''create_code_graph'', args=arguments(posonlyargs=[], args=[arg(arg=''file_details'',
    annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''base_name'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''output_subdir'', annotation=Name(id=''Path'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Generate
    graphs from the file_details and save them as PNG images.\n    Args:\n        file_details
    (dict): The details extracted from the Python file.\n        base_name (str):
    The base name of the output files.\n        output_subdir (Path): The subdirectory
    where the output files will be\n            saved.\n    '')), For(target=Name(id=''graph_type'',
    ctx=Store()), iter=List(elts=[Constant(value=''internal_code_graph''), Constant(value=''entire_code_graph'')],
    ctx=Load()), body=[Assign(targets=[Name(id=''output_file'', ctx=Store())], value=BinOp(left=Name(id=''output_subdir'',
    ctx=Load()), op=Div(), right=JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
    ctx=Load()), conversion=-1), Constant(value=''.''), FormattedValue(value=Name(id=''graph_type'',
    ctx=Load()), conversion=-1), Constant(value=''.png'')]))), Assign(targets=[Name(id=''G'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load()), attr=''DiGraph'',
    ctx=Load()), args=[], keywords=[])), For(target=Name(id=''node_name'', ctx=Store()),
    iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Name(id=''graph_type'',
    ctx=Load()), ctx=Load()), slice=Constant(value=''nodes''), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''add_node'', ctx=Load()), args=[Name(id=''node_name'', ctx=Load())],
    keywords=[]))], orelse=[]), For(target=Name(id=''edge'', ctx=Store()), iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
    ctx=Load()), slice=Constant(value=''file_info''), ctx=Load()), slice=Name(id=''graph_type'',
    ctx=Load()), ctx=Load()), slice=Constant(value=''edges''), ctx=Load()), body=[Assign(targets=[Name(id=''source'',
    ctx=Store())], value=Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=''source''),
    ctx=Load())), Assign(targets=[Name(id=''target'', ctx=Store())], value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=''target''), ctx=Load())), If(test=BoolOp(op=And(),
    values=[Compare(left=Name(id=''source'', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''nodes'', ctx=Load())]), Compare(left=Name(id=''target'', ctx=Load()),
    ops=[In()], comparators=[Attribute(value=Name(id=''G'', ctx=Load()), attr=''nodes'',
    ctx=Load())])]), body=[Assign(targets=[Name(id=''edge_data'', ctx=Store())], value=Dict(keys=[],
    values=[])), If(test=Compare(left=Constant(value=''target_inputs''), ops=[In()],
    comparators=[Name(id=''edge'', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
    ctx=Load()), slice=Constant(value=''target_inputs''), ctx=Store())], value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=''target_inputs''), ctx=Load()))], orelse=[]),
    If(test=Compare(left=Constant(value=''target_returns''), ops=[In()], comparators=[Name(id=''edge'',
    ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'', ctx=Load()),
    slice=Constant(value=''target_returns''), ctx=Store())], value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=''target_returns''), ctx=Load()))], orelse=[]),
    Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load()), attr=''add_edge'',
    ctx=Load()), args=[Name(id=''source'', ctx=Load()), Name(id=''target'', ctx=Load())],
    keywords=[keyword(value=Name(id=''edge_data'', ctx=Load()))]))], orelse=[])],
    orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''plt'', ctx=Load()),
    attr=''figure'', ctx=Load()), args=[], keywords=[keyword(arg=''figsize'', value=Tuple(elts=[Constant(value=20),
    Constant(value=20)], ctx=Load()))])), Assign(targets=[Name(id=''pos'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load()), attr=''spring_layout'',
    ctx=Load()), args=[Name(id=''G'', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''nx'',
    ctx=Load()), attr=''draw'', ctx=Load()), args=[Name(id=''G'', ctx=Load()), Name(id=''pos'',
    ctx=Load())], keywords=[keyword(arg=''with_labels'', value=Constant(value=True)),
    keyword(arg=''font_weight'', value=Constant(value=''bold'')), keyword(arg=''font_size'',
    value=Constant(value=8)), keyword(arg=''node_shape'', value=Constant(value=''s'')),
    keyword(arg=''node_size'', value=Constant(value=500)), keyword(arg=''width'',
    value=Constant(value=1)), keyword(arg=''arrowsize'', value=Constant(value=12))])),
    Assign(targets=[Name(id=''edge_labels'', ctx=Store())], value=Dict(keys=[], values=[])),
    For(target=Name(id=''edge'', ctx=Store()), iter=Call(func=Attribute(value=Name(id=''G'',
    ctx=Load()), attr=''edges'', ctx=Load()), args=[], keywords=[keyword(arg=''data'',
    value=Constant(value=True))]), body=[Assign(targets=[Name(id=''label'', ctx=Store())],
    value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=''target_inputs''),
    ops=[In()], comparators=[Subscript(value=Name(id=''edge'', ctx=Load()), slice=Constant(value=2),
    ctx=Load())]), Subscript(value=Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_inputs''),
    ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Inputs:
    ''), FormattedValue(value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_inputs''),
    ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(),
    values=[Compare(left=Constant(value=''target_returns''), ops=[In()], comparators=[Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=2), ctx=Load())]), Subscript(value=Subscript(value=Name(id=''edge'',
    ctx=Load()), slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_returns''),
    ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''\nReturns:
    ''), FormattedValue(value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=2), ctx=Load()), slice=Constant(value=''target_returns''),
    ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id=''edge_labels'',
    ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id=''edge'', ctx=Load()),
    slice=Constant(value=1), ctx=Load())], ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Constant(value=''\n''),
    attr=''join'', ctx=Load()), args=[Name(id=''label'', ctx=Load())], keywords=[]))],
    orelse=[]), Expr(value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load()),
    attr=''draw_networkx_edge_labels'', ctx=Load()), args=[Name(id=''G'', ctx=Load()),
    Name(id=''pos'', ctx=Load())], keywords=[keyword(arg=''edge_labels'', value=Name(id=''edge_labels'',
    ctx=Load())), keyword(arg=''font_size'', value=Constant(value=6))])), Expr(value=Call(func=Attribute(value=Name(id=''plt'',
    ctx=Load()), attr=''savefig'', ctx=Load()), args=[Name(id=''output_file'', ctx=Load())],
    keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''plt'', ctx=Load()),
    attr=''close'', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[],
    returns=Constant(value=None))], type_ignores=[])'
  file_dependencies:
  - networkx
  - logging
  - sys
  - os
  - json
  - re
  - typing
  - yaml
  - html
  - matplotlib.pyplot
  - pathlib
  file_functions:
  - read_file
  - write_file
  - convert_json_to_html
  - preserve_spacing
  - combine_json_files
  - create_code_graph
  file_classes: []
  file_control_flow: module -> def read_file -> with -> if -> if -> def write_file
    -> with -> if -> if -> def convert_json_to_html -> def preserve_spacing -> for
    -> if -> for -> for -> for -> if -> try -> with -> except -> def combine_json_files
    -> for -> if -> for -> if -> if -> for -> if -> if -> for -> if -> if -> for ->
    if -> if -> def create_code_graph -> for -> for -> for -> if -> if -> if -> for
    -> if -> if
  file_summary: '{dependencies: [networkx, logging, sys, os, json, re, typing, yaml,
    html, matplotlib.pyplot, pathlib], function_defs: [{read_file: {inputs: [file_path],
    calls: [file_path.open, json.load, yaml.load], returns: [json.load(f), yaml.load(f)]}},
    {write_file: {inputs: [data, file_path], calls: [file_path.open, json.dump, yaml.dump],
    returns: []}}, {convert_json_to_html: {inputs: [directory], calls: [Path, logging.info,
    text.replace('' '', ''&nbsp;'').replace, preserve_spacing, file.write, str, escape,
    logging.save, dataset[0].keys, json_file.with_suffix, read_file, Path(directory).rglob,
    text.replace, open, value.replace], returns: [text.replace('' '', ''&nbsp;'').replace(''\\t'',
    ''&nbsp;'' * tab_width)]}}, {preserve_spacing: {inputs: [text, tab_width], calls:
    [text.replace('' '', ''&nbsp;'').replace, text.replace], returns: [text.replace(''
    '', ''&nbsp;'').replace(''\\t'', ''&nbsp;'' * tab_width)]}}, {combine_json_files:
    {inputs: [directory, html], calls: [Path, item[keys[file_names.index(file)]].startswith,
    write_file, file_path.with_name, set, purpose_data.append, list, file_names.index,
    seen_inputs.add, combined_data.extend, {i[keys[file_names.index(file)]]: i for
    i in combined_data}.values, read_file, file_path.exists, Path(directory).rglob,
    convert_json_to_html, combined_data.copy], returns: [{''qa_list'': qa_data, ''instruct_list'':
    instruct_data}]}}, {create_code_graph: {inputs: [file_details, base_name, output_subdir],
    calls: [nx.DiGraph, G.add_node, plt.figure, nx.draw_networkx_edge_labels, label.append,
    plt.savefig, G.edges, ''\\n''.join, '', ''.join, nx.draw, G.add_edge, nx.spring_layout,
    plt.close], returns: []}}], class_defs: []}'
  internal_code_graph:
    nodes:
    - read_file
    - write_file
    - convert_json_to_html
    - preserve_spacing
    - combine_json_files
    - create_code_graph
    edges:
    - source: convert_json_to_html
      target: preserve_spacing
      target_inputs:
      - text
      - tab_width
      target_returns:
      - text.replace(' ', '&nbsp;').replace('\t', '&nbsp;' * tab_width)
    - source: convert_json_to_html
      target: read_file
      target_inputs:
      - file_path
      target_returns:
      - yaml.load(f)
      - json.load(f)
    - source: combine_json_files
      target: write_file
      target_inputs:
      - data
      - file_path
      target_returns: []
    - source: combine_json_files
      target: read_file
      target_inputs:
      - file_path
      target_returns:
      - yaml.load(f)
      - json.load(f)
    - source: combine_json_files
      target: convert_json_to_html
      target_inputs:
      - directory
      target_returns:
      - text.replace(' ', '&nbsp;').replace('\t', '&nbsp;' * tab_width)
  entire_code_graph:
    nodes:
    - read_file
    - write_file
    - convert_json_to_html
    - preserve_spacing
    - combine_json_files
    - create_code_graph
    - file_path.open
    - json.load
    - yaml.load
    - json.dump
    - yaml.dump
    - Path
    - logging.info
    - text.replace(' ', '&nbsp;').replace
    - file.write
    - str
    - escape
    - logging.save
    - dataset[0].keys
    - json_file.with_suffix
    - Path(directory).rglob
    - text.replace
    - open
    - value.replace
    - item[keys[file_names.index(file)]].startswith
    - file_path.with_name
    - set
    - purpose_data.append
    - list
    - file_names.index
    - seen_inputs.add
    - combined_data.extend
    - '{i[keys[file_names.index(file)]]: i for i in combined_data}.values'
    - file_path.exists
    - combined_data.copy
    - nx.DiGraph
    - G.add_node
    - plt.figure
    - nx.draw_networkx_edge_labels
    - label.append
    - plt.savefig
    - G.edges
    - '''\n''.join'
    - ''', ''.join'
    - nx.draw
    - G.add_edge
    - nx.spring_layout
    - plt.close
    edges:
    - source: read_file
      target: file_path.open
    - source: read_file
      target: json.load
    - source: read_file
      target: yaml.load
    - source: write_file
      target: file_path.open
    - source: write_file
      target: json.dump
    - source: write_file
      target: yaml.dump
    - source: convert_json_to_html
      target: Path
    - source: convert_json_to_html
      target: logging.info
    - source: convert_json_to_html
      target: text.replace(' ', '&nbsp;').replace
    - source: convert_json_to_html
      target: preserve_spacing
      target_inputs:
      - text
      - tab_width
      target_returns:
      - text.replace(' ', '&nbsp;').replace('\t', '&nbsp;' * tab_width)
    - source: convert_json_to_html
      target: file.write
    - source: convert_json_to_html
      target: str
    - source: convert_json_to_html
      target: escape
    - source: convert_json_to_html
      target: logging.save
    - source: convert_json_to_html
      target: dataset[0].keys
    - source: convert_json_to_html
      target: json_file.with_suffix
    - source: convert_json_to_html
      target: read_file
      target_inputs:
      - file_path
      target_returns:
      - yaml.load(f)
      - json.load(f)
    - source: convert_json_to_html
      target: Path(directory).rglob
    - source: convert_json_to_html
      target: text.replace
    - source: convert_json_to_html
      target: open
    - source: convert_json_to_html
      target: value.replace
    - source: preserve_spacing
      target: text.replace(' ', '&nbsp;').replace
    - source: preserve_spacing
      target: text.replace
    - source: combine_json_files
      target: Path
    - source: combine_json_files
      target: item[keys[file_names.index(file)]].startswith
    - source: combine_json_files
      target: write_file
      target_inputs:
      - data
      - file_path
      target_returns: []
    - source: combine_json_files
      target: file_path.with_name
    - source: combine_json_files
      target: set
    - source: combine_json_files
      target: purpose_data.append
    - source: combine_json_files
      target: list
    - source: combine_json_files
      target: file_names.index
    - source: combine_json_files
      target: seen_inputs.add
    - source: combine_json_files
      target: combined_data.extend
    - source: combine_json_files
      target: '{i[keys[file_names.index(file)]]: i for i in combined_data}.values'
    - source: combine_json_files
      target: read_file
      target_inputs:
      - file_path
      target_returns:
      - yaml.load(f)
      - json.load(f)
    - source: combine_json_files
      target: file_path.exists
    - source: combine_json_files
      target: Path(directory).rglob
    - source: combine_json_files
      target: convert_json_to_html
      target_inputs:
      - directory
      target_returns:
      - text.replace(' ', '&nbsp;').replace('\t', '&nbsp;' * tab_width)
    - source: combine_json_files
      target: combined_data.copy
    - source: create_code_graph
      target: nx.DiGraph
    - source: create_code_graph
      target: G.add_node
    - source: create_code_graph
      target: plt.figure
    - source: create_code_graph
      target: nx.draw_networkx_edge_labels
    - source: create_code_graph
      target: label.append
    - source: create_code_graph
      target: plt.savefig
    - source: create_code_graph
      target: G.edges
    - source: create_code_graph
      target: '''\n''.join'
    - source: create_code_graph
      target: ''', ''.join'
    - source: create_code_graph
      target: nx.draw
    - source: create_code_graph
      target: G.add_edge
    - source: create_code_graph
      target: nx.spring_layout
    - source: create_code_graph
      target: plt.close
functions:
  read_file:
    function_name: read_file
    function_code: "def read_file(file_path: Path) -> Dict:\n    \"\"\"\n    Reads\
      \ a JSON or YAML file and returns its contents as a dictionary.\n    Args:\n\
      \        file_path (Path): The path to the file.\n    Returns:\n        The\
      \ contents of the file as a dictionary.\n    \"\"\"\n    file_type = file_path.suffix[1:]\n\
      \    with file_path.open() as f:\n        if file_type == 'json':\n        \
      \    return json.load(f)\n        elif file_type == 'yaml':\n            return\
      \ yaml.load(f)"
    function_ast: 'FunctionDef(name=''read_file'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_path'', annotation=Name(id=''Path'', ctx=Load(), lineno=39,
      col_offset=25, end_lineno=39, end_col_offset=29), lineno=39, col_offset=14,
      end_lineno=39, end_col_offset=29)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Reads a JSON or YAML file and returns
      its contents as a dictionary.\n    Args:\n        file_path (Path): The path
      to the file.\n    Returns:\n        The contents of the file as a dictionary.\n    '',
      lineno=40, col_offset=4, end_lineno=46, end_col_offset=7), lineno=40, col_offset=4,
      end_lineno=46, end_col_offset=7), Assign(targets=[Name(id=''file_type'', ctx=Store(),
      lineno=47, col_offset=4, end_lineno=47, end_col_offset=13)], value=Subscript(value=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=47, col_offset=16, end_lineno=47, end_col_offset=25), attr=''suffix'',
      ctx=Load(), lineno=47, col_offset=16, end_lineno=47, end_col_offset=32), slice=Slice(lower=Constant(value=1,
      lineno=47, col_offset=33, end_lineno=47, end_col_offset=34), lineno=47, col_offset=33,
      end_lineno=47, end_col_offset=35), ctx=Load(), lineno=47, col_offset=16, end_lineno=47,
      end_col_offset=36), lineno=47, col_offset=4, end_lineno=47, end_col_offset=36),
      With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=48, col_offset=9, end_lineno=48, end_col_offset=18), attr=''open'',
      ctx=Load(), lineno=48, col_offset=9, end_lineno=48, end_col_offset=23), args=[],
      keywords=[], lineno=48, col_offset=9, end_lineno=48, end_col_offset=25), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=48, col_offset=29, end_lineno=48, end_col_offset=30))],
      body=[If(test=Compare(left=Name(id=''file_type'', ctx=Load(), lineno=49, col_offset=11,
      end_lineno=49, end_col_offset=20), ops=[Eq()], comparators=[Constant(value=''json'',
      lineno=49, col_offset=24, end_lineno=49, end_col_offset=30)], lineno=49, col_offset=11,
      end_lineno=49, end_col_offset=30), body=[Return(value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=50, col_offset=19, end_lineno=50, end_col_offset=23), attr=''load'',
      ctx=Load(), lineno=50, col_offset=19, end_lineno=50, end_col_offset=28), args=[Name(id=''f'',
      ctx=Load(), lineno=50, col_offset=29, end_lineno=50, end_col_offset=30)], keywords=[],
      lineno=50, col_offset=19, end_lineno=50, end_col_offset=31), lineno=50, col_offset=12,
      end_lineno=50, end_col_offset=31)], orelse=[If(test=Compare(left=Name(id=''file_type'',
      ctx=Load(), lineno=51, col_offset=13, end_lineno=51, end_col_offset=22), ops=[Eq()],
      comparators=[Constant(value=''yaml'', lineno=51, col_offset=26, end_lineno=51,
      end_col_offset=32)], lineno=51, col_offset=13, end_lineno=51, end_col_offset=32),
      body=[Return(value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load(), lineno=52,
      col_offset=19, end_lineno=52, end_col_offset=23), attr=''load'', ctx=Load(),
      lineno=52, col_offset=19, end_lineno=52, end_col_offset=28), args=[Name(id=''f'',
      ctx=Load(), lineno=52, col_offset=29, end_lineno=52, end_col_offset=30)], keywords=[],
      lineno=52, col_offset=19, end_lineno=52, end_col_offset=31), lineno=52, col_offset=12,
      end_lineno=52, end_col_offset=31)], orelse=[], lineno=51, col_offset=8, end_lineno=52,
      end_col_offset=31)], lineno=49, col_offset=8, end_lineno=52, end_col_offset=31)],
      lineno=48, col_offset=4, end_lineno=52, end_col_offset=31)], decorator_list=[],
      returns=Name(id=''Dict'', ctx=Load(), lineno=39, col_offset=34, end_lineno=39,
      end_col_offset=38), lineno=39, col_offset=0, end_lineno=52, end_col_offset=31)'
    function_docstring: "Reads a JSON or YAML file and returns its contents as a dictionary.\n\
      Args:\n    file_path (Path): The path to the file.\nReturns:\n    The contents\
      \ of the file as a dictionary."
    function_inputs:
    - file_path
    function_defaults: []
    function_returns:
    - json.load(f)
    - yaml.load(f)
    function_calls:
    - file_path.open
    - json.load
    - yaml.load
    function_variables:
    - file_type
    function_decorators: []
    function_annotations: []
    function_properties: []
  write_file:
    function_name: write_file
    function_code: "def write_file(data: Dict, file_path: Path) -> None:\n    \"\"\
      \"\n    Writes a dictionary to a JSON or YAML file. \n    Args:\n        data\
      \ (Dict): The data to write to the file.\n        file_path (Path): The path\
      \ to the file.\n    \"\"\"\n    file_type = file_path.suffix[1:]\n    with file_path.open('w')\
      \ as f:\n        if file_type == 'json':\n            json.dump(data, f, indent=4)\n\
      \        elif file_type == 'yaml':\n            yaml.SafeDumper.ignore_aliases\
      \ = lambda *args: True\n            yaml.dump(data, f, Dumper=yaml.SafeDumper,\
      \ sort_keys=False)"
    function_ast: 'FunctionDef(name=''write_file'', args=arguments(posonlyargs=[],
      args=[arg(arg=''data'', annotation=Name(id=''Dict'', ctx=Load(), lineno=55,
      col_offset=21, end_lineno=55, end_col_offset=25), lineno=55, col_offset=15,
      end_lineno=55, end_col_offset=25), arg(arg=''file_path'', annotation=Name(id=''Path'',
      ctx=Load(), lineno=55, col_offset=38, end_lineno=55, end_col_offset=42), lineno=55,
      col_offset=27, end_lineno=55, end_col_offset=42)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value=''\n    Writes a dictionary to
      a JSON or YAML file. \n    Args:\n        data (Dict): The data to write to
      the file.\n        file_path (Path): The path to the file.\n    '', lineno=56,
      col_offset=4, end_lineno=61, end_col_offset=7), lineno=56, col_offset=4, end_lineno=61,
      end_col_offset=7), Assign(targets=[Name(id=''file_type'', ctx=Store(), lineno=62,
      col_offset=4, end_lineno=62, end_col_offset=13)], value=Subscript(value=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=62, col_offset=16, end_lineno=62, end_col_offset=25), attr=''suffix'',
      ctx=Load(), lineno=62, col_offset=16, end_lineno=62, end_col_offset=32), slice=Slice(lower=Constant(value=1,
      lineno=62, col_offset=33, end_lineno=62, end_col_offset=34), lineno=62, col_offset=33,
      end_lineno=62, end_col_offset=35), ctx=Load(), lineno=62, col_offset=16, end_lineno=62,
      end_col_offset=36), lineno=62, col_offset=4, end_lineno=62, end_col_offset=36),
      With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=63, col_offset=9, end_lineno=63, end_col_offset=18), attr=''open'',
      ctx=Load(), lineno=63, col_offset=9, end_lineno=63, end_col_offset=23), args=[Constant(value=''w'',
      lineno=63, col_offset=24, end_lineno=63, end_col_offset=27)], keywords=[], lineno=63,
      col_offset=9, end_lineno=63, end_col_offset=28), optional_vars=Name(id=''f'',
      ctx=Store(), lineno=63, col_offset=32, end_lineno=63, end_col_offset=33))],
      body=[If(test=Compare(left=Name(id=''file_type'', ctx=Load(), lineno=64, col_offset=11,
      end_lineno=64, end_col_offset=20), ops=[Eq()], comparators=[Constant(value=''json'',
      lineno=64, col_offset=24, end_lineno=64, end_col_offset=30)], lineno=64, col_offset=11,
      end_lineno=64, end_col_offset=30), body=[Expr(value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=65, col_offset=12, end_lineno=65, end_col_offset=16), attr=''dump'',
      ctx=Load(), lineno=65, col_offset=12, end_lineno=65, end_col_offset=21), args=[Name(id=''data'',
      ctx=Load(), lineno=65, col_offset=22, end_lineno=65, end_col_offset=26), Name(id=''f'',
      ctx=Load(), lineno=65, col_offset=28, end_lineno=65, end_col_offset=29)], keywords=[keyword(arg=''indent'',
      value=Constant(value=4, lineno=65, col_offset=38, end_lineno=65, end_col_offset=39),
      lineno=65, col_offset=31, end_lineno=65, end_col_offset=39)], lineno=65, col_offset=12,
      end_lineno=65, end_col_offset=40), lineno=65, col_offset=12, end_lineno=65,
      end_col_offset=40)], orelse=[If(test=Compare(left=Name(id=''file_type'', ctx=Load(),
      lineno=66, col_offset=13, end_lineno=66, end_col_offset=22), ops=[Eq()], comparators=[Constant(value=''yaml'',
      lineno=66, col_offset=26, end_lineno=66, end_col_offset=32)], lineno=66, col_offset=13,
      end_lineno=66, end_col_offset=32), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id=''yaml'',
      ctx=Load(), lineno=67, col_offset=12, end_lineno=67, end_col_offset=16), attr=''SafeDumper'',
      ctx=Load(), lineno=67, col_offset=12, end_lineno=67, end_col_offset=27), attr=''ignore_aliases'',
      ctx=Store(), lineno=67, col_offset=12, end_lineno=67, end_col_offset=42)], value=Lambda(args=arguments(posonlyargs=[],
      args=[], vararg=arg(arg=''args'', lineno=67, col_offset=53, end_lineno=67, end_col_offset=57),
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True, lineno=67,
      col_offset=59, end_lineno=67, end_col_offset=63), lineno=67, col_offset=45,
      end_lineno=67, end_col_offset=63), lineno=67, col_offset=12, end_lineno=67,
      end_col_offset=63), Expr(value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load(),
      lineno=68, col_offset=12, end_lineno=68, end_col_offset=16), attr=''dump'',
      ctx=Load(), lineno=68, col_offset=12, end_lineno=68, end_col_offset=21), args=[Name(id=''data'',
      ctx=Load(), lineno=68, col_offset=22, end_lineno=68, end_col_offset=26), Name(id=''f'',
      ctx=Load(), lineno=68, col_offset=28, end_lineno=68, end_col_offset=29)], keywords=[keyword(arg=''Dumper'',
      value=Attribute(value=Name(id=''yaml'', ctx=Load(), lineno=68, col_offset=38,
      end_lineno=68, end_col_offset=42), attr=''SafeDumper'', ctx=Load(), lineno=68,
      col_offset=38, end_lineno=68, end_col_offset=53), lineno=68, col_offset=31,
      end_lineno=68, end_col_offset=53), keyword(arg=''sort_keys'', value=Constant(value=False,
      lineno=68, col_offset=65, end_lineno=68, end_col_offset=70), lineno=68, col_offset=55,
      end_lineno=68, end_col_offset=70)], lineno=68, col_offset=12, end_lineno=68,
      end_col_offset=71), lineno=68, col_offset=12, end_lineno=68, end_col_offset=71)],
      orelse=[], lineno=66, col_offset=8, end_lineno=68, end_col_offset=71)], lineno=64,
      col_offset=8, end_lineno=68, end_col_offset=71)], lineno=63, col_offset=4, end_lineno=68,
      end_col_offset=71)], decorator_list=[], returns=Constant(value=None, lineno=55,
      col_offset=47, end_lineno=55, end_col_offset=51), lineno=55, col_offset=0, end_lineno=68,
      end_col_offset=71)'
    function_docstring: "Writes a dictionary to a JSON or YAML file. \nArgs:\n   \
      \ data (Dict): The data to write to the file.\n    file_path (Path): The path\
      \ to the file."
    function_inputs:
    - data
    - file_path
    function_defaults: []
    function_returns: []
    function_calls:
    - file_path.open
    - json.dump
    - yaml.dump
    function_variables:
    - file_type
    function_decorators: []
    function_annotations: []
    function_properties:
    - yaml.SafeDumper.ignore_aliases
  convert_json_to_html:
    function_name: convert_json_to_html
    function_code: "def convert_json_to_html(directory: str) -> None:\n\n    def preserve_spacing(text:\
      \ str, tab_width: int=4) -> str:\n        \"\"\"Preserve spaces and tabs in\
      \ the provided text.\"\"\"\n        return text.replace(' ', '&nbsp;').replace('\\\
      t', '&nbsp;' * tab_width)\n    for json_file in Path(directory).rglob('*.json'):\n\
      \        dataset = read_file(json_file)\n        if not dataset:\n         \
      \   continue\n        html_file = json_file.with_suffix('.html')\n        html_content\
      \ = '\\n        <html>\\n        <head>\\n            <style>\\n           \
      \     table {border-collapse: collapse;width: 100%;}\\n                th, td\
      \ {border: 1px solid black; padding: 8px; text-align: left; white-space: pre-line;}\\\
      n                td:nth-child(2) { width: 50%; overflow-wrap: anywhere;}\\n\
      \            </style>\\n        </head>\\n        <body>\\n            <table>\\\
      n                <thead>\\n                    <tr>\\n        '\n        for\
      \ key in dataset[0].keys():\n            html_content += f'<th>{key}</th>'\n\
      \        html_content += '\\n                    </tr>\\n                </thead>\\\
      n                <tbody>\\n        '\n        for entry in dataset:\n      \
      \      html_content += '<tr>'\n            for key in entry:\n             \
      \   value = escape(str(entry[key]))\n                if key == 'input':\n  \
      \                  value = preserve_spacing(value)\n                value =\
      \ value.replace('\\n', '<br/>')\n                html_content += f'<td>{value}</td>'\n\
      \            html_content += '</tr>'\n        html_content += '\\n         \
      \       </tbody>\\n            </table>\\n        </body>\\n        </html>\\\
      n        '\n        html_file_path = json_file.with_suffix('.html')\n      \
      \  try:\n            with open(html_file_path, 'w', encoding='utf-8') as file:\n\
      \                file.write(html_content)\n        except:\n            logging.save(logging.info(f'Failed\
      \ saving: {html_file_path}'))"
    function_ast: 'FunctionDef(name=''convert_json_to_html'', args=arguments(posonlyargs=[],
      args=[arg(arg=''directory'', annotation=Name(id=''str'', ctx=Load(), lineno=71,
      col_offset=36, end_lineno=71, end_col_offset=39), lineno=71, col_offset=25,
      end_lineno=71, end_col_offset=39)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[FunctionDef(name=''preserve_spacing'', args=arguments(posonlyargs=[],
      args=[arg(arg=''text'', annotation=Name(id=''str'', ctx=Load(), lineno=73, col_offset=31,
      end_lineno=73, end_col_offset=34), lineno=73, col_offset=25, end_lineno=73,
      end_col_offset=34), arg(arg=''tab_width'', annotation=Name(id=''int'', ctx=Load(),
      lineno=73, col_offset=47, end_lineno=73, end_col_offset=50), lineno=73, col_offset=36,
      end_lineno=73, end_col_offset=50)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4,
      lineno=73, col_offset=53, end_lineno=73, end_col_offset=54)]), body=[Expr(value=Constant(value=''Preserve
      spaces and tabs in the provided text.'', lineno=74, col_offset=8, end_lineno=74,
      end_col_offset=60), lineno=74, col_offset=8, end_lineno=74, end_col_offset=60),
      Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''text'',
      ctx=Load(), lineno=75, col_offset=15, end_lineno=75, end_col_offset=19), attr=''replace'',
      ctx=Load(), lineno=75, col_offset=15, end_lineno=75, end_col_offset=27), args=[Constant(value=''
      '', lineno=75, col_offset=28, end_lineno=75, end_col_offset=31), Constant(value=''&nbsp;'',
      lineno=75, col_offset=33, end_lineno=75, end_col_offset=41)], keywords=[], lineno=75,
      col_offset=15, end_lineno=75, end_col_offset=42), attr=''replace'', ctx=Load(),
      lineno=75, col_offset=15, end_lineno=75, end_col_offset=50), args=[Constant(value=''\t'',
      lineno=75, col_offset=51, end_lineno=75, end_col_offset=55), BinOp(left=Constant(value=''&nbsp;'',
      lineno=75, col_offset=57, end_lineno=75, end_col_offset=65), op=Mult(), right=Name(id=''tab_width'',
      ctx=Load(), lineno=75, col_offset=68, end_lineno=75, end_col_offset=77), lineno=75,
      col_offset=57, end_lineno=75, end_col_offset=77)], keywords=[], lineno=75, col_offset=15,
      end_lineno=75, end_col_offset=78), lineno=75, col_offset=8, end_lineno=75, end_col_offset=78)],
      decorator_list=[], returns=Name(id=''str'', ctx=Load(), lineno=73, col_offset=59,
      end_lineno=73, end_col_offset=62), lineno=73, col_offset=4, end_lineno=75, end_col_offset=78),
      For(target=Name(id=''json_file'', ctx=Store(), lineno=77, col_offset=8, end_lineno=77,
      end_col_offset=17), iter=Call(func=Attribute(value=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=77, col_offset=21, end_lineno=77, end_col_offset=25), args=[Name(id=''directory'',
      ctx=Load(), lineno=77, col_offset=26, end_lineno=77, end_col_offset=35)], keywords=[],
      lineno=77, col_offset=21, end_lineno=77, end_col_offset=36), attr=''rglob'',
      ctx=Load(), lineno=77, col_offset=21, end_lineno=77, end_col_offset=42), args=[Constant(value=''*.json'',
      lineno=77, col_offset=43, end_lineno=77, end_col_offset=51)], keywords=[], lineno=77,
      col_offset=21, end_lineno=77, end_col_offset=52), body=[Assign(targets=[Name(id=''dataset'',
      ctx=Store(), lineno=78, col_offset=8, end_lineno=78, end_col_offset=15)], value=Call(func=Name(id=''read_file'',
      ctx=Load(), lineno=78, col_offset=18, end_lineno=78, end_col_offset=27), args=[Name(id=''json_file'',
      ctx=Load(), lineno=78, col_offset=28, end_lineno=78, end_col_offset=37)], keywords=[],
      lineno=78, col_offset=18, end_lineno=78, end_col_offset=38), lineno=78, col_offset=8,
      end_lineno=78, end_col_offset=38), If(test=UnaryOp(op=Not(), operand=Name(id=''dataset'',
      ctx=Load(), lineno=79, col_offset=15, end_lineno=79, end_col_offset=22), lineno=79,
      col_offset=11, end_lineno=79, end_col_offset=22), body=[Continue(lineno=80,
      col_offset=12, end_lineno=80, end_col_offset=20)], orelse=[], lineno=79, col_offset=8,
      end_lineno=80, end_col_offset=20), Assign(targets=[Name(id=''html_file'', ctx=Store(),
      lineno=82, col_offset=8, end_lineno=82, end_col_offset=17)], value=Call(func=Attribute(value=Name(id=''json_file'',
      ctx=Load(), lineno=82, col_offset=20, end_lineno=82, end_col_offset=29), attr=''with_suffix'',
      ctx=Load(), lineno=82, col_offset=20, end_lineno=82, end_col_offset=41), args=[Constant(value=''.html'',
      lineno=82, col_offset=42, end_lineno=82, end_col_offset=49)], keywords=[], lineno=82,
      col_offset=20, end_lineno=82, end_col_offset=50), lineno=82, col_offset=8, end_lineno=82,
      end_col_offset=50), Assign(targets=[Name(id=''html_content'', ctx=Store(), lineno=83,
      col_offset=8, end_lineno=83, end_col_offset=20)], value=Constant(value=''\n        <html>\n        <head>\n            <style>\n                table
      {border-collapse: collapse;width: 100%;}\n                th, td {border: 1px
      solid black; padding: 8px; text-align: left; white-space: pre-line;}\n                td:nth-child(2)
      { width: 50%; overflow-wrap: anywhere;}\n            </style>\n        </head>\n        <body>\n            <table>\n                <thead>\n                    <tr>\n        '',
      lineno=83, col_offset=23, end_lineno=96, end_col_offset=11), lineno=83, col_offset=8,
      end_lineno=96, end_col_offset=11), For(target=Name(id=''key'', ctx=Store(),
      lineno=97, col_offset=12, end_lineno=97, end_col_offset=15), iter=Call(func=Attribute(value=Subscript(value=Name(id=''dataset'',
      ctx=Load(), lineno=97, col_offset=19, end_lineno=97, end_col_offset=26), slice=Constant(value=0,
      lineno=97, col_offset=27, end_lineno=97, end_col_offset=28), ctx=Load(), lineno=97,
      col_offset=19, end_lineno=97, end_col_offset=29), attr=''keys'', ctx=Load(),
      lineno=97, col_offset=19, end_lineno=97, end_col_offset=34), args=[], keywords=[],
      lineno=97, col_offset=19, end_lineno=97, end_col_offset=36), body=[AugAssign(target=Name(id=''html_content'',
      ctx=Store(), lineno=98, col_offset=12, end_lineno=98, end_col_offset=24), op=Add(),
      value=JoinedStr(values=[Constant(value=''<th>'', lineno=98, col_offset=28, end_lineno=98,
      end_col_offset=45), FormattedValue(value=Name(id=''key'', ctx=Load(), lineno=98,
      col_offset=35, end_lineno=98, end_col_offset=38), conversion=-1, lineno=98,
      col_offset=28, end_lineno=98, end_col_offset=45), Constant(value=''</th>'',
      lineno=98, col_offset=28, end_lineno=98, end_col_offset=45)], lineno=98, col_offset=28,
      end_lineno=98, end_col_offset=45), lineno=98, col_offset=12, end_lineno=98,
      end_col_offset=45)], orelse=[], lineno=97, col_offset=8, end_lineno=98, end_col_offset=45),
      AugAssign(target=Name(id=''html_content'', ctx=Store(), lineno=99, col_offset=8,
      end_lineno=99, end_col_offset=20), op=Add(), value=Constant(value=''\n                    </tr>\n                </thead>\n                <tbody>\n        '',
      lineno=99, col_offset=24, end_lineno=103, end_col_offset=11), lineno=99, col_offset=8,
      end_lineno=103, end_col_offset=11), For(target=Name(id=''entry'', ctx=Store(),
      lineno=104, col_offset=12, end_lineno=104, end_col_offset=17), iter=Name(id=''dataset'',
      ctx=Load(), lineno=104, col_offset=21, end_lineno=104, end_col_offset=28), body=[AugAssign(target=Name(id=''html_content'',
      ctx=Store(), lineno=105, col_offset=12, end_lineno=105, end_col_offset=24),
      op=Add(), value=Constant(value=''<tr>'', lineno=105, col_offset=28, end_lineno=105,
      end_col_offset=34), lineno=105, col_offset=12, end_lineno=105, end_col_offset=34),
      For(target=Name(id=''key'', ctx=Store(), lineno=106, col_offset=16, end_lineno=106,
      end_col_offset=19), iter=Name(id=''entry'', ctx=Load(), lineno=106, col_offset=23,
      end_lineno=106, end_col_offset=28), body=[Assign(targets=[Name(id=''value'',
      ctx=Store(), lineno=108, col_offset=16, end_lineno=108, end_col_offset=21)],
      value=Call(func=Name(id=''escape'', ctx=Load(), lineno=108, col_offset=24, end_lineno=108,
      end_col_offset=30), args=[Call(func=Name(id=''str'', ctx=Load(), lineno=108,
      col_offset=31, end_lineno=108, end_col_offset=34), args=[Subscript(value=Name(id=''entry'',
      ctx=Load(), lineno=108, col_offset=35, end_lineno=108, end_col_offset=40), slice=Name(id=''key'',
      ctx=Load(), lineno=108, col_offset=41, end_lineno=108, end_col_offset=44), ctx=Load(),
      lineno=108, col_offset=35, end_lineno=108, end_col_offset=45)], keywords=[],
      lineno=108, col_offset=31, end_lineno=108, end_col_offset=46)], keywords=[],
      lineno=108, col_offset=24, end_lineno=108, end_col_offset=47), lineno=108, col_offset=16,
      end_lineno=108, end_col_offset=47), If(test=Compare(left=Name(id=''key'', ctx=Load(),
      lineno=109, col_offset=19, end_lineno=109, end_col_offset=22), ops=[Eq()], comparators=[Constant(value=''input'',
      lineno=109, col_offset=26, end_lineno=109, end_col_offset=33)], lineno=109,
      col_offset=19, end_lineno=109, end_col_offset=33), body=[Assign(targets=[Name(id=''value'',
      ctx=Store(), lineno=110, col_offset=20, end_lineno=110, end_col_offset=25)],
      value=Call(func=Name(id=''preserve_spacing'', ctx=Load(), lineno=110, col_offset=28,
      end_lineno=110, end_col_offset=44), args=[Name(id=''value'', ctx=Load(), lineno=110,
      col_offset=45, end_lineno=110, end_col_offset=50)], keywords=[], lineno=110,
      col_offset=28, end_lineno=110, end_col_offset=51), lineno=110, col_offset=20,
      end_lineno=110, end_col_offset=51)], orelse=[], lineno=109, col_offset=16, end_lineno=110,
      end_col_offset=51), Assign(targets=[Name(id=''value'', ctx=Store(), lineno=111,
      col_offset=16, end_lineno=111, end_col_offset=21)], value=Call(func=Attribute(value=Name(id=''value'',
      ctx=Load(), lineno=111, col_offset=24, end_lineno=111, end_col_offset=29), attr=''replace'',
      ctx=Load(), lineno=111, col_offset=24, end_lineno=111, end_col_offset=37), args=[Constant(value=''\n'',
      lineno=111, col_offset=38, end_lineno=111, end_col_offset=42), Constant(value=''<br/>'',
      lineno=111, col_offset=44, end_lineno=111, end_col_offset=51)], keywords=[],
      lineno=111, col_offset=24, end_lineno=111, end_col_offset=52), lineno=111, col_offset=16,
      end_lineno=111, end_col_offset=52), AugAssign(target=Name(id=''html_content'',
      ctx=Store(), lineno=112, col_offset=16, end_lineno=112, end_col_offset=28),
      op=Add(), value=JoinedStr(values=[Constant(value=''<td>'', lineno=112, col_offset=32,
      end_lineno=112, end_col_offset=51), FormattedValue(value=Name(id=''value'',
      ctx=Load(), lineno=112, col_offset=39, end_lineno=112, end_col_offset=44), conversion=-1,
      lineno=112, col_offset=32, end_lineno=112, end_col_offset=51), Constant(value=''</td>'',
      lineno=112, col_offset=32, end_lineno=112, end_col_offset=51)], lineno=112,
      col_offset=32, end_lineno=112, end_col_offset=51), lineno=112, col_offset=16,
      end_lineno=112, end_col_offset=51)], orelse=[], lineno=106, col_offset=12, end_lineno=112,
      end_col_offset=51), AugAssign(target=Name(id=''html_content'', ctx=Store(),
      lineno=113, col_offset=12, end_lineno=113, end_col_offset=24), op=Add(), value=Constant(value=''</tr>'',
      lineno=113, col_offset=28, end_lineno=113, end_col_offset=35), lineno=113, col_offset=12,
      end_lineno=113, end_col_offset=35)], orelse=[], lineno=104, col_offset=8, end_lineno=113,
      end_col_offset=35), AugAssign(target=Name(id=''html_content'', ctx=Store(),
      lineno=115, col_offset=8, end_lineno=115, end_col_offset=20), op=Add(), value=Constant(value=''\n                </tbody>\n            </table>\n        </body>\n        </html>\n        '',
      lineno=115, col_offset=24, end_lineno=120, end_col_offset=11), lineno=115, col_offset=8,
      end_lineno=120, end_col_offset=11), Assign(targets=[Name(id=''html_file_path'',
      ctx=Store(), lineno=121, col_offset=8, end_lineno=121, end_col_offset=22)],
      value=Call(func=Attribute(value=Name(id=''json_file'', ctx=Load(), lineno=121,
      col_offset=25, end_lineno=121, end_col_offset=34), attr=''with_suffix'', ctx=Load(),
      lineno=121, col_offset=25, end_lineno=121, end_col_offset=46), args=[Constant(value=''.html'',
      lineno=121, col_offset=47, end_lineno=121, end_col_offset=54)], keywords=[],
      lineno=121, col_offset=25, end_lineno=121, end_col_offset=55), lineno=121, col_offset=8,
      end_lineno=121, end_col_offset=55), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=123, col_offset=17, end_lineno=123, end_col_offset=21), args=[Name(id=''html_file_path'',
      ctx=Load(), lineno=123, col_offset=22, end_lineno=123, end_col_offset=36), Constant(value=''w'',
      lineno=123, col_offset=38, end_lineno=123, end_col_offset=41)], keywords=[keyword(arg=''encoding'',
      value=Constant(value=''utf-8'', lineno=123, col_offset=52, end_lineno=123, end_col_offset=59),
      lineno=123, col_offset=43, end_lineno=123, end_col_offset=59)], lineno=123,
      col_offset=17, end_lineno=123, end_col_offset=60), optional_vars=Name(id=''file'',
      ctx=Store(), lineno=123, col_offset=64, end_lineno=123, end_col_offset=68))],
      body=[Expr(value=Call(func=Attribute(value=Name(id=''file'', ctx=Load(), lineno=124,
      col_offset=16, end_lineno=124, end_col_offset=20), attr=''write'', ctx=Load(),
      lineno=124, col_offset=16, end_lineno=124, end_col_offset=26), args=[Name(id=''html_content'',
      ctx=Load(), lineno=124, col_offset=27, end_lineno=124, end_col_offset=39)],
      keywords=[], lineno=124, col_offset=16, end_lineno=124, end_col_offset=40),
      lineno=124, col_offset=16, end_lineno=124, end_col_offset=40)], lineno=123,
      col_offset=12, end_lineno=124, end_col_offset=40)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=19), attr=''save'',
      ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=24), args=[Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=126, col_offset=25, end_lineno=126, end_col_offset=32), attr=''info'',
      ctx=Load(), lineno=126, col_offset=25, end_lineno=126, end_col_offset=37), args=[JoinedStr(values=[Constant(value=''Failed
      saving: '', lineno=126, col_offset=38, end_lineno=126, end_col_offset=72), FormattedValue(value=Name(id=''html_file_path'',
      ctx=Load(), lineno=126, col_offset=56, end_lineno=126, end_col_offset=70), conversion=-1,
      lineno=126, col_offset=38, end_lineno=126, end_col_offset=72)], lineno=126,
      col_offset=38, end_lineno=126, end_col_offset=72)], keywords=[], lineno=126,
      col_offset=25, end_lineno=126, end_col_offset=73)], keywords=[], lineno=126,
      col_offset=12, end_lineno=126, end_col_offset=74), lineno=126, col_offset=12,
      end_lineno=126, end_col_offset=74)], lineno=125, col_offset=8, end_lineno=126,
      end_col_offset=74)], orelse=[], finalbody=[], lineno=122, col_offset=8, end_lineno=126,
      end_col_offset=74)], orelse=[], lineno=77, col_offset=4, end_lineno=126, end_col_offset=74)],
      decorator_list=[], returns=Constant(value=None, lineno=71, col_offset=44, end_lineno=71,
      end_col_offset=48), lineno=71, col_offset=0, end_lineno=126, end_col_offset=74)'
    function_docstring: null
    function_inputs:
    - directory
    function_defaults: []
    function_returns:
    - text.replace(' ', '&nbsp;').replace('\t', '&nbsp;' * tab_width)
    function_calls:
    - Path
    - logging.info
    - text.replace(' ', '&nbsp;').replace
    - preserve_spacing
    - file.write
    - str
    - escape
    - logging.save
    - dataset[0].keys
    - json_file.with_suffix
    - read_file
    - Path(directory).rglob
    - text.replace
    - open
    - value.replace
    function_variables:
    - dataset
    - html_content
    - html_file_path
    - html_file
    - value
    function_decorators: []
    function_annotations: []
    function_properties: []
  preserve_spacing:
    function_name: preserve_spacing
    function_code: "def preserve_spacing(text: str, tab_width: int=4) -> str:\n  \
      \  \"\"\"Preserve spaces and tabs in the provided text.\"\"\"\n    return text.replace('\
      \ ', '&nbsp;').replace('\\t', '&nbsp;' * tab_width)"
    function_ast: FunctionDef(name='preserve_spacing', args=arguments(posonlyargs=[],
      args=[arg(arg='text', annotation=Name(id='str', ctx=Load(), lineno=73, col_offset=31,
      end_lineno=73, end_col_offset=34), lineno=73, col_offset=25, end_lineno=73,
      end_col_offset=34), arg(arg='tab_width', annotation=Name(id='int', ctx=Load(),
      lineno=73, col_offset=47, end_lineno=73, end_col_offset=50), lineno=73, col_offset=36,
      end_lineno=73, end_col_offset=50)], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4,
      lineno=73, col_offset=53, end_lineno=73, end_col_offset=54)]), body=[Expr(value=Constant(value='Preserve
      spaces and tabs in the provided text.', lineno=74, col_offset=8, end_lineno=74,
      end_col_offset=60), lineno=74, col_offset=8, end_lineno=74, end_col_offset=60),
      Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='text',
      ctx=Load(), lineno=75, col_offset=15, end_lineno=75, end_col_offset=19), attr='replace',
      ctx=Load(), lineno=75, col_offset=15, end_lineno=75, end_col_offset=27), args=[Constant(value='
      ', lineno=75, col_offset=28, end_lineno=75, end_col_offset=31), Constant(value='&nbsp;',
      lineno=75, col_offset=33, end_lineno=75, end_col_offset=41)], keywords=[], lineno=75,
      col_offset=15, end_lineno=75, end_col_offset=42), attr='replace', ctx=Load(),
      lineno=75, col_offset=15, end_lineno=75, end_col_offset=50), args=[Constant(value='\t',
      lineno=75, col_offset=51, end_lineno=75, end_col_offset=55), BinOp(left=Constant(value='&nbsp;',
      lineno=75, col_offset=57, end_lineno=75, end_col_offset=65), op=Mult(), right=Name(id='tab_width',
      ctx=Load(), lineno=75, col_offset=68, end_lineno=75, end_col_offset=77), lineno=75,
      col_offset=57, end_lineno=75, end_col_offset=77)], keywords=[], lineno=75, col_offset=15,
      end_lineno=75, end_col_offset=78), lineno=75, col_offset=8, end_lineno=75, end_col_offset=78)],
      decorator_list=[], returns=Name(id='str', ctx=Load(), lineno=73, col_offset=59,
      end_lineno=73, end_col_offset=62), lineno=73, col_offset=4, end_lineno=75, end_col_offset=78)
    function_docstring: Preserve spaces and tabs in the provided text.
    function_inputs:
    - text
    - tab_width
    function_defaults:
    - '4'
    function_returns:
    - text.replace(' ', '&nbsp;').replace('\t', '&nbsp;' * tab_width)
    function_calls:
    - text.replace(' ', '&nbsp;').replace
    - text.replace
    function_variables: []
    function_decorators: []
    function_annotations: []
    function_properties: []
  combine_json_files:
    function_name: combine_json_files
    function_code: "def combine_json_files(directory: str, html: bool) -> Dict[str,\
      \ List[Dict]]:\n    \"\"\"\n    Combine all JSON files in the output directory\
      \ into 'qa.json' and \n    'instruct.json', and then remove duplicates.\n  \
      \  Args:\n        directory (str): The directory where the output files are\
      \ located.\n    \"\"\"\n    file_names = ['qa.json', 'instruct.json']\n    keys\
      \ = ['question', 'instruction']\n    combined_data = []\n    for file in file_names:\n\
      \        file_path = Path(directory) / file\n        if file_path.exists():\n\
      \            combined_data = read_file(file_path)\n        for json_file in\
      \ Path(directory).rglob(f'*.{file}'):\n            combined_data.extend(read_file(json_file))\n\
      \        combined_data = list({i[keys[file_names.index(file)]]: i for i in combined_data}.values())\n\
      \        write_file(combined_data, file_path)\n        if file == 'qa.json':\n\
      \            qa_data = combined_data.copy()\n        if file == 'instruct.json':\n\
      \            instruct_data = combined_data.copy()\n        purpose_data = []\n\
      \        for item in combined_data:\n            if item[keys[file_names.index(file)]].startswith('Purpose\
      \ of'):\n                purpose_data.append(item)\n        if purpose_data:\n\
      \            purpose_file_path = file_path.with_name(file_path.stem + '_purpose.json')\n\
      \            write_file(purpose_data, purpose_file_path)\n        combined_data\
      \ = []\n    file_names = ['instruct.json', 'instruct_purpose.json']\n    for\
      \ file in file_names:\n        seen_inputs = set()\n        file_path = Path(directory)\
      \ / file\n        if not file_path.exists():\n            continue\n       \
      \ dataset = read_file(file_path)\n        if not dataset:\n            continue\n\
      \        for item in dataset:\n            if item['input'] in seen_inputs:\n\
      \                item['input'] = ''\n            else:\n                seen_inputs.add(item['input'])\n\
      \        cleaned_instruct_file_path = Path(directory) / ('cleaned_' + file)\n\
      \        write_file(dataset, cleaned_instruct_file_path)\n    if html:\n   \
      \     convert_json_to_html(directory)\n    return {'qa_list': qa_data, 'instruct_list':\
      \ instruct_data}"
    function_ast: 'FunctionDef(name=''combine_json_files'', args=arguments(posonlyargs=[],
      args=[arg(arg=''directory'', annotation=Name(id=''str'', ctx=Load(), lineno=129,
      col_offset=34, end_lineno=129, end_col_offset=37), lineno=129, col_offset=23,
      end_lineno=129, end_col_offset=37), arg(arg=''html'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=129, col_offset=45, end_lineno=129, end_col_offset=49), lineno=129,
      col_offset=39, end_lineno=129, end_col_offset=49)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value="\n    Combine all JSON files
      in the output directory into ''qa.json'' and \n    ''instruct.json'', and then
      remove duplicates.\n    Args:\n        directory (str): The directory where
      the output files are located.\n    ", lineno=130, col_offset=4, end_lineno=135,
      end_col_offset=7), lineno=130, col_offset=4, end_lineno=135, end_col_offset=7),
      Assign(targets=[Name(id=''file_names'', ctx=Store(), lineno=136, col_offset=4,
      end_lineno=136, end_col_offset=14)], value=List(elts=[Constant(value=''qa.json'',
      lineno=136, col_offset=18, end_lineno=136, end_col_offset=27), Constant(value=''instruct.json'',
      lineno=136, col_offset=29, end_lineno=136, end_col_offset=44)], ctx=Load(),
      lineno=136, col_offset=17, end_lineno=136, end_col_offset=45), lineno=136, col_offset=4,
      end_lineno=136, end_col_offset=45), Assign(targets=[Name(id=''keys'', ctx=Store(),
      lineno=137, col_offset=4, end_lineno=137, end_col_offset=8)], value=List(elts=[Constant(value=''question'',
      lineno=137, col_offset=12, end_lineno=137, end_col_offset=22), Constant(value=''instruction'',
      lineno=137, col_offset=24, end_lineno=137, end_col_offset=37)], ctx=Load(),
      lineno=137, col_offset=11, end_lineno=137, end_col_offset=38), lineno=137, col_offset=4,
      end_lineno=137, end_col_offset=38), Assign(targets=[Name(id=''combined_data'',
      ctx=Store(), lineno=138, col_offset=4, end_lineno=138, end_col_offset=17)],
      value=List(elts=[], ctx=Load(), lineno=138, col_offset=20, end_lineno=138, end_col_offset=22),
      lineno=138, col_offset=4, end_lineno=138, end_col_offset=22), For(target=Name(id=''file'',
      ctx=Store(), lineno=139, col_offset=8, end_lineno=139, end_col_offset=12), iter=Name(id=''file_names'',
      ctx=Load(), lineno=139, col_offset=16, end_lineno=139, end_col_offset=26), body=[Assign(targets=[Name(id=''file_path'',
      ctx=Store(), lineno=140, col_offset=8, end_lineno=140, end_col_offset=17)],
      value=BinOp(left=Call(func=Name(id=''Path'', ctx=Load(), lineno=140, col_offset=20,
      end_lineno=140, end_col_offset=24), args=[Name(id=''directory'', ctx=Load(),
      lineno=140, col_offset=25, end_lineno=140, end_col_offset=34)], keywords=[],
      lineno=140, col_offset=20, end_lineno=140, end_col_offset=35), op=Div(), right=Name(id=''file'',
      ctx=Load(), lineno=140, col_offset=38, end_lineno=140, end_col_offset=42), lineno=140,
      col_offset=20, end_lineno=140, end_col_offset=42), lineno=140, col_offset=8,
      end_lineno=140, end_col_offset=42), If(test=Call(func=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=141, col_offset=11, end_lineno=141, end_col_offset=20), attr=''exists'',
      ctx=Load(), lineno=141, col_offset=11, end_lineno=141, end_col_offset=27), args=[],
      keywords=[], lineno=141, col_offset=11, end_lineno=141, end_col_offset=29),
      body=[Assign(targets=[Name(id=''combined_data'', ctx=Store(), lineno=142, col_offset=12,
      end_lineno=142, end_col_offset=25)], value=Call(func=Name(id=''read_file'',
      ctx=Load(), lineno=142, col_offset=28, end_lineno=142, end_col_offset=37), args=[Name(id=''file_path'',
      ctx=Load(), lineno=142, col_offset=38, end_lineno=142, end_col_offset=47)],
      keywords=[], lineno=142, col_offset=28, end_lineno=142, end_col_offset=48),
      lineno=142, col_offset=12, end_lineno=142, end_col_offset=48)], orelse=[], lineno=141,
      col_offset=8, end_lineno=142, end_col_offset=48), For(target=Name(id=''json_file'',
      ctx=Store(), lineno=143, col_offset=12, end_lineno=143, end_col_offset=21),
      iter=Call(func=Attribute(value=Call(func=Name(id=''Path'', ctx=Load(), lineno=143,
      col_offset=25, end_lineno=143, end_col_offset=29), args=[Name(id=''directory'',
      ctx=Load(), lineno=143, col_offset=30, end_lineno=143, end_col_offset=39)],
      keywords=[], lineno=143, col_offset=25, end_lineno=143, end_col_offset=40),
      attr=''rglob'', ctx=Load(), lineno=143, col_offset=25, end_lineno=143, end_col_offset=46),
      args=[JoinedStr(values=[Constant(value=''*.'', lineno=143, col_offset=47, end_lineno=143,
      end_col_offset=58), FormattedValue(value=Name(id=''file'', ctx=Load(), lineno=143,
      col_offset=52, end_lineno=143, end_col_offset=56), conversion=-1, lineno=143,
      col_offset=47, end_lineno=143, end_col_offset=58)], lineno=143, col_offset=47,
      end_lineno=143, end_col_offset=58)], keywords=[], lineno=143, col_offset=25,
      end_lineno=143, end_col_offset=59), body=[Expr(value=Call(func=Attribute(value=Name(id=''combined_data'',
      ctx=Load(), lineno=144, col_offset=12, end_lineno=144, end_col_offset=25), attr=''extend'',
      ctx=Load(), lineno=144, col_offset=12, end_lineno=144, end_col_offset=32), args=[Call(func=Name(id=''read_file'',
      ctx=Load(), lineno=144, col_offset=33, end_lineno=144, end_col_offset=42), args=[Name(id=''json_file'',
      ctx=Load(), lineno=144, col_offset=43, end_lineno=144, end_col_offset=52)],
      keywords=[], lineno=144, col_offset=33, end_lineno=144, end_col_offset=53)],
      keywords=[], lineno=144, col_offset=12, end_lineno=144, end_col_offset=54),
      lineno=144, col_offset=12, end_lineno=144, end_col_offset=54)], orelse=[], lineno=143,
      col_offset=8, end_lineno=144, end_col_offset=54), Assign(targets=[Name(id=''combined_data'',
      ctx=Store(), lineno=145, col_offset=8, end_lineno=145, end_col_offset=21)],
      value=Call(func=Name(id=''list'', ctx=Load(), lineno=145, col_offset=24, end_lineno=145,
      end_col_offset=28), args=[Call(func=Attribute(value=DictComp(key=Subscript(value=Name(id=''i'',
      ctx=Load(), lineno=145, col_offset=30, end_lineno=145, end_col_offset=31), slice=Subscript(value=Name(id=''keys'',
      ctx=Load(), lineno=145, col_offset=32, end_lineno=145, end_col_offset=36), slice=Call(func=Attribute(value=Name(id=''file_names'',
      ctx=Load(), lineno=145, col_offset=37, end_lineno=145, end_col_offset=47), attr=''index'',
      ctx=Load(), lineno=145, col_offset=37, end_lineno=145, end_col_offset=53), args=[Name(id=''file'',
      ctx=Load(), lineno=145, col_offset=54, end_lineno=145, end_col_offset=58)],
      keywords=[], lineno=145, col_offset=37, end_lineno=145, end_col_offset=59),
      ctx=Load(), lineno=145, col_offset=32, end_lineno=145, end_col_offset=60), ctx=Load(),
      lineno=145, col_offset=30, end_lineno=145, end_col_offset=61), value=Name(id=''i'',
      ctx=Load(), lineno=145, col_offset=63, end_lineno=145, end_col_offset=64), generators=[comprehension(target=Name(id=''i'',
      ctx=Store(), lineno=145, col_offset=69, end_lineno=145, end_col_offset=70),
      iter=Name(id=''combined_data'', ctx=Load(), lineno=145, col_offset=74, end_lineno=145,
      end_col_offset=87), ifs=[], is_async=0)], lineno=145, col_offset=29, end_lineno=145,
      end_col_offset=88), attr=''values'', ctx=Load(), lineno=145, col_offset=29,
      end_lineno=145, end_col_offset=95), args=[], keywords=[], lineno=145, col_offset=29,
      end_lineno=145, end_col_offset=97)], keywords=[], lineno=145, col_offset=24,
      end_lineno=145, end_col_offset=98), lineno=145, col_offset=8, end_lineno=145,
      end_col_offset=98), Expr(value=Call(func=Name(id=''write_file'', ctx=Load(),
      lineno=146, col_offset=8, end_lineno=146, end_col_offset=18), args=[Name(id=''combined_data'',
      ctx=Load(), lineno=146, col_offset=19, end_lineno=146, end_col_offset=32), Name(id=''file_path'',
      ctx=Load(), lineno=146, col_offset=34, end_lineno=146, end_col_offset=43)],
      keywords=[], lineno=146, col_offset=8, end_lineno=146, end_col_offset=44), lineno=146,
      col_offset=8, end_lineno=146, end_col_offset=44), If(test=Compare(left=Name(id=''file'',
      ctx=Load(), lineno=147, col_offset=11, end_lineno=147, end_col_offset=15), ops=[Eq()],
      comparators=[Constant(value=''qa.json'', lineno=147, col_offset=19, end_lineno=147,
      end_col_offset=28)], lineno=147, col_offset=11, end_lineno=147, end_col_offset=28),
      body=[Assign(targets=[Name(id=''qa_data'', ctx=Store(), lineno=148, col_offset=12,
      end_lineno=148, end_col_offset=19)], value=Call(func=Attribute(value=Name(id=''combined_data'',
      ctx=Load(), lineno=148, col_offset=22, end_lineno=148, end_col_offset=35), attr=''copy'',
      ctx=Load(), lineno=148, col_offset=22, end_lineno=148, end_col_offset=40), args=[],
      keywords=[], lineno=148, col_offset=22, end_lineno=148, end_col_offset=42),
      lineno=148, col_offset=12, end_lineno=148, end_col_offset=42)], orelse=[], lineno=147,
      col_offset=8, end_lineno=148, end_col_offset=42), If(test=Compare(left=Name(id=''file'',
      ctx=Load(), lineno=149, col_offset=11, end_lineno=149, end_col_offset=15), ops=[Eq()],
      comparators=[Constant(value=''instruct.json'', lineno=149, col_offset=19, end_lineno=149,
      end_col_offset=34)], lineno=149, col_offset=11, end_lineno=149, end_col_offset=34),
      body=[Assign(targets=[Name(id=''instruct_data'', ctx=Store(), lineno=150, col_offset=12,
      end_lineno=150, end_col_offset=25)], value=Call(func=Attribute(value=Name(id=''combined_data'',
      ctx=Load(), lineno=150, col_offset=28, end_lineno=150, end_col_offset=41), attr=''copy'',
      ctx=Load(), lineno=150, col_offset=28, end_lineno=150, end_col_offset=46), args=[],
      keywords=[], lineno=150, col_offset=28, end_lineno=150, end_col_offset=48),
      lineno=150, col_offset=12, end_lineno=150, end_col_offset=48)], orelse=[], lineno=149,
      col_offset=8, end_lineno=150, end_col_offset=48), Assign(targets=[Name(id=''purpose_data'',
      ctx=Store(), lineno=153, col_offset=8, end_lineno=153, end_col_offset=20)],
      value=List(elts=[], ctx=Load(), lineno=153, col_offset=23, end_lineno=153, end_col_offset=25),
      lineno=153, col_offset=8, end_lineno=153, end_col_offset=25), For(target=Name(id=''item'',
      ctx=Store(), lineno=154, col_offset=12, end_lineno=154, end_col_offset=16),
      iter=Name(id=''combined_data'', ctx=Load(), lineno=154, col_offset=20, end_lineno=154,
      end_col_offset=33), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=155, col_offset=15, end_lineno=155, end_col_offset=19), slice=Subscript(value=Name(id=''keys'',
      ctx=Load(), lineno=155, col_offset=20, end_lineno=155, end_col_offset=24), slice=Call(func=Attribute(value=Name(id=''file_names'',
      ctx=Load(), lineno=155, col_offset=25, end_lineno=155, end_col_offset=35), attr=''index'',
      ctx=Load(), lineno=155, col_offset=25, end_lineno=155, end_col_offset=41), args=[Name(id=''file'',
      ctx=Load(), lineno=155, col_offset=42, end_lineno=155, end_col_offset=46)],
      keywords=[], lineno=155, col_offset=25, end_lineno=155, end_col_offset=47),
      ctx=Load(), lineno=155, col_offset=20, end_lineno=155, end_col_offset=48), ctx=Load(),
      lineno=155, col_offset=15, end_lineno=155, end_col_offset=49), attr=''startswith'',
      ctx=Load(), lineno=155, col_offset=15, end_lineno=155, end_col_offset=60), args=[Constant(value=''Purpose
      of'', lineno=155, col_offset=61, end_lineno=155, end_col_offset=73)], keywords=[],
      lineno=155, col_offset=15, end_lineno=155, end_col_offset=74), body=[Expr(value=Call(func=Attribute(value=Name(id=''purpose_data'',
      ctx=Load(), lineno=156, col_offset=16, end_lineno=156, end_col_offset=28), attr=''append'',
      ctx=Load(), lineno=156, col_offset=16, end_lineno=156, end_col_offset=35), args=[Name(id=''item'',
      ctx=Load(), lineno=156, col_offset=36, end_lineno=156, end_col_offset=40)],
      keywords=[], lineno=156, col_offset=16, end_lineno=156, end_col_offset=41),
      lineno=156, col_offset=16, end_lineno=156, end_col_offset=41)], orelse=[], lineno=155,
      col_offset=12, end_lineno=156, end_col_offset=41)], orelse=[], lineno=154, col_offset=8,
      end_lineno=156, end_col_offset=41), If(test=Name(id=''purpose_data'', ctx=Load(),
      lineno=157, col_offset=11, end_lineno=157, end_col_offset=23), body=[Assign(targets=[Name(id=''purpose_file_path'',
      ctx=Store(), lineno=158, col_offset=12, end_lineno=158, end_col_offset=29)],
      value=Call(func=Attribute(value=Name(id=''file_path'', ctx=Load(), lineno=158,
      col_offset=32, end_lineno=158, end_col_offset=41), attr=''with_name'', ctx=Load(),
      lineno=158, col_offset=32, end_lineno=158, end_col_offset=51), args=[BinOp(left=Attribute(value=Name(id=''file_path'',
      ctx=Load(), lineno=158, col_offset=52, end_lineno=158, end_col_offset=61), attr=''stem'',
      ctx=Load(), lineno=158, col_offset=52, end_lineno=158, end_col_offset=66), op=Add(),
      right=Constant(value=''_purpose.json'', lineno=158, col_offset=69, end_lineno=158,
      end_col_offset=84), lineno=158, col_offset=52, end_lineno=158, end_col_offset=84)],
      keywords=[], lineno=158, col_offset=32, end_lineno=158, end_col_offset=85),
      lineno=158, col_offset=12, end_lineno=158, end_col_offset=85), Expr(value=Call(func=Name(id=''write_file'',
      ctx=Load(), lineno=159, col_offset=12, end_lineno=159, end_col_offset=22), args=[Name(id=''purpose_data'',
      ctx=Load(), lineno=159, col_offset=23, end_lineno=159, end_col_offset=35), Name(id=''purpose_file_path'',
      ctx=Load(), lineno=159, col_offset=37, end_lineno=159, end_col_offset=54)],
      keywords=[], lineno=159, col_offset=12, end_lineno=159, end_col_offset=55),
      lineno=159, col_offset=12, end_lineno=159, end_col_offset=55)], orelse=[], lineno=157,
      col_offset=8, end_lineno=159, end_col_offset=55), Assign(targets=[Name(id=''combined_data'',
      ctx=Store(), lineno=162, col_offset=8, end_lineno=162, end_col_offset=21)],
      value=List(elts=[], ctx=Load(), lineno=162, col_offset=24, end_lineno=162, end_col_offset=26),
      lineno=162, col_offset=8, end_lineno=162, end_col_offset=26)], orelse=[], lineno=139,
      col_offset=4, end_lineno=162, end_col_offset=26), Assign(targets=[Name(id=''file_names'',
      ctx=Store(), lineno=166, col_offset=4, end_lineno=166, end_col_offset=14)],
      value=List(elts=[Constant(value=''instruct.json'', lineno=166, col_offset=18,
      end_lineno=166, end_col_offset=33), Constant(value=''instruct_purpose.json'',
      lineno=166, col_offset=35, end_lineno=166, end_col_offset=58)], ctx=Load(),
      lineno=166, col_offset=17, end_lineno=166, end_col_offset=59), lineno=166, col_offset=4,
      end_lineno=166, end_col_offset=59), For(target=Name(id=''file'', ctx=Store(),
      lineno=167, col_offset=8, end_lineno=167, end_col_offset=12), iter=Name(id=''file_names'',
      ctx=Load(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=26), body=[Assign(targets=[Name(id=''seen_inputs'',
      ctx=Store(), lineno=168, col_offset=8, end_lineno=168, end_col_offset=19)],
      value=Call(func=Name(id=''set'', ctx=Load(), lineno=168, col_offset=22, end_lineno=168,
      end_col_offset=25), args=[], keywords=[], lineno=168, col_offset=22, end_lineno=168,
      end_col_offset=27), lineno=168, col_offset=8, end_lineno=168, end_col_offset=27),
      Assign(targets=[Name(id=''file_path'', ctx=Store(), lineno=169, col_offset=8,
      end_lineno=169, end_col_offset=17)], value=BinOp(left=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=169, col_offset=20, end_lineno=169, end_col_offset=24), args=[Name(id=''directory'',
      ctx=Load(), lineno=169, col_offset=25, end_lineno=169, end_col_offset=34)],
      keywords=[], lineno=169, col_offset=20, end_lineno=169, end_col_offset=35),
      op=Div(), right=Name(id=''file'', ctx=Load(), lineno=169, col_offset=38, end_lineno=169,
      end_col_offset=42), lineno=169, col_offset=20, end_lineno=169, end_col_offset=42),
      lineno=169, col_offset=8, end_lineno=169, end_col_offset=42), If(test=UnaryOp(op=Not(),
      operand=Call(func=Attribute(value=Name(id=''file_path'', ctx=Load(), lineno=170,
      col_offset=15, end_lineno=170, end_col_offset=24), attr=''exists'', ctx=Load(),
      lineno=170, col_offset=15, end_lineno=170, end_col_offset=31), args=[], keywords=[],
      lineno=170, col_offset=15, end_lineno=170, end_col_offset=33), lineno=170, col_offset=11,
      end_lineno=170, end_col_offset=33), body=[Continue(lineno=171, col_offset=12,
      end_lineno=171, end_col_offset=20)], orelse=[], lineno=170, col_offset=8, end_lineno=171,
      end_col_offset=20), Assign(targets=[Name(id=''dataset'', ctx=Store(), lineno=172,
      col_offset=8, end_lineno=172, end_col_offset=15)], value=Call(func=Name(id=''read_file'',
      ctx=Load(), lineno=172, col_offset=18, end_lineno=172, end_col_offset=27), args=[Name(id=''file_path'',
      ctx=Load(), lineno=172, col_offset=28, end_lineno=172, end_col_offset=37)],
      keywords=[], lineno=172, col_offset=18, end_lineno=172, end_col_offset=38),
      lineno=172, col_offset=8, end_lineno=172, end_col_offset=38), If(test=UnaryOp(op=Not(),
      operand=Name(id=''dataset'', ctx=Load(), lineno=173, col_offset=15, end_lineno=173,
      end_col_offset=22), lineno=173, col_offset=11, end_lineno=173, end_col_offset=22),
      body=[Continue(lineno=174, col_offset=12, end_lineno=174, end_col_offset=20)],
      orelse=[], lineno=173, col_offset=8, end_lineno=174, end_col_offset=20), For(target=Name(id=''item'',
      ctx=Store(), lineno=175, col_offset=12, end_lineno=175, end_col_offset=16),
      iter=Name(id=''dataset'', ctx=Load(), lineno=175, col_offset=20, end_lineno=175,
      end_col_offset=27), body=[If(test=Compare(left=Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=176, col_offset=15, end_lineno=176, end_col_offset=19), slice=Constant(value=''input'',
      lineno=176, col_offset=20, end_lineno=176, end_col_offset=27), ctx=Load(), lineno=176,
      col_offset=15, end_lineno=176, end_col_offset=28), ops=[In()], comparators=[Name(id=''seen_inputs'',
      ctx=Load(), lineno=176, col_offset=32, end_lineno=176, end_col_offset=43)],
      lineno=176, col_offset=15, end_lineno=176, end_col_offset=43), body=[Assign(targets=[Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=177, col_offset=16, end_lineno=177, end_col_offset=20), slice=Constant(value=''input'',
      lineno=177, col_offset=21, end_lineno=177, end_col_offset=28), ctx=Store(),
      lineno=177, col_offset=16, end_lineno=177, end_col_offset=29)], value=Constant(value='''',
      lineno=177, col_offset=32, end_lineno=177, end_col_offset=34), lineno=177, col_offset=16,
      end_lineno=177, end_col_offset=34)], orelse=[Expr(value=Call(func=Attribute(value=Name(id=''seen_inputs'',
      ctx=Load(), lineno=179, col_offset=16, end_lineno=179, end_col_offset=27), attr=''add'',
      ctx=Load(), lineno=179, col_offset=16, end_lineno=179, end_col_offset=31), args=[Subscript(value=Name(id=''item'',
      ctx=Load(), lineno=179, col_offset=32, end_lineno=179, end_col_offset=36), slice=Constant(value=''input'',
      lineno=179, col_offset=37, end_lineno=179, end_col_offset=44), ctx=Load(), lineno=179,
      col_offset=32, end_lineno=179, end_col_offset=45)], keywords=[], lineno=179,
      col_offset=16, end_lineno=179, end_col_offset=46), lineno=179, col_offset=16,
      end_lineno=179, end_col_offset=46)], lineno=176, col_offset=12, end_lineno=179,
      end_col_offset=46)], orelse=[], lineno=175, col_offset=8, end_lineno=179, end_col_offset=46),
      Assign(targets=[Name(id=''cleaned_instruct_file_path'', ctx=Store(), lineno=180,
      col_offset=8, end_lineno=180, end_col_offset=34)], value=BinOp(left=Call(func=Name(id=''Path'',
      ctx=Load(), lineno=180, col_offset=37, end_lineno=180, end_col_offset=41), args=[Name(id=''directory'',
      ctx=Load(), lineno=180, col_offset=42, end_lineno=180, end_col_offset=51)],
      keywords=[], lineno=180, col_offset=37, end_lineno=180, end_col_offset=52),
      op=Div(), right=BinOp(left=Constant(value=''cleaned_'', lineno=180, col_offset=56,
      end_lineno=180, end_col_offset=66), op=Add(), right=Name(id=''file'', ctx=Load(),
      lineno=180, col_offset=68, end_lineno=180, end_col_offset=72), lineno=180, col_offset=56,
      end_lineno=180, end_col_offset=72), lineno=180, col_offset=37, end_lineno=180,
      end_col_offset=73), lineno=180, col_offset=8, end_lineno=180, end_col_offset=73),
      Expr(value=Call(func=Name(id=''write_file'', ctx=Load(), lineno=181, col_offset=8,
      end_lineno=181, end_col_offset=18), args=[Name(id=''dataset'', ctx=Load(), lineno=181,
      col_offset=19, end_lineno=181, end_col_offset=26), Name(id=''cleaned_instruct_file_path'',
      ctx=Load(), lineno=181, col_offset=28, end_lineno=181, end_col_offset=54)],
      keywords=[], lineno=181, col_offset=8, end_lineno=181, end_col_offset=55), lineno=181,
      col_offset=8, end_lineno=181, end_col_offset=55)], orelse=[], lineno=167, col_offset=4,
      end_lineno=181, end_col_offset=55), If(test=Name(id=''html'', ctx=Load(), lineno=184,
      col_offset=7, end_lineno=184, end_col_offset=11), body=[Expr(value=Call(func=Name(id=''convert_json_to_html'',
      ctx=Load(), lineno=185, col_offset=8, end_lineno=185, end_col_offset=28), args=[Name(id=''directory'',
      ctx=Load(), lineno=185, col_offset=29, end_lineno=185, end_col_offset=38)],
      keywords=[], lineno=185, col_offset=8, end_lineno=185, end_col_offset=39), lineno=185,
      col_offset=8, end_lineno=185, end_col_offset=39)], orelse=[], lineno=184, col_offset=4,
      end_lineno=185, end_col_offset=39), Return(value=Dict(keys=[Constant(value=''qa_list'',
      lineno=187, col_offset=12, end_lineno=187, end_col_offset=21), Constant(value=''instruct_list'',
      lineno=187, col_offset=32, end_lineno=187, end_col_offset=47)], values=[Name(id=''qa_data'',
      ctx=Load(), lineno=187, col_offset=23, end_lineno=187, end_col_offset=30), Name(id=''instruct_data'',
      ctx=Load(), lineno=187, col_offset=49, end_lineno=187, end_col_offset=62)],
      lineno=187, col_offset=11, end_lineno=187, end_col_offset=63), lineno=187, col_offset=4,
      end_lineno=187, end_col_offset=63)], decorator_list=[], returns=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=129, col_offset=54, end_lineno=129, end_col_offset=58), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=129, col_offset=59, end_lineno=129, end_col_offset=62), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=129, col_offset=64, end_lineno=129, end_col_offset=68), slice=Name(id=''Dict'',
      ctx=Load(), lineno=129, col_offset=69, end_lineno=129, end_col_offset=73), ctx=Load(),
      lineno=129, col_offset=64, end_lineno=129, end_col_offset=74)], ctx=Load(),
      lineno=129, col_offset=59, end_lineno=129, end_col_offset=74), ctx=Load(), lineno=129,
      col_offset=54, end_lineno=129, end_col_offset=75), lineno=129, col_offset=0,
      end_lineno=187, end_col_offset=63)'
    function_docstring: "Combine all JSON files in the output directory into 'qa.json'\
      \ and \n'instruct.json', and then remove duplicates.\nArgs:\n    directory (str):\
      \ The directory where the output files are located."
    function_inputs:
    - directory
    - html
    function_defaults: []
    function_returns:
    - '{''qa_list'': qa_data, ''instruct_list'': instruct_data}'
    function_calls:
    - Path
    - item[keys[file_names.index(file)]].startswith
    - write_file
    - file_path.with_name
    - set
    - purpose_data.append
    - list
    - file_names.index
    - seen_inputs.add
    - combined_data.extend
    - '{i[keys[file_names.index(file)]]: i for i in combined_data}.values'
    - read_file
    - file_path.exists
    - Path(directory).rglob
    - convert_json_to_html
    - combined_data.copy
    function_variables:
    - dataset
    - instruct_data
    - qa_data
    - file_names
    - file_path
    - cleaned_instruct_file_path
    - seen_inputs
    - purpose_file_path
    - combined_data
    - keys
    - purpose_data
    function_decorators: []
    function_annotations: []
    function_properties: []
  create_code_graph:
    function_name: create_code_graph
    function_code: "def create_code_graph(file_details: Dict, base_name: str, output_subdir:\
      \ Path) -> None:\n    \"\"\"\n    Generate graphs from the file_details and\
      \ save them as PNG images.\n    Args:\n        file_details (dict): The details\
      \ extracted from the Python file.\n        base_name (str): The base name of\
      \ the output files.\n        output_subdir (Path): The subdirectory where the\
      \ output files will be\n            saved.\n    \"\"\"\n    for graph_type in\
      \ ['internal_code_graph', 'entire_code_graph']:\n        output_file = output_subdir\
      \ / f'{base_name}.{graph_type}.png'\n        G = nx.DiGraph()\n        for node_name\
      \ in file_details['file_info'][graph_type]['nodes']:\n            G.add_node(node_name)\n\
      \        for edge in file_details['file_info'][graph_type]['edges']:\n     \
      \       source = edge['source']\n            target = edge['target']\n     \
      \       if source in G.nodes and target in G.nodes:\n                edge_data\
      \ = {}\n                if 'target_inputs' in edge:\n                    edge_data['target_inputs']\
      \ = edge['target_inputs']\n                if 'target_returns' in edge:\n  \
      \                  edge_data['target_returns'] = edge['target_returns']\n  \
      \              G.add_edge(source, target, **edge_data)\n        plt.figure(figsize=(20,\
      \ 20))\n        pos = nx.spring_layout(G)\n        nx.draw(G, pos, with_labels=True,\
      \ font_weight='bold', font_size=8, node_shape='s', node_size=500, width=1, arrowsize=12)\n\
      \        edge_labels = {}\n        for edge in G.edges(data=True):\n       \
      \     label = []\n            if 'target_inputs' in edge[2] and edge[2]['target_inputs']:\n\
      \                label.append(f\"Inputs: {', '.join(edge[2]['target_inputs'])}\"\
      )\n            if 'target_returns' in edge[2] and edge[2]['target_returns']:\n\
      \                label.append(f\"\\nReturns: {', '.join(edge[2]['target_returns'])}\"\
      )\n            edge_labels[edge[0], edge[1]] = '\\n'.join(label)\n        nx.draw_networkx_edge_labels(G,\
      \ pos, edge_labels=edge_labels, font_size=6)\n        plt.savefig(output_file)\n\
      \        plt.close()"
    function_ast: 'FunctionDef(name=''create_code_graph'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load(), lineno=190,
      col_offset=36, end_lineno=190, end_col_offset=40), lineno=190, col_offset=22,
      end_lineno=190, end_col_offset=40), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=190, col_offset=53, end_lineno=190, end_col_offset=56), lineno=190,
      col_offset=42, end_lineno=190, end_col_offset=56), arg(arg=''output_subdir'',
      annotation=Name(id=''Path'', ctx=Load(), lineno=190, col_offset=73, end_lineno=190,
      end_col_offset=77), lineno=190, col_offset=58, end_lineno=190, end_col_offset=77)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Generate
      graphs from the file_details and save them as PNG images.\n    Args:\n        file_details
      (dict): The details extracted from the Python file.\n        base_name (str):
      The base name of the output files.\n        output_subdir (Path): The subdirectory
      where the output files will be\n            saved.\n    '', lineno=191, col_offset=4,
      end_lineno=198, end_col_offset=7), lineno=191, col_offset=4, end_lineno=198,
      end_col_offset=7), For(target=Name(id=''graph_type'', ctx=Store(), lineno=199,
      col_offset=8, end_lineno=199, end_col_offset=18), iter=List(elts=[Constant(value=''internal_code_graph'',
      lineno=199, col_offset=23, end_lineno=199, end_col_offset=44), Constant(value=''entire_code_graph'',
      lineno=199, col_offset=46, end_lineno=199, end_col_offset=65)], ctx=Load(),
      lineno=199, col_offset=22, end_lineno=199, end_col_offset=66), body=[Assign(targets=[Name(id=''output_file'',
      ctx=Store(), lineno=201, col_offset=8, end_lineno=201, end_col_offset=19)],
      value=BinOp(left=Name(id=''output_subdir'', ctx=Load(), lineno=201, col_offset=22,
      end_lineno=201, end_col_offset=35), op=Div(), right=JoinedStr(values=[FormattedValue(value=Name(id=''base_name'',
      ctx=Load(), lineno=201, col_offset=41, end_lineno=201, end_col_offset=50), conversion=-1,
      lineno=201, col_offset=38, end_lineno=201, end_col_offset=69), Constant(value=''.'',
      lineno=201, col_offset=38, end_lineno=201, end_col_offset=69), FormattedValue(value=Name(id=''graph_type'',
      ctx=Load(), lineno=201, col_offset=53, end_lineno=201, end_col_offset=63), conversion=-1,
      lineno=201, col_offset=38, end_lineno=201, end_col_offset=69), Constant(value=''.png'',
      lineno=201, col_offset=38, end_lineno=201, end_col_offset=69)], lineno=201,
      col_offset=38, end_lineno=201, end_col_offset=69), lineno=201, col_offset=22,
      end_lineno=201, end_col_offset=69), lineno=201, col_offset=8, end_lineno=201,
      end_col_offset=69), Assign(targets=[Name(id=''G'', ctx=Store(), lineno=202,
      col_offset=8, end_lineno=202, end_col_offset=9)], value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=202, col_offset=12, end_lineno=202, end_col_offset=14), attr=''DiGraph'',
      ctx=Load(), lineno=202, col_offset=12, end_lineno=202, end_col_offset=22), args=[],
      keywords=[], lineno=202, col_offset=12, end_lineno=202, end_col_offset=24),
      lineno=202, col_offset=8, end_lineno=202, end_col_offset=24), For(target=Name(id=''node_name'',
      ctx=Store(), lineno=203, col_offset=12, end_lineno=203, end_col_offset=21),
      iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=203, col_offset=25, end_lineno=203, end_col_offset=37), slice=Constant(value=''file_info'',
      lineno=203, col_offset=38, end_lineno=203, end_col_offset=49), ctx=Load(), lineno=203,
      col_offset=25, end_lineno=203, end_col_offset=50), slice=Name(id=''graph_type'',
      ctx=Load(), lineno=203, col_offset=51, end_lineno=203, end_col_offset=61), ctx=Load(),
      lineno=203, col_offset=25, end_lineno=203, end_col_offset=62), slice=Constant(value=''nodes'',
      lineno=203, col_offset=63, end_lineno=203, end_col_offset=70), ctx=Load(), lineno=203,
      col_offset=25, end_lineno=203, end_col_offset=71), body=[Expr(value=Call(func=Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=204, col_offset=12, end_lineno=204, end_col_offset=13), attr=''add_node'',
      ctx=Load(), lineno=204, col_offset=12, end_lineno=204, end_col_offset=22), args=[Name(id=''node_name'',
      ctx=Load(), lineno=204, col_offset=23, end_lineno=204, end_col_offset=32)],
      keywords=[], lineno=204, col_offset=12, end_lineno=204, end_col_offset=33),
      lineno=204, col_offset=12, end_lineno=204, end_col_offset=33)], orelse=[], lineno=203,
      col_offset=8, end_lineno=204, end_col_offset=33), For(target=Name(id=''edge'',
      ctx=Store(), lineno=206, col_offset=12, end_lineno=206, end_col_offset=16),
      iter=Subscript(value=Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=206, col_offset=20, end_lineno=206, end_col_offset=32), slice=Constant(value=''file_info'',
      lineno=206, col_offset=33, end_lineno=206, end_col_offset=44), ctx=Load(), lineno=206,
      col_offset=20, end_lineno=206, end_col_offset=45), slice=Name(id=''graph_type'',
      ctx=Load(), lineno=206, col_offset=46, end_lineno=206, end_col_offset=56), ctx=Load(),
      lineno=206, col_offset=20, end_lineno=206, end_col_offset=57), slice=Constant(value=''edges'',
      lineno=206, col_offset=58, end_lineno=206, end_col_offset=65), ctx=Load(), lineno=206,
      col_offset=20, end_lineno=206, end_col_offset=66), body=[Assign(targets=[Name(id=''source'',
      ctx=Store(), lineno=207, col_offset=12, end_lineno=207, end_col_offset=18)],
      value=Subscript(value=Name(id=''edge'', ctx=Load(), lineno=207, col_offset=21,
      end_lineno=207, end_col_offset=25), slice=Constant(value=''source'', lineno=207,
      col_offset=26, end_lineno=207, end_col_offset=34), ctx=Load(), lineno=207, col_offset=21,
      end_lineno=207, end_col_offset=35), lineno=207, col_offset=12, end_lineno=207,
      end_col_offset=35), Assign(targets=[Name(id=''target'', ctx=Store(), lineno=208,
      col_offset=12, end_lineno=208, end_col_offset=18)], value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=208, col_offset=21, end_lineno=208, end_col_offset=25), slice=Constant(value=''target'',
      lineno=208, col_offset=26, end_lineno=208, end_col_offset=34), ctx=Load(), lineno=208,
      col_offset=21, end_lineno=208, end_col_offset=35), lineno=208, col_offset=12,
      end_lineno=208, end_col_offset=35), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''source'',
      ctx=Load(), lineno=209, col_offset=15, end_lineno=209, end_col_offset=21), ops=[In()],
      comparators=[Attribute(value=Name(id=''G'', ctx=Load(), lineno=209, col_offset=25,
      end_lineno=209, end_col_offset=26), attr=''nodes'', ctx=Load(), lineno=209,
      col_offset=25, end_lineno=209, end_col_offset=32)], lineno=209, col_offset=15,
      end_lineno=209, end_col_offset=32), Compare(left=Name(id=''target'', ctx=Load(),
      lineno=209, col_offset=37, end_lineno=209, end_col_offset=43), ops=[In()], comparators=[Attribute(value=Name(id=''G'',
      ctx=Load(), lineno=209, col_offset=47, end_lineno=209, end_col_offset=48), attr=''nodes'',
      ctx=Load(), lineno=209, col_offset=47, end_lineno=209, end_col_offset=54)],
      lineno=209, col_offset=37, end_lineno=209, end_col_offset=54)], lineno=209,
      col_offset=15, end_lineno=209, end_col_offset=54), body=[Assign(targets=[Name(id=''edge_data'',
      ctx=Store(), lineno=210, col_offset=16, end_lineno=210, end_col_offset=25)],
      value=Dict(keys=[], values=[], lineno=210, col_offset=28, end_lineno=210, end_col_offset=30),
      lineno=210, col_offset=16, end_lineno=210, end_col_offset=30), If(test=Compare(left=Constant(value=''target_inputs'',
      lineno=211, col_offset=19, end_lineno=211, end_col_offset=34), ops=[In()], comparators=[Name(id=''edge'',
      ctx=Load(), lineno=211, col_offset=38, end_lineno=211, end_col_offset=42)],
      lineno=211, col_offset=19, end_lineno=211, end_col_offset=42), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=212, col_offset=20, end_lineno=212, end_col_offset=29), slice=Constant(value=''target_inputs'',
      lineno=212, col_offset=30, end_lineno=212, end_col_offset=45), ctx=Store(),
      lineno=212, col_offset=20, end_lineno=212, end_col_offset=46)], value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=212, col_offset=49, end_lineno=212, end_col_offset=53), slice=Constant(value=''target_inputs'',
      lineno=212, col_offset=54, end_lineno=212, end_col_offset=69), ctx=Load(), lineno=212,
      col_offset=49, end_lineno=212, end_col_offset=70), lineno=212, col_offset=20,
      end_lineno=212, end_col_offset=70)], orelse=[], lineno=211, col_offset=16, end_lineno=212,
      end_col_offset=70), If(test=Compare(left=Constant(value=''target_returns'',
      lineno=213, col_offset=19, end_lineno=213, end_col_offset=35), ops=[In()], comparators=[Name(id=''edge'',
      ctx=Load(), lineno=213, col_offset=39, end_lineno=213, end_col_offset=43)],
      lineno=213, col_offset=19, end_lineno=213, end_col_offset=43), body=[Assign(targets=[Subscript(value=Name(id=''edge_data'',
      ctx=Load(), lineno=214, col_offset=20, end_lineno=214, end_col_offset=29), slice=Constant(value=''target_returns'',
      lineno=214, col_offset=30, end_lineno=214, end_col_offset=46), ctx=Store(),
      lineno=214, col_offset=20, end_lineno=214, end_col_offset=47)], value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=214, col_offset=50, end_lineno=214, end_col_offset=54), slice=Constant(value=''target_returns'',
      lineno=214, col_offset=55, end_lineno=214, end_col_offset=71), ctx=Load(), lineno=214,
      col_offset=50, end_lineno=214, end_col_offset=72), lineno=214, col_offset=20,
      end_lineno=214, end_col_offset=72)], orelse=[], lineno=213, col_offset=16, end_lineno=214,
      end_col_offset=72), Expr(value=Call(func=Attribute(value=Name(id=''G'', ctx=Load(),
      lineno=215, col_offset=16, end_lineno=215, end_col_offset=17), attr=''add_edge'',
      ctx=Load(), lineno=215, col_offset=16, end_lineno=215, end_col_offset=26), args=[Name(id=''source'',
      ctx=Load(), lineno=215, col_offset=27, end_lineno=215, end_col_offset=33), Name(id=''target'',
      ctx=Load(), lineno=215, col_offset=35, end_lineno=215, end_col_offset=41)],
      keywords=[keyword(value=Name(id=''edge_data'', ctx=Load(), lineno=215, col_offset=45,
      end_lineno=215, end_col_offset=54), lineno=215, col_offset=43, end_lineno=215,
      end_col_offset=54)], lineno=215, col_offset=16, end_lineno=215, end_col_offset=55),
      lineno=215, col_offset=16, end_lineno=215, end_col_offset=55)], orelse=[], lineno=209,
      col_offset=12, end_lineno=215, end_col_offset=55)], orelse=[], lineno=206, col_offset=8,
      end_lineno=215, end_col_offset=55), Expr(value=Call(func=Attribute(value=Name(id=''plt'',
      ctx=Load(), lineno=218, col_offset=8, end_lineno=218, end_col_offset=11), attr=''figure'',
      ctx=Load(), lineno=218, col_offset=8, end_lineno=218, end_col_offset=18), args=[],
      keywords=[keyword(arg=''figsize'', value=Tuple(elts=[Constant(value=20, lineno=218,
      col_offset=28, end_lineno=218, end_col_offset=30), Constant(value=20, lineno=218,
      col_offset=32, end_lineno=218, end_col_offset=34)], ctx=Load(), lineno=218,
      col_offset=27, end_lineno=218, end_col_offset=35), lineno=218, col_offset=19,
      end_lineno=218, end_col_offset=35)], lineno=218, col_offset=8, end_lineno=218,
      end_col_offset=36), lineno=218, col_offset=8, end_lineno=218, end_col_offset=36),
      Assign(targets=[Name(id=''pos'', ctx=Store(), lineno=219, col_offset=8, end_lineno=219,
      end_col_offset=11)], value=Call(func=Attribute(value=Name(id=''nx'', ctx=Load(),
      lineno=219, col_offset=14, end_lineno=219, end_col_offset=16), attr=''spring_layout'',
      ctx=Load(), lineno=219, col_offset=14, end_lineno=219, end_col_offset=30), args=[Name(id=''G'',
      ctx=Load(), lineno=219, col_offset=31, end_lineno=219, end_col_offset=32)],
      keywords=[], lineno=219, col_offset=14, end_lineno=219, end_col_offset=33),
      lineno=219, col_offset=8, end_lineno=219, end_col_offset=33), Expr(value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=220, col_offset=8, end_lineno=220, end_col_offset=10), attr=''draw'',
      ctx=Load(), lineno=220, col_offset=8, end_lineno=220, end_col_offset=15), args=[Name(id=''G'',
      ctx=Load(), lineno=220, col_offset=16, end_lineno=220, end_col_offset=17), Name(id=''pos'',
      ctx=Load(), lineno=220, col_offset=19, end_lineno=220, end_col_offset=22)],
      keywords=[keyword(arg=''with_labels'', value=Constant(value=True, lineno=220,
      col_offset=36, end_lineno=220, end_col_offset=40), lineno=220, col_offset=24,
      end_lineno=220, end_col_offset=40), keyword(arg=''font_weight'', value=Constant(value=''bold'',
      lineno=220, col_offset=54, end_lineno=220, end_col_offset=60), lineno=220, col_offset=42,
      end_lineno=220, end_col_offset=60), keyword(arg=''font_size'', value=Constant(value=8,
      lineno=220, col_offset=74, end_lineno=220, end_col_offset=75), lineno=220, col_offset=62,
      end_lineno=220, end_col_offset=75), keyword(arg=''node_shape'', value=Constant(value=''s'',
      lineno=220, col_offset=88, end_lineno=220, end_col_offset=91), lineno=220, col_offset=77,
      end_lineno=220, end_col_offset=91), keyword(arg=''node_size'', value=Constant(value=500,
      lineno=220, col_offset=103, end_lineno=220, end_col_offset=106), lineno=220,
      col_offset=93, end_lineno=220, end_col_offset=106), keyword(arg=''width'', value=Constant(value=1,
      lineno=220, col_offset=114, end_lineno=220, end_col_offset=115), lineno=220,
      col_offset=108, end_lineno=220, end_col_offset=115), keyword(arg=''arrowsize'',
      value=Constant(value=12, lineno=220, col_offset=127, end_lineno=220, end_col_offset=129),
      lineno=220, col_offset=117, end_lineno=220, end_col_offset=129)], lineno=220,
      col_offset=8, end_lineno=220, end_col_offset=130), lineno=220, col_offset=8,
      end_lineno=220, end_col_offset=130), Assign(targets=[Name(id=''edge_labels'',
      ctx=Store(), lineno=221, col_offset=8, end_lineno=221, end_col_offset=19)],
      value=Dict(keys=[], values=[], lineno=221, col_offset=22, end_lineno=221, end_col_offset=24),
      lineno=221, col_offset=8, end_lineno=221, end_col_offset=24), For(target=Name(id=''edge'',
      ctx=Store(), lineno=222, col_offset=12, end_lineno=222, end_col_offset=16),
      iter=Call(func=Attribute(value=Name(id=''G'', ctx=Load(), lineno=222, col_offset=20,
      end_lineno=222, end_col_offset=21), attr=''edges'', ctx=Load(), lineno=222,
      col_offset=20, end_lineno=222, end_col_offset=27), args=[], keywords=[keyword(arg=''data'',
      value=Constant(value=True, lineno=222, col_offset=33, end_lineno=222, end_col_offset=37),
      lineno=222, col_offset=28, end_lineno=222, end_col_offset=37)], lineno=222,
      col_offset=20, end_lineno=222, end_col_offset=38), body=[Assign(targets=[Name(id=''label'',
      ctx=Store(), lineno=223, col_offset=12, end_lineno=223, end_col_offset=17)],
      value=List(elts=[], ctx=Load(), lineno=223, col_offset=20, end_lineno=223, end_col_offset=22),
      lineno=223, col_offset=12, end_lineno=223, end_col_offset=22), If(test=BoolOp(op=And(),
      values=[Compare(left=Constant(value=''target_inputs'', lineno=224, col_offset=15,
      end_lineno=224, end_col_offset=30), ops=[In()], comparators=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=224, col_offset=34, end_lineno=224, end_col_offset=38), slice=Constant(value=2,
      lineno=224, col_offset=39, end_lineno=224, end_col_offset=40), ctx=Load(), lineno=224,
      col_offset=34, end_lineno=224, end_col_offset=41)], lineno=224, col_offset=15,
      end_lineno=224, end_col_offset=41), Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=224, col_offset=46, end_lineno=224, end_col_offset=50), slice=Constant(value=2,
      lineno=224, col_offset=51, end_lineno=224, end_col_offset=52), ctx=Load(), lineno=224,
      col_offset=46, end_lineno=224, end_col_offset=53), slice=Constant(value=''target_inputs'',
      lineno=224, col_offset=54, end_lineno=224, end_col_offset=69), ctx=Load(), lineno=224,
      col_offset=46, end_lineno=224, end_col_offset=70)], lineno=224, col_offset=15,
      end_lineno=224, end_col_offset=70), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'',
      ctx=Load(), lineno=225, col_offset=16, end_lineno=225, end_col_offset=21), attr=''append'',
      ctx=Load(), lineno=225, col_offset=16, end_lineno=225, end_col_offset=28), args=[JoinedStr(values=[Constant(value=''Inputs:
      '', lineno=225, col_offset=29, end_lineno=225, end_col_offset=77), FormattedValue(value=Call(func=Attribute(value=Constant(value='',
      '', lineno=225, col_offset=40, end_lineno=225, end_col_offset=44), attr=''join'',
      ctx=Load(), lineno=225, col_offset=40, end_lineno=225, end_col_offset=49), args=[Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=225, col_offset=50, end_lineno=225, end_col_offset=54), slice=Constant(value=2,
      lineno=225, col_offset=55, end_lineno=225, end_col_offset=56), ctx=Load(), lineno=225,
      col_offset=50, end_lineno=225, end_col_offset=57), slice=Constant(value=''target_inputs'',
      lineno=225, col_offset=58, end_lineno=225, end_col_offset=73), ctx=Load(), lineno=225,
      col_offset=50, end_lineno=225, end_col_offset=74)], keywords=[], lineno=225,
      col_offset=40, end_lineno=225, end_col_offset=75), conversion=-1, lineno=225,
      col_offset=29, end_lineno=225, end_col_offset=77)], lineno=225, col_offset=29,
      end_lineno=225, end_col_offset=77)], keywords=[], lineno=225, col_offset=16,
      end_lineno=225, end_col_offset=78), lineno=225, col_offset=16, end_lineno=225,
      end_col_offset=78)], orelse=[], lineno=224, col_offset=12, end_lineno=225, end_col_offset=78),
      If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=''target_returns'',
      lineno=226, col_offset=15, end_lineno=226, end_col_offset=31), ops=[In()], comparators=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=226, col_offset=35, end_lineno=226, end_col_offset=39), slice=Constant(value=2,
      lineno=226, col_offset=40, end_lineno=226, end_col_offset=41), ctx=Load(), lineno=226,
      col_offset=35, end_lineno=226, end_col_offset=42)], lineno=226, col_offset=15,
      end_lineno=226, end_col_offset=42), Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=226, col_offset=47, end_lineno=226, end_col_offset=51), slice=Constant(value=2,
      lineno=226, col_offset=52, end_lineno=226, end_col_offset=53), ctx=Load(), lineno=226,
      col_offset=47, end_lineno=226, end_col_offset=54), slice=Constant(value=''target_returns'',
      lineno=226, col_offset=55, end_lineno=226, end_col_offset=71), ctx=Load(), lineno=226,
      col_offset=47, end_lineno=226, end_col_offset=72)], lineno=226, col_offset=15,
      end_lineno=226, end_col_offset=72), body=[Expr(value=Call(func=Attribute(value=Name(id=''label'',
      ctx=Load(), lineno=227, col_offset=16, end_lineno=227, end_col_offset=21), attr=''append'',
      ctx=Load(), lineno=227, col_offset=16, end_lineno=227, end_col_offset=28), args=[JoinedStr(values=[Constant(value=''\nReturns:
      '', lineno=227, col_offset=29, end_lineno=227, end_col_offset=81), FormattedValue(value=Call(func=Attribute(value=Constant(value='',
      '', lineno=227, col_offset=43, end_lineno=227, end_col_offset=47), attr=''join'',
      ctx=Load(), lineno=227, col_offset=43, end_lineno=227, end_col_offset=52), args=[Subscript(value=Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=227, col_offset=53, end_lineno=227, end_col_offset=57), slice=Constant(value=2,
      lineno=227, col_offset=58, end_lineno=227, end_col_offset=59), ctx=Load(), lineno=227,
      col_offset=53, end_lineno=227, end_col_offset=60), slice=Constant(value=''target_returns'',
      lineno=227, col_offset=61, end_lineno=227, end_col_offset=77), ctx=Load(), lineno=227,
      col_offset=53, end_lineno=227, end_col_offset=78)], keywords=[], lineno=227,
      col_offset=43, end_lineno=227, end_col_offset=79), conversion=-1, lineno=227,
      col_offset=29, end_lineno=227, end_col_offset=81)], lineno=227, col_offset=29,
      end_lineno=227, end_col_offset=81)], keywords=[], lineno=227, col_offset=16,
      end_lineno=227, end_col_offset=82), lineno=227, col_offset=16, end_lineno=227,
      end_col_offset=82)], orelse=[], lineno=226, col_offset=12, end_lineno=227, end_col_offset=82),
      Assign(targets=[Subscript(value=Name(id=''edge_labels'', ctx=Load(), lineno=228,
      col_offset=12, end_lineno=228, end_col_offset=23), slice=Tuple(elts=[Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=228, col_offset=25, end_lineno=228, end_col_offset=29), slice=Constant(value=0,
      lineno=228, col_offset=30, end_lineno=228, end_col_offset=31), ctx=Load(), lineno=228,
      col_offset=25, end_lineno=228, end_col_offset=32), Subscript(value=Name(id=''edge'',
      ctx=Load(), lineno=228, col_offset=34, end_lineno=228, end_col_offset=38), slice=Constant(value=1,
      lineno=228, col_offset=39, end_lineno=228, end_col_offset=40), ctx=Load(), lineno=228,
      col_offset=34, end_lineno=228, end_col_offset=41)], ctx=Load(), lineno=228,
      col_offset=24, end_lineno=228, end_col_offset=42), ctx=Store(), lineno=228,
      col_offset=12, end_lineno=228, end_col_offset=43)], value=Call(func=Attribute(value=Constant(value=''\n'',
      lineno=228, col_offset=46, end_lineno=228, end_col_offset=50), attr=''join'',
      ctx=Load(), lineno=228, col_offset=46, end_lineno=228, end_col_offset=55), args=[Name(id=''label'',
      ctx=Load(), lineno=228, col_offset=56, end_lineno=228, end_col_offset=61)],
      keywords=[], lineno=228, col_offset=46, end_lineno=228, end_col_offset=62),
      lineno=228, col_offset=12, end_lineno=228, end_col_offset=62)], orelse=[], lineno=222,
      col_offset=8, end_lineno=228, end_col_offset=62), Expr(value=Call(func=Attribute(value=Name(id=''nx'',
      ctx=Load(), lineno=229, col_offset=8, end_lineno=229, end_col_offset=10), attr=''draw_networkx_edge_labels'',
      ctx=Load(), lineno=229, col_offset=8, end_lineno=229, end_col_offset=36), args=[Name(id=''G'',
      ctx=Load(), lineno=229, col_offset=37, end_lineno=229, end_col_offset=38), Name(id=''pos'',
      ctx=Load(), lineno=229, col_offset=40, end_lineno=229, end_col_offset=43)],
      keywords=[keyword(arg=''edge_labels'', value=Name(id=''edge_labels'', ctx=Load(),
      lineno=229, col_offset=57, end_lineno=229, end_col_offset=68), lineno=229, col_offset=45,
      end_lineno=229, end_col_offset=68), keyword(arg=''font_size'', value=Constant(value=6,
      lineno=229, col_offset=80, end_lineno=229, end_col_offset=81), lineno=229, col_offset=70,
      end_lineno=229, end_col_offset=81)], lineno=229, col_offset=8, end_lineno=229,
      end_col_offset=82), lineno=229, col_offset=8, end_lineno=229, end_col_offset=82),
      Expr(value=Call(func=Attribute(value=Name(id=''plt'', ctx=Load(), lineno=230,
      col_offset=8, end_lineno=230, end_col_offset=11), attr=''savefig'', ctx=Load(),
      lineno=230, col_offset=8, end_lineno=230, end_col_offset=19), args=[Name(id=''output_file'',
      ctx=Load(), lineno=230, col_offset=20, end_lineno=230, end_col_offset=31)],
      keywords=[], lineno=230, col_offset=8, end_lineno=230, end_col_offset=32), lineno=230,
      col_offset=8, end_lineno=230, end_col_offset=32), Expr(value=Call(func=Attribute(value=Name(id=''plt'',
      ctx=Load(), lineno=231, col_offset=8, end_lineno=231, end_col_offset=11), attr=''close'',
      ctx=Load(), lineno=231, col_offset=8, end_lineno=231, end_col_offset=17), args=[],
      keywords=[], lineno=231, col_offset=8, end_lineno=231, end_col_offset=19), lineno=231,
      col_offset=8, end_lineno=231, end_col_offset=19)], orelse=[], lineno=199, col_offset=4,
      end_lineno=231, end_col_offset=19)], decorator_list=[], returns=Constant(value=None,
      lineno=190, col_offset=82, end_lineno=190, end_col_offset=86), lineno=190, col_offset=0,
      end_lineno=231, end_col_offset=19)'
    function_docstring: "Generate graphs from the file_details and save them as PNG\
      \ images.\nArgs:\n    file_details (dict): The details extracted from the Python\
      \ file.\n    base_name (str): The base name of the output files.\n    output_subdir\
      \ (Path): The subdirectory where the output files will be\n        saved."
    function_inputs:
    - file_details
    - base_name
    - output_subdir
    function_defaults: []
    function_returns: []
    function_calls:
    - nx.DiGraph
    - G.add_node
    - plt.figure
    - nx.draw_networkx_edge_labels
    - label.append
    - plt.savefig
    - G.edges
    - '''\n''.join'
    - ''', ''.join'
    - nx.draw
    - G.add_edge
    - nx.spring_layout
    - plt.close
    function_variables:
    - label
    - source
    - G
    - edge_data
    - pos
    - output_file
    - target
    - edge_labels
    function_decorators: []
    function_annotations: []
    function_properties: []
classes: {}
