[
    {
        "instruction": "Dependencies of Python file: `py2dataset.get_python_file_details.py`?",
        "input": "\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docs_and_comments` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport json\nimport logging\nfrom typing import Dict, List, Optional, Union\nimport networkx as nx\nimport astor\n\ndef remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()\n\n\ndef get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class') # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node) # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {\n            f'{node_type}_name': node.name, \n            f'{node_type}_code': ast.unparse(node),\n            f'{node_type}_ast': ast.dump(node), \n            f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None),\n            f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None,\n            f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None,\n            f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else \"None\" for subnode in node_walk if isinstance(subnode, ast.Return)],\n            f'{node_type}_calls': list(call_data.keys()),\n            f'{node_type}_call_inputs': call_data, \n            f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}),\n            f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()),\n            f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}),\n            f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}),\n        }\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class: # find attributes defined as self.attribute\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and target.value.id == 'self']\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({\n                    'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],\n                    'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\"],\n                    'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [],\n                    'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\" and any(isinstance(decorator, ast.Name) and decorator.id == \"staticmethod\" for decorator in subnode.decorator_list)],\n                    })\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {\n            'file_code': self.code,\n            'file_ast' : ast.dump(node),\n            'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}),\n            'file_functions': list(self.functions.keys()),\n            'file_classes': list(self.classes.keys()),\n        }\n\n        # add file_summary to file_info\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = { 'dependencies': self.file_info['file_dependencies'], 'function_defs' : function_defs, 'class_defs' : class_defs}\n\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified\n\n\ndef code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n\n    # Create lookup dictionaries for function and class method details\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items(): # Extract class name and details\n            G.add_node(class_name) # Add class as a graph node\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}' # Create method fully qualified name\n                G.add_node(qualified_method_name) # Add method as a graph node\n                class_method_details_lookup[qualified_method_name] = method_details  # Store method details\n                G.add_edge(class_name, qualified_method_name) # Add edge from class to method\n\n    # Helper function to extract edge data from target details\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and target in source_details['call_inputs']:\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    # Helper function to add edge with data\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str] = None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    # Helper function to add edges for function or class method calls\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith(\"self.\"):\n                method_name = called.replace(\"self.\", \"\")\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if (\n                called in function_details_lookup or\n                called in class_method_details_lookup or\n                f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup\n            ):\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f\"{called}.__init__\"\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n\n    # Add function nodes to graph and edges for function calls\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n\n    # Add edges for method calls\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n\n    # Add edge data to edges and create node and edges to return\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{\"source\": edge[0], \"target\": edge[1], **edge[2]} for edge in G.edges.data()]\n    return {\"nodes\": nodes, \"edges\": edges}\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\\\"','')\n    return file_details\n",
        "output": "networkx, astor, typing, json, logging, ast"
    },
    {
        "instruction": "Call code graph of Python file: `py2dataset.get_python_file_details.py`?",
        "input": "\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docs_and_comments` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport json\nimport logging\nfrom typing import Dict, List, Optional, Union\nimport networkx as nx\nimport astor\n\ndef remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()\n\n\ndef get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class') # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node) # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {\n            f'{node_type}_name': node.name, \n            f'{node_type}_code': ast.unparse(node),\n            f'{node_type}_ast': ast.dump(node), \n            f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None),\n            f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None,\n            f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None,\n            f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else \"None\" for subnode in node_walk if isinstance(subnode, ast.Return)],\n            f'{node_type}_calls': list(call_data.keys()),\n            f'{node_type}_call_inputs': call_data, \n            f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}),\n            f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()),\n            f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}),\n            f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}),\n        }\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class: # find attributes defined as self.attribute\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and target.value.id == 'self']\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({\n                    'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],\n                    'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\"],\n                    'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [],\n                    'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\" and any(isinstance(decorator, ast.Name) and decorator.id == \"staticmethod\" for decorator in subnode.decorator_list)],\n                    })\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {\n            'file_code': self.code,\n            'file_ast' : ast.dump(node),\n            'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}),\n            'file_functions': list(self.functions.keys()),\n            'file_classes': list(self.classes.keys()),\n        }\n\n        # add file_summary to file_info\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = { 'dependencies': self.file_info['file_dependencies'], 'function_defs' : function_defs, 'class_defs' : class_defs}\n\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified\n\n\ndef code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n\n    # Create lookup dictionaries for function and class method details\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items(): # Extract class name and details\n            G.add_node(class_name) # Add class as a graph node\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}' # Create method fully qualified name\n                G.add_node(qualified_method_name) # Add method as a graph node\n                class_method_details_lookup[qualified_method_name] = method_details  # Store method details\n                G.add_edge(class_name, qualified_method_name) # Add edge from class to method\n\n    # Helper function to extract edge data from target details\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and target in source_details['call_inputs']:\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    # Helper function to add edge with data\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str] = None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    # Helper function to add edges for function or class method calls\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith(\"self.\"):\n                method_name = called.replace(\"self.\", \"\")\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if (\n                called in function_details_lookup or\n                called in class_method_details_lookup or\n                f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup\n            ):\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f\"{called}.__init__\"\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n\n    # Add function nodes to graph and edges for function calls\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n\n    # Add edges for method calls\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n\n    # Add edge data to edges and create node and edges to return\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{\"source\": edge[0], \"target\": edge[1], **edge[2]} for edge in G.edges.data()]\n    return {\"nodes\": nodes, \"edges\": edges}\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\\\"','')\n    return file_details\n",
        "output": "{'nodes': ['CodeVisitor', 'CodeVisitor.__init__', 'CodeVisitor.visit_FunctionDef', 'CodeVisitor.visit_ClassDef', 'CodeVisitor.extract_details', 'CodeVisitor.analyze', 'remove_docs_and_comments', 'get_all_calls', 'code_graph', 'get_edge_data_from_details', 'add_edge_with_data', 'add_edges_for_calls', 'get_python_file_details', 'ast.parse', 'ast.walk', 'isinstance', 'ast.Constant', 'node.value.replace(\\'\"\"\"\\', \\'\\').replace', 'node.value.replace', 'astor.to_source(parsed).strip', 'astor.to_source', 'ast.iter_child_nodes', 'ast.unparse', 'calls.update', 'nx.DiGraph', 'function_details_lookup.update', 'class_def.items', 'G.add_node', \"class_details['method_defs'].items\", 'G.add_edge', 'target_details.get', 'list', 'set', 'class_method_details_lookup.get', 'function_details_lookup.get', 'class_def.keys', 'called.split', 'called.startswith', 'called.replace', 'source_name.split', 'function_details_lookup.items', 'class_method_details_lookup.items', 'G[source][target].update', 'G.edges.data', 'open', 'f.read', 'logging.warning', 'visitor.analyze', \"json.dumps(file_details['file_info']['file_summary']).replace\", 'json.dumps', 'self.generic_visit', 'ast.dump', 'next', 'call_data.keys', \"self.classes[self.current_class].setdefault('class_attributes', []).extend\", 'self.classes[self.current_class].setdefault', 'details.update', 'any', 'self.visit', 'self.functions.keys', 'self.classes.keys', 'self.functions.items', 'self.classes.items', 'class_details.items', 'method_name.startswith', 'len', 'class_defs.append'], 'edges': [{'source': 'CodeVisitor', 'target': 'CodeVisitor.__init__', 'target_inputs': ['self', 'code'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_FunctionDef', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_ClassDef', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.extract_details', 'target_inputs': ['self', 'node', 'node_type'], 'target_returns': ['details']}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.analyze', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor.visit_FunctionDef', 'target': 'CodeVisitor.extract_details', 'target_inputs': ['self', 'node', 'node_type'], 'target_returns': ['details']}, {'source': 'CodeVisitor.visit_FunctionDef', 'target': 'self.generic_visit', 'target_inputs': ['node']}, {'source': 'CodeVisitor.visit_ClassDef', 'target': 'CodeVisitor.extract_details', 'target_inputs': ['self', 'node', 'node_type'], 'target_returns': ['details']}, {'source': 'CodeVisitor.visit_ClassDef', 'target': 'self.generic_visit', 'target_inputs': ['node']}, {'source': 'CodeVisitor.extract_details', 'target': 'list', 'target_inputs': ['{ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}']}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.walk', 'target_inputs': ['node']}, {'source': 'CodeVisitor.extract_details', 'target': 'get_all_calls', 'target_inputs': ['node'], 'target_returns': ['calls']}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.unparse', 'target_inputs': ['base']}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.dump', 'target_inputs': ['node']}, {'source': 'CodeVisitor.extract_details', 'target': 'next', 'target_inputs': ['(n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str))', 'None']}, {'source': 'CodeVisitor.extract_details', 'target': 'isinstance', 'target_inputs': ['decorator', 'ast.Name']}, {'source': 'CodeVisitor.extract_details', 'target': 'call_data.keys', 'target_inputs': []}, {'source': 'CodeVisitor.extract_details', 'target': 'set', 'target_inputs': []}, {'source': 'CodeVisitor.extract_details', 'target': \"self.classes[self.current_class].setdefault('class_attributes', []).extend\", 'target_inputs': ['attributes']}, {'source': 'CodeVisitor.extract_details', 'target': 'self.classes[self.current_class].setdefault', 'target_inputs': [\"'class_attributes'\", '[]']}, {'source': 'CodeVisitor.extract_details', 'target': 'details.update', 'target_inputs': [\"{'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]}\"]}, {'source': 'CodeVisitor.extract_details', 'target': 'any', 'target_inputs': [\"(isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list)\"]}, {'source': 'CodeVisitor.analyze', 'target': 'list', 'target_inputs': ['self.classes.keys()']}, {'source': 'CodeVisitor.analyze', 'target': 'ast.walk', 'target_inputs': ['node']}, {'source': 'CodeVisitor.analyze', 'target': 'self.visit', 'target_inputs': ['node']}, {'source': 'CodeVisitor.analyze', 'target': 'ast.dump', 'target_inputs': ['node']}, {'source': 'CodeVisitor.analyze', 'target': 'isinstance', 'target_inputs': ['subnode', 'ast.ImportFrom']}, {'source': 'CodeVisitor.analyze', 'target': 'self.functions.keys', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'self.classes.keys', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'self.functions.items', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'self.classes.items', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'class_details.items', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'method_name.startswith', 'target_inputs': [\"'class_method_'\"]}, {'source': 'CodeVisitor.analyze', 'target': 'len', 'target_inputs': [\"'class_method_'\"]}, {'source': 'CodeVisitor.analyze', 'target': 'class_defs.append', 'target_inputs': [\"{class_name: {'method_defs': method_defs}}\"]}, {'source': 'CodeVisitor.analyze', 'target': 'remove_docs_and_comments', 'target_inputs': ['ast.unparse(node)'], 'target_returns': ['astor.to_source(parsed).strip()']}, {'source': 'CodeVisitor.analyze', 'target': 'ast.unparse', 'target_inputs': ['node']}, {'source': 'remove_docs_and_comments', 'target': 'ast.parse', 'target_inputs': ['code']}, {'source': 'remove_docs_and_comments', 'target': 'ast.walk', 'target_inputs': ['parsed']}, {'source': 'remove_docs_and_comments', 'target': 'isinstance', 'target_inputs': ['node.value', 'str']}, {'source': 'remove_docs_and_comments', 'target': 'ast.Constant', 'target_inputs': []}, {'source': 'remove_docs_and_comments', 'target': 'node.value.replace(\\'\"\"\"\\', \\'\\').replace', 'target_inputs': ['\"\\'\\'\\'\"', \"''\"]}, {'source': 'remove_docs_and_comments', 'target': 'node.value.replace', 'target_inputs': ['\\'\"\"\"\\'', \"''\"]}, {'source': 'remove_docs_and_comments', 'target': 'astor.to_source(parsed).strip', 'target_inputs': []}, {'source': 'remove_docs_and_comments', 'target': 'astor.to_source', 'target_inputs': ['parsed']}, {'source': 'get_all_calls', 'target': 'ast.iter_child_nodes', 'target_inputs': ['node']}, {'source': 'get_all_calls', 'target': 'isinstance', 'target_inputs': ['child', 'ast.Call']}, {'source': 'get_all_calls', 'target': 'ast.unparse', 'target_inputs': ['arg']}, {'source': 'get_all_calls', 'target': 'calls.update', 'target_inputs': ['get_all_calls(child)']}, {'source': 'get_all_calls', 'target': 'get_all_calls', 'target_inputs': ['child'], 'target_returns': ['calls']}, {'source': 'code_graph', 'target': 'nx.DiGraph', 'target_inputs': []}, {'source': 'code_graph', 'target': 'function_details_lookup.update', 'target_inputs': ['function_def']}, {'source': 'code_graph', 'target': 'class_def.items', 'target_inputs': []}, {'source': 'code_graph', 'target': 'G.add_node', 'target_inputs': ['function_name']}, {'source': 'code_graph', 'target': \"class_details['method_defs'].items\", 'target_inputs': []}, {'source': 'code_graph', 'target': 'G.add_edge', 'target_inputs': ['source', 'target']}, {'source': 'code_graph', 'target': 'target_details.get', 'target_inputs': [\"'returns'\", '[]']}, {'source': 'code_graph', 'target': 'list', 'target_inputs': ['G.nodes']}, {'source': 'code_graph', 'target': 'set', 'target_inputs': [\"target_details.get('returns', [])\"]}, {'source': 'code_graph', 'target': 'class_method_details_lookup.get', 'target_inputs': ['source']}, {'source': 'code_graph', 'target': 'function_details_lookup.get', 'target_inputs': ['source']}, {'source': 'code_graph', 'target': 'get_edge_data_from_details', 'target_inputs': ['target_details', 'source_details', 'target'], 'target_returns': ['edge_data']}, {'source': 'code_graph', 'target': 'class_def.keys', 'target_inputs': []}, {'source': 'code_graph', 'target': 'called.split', 'target_inputs': [\"'.'\"]}, {'source': 'code_graph', 'target': 'called.startswith', 'target_inputs': [\"'self.'\"]}, {'source': 'code_graph', 'target': 'called.replace', 'target_inputs': [\"'self.'\", \"''\"]}, {'source': 'code_graph', 'target': 'source_name.split', 'target_inputs': [\"'.'\"]}, {'source': 'code_graph', 'target': 'add_edge_with_data', 'target_inputs': ['source_name', 'called'], 'target_returns': []}, {'source': 'code_graph', 'target': 'function_details_lookup.items', 'target_inputs': []}, {'source': 'code_graph', 'target': 'add_edges_for_calls', 'target_inputs': ['qualified_method_name', \"details['calls']\"], 'target_returns': []}, {'source': 'code_graph', 'target': 'class_method_details_lookup.items', 'target_inputs': []}, {'source': 'code_graph', 'target': 'G[source][target].update', 'target_inputs': ['edge_data']}, {'source': 'code_graph', 'target': 'G.edges.data', 'target_inputs': []}, {'source': 'get_edge_data_from_details', 'target': 'target_details.get', 'target_inputs': [\"'returns'\", '[]']}, {'source': 'get_edge_data_from_details', 'target': 'list', 'target_inputs': [\"set(target_details.get('returns', []))\"]}, {'source': 'get_edge_data_from_details', 'target': 'set', 'target_inputs': [\"target_details.get('returns', [])\"]}, {'source': 'add_edge_with_data', 'target': 'class_method_details_lookup.get', 'target_inputs': ['source']}, {'source': 'add_edge_with_data', 'target': 'function_details_lookup.get', 'target_inputs': ['source']}, {'source': 'add_edge_with_data', 'target': 'G.add_edge', 'target_inputs': ['source', 'target']}, {'source': 'add_edge_with_data', 'target': 'get_edge_data_from_details', 'target_inputs': ['target_details', 'source_details', 'target'], 'target_returns': ['edge_data']}, {'source': 'add_edges_for_calls', 'target': 'list', 'target_inputs': ['class_def.keys()']}, {'source': 'add_edges_for_calls', 'target': 'class_def.keys', 'target_inputs': []}, {'source': 'add_edges_for_calls', 'target': 'called.split', 'target_inputs': [\"'.'\"]}, {'source': 'add_edges_for_calls', 'target': 'called.startswith', 'target_inputs': [\"'self.'\"]}, {'source': 'add_edges_for_calls', 'target': 'called.replace', 'target_inputs': [\"'self.'\", \"''\"]}, {'source': 'add_edges_for_calls', 'target': 'source_name.split', 'target_inputs': [\"'.'\"]}, {'source': 'add_edges_for_calls', 'target': 'add_edge_with_data', 'target_inputs': ['source_name', 'called'], 'target_returns': []}, {'source': 'add_edges_for_calls', 'target': 'G.add_node', 'target_inputs': ['called']}, {'source': 'get_python_file_details', 'target': 'open', 'target_inputs': ['file_path', \"'r'\"]}, {'source': 'get_python_file_details', 'target': 'f.read', 'target_inputs': []}, {'source': 'get_python_file_details', 'target': 'ast.parse', 'target_inputs': ['code']}, {'source': 'get_python_file_details', 'target': 'logging.warning', 'target_inputs': [\"f'{e} error in file: {file_path}'\"]}, {'source': 'get_python_file_details', 'target': 'CodeVisitor', 'target_inputs': ['code'], 'target_returns': []}, {'source': 'get_python_file_details', 'target': 'visitor.analyze', 'target_inputs': ['tree']}, {'source': 'get_python_file_details', 'target': 'code_graph', 'target_inputs': [\"file_details['file_info']['file_summary']\"], 'target_returns': [\"{'nodes': nodes, 'edges': edges}\", 'edge_data']}, {'source': 'get_python_file_details', 'target': \"json.dumps(file_details['file_info']['file_summary']).replace\", 'target_inputs': ['\\'\"\\'', \"''\"]}, {'source': 'get_python_file_details', 'target': 'json.dumps', 'target_inputs': [\"file_details['file_info']['file_summary']\"]}]}"
    },
    {
        "instruction": "Functions defined in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docs_and_comments` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport json\nimport logging\nfrom typing import Dict, List, Optional, Union\nimport networkx as nx\nimport astor\n\ndef remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()\n\n\ndef get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class') # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node) # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {\n            f'{node_type}_name': node.name, \n            f'{node_type}_code': ast.unparse(node),\n            f'{node_type}_ast': ast.dump(node), \n            f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None),\n            f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None,\n            f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None,\n            f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else \"None\" for subnode in node_walk if isinstance(subnode, ast.Return)],\n            f'{node_type}_calls': list(call_data.keys()),\n            f'{node_type}_call_inputs': call_data, \n            f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}),\n            f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()),\n            f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}),\n            f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}),\n        }\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class: # find attributes defined as self.attribute\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and target.value.id == 'self']\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({\n                    'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],\n                    'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\"],\n                    'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [],\n                    'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\" and any(isinstance(decorator, ast.Name) and decorator.id == \"staticmethod\" for decorator in subnode.decorator_list)],\n                    })\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {\n            'file_code': self.code,\n            'file_ast' : ast.dump(node),\n            'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}),\n            'file_functions': list(self.functions.keys()),\n            'file_classes': list(self.classes.keys()),\n        }\n\n        # add file_summary to file_info\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = { 'dependencies': self.file_info['file_dependencies'], 'function_defs' : function_defs, 'class_defs' : class_defs}\n\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified\n\n\ndef code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n\n    # Create lookup dictionaries for function and class method details\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items(): # Extract class name and details\n            G.add_node(class_name) # Add class as a graph node\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}' # Create method fully qualified name\n                G.add_node(qualified_method_name) # Add method as a graph node\n                class_method_details_lookup[qualified_method_name] = method_details  # Store method details\n                G.add_edge(class_name, qualified_method_name) # Add edge from class to method\n\n    # Helper function to extract edge data from target details\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and target in source_details['call_inputs']:\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    # Helper function to add edge with data\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str] = None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    # Helper function to add edges for function or class method calls\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith(\"self.\"):\n                method_name = called.replace(\"self.\", \"\")\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if (\n                called in function_details_lookup or\n                called in class_method_details_lookup or\n                f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup\n            ):\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f\"{called}.__init__\"\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n\n    # Add function nodes to graph and edges for function calls\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n\n    # Add edges for method calls\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n\n    # Add edge data to edges and create node and edges to return\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{\"source\": edge[0], \"target\": edge[1], **edge[2]} for edge in G.edges.data()]\n    return {\"nodes\": nodes, \"edges\": edges}\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\\\"','')\n    return file_details\n",
        "output": "add_edges_for_calls, remove_docs_and_comments, get_all_calls, code_graph, add_edge_with_data, get_edge_data_from_details, get_python_file_details"
    },
    {
        "instruction": "Classes defined in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docs_and_comments` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport json\nimport logging\nfrom typing import Dict, List, Optional, Union\nimport networkx as nx\nimport astor\n\ndef remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()\n\n\ndef get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class') # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node) # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {\n            f'{node_type}_name': node.name, \n            f'{node_type}_code': ast.unparse(node),\n            f'{node_type}_ast': ast.dump(node), \n            f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None),\n            f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None,\n            f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None,\n            f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else \"None\" for subnode in node_walk if isinstance(subnode, ast.Return)],\n            f'{node_type}_calls': list(call_data.keys()),\n            f'{node_type}_call_inputs': call_data, \n            f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}),\n            f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()),\n            f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}),\n            f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}),\n        }\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class: # find attributes defined as self.attribute\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and target.value.id == 'self']\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({\n                    'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],\n                    'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\"],\n                    'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [],\n                    'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\" and any(isinstance(decorator, ast.Name) and decorator.id == \"staticmethod\" for decorator in subnode.decorator_list)],\n                    })\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {\n            'file_code': self.code,\n            'file_ast' : ast.dump(node),\n            'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}),\n            'file_functions': list(self.functions.keys()),\n            'file_classes': list(self.classes.keys()),\n        }\n\n        # add file_summary to file_info\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = { 'dependencies': self.file_info['file_dependencies'], 'function_defs' : function_defs, 'class_defs' : class_defs}\n\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified\n\n\ndef code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n\n    # Create lookup dictionaries for function and class method details\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items(): # Extract class name and details\n            G.add_node(class_name) # Add class as a graph node\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}' # Create method fully qualified name\n                G.add_node(qualified_method_name) # Add method as a graph node\n                class_method_details_lookup[qualified_method_name] = method_details  # Store method details\n                G.add_edge(class_name, qualified_method_name) # Add edge from class to method\n\n    # Helper function to extract edge data from target details\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and target in source_details['call_inputs']:\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    # Helper function to add edge with data\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str] = None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    # Helper function to add edges for function or class method calls\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith(\"self.\"):\n                method_name = called.replace(\"self.\", \"\")\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if (\n                called in function_details_lookup or\n                called in class_method_details_lookup or\n                f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup\n            ):\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f\"{called}.__init__\"\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n\n    # Add function nodes to graph and edges for function calls\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n\n    # Add edges for method calls\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n\n    # Add edge data to edges and create node and edges to return\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{\"source\": edge[0], \"target\": edge[1], **edge[2]} for edge in G.edges.data()]\n    return {\"nodes\": nodes, \"edges\": edges}\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\\\"','')\n    return file_details\n",
        "output": "CodeVisitor"
    },
    {
        "instruction": "Inputs to function: `remove_docs_and_comments` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()",
        "output": "code"
    },
    {
        "instruction": "Inputs to function: `get_all_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls",
        "output": "node"
    },
    {
        "instruction": "Inputs to function: `code_graph` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}'\n                G.add_node(qualified_method_name)\n                class_method_details_lookup[qualified_method_name] = method_details\n                G.add_edge(class_name, qualified_method_name)\n\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith('self.'):\n                method_name = called.replace('self.', '')\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f'{called}.__init__'\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{'source': edge[0], 'target': edge[1], **edge[2]} for edge in G.edges.data()]\n    return {'nodes': nodes, 'edges': edges}",
        "output": "file_summary"
    },
    {
        "instruction": "Inputs to function: `get_edge_data_from_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n    edge_data = {}\n    if target_details:\n        edge_data['target_inputs'] = target_details.get('inputs')\n        edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n    if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n        edge_data['target_inputs'] = source_details['call_inputs'][target]\n    return edge_data",
        "output": "target, source_details, target_details"
    },
    {
        "instruction": "Inputs to function: `add_edge_with_data` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n    target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n    source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n    G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))",
        "output": "target, source, init_method"
    },
    {
        "instruction": "Inputs to function: `add_edges_for_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def add_edges_for_calls(source_name, calls):\n    class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n    for called in calls:\n        called_class_name = called.split('.')[0]\n        if called.startswith('self.'):\n            method_name = called.replace('self.', '')\n            fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n            if fully_qualified_name in class_method_details_lookup:\n                add_edge_with_data(source_name, fully_qualified_name)\n                continue\n        if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n            add_edge_with_data(source_name, called)\n        elif called_class_name in class_names:\n            init_method = None\n            init_method_name = f'{called}.__init__'\n            if init_method_name in class_method_details_lookup:\n                init_method = init_method_name\n            add_edge_with_data(source_name, called, init_method)\n        else:\n            G.add_node(called)\n            add_edge_with_data(source_name, called)",
        "output": "calls, source_name"
    },
    {
        "instruction": "Inputs to function: `get_python_file_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\"', '')\n    return file_details",
        "output": "file_path"
    },
    {
        "instruction": "Docstring of function: `remove_docs_and_comments` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()",
        "output": "Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code."
    },
    {
        "instruction": "Docstring of function: `get_all_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls",
        "output": "Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values."
    },
    {
        "instruction": "Docstring of function: `code_graph` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}'\n                G.add_node(qualified_method_name)\n                class_method_details_lookup[qualified_method_name] = method_details\n                G.add_edge(class_name, qualified_method_name)\n\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith('self.'):\n                method_name = called.replace('self.', '')\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f'{called}.__init__'\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{'source': edge[0], 'target': edge[1], **edge[2]} for edge in G.edges.data()]\n    return {'nodes': nodes, 'edges': edges}",
        "output": "Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code."
    },
    {
        "instruction": "Docstring of function: `get_python_file_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\"', '')\n    return file_details",
        "output": "Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file."
    },
    {
        "instruction": "Calls made in function: `remove_docs_and_comments` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()",
        "output": ".replace, ast.Constant, astor.to_sourceparsed.strip, ast.walk, astor.to_source, node.value.replace, isinstance, ast.parse"
    },
    {
        "instruction": "Calls made in function: `get_all_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls",
        "output": "ast.unparse, get_all_calls, calls.update, isinstance, ast.iter_child_nodes"
    },
    {
        "instruction": "Calls made in function: `code_graph` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}'\n                G.add_node(qualified_method_name)\n                class_method_details_lookup[qualified_method_name] = method_details\n                G.add_edge(class_name, qualified_method_name)\n\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith('self.'):\n                method_name = called.replace('self.', '')\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f'{called}.__init__'\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{'source': edge[0], 'target': edge[1], **edge[2]} for edge in G.edges.data()]\n    return {'nodes': nodes, 'edges': edges}",
        "output": "set, G.add_edge, nx.DiGraph, add_edge_with_data, function_details_lookup.get, Gsourcetarget.update, called.replace, source_name.split, list, target_details.get, class_detailsmethod_defs.items, called.startswith, class_method_details_lookup.get, class_def.items, function_details_lookup.update, class_method_details_lookup.items, add_edges_for_calls, called.split, class_def.keys, G.add_node, G.edges.data, get_edge_data_from_details, function_details_lookup.items"
    },
    {
        "instruction": "Calls made in function: `get_edge_data_from_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n    edge_data = {}\n    if target_details:\n        edge_data['target_inputs'] = target_details.get('inputs')\n        edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n    if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n        edge_data['target_inputs'] = source_details['call_inputs'][target]\n    return edge_data",
        "output": "set, target_details.get, list"
    },
    {
        "instruction": "Calls made in function: `add_edge_with_data` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n    target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n    source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n    G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))",
        "output": "get_edge_data_from_details, function_details_lookup.get, class_method_details_lookup.get, G.add_edge"
    },
    {
        "instruction": "Calls made in function: `add_edges_for_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def add_edges_for_calls(source_name, calls):\n    class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n    for called in calls:\n        called_class_name = called.split('.')[0]\n        if called.startswith('self.'):\n            method_name = called.replace('self.', '')\n            fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n            if fully_qualified_name in class_method_details_lookup:\n                add_edge_with_data(source_name, fully_qualified_name)\n                continue\n        if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n            add_edge_with_data(source_name, called)\n        elif called_class_name in class_names:\n            init_method = None\n            init_method_name = f'{called}.__init__'\n            if init_method_name in class_method_details_lookup:\n                init_method = init_method_name\n            add_edge_with_data(source_name, called, init_method)\n        else:\n            G.add_node(called)\n            add_edge_with_data(source_name, called)",
        "output": "called.startswith, called.split, class_def.keys, source_name.split, G.add_node, add_edge_with_data, list, called.replace"
    },
    {
        "instruction": "Calls made in function: `get_python_file_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\"', '')\n    return file_details",
        "output": "logging.warning, json.dumpsfile_detailsfile_infofile_summary.replace, code_graph, json.dumps, visitor.analyze, open, CodeVisitor, f.read, ast.parse"
    },
    {
        "instruction": "Variables defined in function: `remove_docs_and_comments` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()",
        "output": "parsed"
    },
    {
        "instruction": "Variables defined in function: `get_all_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls",
        "output": "calls"
    },
    {
        "instruction": "Variables defined in function: `code_graph` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}'\n                G.add_node(qualified_method_name)\n                class_method_details_lookup[qualified_method_name] = method_details\n                G.add_edge(class_name, qualified_method_name)\n\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith('self.'):\n                method_name = called.replace('self.', '')\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f'{called}.__init__'\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{'source': edge[0], 'target': edge[1], **edge[2]} for edge in G.edges.data()]\n    return {'nodes': nodes, 'edges': edges}",
        "output": "G, init_method_name, class_method_details_lookup, class_names, edge_data, source_details, called_class_name, function_details_lookup, qualified_method_name, target_details, init_method, nodes, method_name, fully_qualified_name, edges"
    },
    {
        "instruction": "Variables defined in function: `get_edge_data_from_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n    edge_data = {}\n    if target_details:\n        edge_data['target_inputs'] = target_details.get('inputs')\n        edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n    if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n        edge_data['target_inputs'] = source_details['call_inputs'][target]\n    return edge_data",
        "output": "edge_data"
    },
    {
        "instruction": "Variables defined in function: `add_edge_with_data` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n    target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n    source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n    G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))",
        "output": "source_details, target_details"
    },
    {
        "instruction": "Variables defined in function: `add_edges_for_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def add_edges_for_calls(source_name, calls):\n    class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n    for called in calls:\n        called_class_name = called.split('.')[0]\n        if called.startswith('self.'):\n            method_name = called.replace('self.', '')\n            fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n            if fully_qualified_name in class_method_details_lookup:\n                add_edge_with_data(source_name, fully_qualified_name)\n                continue\n        if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n            add_edge_with_data(source_name, called)\n        elif called_class_name in class_names:\n            init_method = None\n            init_method_name = f'{called}.__init__'\n            if init_method_name in class_method_details_lookup:\n                init_method = init_method_name\n            add_edge_with_data(source_name, called, init_method)\n        else:\n            G.add_node(called)\n            add_edge_with_data(source_name, called)",
        "output": "init_method_name, class_names, called_class_name, init_method, method_name, fully_qualified_name"
    },
    {
        "instruction": "Variables defined in function: `get_python_file_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\"', '')\n    return file_details",
        "output": "file_details, visitor, code, tree"
    },
    {
        "instruction": "Returned items from function: `remove_docs_and_comments` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()",
        "output": "astor.to_sourceparsed.strip"
    },
    {
        "instruction": "Returned items from function: `get_all_calls` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls",
        "output": "calls"
    },
    {
        "instruction": "Returned items from function: `code_graph` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items():\n            G.add_node(class_name)\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}'\n                G.add_node(qualified_method_name)\n                class_method_details_lookup[qualified_method_name] = method_details\n                G.add_edge(class_name, qualified_method_name)\n\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str]=None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith('self.'):\n                method_name = called.replace('self.', '')\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if called in function_details_lookup or called in class_method_details_lookup or f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup:\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f'{called}.__init__'\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{'source': edge[0], 'target': edge[1], **edge[2]} for edge in G.edges.data()]\n    return {'nodes': nodes, 'edges': edges}",
        "output": "edges: edges, edge_data, nodes: nodes"
    },
    {
        "instruction": "Returned items from function: `get_edge_data_from_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n    edge_data = {}\n    if target_details:\n        edge_data['target_inputs'] = target_details.get('inputs')\n        edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n    if source_details and 'call_inputs' in source_details and (target in source_details['call_inputs']):\n        edge_data['target_inputs'] = source_details['call_inputs'][target]\n    return edge_data",
        "output": "edge_data"
    },
    {
        "instruction": "Returned items from function: `get_python_file_details` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\"', '')\n    return file_details",
        "output": "file_details, None"
    },
    {
        "instruction": "Methods defined in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "class CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "visit_FunctionDef, extract_details, analyze, visit_ClassDef"
    },
    {
        "instruction": "Docstring of class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "class CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file."
    },
    {
        "instruction": "Attributes of class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "class CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "file_info, current_class"
    },
    {
        "instruction": "Variables defined in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "class CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "node_walk, attributes, details, function_defs, call_data, class_defs, file_code_simplified, method_defs"
    },
    {
        "instruction": "Inheritance of class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "class CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "ast.NodeVisitor"
    },
    {
        "instruction": "Inputs to method: `__init__` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def __init__(self, code: str):\n    \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n    self.code: str = code\n    self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.file_info: Dict[str, Union[str, List[str]]] = {}\n    self.current_class: str = None",
        "output": "code, self"
    },
    {
        "instruction": "Inputs to method: `visit_FunctionDef` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n    \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n    details = self.extract_details(node, 'method' if self.current_class else 'function')\n    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}'] = details\n    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)",
        "output": "node, self"
    },
    {
        "instruction": "Inputs to method: `visit_ClassDef` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class = None",
        "output": "node, self"
    },
    {
        "instruction": "Inputs to method: `extract_details` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details",
        "output": "node, node_type, self"
    },
    {
        "instruction": "Inputs to method: `analyze` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def analyze(self, node: ast.AST) -> None:\n    \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    self.visit(node)\n    self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n    class_defs = []\n    for class_name, class_details in self.classes.items():\n        method_defs = {}\n        for method_name, details in class_details.items():\n            if method_name.startswith('class_method_'):\n                method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n        class_defs.append({class_name: {'method_defs': method_defs}})\n    self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n    file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n    self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "node, self"
    },
    {
        "instruction": "Docstring of method: `__init__` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def __init__(self, code: str):\n    \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n    self.code: str = code\n    self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.file_info: Dict[str, Union[str, List[str]]] = {}\n    self.current_class: str = None",
        "output": "Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None"
    },
    {
        "instruction": "Docstring of method: `visit_FunctionDef` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n    \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n    details = self.extract_details(node, 'method' if self.current_class else 'function')\n    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}'] = details\n    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)",
        "output": "Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None"
    },
    {
        "instruction": "Docstring of method: `visit_ClassDef` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class = None",
        "output": "Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None"
    },
    {
        "instruction": "Docstring of method: `extract_details` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details",
        "output": "Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node."
    },
    {
        "instruction": "Docstring of method: `analyze` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def analyze(self, node: ast.AST) -> None:\n    \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    self.visit(node)\n    self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n    class_defs = []\n    for class_name, class_details in self.classes.items():\n        method_defs = {}\n        for method_name, details in class_details.items():\n            if method_name.startswith('class_method_'):\n                method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n        class_defs.append({class_name: {'method_defs': method_defs}})\n    self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n    file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n    self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None"
    },
    {
        "instruction": "Calls made in method: `visit_FunctionDef` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n    \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n    details = self.extract_details(node, 'method' if self.current_class else 'function')\n    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}'] = details\n    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)",
        "output": "self.generic_visit, self.extract_details"
    },
    {
        "instruction": "Calls made in method: `visit_ClassDef` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class = None",
        "output": "self.generic_visit, self.extract_details"
    },
    {
        "instruction": "Calls made in method: `extract_details` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details",
        "output": "set, self.classesself.current_class.setdefaultclass_attributes, ast.dump, get_all_calls, ast.walk, ast.unparse, details.update, any, call_data.keys, list, .extend, self.classesself.current_class.setdefault, next, isinstance"
    },
    {
        "instruction": "Calls made in method: `analyze` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def analyze(self, node: ast.AST) -> None:\n    \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    self.visit(node)\n    self.file_info = {'file_code': self.code, 'file_ast': ast.dump(node), 'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys())}\n    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n    class_defs = []\n    for class_name, class_details in self.classes.items():\n        method_defs = {}\n        for method_name, details in class_details.items():\n            if method_name.startswith('class_method_'):\n                method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n        class_defs.append({class_name: {'method_defs': method_defs}})\n    self.file_info['file_summary'] = {'dependencies': self.file_info['file_dependencies'], 'function_defs': function_defs, 'class_defs': class_defs}\n    file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n    self.file_info['file_code_simplified'] = file_code_simplified",
        "output": "remove_docs_and_comments, self.visit, class_defs.append, ast.dump, class_details.items, ast.unparse, ast.walk, method_name.startswith, len, list, self.functions.items, isinstance, self.functions.keys, self.classes.items, self.classes.keys"
    },
    {
        "instruction": "Returns from method: `extract_details` in class: `CodeVisitor` in Python file: `py2dataset.get_python_file_details.py`?",
        "input": "def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_ast': ast.dump(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}), f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__'], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != '__init__' and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details",
        "output": "details"
    },
    {
        "instruction": "1) DESCRIBE the purpose and processing summary of Python file: `py2dataset.get_python_file_details.py`; 2) PROVIDE an itemized and detailed description of each applicable function, class, and method; 3) EXPLAIN what each input, output, and variable does in the code.",
        "input": "\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docs_and_comments` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport json\nimport logging\nfrom typing import Dict, List, Optional, Union\nimport networkx as nx\nimport astor\n\ndef remove_docs_and_comments(code: str) -> str:\n    \"\"\"\n    Remove docstrings and comments from the provided code.\n    Args:\n        code: str: The source code.\n    Returns:\n        str: The sanitized code.\n    \"\"\"\n    parsed = ast.parse(code)\n    for node in ast.walk(parsed):\n        if isinstance(node, (ast.Expr, ast.Constant)) and isinstance(node.value, (ast.Str, ast.Bytes)):\n            node.value = ast.Constant(value='')\n        elif isinstance(node, ast.Constant) and isinstance(node.value, str):\n            node.value = node.value.replace('\"\"\"', '').replace(\"'''\", '')\n    return astor.to_source(parsed).strip()\n\n\ndef get_all_calls(node: ast.AST) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`.\n    Args:\n        node (ast.AST): The node to start the search from.\n    Returns:\n        Dict[str, List[str]]: Dictionary with function calls as keys and arguments as values.\n    \"\"\"\n    calls = {}\n    for child in ast.iter_child_nodes(node):\n        if isinstance(child, ast.Call):\n            calls[ast.unparse(child.func)] = [ast.unparse(arg) for arg in child.args]\n        calls.update(get_all_calls(child))\n    return calls\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None: \n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None: \n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]: \n            Extract details about a node.\n        analyze(node: ast.AST) -> None: \n            Populate file_info with details about the file.\n    \"\"\"\n    def __init__(self, code: str):\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        Returns:\n            None\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        Returns:\n            None\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class') # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node) # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        details = {\n            f'{node_type}_name': node.name, \n            f'{node_type}_code': ast.unparse(node),\n            f'{node_type}_ast': ast.dump(node), \n            f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None),\n            f'{node_type}_inputs': [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None,\n            f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None,\n            f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else \"None\" for subnode in node_walk if isinstance(subnode, ast.Return)],\n            f'{node_type}_calls': list(call_data.keys()),\n            f'{node_type}_call_inputs': call_data, \n            f'{node_type}_variables': list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}),\n            f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()),\n            f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}),\n            f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}),\n        }\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class: # find attributes defined as self.attribute\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and target.value.id == 'self']\n                self.classes[self.current_class].setdefault('class_attributes', []).extend(attributes)\n            if node_type == 'class':\n                details.update({\n                    'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)],\n                    'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\"],\n                    'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [],\n                    'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and subnode.name != \"__init__\" and any(isinstance(decorator, ast.Name) and decorator.id == \"staticmethod\" for decorator in subnode.decorator_list)],\n                    })\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST rooted at 'node', create a list of all nodes within the current file, and populate 'file_info' with file details\n        Args:\n            node: ast.AST: The node to analyze.\n        Returns:\n            None\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        self.visit(node)\n        self.file_info = {\n            'file_code': self.code,\n            'file_ast' : ast.dump(node),\n            'file_dependencies': list({alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}),\n            'file_functions': list(self.functions.keys()),\n            'file_classes': list(self.classes.keys()),\n        }\n\n        # add file_summary to file_info\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = []\n        for class_name, class_details in self.classes.items():\n            method_defs = {}\n            for method_name, details in class_details.items():\n                if method_name.startswith('class_method_'):\n                    method_defs[method_name[len('class_method_'):]] = {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']}\n            class_defs.append({class_name: {'method_defs': method_defs}})\n        self.file_info['file_summary'] = { 'dependencies': self.file_info['file_dependencies'], 'function_defs' : function_defs, 'class_defs' : class_defs}\n\n        file_code_simplified = remove_docs_and_comments(ast.unparse(node))\n        self.file_info['file_code_simplified'] = file_code_simplified\n\n\ndef code_graph(file_summary: Dict[str, Union[Dict, str]]) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"\n    Create a dictionary representation of file details.\n    Args:\n        file_summary: Dict[str, Union[Dict, str]]: The details extracted from the file.\n    Returns:\n        dict: A dictionary with nodes and edges representing the relationships in the code.\n    \"\"\"\n    G = nx.DiGraph()\n\n    # Create lookup dictionaries for function and class method details\n    function_details_lookup = {}\n    for function_def in file_summary['function_defs']:\n        function_details_lookup.update(function_def)\n    class_method_details_lookup = {}\n    for class_def in file_summary['class_defs']:\n        for class_name, class_details in class_def.items(): # Extract class name and details\n            G.add_node(class_name) # Add class as a graph node\n            for method_name, method_details in class_details['method_defs'].items():\n                qualified_method_name = f'{class_name}.{method_name}' # Create method fully qualified name\n                G.add_node(qualified_method_name) # Add method as a graph node\n                class_method_details_lookup[qualified_method_name] = method_details  # Store method details\n                G.add_edge(class_name, qualified_method_name) # Add edge from class to method\n\n    # Helper function to extract edge data from target details\n    def get_edge_data_from_details(target_details: dict, source_details: dict, target: str) -> dict:\n        edge_data = {}\n        if target_details:\n            edge_data['target_inputs'] = target_details.get('inputs')\n            edge_data['target_returns'] = list(set(target_details.get('returns', [])))\n        if source_details and 'call_inputs' in source_details and target in source_details['call_inputs']:\n            edge_data['target_inputs'] = source_details['call_inputs'][target]\n        return edge_data\n\n    # Helper function to add edge with data\n    def add_edge_with_data(source: str, target: str, init_method: Optional[str] = None) -> None:\n        target_details = class_method_details_lookup.get(init_method or target) or function_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        G.add_edge(source, target, **get_edge_data_from_details(target_details, source_details, target))\n\n    # Helper function to add edges for function or class method calls\n    def add_edges_for_calls(source_name, calls):\n        class_names = [list(class_def.keys())[0] for class_def in file_summary['class_defs']]\n        for called in calls:\n            called_class_name = called.split('.')[0]\n            if called.startswith(\"self.\"):\n                method_name = called.replace(\"self.\", \"\")\n                fully_qualified_name = f\"{source_name.split('.')[0]}.{method_name}\"\n                if fully_qualified_name in class_method_details_lookup:\n                    add_edge_with_data(source_name, fully_qualified_name)\n                    continue\n            if (\n                called in function_details_lookup or\n                called in class_method_details_lookup or\n                f\"{source_name.split('.')[0]}.{called}\" in class_method_details_lookup\n            ):\n                add_edge_with_data(source_name, called)\n            elif called_class_name in class_names:\n                init_method = None\n                init_method_name = f\"{called}.__init__\"\n                if init_method_name in class_method_details_lookup:\n                    init_method = init_method_name\n                add_edge_with_data(source_name, called, init_method)\n            else:\n                G.add_node(called)\n                add_edge_with_data(source_name, called)\n\n    # Add function nodes to graph and edges for function calls\n    for function_name in function_details_lookup:\n        G.add_node(function_name)\n    for func_name, details in function_details_lookup.items():\n        add_edges_for_calls(func_name, details['calls'])\n\n    # Add edges for method calls\n    for qualified_method_name, details in class_method_details_lookup.items():\n        add_edges_for_calls(qualified_method_name, details['calls'])\n\n    # Add edge data to edges and create node and edges to return\n    for edge in G.edges:\n        source, target = edge\n        target_details = function_details_lookup.get(target) or class_method_details_lookup.get(target)\n        source_details = function_details_lookup.get(source) or class_method_details_lookup.get(source)\n        edge_data = get_edge_data_from_details(target_details, source_details, target)\n        G[source][target].update(edge_data)\n    nodes = list(G.nodes)\n    edges = [{\"source\": edge[0], \"target\": edge[1], **edge[2]} for edge in G.edges.data()]\n    return {\"nodes\": nodes, \"edges\": edges}\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_details['file_info']['entire_code_graph'] = code_graph(file_details['file_info']['file_summary'])\n    file_details['file_info']['file_summary'] = json.dumps(file_details['file_info']['file_summary']).replace('\\\"','')\n    return file_details\n",
        "output": "The purpose of `py2dataset.get_python_file_details.py` is to extract file details from a Python source code file using the AST (Abstract Syntax Tree). The processing summary includes the following steps: \n1. Removing docstrings and comments from the provided code using `remove_docs_and_comments` function; \n2. Recursively finding all function calls in the subtree rooted at a given node using `get_all_calls`; \n3. Extracting details about functions, classes, and their methods using the `CodeVisitor` class that inherits from `ast.NodeVisitor`; \n4. Constructing a directed graph with nodes and edges using networkx library; \n5. Defining elements such as function nodes, class nodes, and method nodes; \n6. Specifying edges to represent relationships between the nodes; \n7. Returning a dictionary representation of the code call graph. \n\n#### Functions: \n- `remove_docs_and_comments` takes in a Python source code string as input and removes docstrings and comments from it, returning the sanitized code. It uses `ast.parse` to parse the code into an AST object, then iterates through each node of the tree and replaces any string nodes with empty strings or bytes objects with empty strings. This function is used in `get_python_file_details`. \n- `get_all_calls` takes in a node of type ast.AST as input and recursively finds all function calls in the subtree rooted at that node, returning a dictionary of all function calls in the subtree with their arguments. This function is used in `visit_FunctionDef`, where it will add an entry to `function_defs` dict or class attribute details when extracting functions and methods using the `extract_details` method; \n- `CodeVisitor` class accepts source code as input when instantiated, uses the AST to extract details about the code, and inherits from `ast.NodeVisitor`. It has implemented `visit_FunctionDef` to gather details about functions and methods in classes. When visiting a FunctionDef node, it calls `extract_details` method to populate either `functions` or `classes[current_class]` dict depending on whether it is inside a class definition or not. It also implements `visit_ClassDef` to gather details about classes and maintains the current class context using the attribute 'current_class'. \n- `extract_details` method takes in a node of type ast.AST and its type, and extracts various details such as function/method name, code representation, AST representation, docstring, input parameters (for functions and methods), defaults, return statements, calls, and the attributes or annotations present within that specific node's body; it adds all extracted data to the current context using either `functions` or `classes[current_class]` dict. If inside a class definition, it also populates `class_attributes`, `class_methods`, `class_inheritance`, and `class_static_methods`. \n- `analyze` method of CodeVisitor class takes in the current node (typically a FileAST node), analyzes each AST node to populate `file_info` dict with file details, such as dependencies, function names, class names, and their methods. It also creates a simplified version of the code without comments or docstrings using `remove_docs_and_comments`. \n- `code_graph` takes in the file summary (a dictionary containing all extracted information) and constructs a directed graph representing relationships between different functions and classes with method calls. This is done by first adding class nodes and method nodes, then iterating through each function/method to add edges for their respective calls. It uses `add_edges_for_calls` helper function to handle special cases such as calling methods within the same class or calling a constructor of another class. \n- `get_python_file_details` takes in a file path, extracts information using the AST and the `CodeVisitor` class, and returns a dictionary encompassing all extracted details, including the entire code graph as a dictionary representation. It uses `code_graph` to create the call graph, and then adds it to the final output dict. \n\n#### Variables: \n- `file_path`: The path to the Python file. Used in `get_python_file_details`.\n- `calls`: Dictionary of all function calls in a given node. Used in `get_all_calls` and `add_edges_for_calls`. \n- `code`: The source code. Used in `remove_docs_and_comments`, `CodeVisitor.__init__`, and `analyze`. \n- `node`: AST node being visited. Used in `visit_FunctionDef` and `visit_ClassDef`. \n- `details`: Dict containing extracted information about a given function/class definition, used in `extract_details` and `CodeVisitor.__init__`. \n- `node_walk`: List of all nodes within the AST. Used in `get_all_calls`, `visit_FunctionDef`, and `visit_ClassDef`. \n- `function_defs`: Dict containing details about functions, used in `code_graph` to create the final graph. \n- `class_defs`: List of dicts containing details about each class defined in the code, used in `code_graph` to create the final graph. \n- `G`: Directed graph created using networkx library. Used in `code_graph`. \n- `edge_data`: Dict containing edge data for a given node, used in `add_edge_with_data` and `get_edge_data_from_details`. \n- `file_info`: Dict containing file details such as dependencies, function names, class names, and their methods. Used in `analyze`, `code_graph`, and `get_python_file_details`. \n- `visitor`: Instance of the `CodeVisitor` class. Used in `get_python_file_details` to populate `functions` and `classes` attributes, then analyze the AST tree. \n- `current_class`: The current class being visited. Used in `visit_ClassDef`. \n- `qualified_method_name`: Fully qualified name of a method (e.g., `ClassName.method_name`). Used in `add_edges_for_calls` and `CodeVisitor.__init__`. \n- `function_details_lookup`: Dict containing details about all functions, used in `code_graph` to create the final graph. \n- `class_method_details_lookup`: Dict containing details about methods of each class, used in `add_edges_for_calls`. \n- `source_name`: Name of the source node (either a function or method). Used in `add_edge_with_data` and `add_edges_for_calls` when dealing with nested class definitions.\n#### Returns:\nThe `code_graph` function returns a dictionary representation of the code call graph, containing nodes and edges between them. The nodes are all functions/methods defined in the file, and the edges represent relationships between them (e.g., calling one another). Each edge has additional data such as input parameters, return values, and target inputs for each call. \nThe `get_python_file_details` function returns a dictionary containing information about the Python source code, including its dependencies, functions, classes, and their methods, as well as the entire code graph in a dictionary representation."
    }
]