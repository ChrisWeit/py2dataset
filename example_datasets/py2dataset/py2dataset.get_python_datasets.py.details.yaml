file_info:
  file_code: "\"\"\"\nGenerates JSON format question-answer pairs and instructions\
    \ for a Python file\nRequirements:\n[req01] The `DatasetGenerator` class shall:\n\
    \        a. Parse a Python file along with a list of questions to produce JSON-formatted\
    \ question-answer pairs and instructions.\n        b. Add the produced question-answer\
    \ pairs to its `qa_list` attribute.\n        c. Append the generated instructions\
    \ to the `instruct_list` attribute.\n        d. Handle exceptions that might arise\
    \ during the loading of the language model.\n        e. Use the `generate` method\
    \ to generate and provide the `qa_list` and `instruct_list`.\n        f. Utilize\
    \ the `get_model` function to load a specified language model based on a configuration\
    \ file.\n        g. Deploy the loaded language model to generate answers to the\
    \ questions.\n        h. Handle exceptions that may arise during the generation\
    \ of answers.\n        i. Process questions that relate to a file, function, class,\
    \ or method.\n        j. Generate a response for the purpose of a variable when\
    \ the question type corresponds to this and `use_llm` is set to True.\n      \
    \  k. Produce answers for all questions present in the supplied list, appending\
    \ the responses to both `qa_list` and `instruct_list`.\n        l. Utilize the\
    \ `clean_and_get_unique_elements` method to cleanse an input string and provide\
    \ a string of unique elements.\n        m. Use the `add_to_list` method to add\
    \ a generated response to a list.\n        n. Obtain a response from the language\
    \ model by using the `get_response_from_llm` method when `use_llm` is True.\n\
    \        o. Handle any exceptions that may arise during the response generation\
    \ from the language model.\n        p. Incorporate the file summary into the context\
    \ for generating the instruction list if the `use_summary` attribute is set to\
    \ True.\n[req02] The `get_python_datasets` function shall:\n        a. Construct\
    \ an instance of the `DatasetGenerator` class.\n        b. Invoke the `generate`\
    \ method of the `DatasetGenerator` instance.\n        c. Return the `qa_list`\
    \ and `instruct_list` produced by the `DatasetGenerator` instance.\n\"\"\"\nimport\
    \ re\nimport os\nimport sys\nimport json\nimport logging\nimport yaml\nimport\
    \ random\nfrom typing import List, Dict\n\n# Set up logging\nlogging.basicConfig(\n\
    \    format='%(asctime)s - %(levelname)s - %(message)s', \n    level=logging.INFO)\n\
    logger = logging.getLogger(__name__)\n\nclass DatasetGenerator:\n    \"\"\"\n\
    \    A class used to generate JSON formatted dictionary outputs for a Python \n\
    \    file.\n    Attributes:\n        file_path (str): The path to the Python file.\n\
    \        file_details (Dict): A dictionary containing details of the Python\n\
    \            file.\n        base_name (str): The base name of the Python file.\n\
    \        questions (List): A list of questions for which responses are to be\n\
    \            generated.\n        qa_list (List): A list to store the generated\
    \ question-answer pairs.\n        instruct_list (List): A list to store the generated\
    \ instructions.\n        question_mapping (Dict): A dictionary mapping question\
    \ types to their\n            corresponding keys in the file details.\n      \
    \  use_llm (bool): A flag indicating whether to use a language model for\n   \
    \         generating responses.\n        llm (AutoModelForCausalLM): The language\
    \ model to be used for\n            generating responses.\n    Methods:\n    \
    \    clean_and_get_unique_elements(input_str: str) -> str: Cleans an input \n\
    \            string and returns a string of unique elements.\n        add_to_list(list_to_update:\
    \ List[Dict], query: str, response: str,\n            additional_field=None) ->\
    \ List[Dict]: Adds a response to a list.\n        get_response_from_llm(query:\
    \ str, context: str) -> str: Gets a \n            response from the language model.\n\
    \        get_variable_purpose(question_id: str, question_text: str, base_name:\n\
    \            str, name: str, info: Dict, context: str, variable_type: str) ->\
    \ \n                None: Processes questions related to the purpose of a variable.\n\
    \        process_question(question_id: str, query: str, context: str, info) ->\
    \ \n            None: Processes a question and adds the generated response to\
    \ the\n            qa_list and instruct_list.\n        process_file_question(question_id:\
    \ str, question_text: str) -> None:\n            Processes questions related to\
    \ a file.\n        process_func_class_question(question_type: str, question_id:\
    \ str, \n            question_text: str) -> None: Processes questions related\
    \ to a \n            function or class.\n        generate() -> Tuple[List[Dict],\
    \ List[Dict]]: Generates responses for\n            all the questions and returns\
    \ the qa_list and instruct_list.\n    \"\"\"\n    def __init__(self, file_path:\
    \ str, file_details: Dict, base_name: str, questions: List[Dict], use_llm: bool,\
    \ use_summary: bool, llm, prompt):\n        self.file_path = file_path\n     \
    \   self.file_details = file_details\n        self.base_name = base_name\n   \
    \     self.questions = questions\n        self.qa_list = []\n        self.instruct_list\
    \ = []\n        self.question_mapping = {\n            'file': 'file',\n     \
    \       'function': 'functions',\n            'class': 'classes',\n          \
    \  'method': 'classes'\n        }\n        self.use_llm = use_llm\n        self.llm\
    \ = llm\n        self.prompt = prompt\n        # if use_llm = false or llm equil\
    \ to none then set use_llm to false and llm to none\n        if not self.use_llm\
    \ or self.llm is None:\n            self.use_llm = False\n            self.llm\
    \ = None\n        self.use_summary = use_summary\n\n    @staticmethod\n    def\
    \ clean_and_get_unique_elements(input_str: str) -> str:\n        cleaned_elements\
    \ = set(re.sub(r'[^\\w\\-_>\\s:/.]', '', element.strip())\n                  \
    \             for element in re.sub(r'\\s+', ' ', input_str).split(','))\n   \
    \     return ', '.join(cleaned_elements)\n\n    @staticmethod\n    def add_to_list(list_to_update:\
    \ List[Dict], query: str, response: str, additional_field=None) -> List[Dict]:\n\
    \        if response and response.strip() and response != 'None':\n          \
    \  list_to_update.append(\n                {'instruction': query, 'input' : additional_field,\
    \ 'output': response}\n                if additional_field else\n            \
    \    {'question': query, 'answer': response}\n            )\n        return list_to_update\n\
    \n    def get_response_from_llm(self, query: str, context: str) -> str:\n    \
    \    response = ''\n        if not self.llm:\n            logger.error('AI model\
    \ not available.')\n            return response\n        try:\n            prompt\
    \ = self.prompt.format(context=context, query=query)\n            logging.info(f'Query:\
    \ {query}')\n            response = self.llm(prompt)\n            logging.info(f'Response:\
    \ {response}')\n        except:\n            logger.error('Failed to generate\
    \ model response')\n        return response\n\n    def process_items(self, question_type:\
    \ str, question_id: str, question_text: str, base_name: str, name: str, info:\
    \ Dict, context: str, item_type: str) -> None:\n        if info[item_type]:\n\
    \            items = [item.strip() for item in self.clean_and_get_unique_elements(str(info[item_type])).split(',')\
    \ if item]\n            itemstring = ', '.join(items)\n            query = question_text.format(filename=base_name,\
    \ **{f'{question_type.split(\"_\")[0]}_name': name, f'{question_type.split(\"\
    _\")[0]}_variables': itemstring})\n            self.process_question(question_type,\
    \ question_id, query, context, info)\n\n    def process_question(self, question_type:\
    \ str, question_id: str, query: str, context: str, info: Dict) -> None:\n    \
    \    if question_id.endswith('code_graph'):\n            response = info.get(question_id,\
    \ {})\n        else:\n            response = self.get_response_from_llm(query,\
    \ context) if self.use_llm and question_id.endswith('purpose') else self.clean_and_get_unique_elements(str(info.get(question_id,\
    \ '')))\n        if response and response != 'None':\n            response_str\
    \ = str(response)\n            response_str = response_str.strip()\n         \
    \   if response_str:\n                self.qa_list.append({'question': query,\
    \ 'answer': response_str})\n                if question_type == 'file' and self.use_summary:\n\
    \                    context = info['file_summary']\n                self.instruct_list.append({'instruction':\
    \ query, 'input': context, 'output': response_str})\n\n    def process_question_type(self,\
    \ question_type: str, question_id: str, question_text: str) -> None:\n       \
    \ if question_type == 'file':\n            query = question_text.format(filename=self.base_name)\n\
    \            context = self.file_details['file_info']['file_code']\n         \
    \   info = self.file_details['file_info']\n            self.process_question(question_type,\
    \ question_id, query, context, info)\n        elif question_type == 'method':\
    \  \n            for class_name, class_info in self.file_details['classes'].items():\n\
    \                for key, method_info in class_info.items():\n               \
    \     if key.startswith('class_method_'):\n                        method_name\
    \ = key[len('class_method_'):]\n                        context = method_info['method_code']\n\
    \                        mapping = {'class_name': class_name, 'method_name': method_name}\n\
    \                        query = question_text.format(filename=self.base_name,\
    \ **mapping)\n                        self.process_question(question_type, question_id,\
    \ query, context, method_info)\n        else:\n            for name, info in self.file_details[self.question_mapping[question_type]].items():\n\
    \                context = info[f'{question_type}_code']\n                mapping\
    \ = {f'{question_type}_name': name}\n                if question_id == f'{question_type}_variable_purpose'\
    \ and self.use_llm:\n                    self.process_items(question_type, question_id,\
    \ question_text, self.base_name, name, info, context, f'{question_type}_variables')\n\
    \                elif question_id != f'{question_type}_variable_purpose':\n  \
    \                  query = question_text.format(filename=self.base_name, **mapping)\n\
    \                    self.process_question(question_type, question_id, query,\
    \ context, info)\n\n    def generate(self) -> tuple[List[Dict], List[Dict]]:\n\
    \        for question in self.questions:\n            question_id = question['id']\n\
    \            question_text = question['text']\n            question_type = question['type']\n\
    \            self.process_question_type(question_type, question_id, question_text)\n\
    \        return self.qa_list, self.instruct_list\n\ndef get_python_datasets(file_path:\
    \ str, file_details: Dict, base_name: str, questions: List[Dict], llm, prompt,\
    \ use_llm: bool, use_summary: bool) -> tuple[List[Dict], List[Dict]]:\n    \"\"\
    \"\n    Extract information from a Python file and return it in JSON format.\n\
    \    Args:\n        file_path (str): The path to the Python file.\n        file_details\
    \ (Dict): The details of the file.\n        base_name (str): The base name.\n\
    \        questions (List[Dict]): The list of questions.\n        use_llm (bool):\
    \ Whether to use the language model.\n        user_config (dict): User-provided\
    \ model configurations.\n    Returns:\n        Tuple[List[Dict], List[Dict]]:\
    \ Extracted information in JSON format.\n    \"\"\"\n    generator = DatasetGenerator(file_path,\
    \ file_details, base_name, questions, use_llm, use_summary, llm, prompt)\n   \
    \ return generator.generate()\n"
  file_ast: 'Module(body=[Expr(value=Constant(value=''\nGenerates JSON format question-answer
    pairs and instructions for a Python file\nRequirements:\n[req01] The `DatasetGenerator`
    class shall:\n        a. Parse a Python file along with a list of questions to
    produce JSON-formatted question-answer pairs and instructions.\n        b. Add
    the produced question-answer pairs to its `qa_list` attribute.\n        c. Append
    the generated instructions to the `instruct_list` attribute.\n        d. Handle
    exceptions that might arise during the loading of the language model.\n        e.
    Use the `generate` method to generate and provide the `qa_list` and `instruct_list`.\n        f.
    Utilize the `get_model` function to load a specified language model based on a
    configuration file.\n        g. Deploy the loaded language model to generate answers
    to the questions.\n        h. Handle exceptions that may arise during the generation
    of answers.\n        i. Process questions that relate to a file, function, class,
    or method.\n        j. Generate a response for the purpose of a variable when
    the question type corresponds to this and `use_llm` is set to True.\n        k.
    Produce answers for all questions present in the supplied list, appending the
    responses to both `qa_list` and `instruct_list`.\n        l. Utilize the `clean_and_get_unique_elements`
    method to cleanse an input string and provide a string of unique elements.\n        m.
    Use the `add_to_list` method to add a generated response to a list.\n        n.
    Obtain a response from the language model by using the `get_response_from_llm`
    method when `use_llm` is True.\n        o. Handle any exceptions that may arise
    during the response generation from the language model.\n        p. Incorporate
    the file summary into the context for generating the instruction list if the `use_summary`
    attribute is set to True.\n[req02] The `get_python_datasets` function shall:\n        a.
    Construct an instance of the `DatasetGenerator` class.\n        b. Invoke the
    `generate` method of the `DatasetGenerator` instance.\n        c. Return the `qa_list`
    and `instruct_list` produced by the `DatasetGenerator` instance.\n'')), Import(names=[alias(name=''re'')]),
    Import(names=[alias(name=''os'')]), Import(names=[alias(name=''sys'')]), Import(names=[alias(name=''json'')]),
    Import(names=[alias(name=''logging'')]), Import(names=[alias(name=''yaml'')]),
    Import(names=[alias(name=''random'')]), ImportFrom(module=''typing'', names=[alias(name=''List''),
    alias(name=''Dict'')], level=0), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''basicConfig'', ctx=Load()), args=[], keywords=[keyword(arg=''format'',
    value=Constant(value=''%(asctime)s - %(levelname)s - %(message)s'')), keyword(arg=''level'',
    value=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''INFO'', ctx=Load()))])),
    Assign(targets=[Name(id=''logger'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[Name(id=''__name__'', ctx=Load())],
    keywords=[])), ClassDef(name=''DatasetGenerator'', bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    A
    class used to generate JSON formatted dictionary outputs for a Python \n    file.\n    Attributes:\n        file_path
    (str): The path to the Python file.\n        file_details (Dict): A dictionary
    containing details of the Python\n            file.\n        base_name (str):
    The base name of the Python file.\n        questions (List): A list of questions
    for which responses are to be\n            generated.\n        qa_list (List):
    A list to store the generated question-answer pairs.\n        instruct_list (List):
    A list to store the generated instructions.\n        question_mapping (Dict):
    A dictionary mapping question types to their\n            corresponding keys in
    the file details.\n        use_llm (bool): A flag indicating whether to use a
    language model for\n            generating responses.\n        llm (AutoModelForCausalLM):
    The language model to be used for\n            generating responses.\n    Methods:\n        clean_and_get_unique_elements(input_str:
    str) -> str: Cleans an input \n            string and returns a string of unique
    elements.\n        add_to_list(list_to_update: List[Dict], query: str, response:
    str,\n            additional_field=None) -> List[Dict]: Adds a response to a list.\n        get_response_from_llm(query:
    str, context: str) -> str: Gets a \n            response from the language model.\n        get_variable_purpose(question_id:
    str, question_text: str, base_name:\n            str, name: str, info: Dict, context:
    str, variable_type: str) -> \n                None: Processes questions related
    to the purpose of a variable.\n        process_question(question_id: str, query:
    str, context: str, info) -> \n            None: Processes a question and adds
    the generated response to the\n            qa_list and instruct_list.\n        process_file_question(question_id:
    str, question_text: str) -> None:\n            Processes questions related to
    a file.\n        process_func_class_question(question_type: str, question_id:
    str, \n            question_text: str) -> None: Processes questions related to
    a \n            function or class.\n        generate() -> Tuple[List[Dict], List[Dict]]:
    Generates responses for\n            all the questions and returns the qa_list
    and instruct_list.\n    '')), FunctionDef(name=''__init__'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''base_name'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''use_llm'',
    annotation=Name(id=''bool'', ctx=Load())), arg(arg=''use_summary'', annotation=Name(id=''bool'',
    ctx=Load())), arg(arg=''llm''), arg(arg=''prompt'')], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''file_path'', ctx=Store())], value=Name(id=''file_path'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''file_details'',
    ctx=Store())], value=Name(id=''file_details'', ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Store())], value=Name(id=''base_name'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''questions'',
    ctx=Store())], value=Name(id=''questions'', ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''qa_list'', ctx=Store())], value=List(elts=[], ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''instruct_list'',
    ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''question_mapping'', ctx=Store())], value=Dict(keys=[Constant(value=''file''),
    Constant(value=''function''), Constant(value=''class''), Constant(value=''method'')],
    values=[Constant(value=''file''), Constant(value=''functions''), Constant(value=''classes''),
    Constant(value=''classes'')])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Store())], value=Name(id=''use_llm'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''llm'', ctx=Store())],
    value=Name(id=''llm'', ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''prompt'', ctx=Store())], value=Name(id=''prompt'', ctx=Load())),
    If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Load())), Compare(left=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]),
    body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''use_llm'',
    ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Store())], value=Constant(value=None))], orelse=[]),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''use_summary'',
    ctx=Store())], value=Name(id=''use_summary'', ctx=Load()))], decorator_list=[]),
    FunctionDef(name=''clean_and_get_unique_elements'', args=arguments(posonlyargs=[],
    args=[arg(arg=''input_str'', annotation=Name(id=''str'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''cleaned_elements'',
    ctx=Store())], value=Call(func=Name(id=''set'', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''re'',
    ctx=Load()), attr=''sub'', ctx=Load()), args=[Constant(value=''[^\\w\\-_>\\s:/.]''),
    Constant(value=''''), Call(func=Attribute(value=Name(id=''element'', ctx=Load()),
    attr=''strip'', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id=''element'',
    ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''re'',
    ctx=Load()), attr=''sub'', ctx=Load()), args=[Constant(value=''\\s+''), Constant(value=''
    ''), Name(id=''input_str'', ctx=Load())], keywords=[]), attr=''split'', ctx=Load()),
    args=[Constant(value='','')], keywords=[]), ifs=[], is_async=0)])], keywords=[])),
    Return(value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[Name(id=''cleaned_elements'', ctx=Load())], keywords=[]))],
    decorator_list=[Name(id=''staticmethod'', ctx=Load())], returns=Name(id=''str'',
    ctx=Load())), FunctionDef(name=''add_to_list'', args=arguments(posonlyargs=[],
    args=[arg(arg=''list_to_update'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''query'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''response'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''additional_field'')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]),
    body=[If(test=BoolOp(op=And(), values=[Name(id=''response'', ctx=Load()), Call(func=Attribute(value=Name(id=''response'',
    ctx=Load()), attr=''strip'', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id=''response'',
    ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''None'')])]), body=[Expr(value=Call(func=Attribute(value=Name(id=''list_to_update'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[IfExp(test=Name(id=''additional_field'',
    ctx=Load()), body=Dict(keys=[Constant(value=''instruction''), Constant(value=''input''),
    Constant(value=''output'')], values=[Name(id=''query'', ctx=Load()), Name(id=''additional_field'',
    ctx=Load()), Name(id=''response'', ctx=Load())]), orelse=Dict(keys=[Constant(value=''question''),
    Constant(value=''answer'')], values=[Name(id=''query'', ctx=Load()), Name(id=''response'',
    ctx=Load())]))], keywords=[]))], orelse=[]), Return(value=Name(id=''list_to_update'',
    ctx=Load()))], decorator_list=[Name(id=''staticmethod'', ctx=Load())], returns=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''get_response_from_llm'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''query'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''response'',
    ctx=Store())], value=Constant(value='''')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
    ctx=Load()), attr=''error'', ctx=Load()), args=[Constant(value=''AI model not
    available.'')], keywords=[])), Return(value=Name(id=''response'', ctx=Load()))],
    orelse=[]), Try(body=[Assign(targets=[Name(id=''prompt'', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''prompt'', ctx=Load()), attr=''format'', ctx=Load()), args=[],
    keywords=[keyword(arg=''context'', value=Name(id=''context'', ctx=Load())), keyword(arg=''query'',
    value=Name(id=''query'', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Query:
    ''), FormattedValue(value=Name(id=''query'', ctx=Load()), conversion=-1)])], keywords=[])),
    Assign(targets=[Name(id=''response'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Load()), args=[Name(id=''prompt'', ctx=Load())],
    keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Response:
    ''), FormattedValue(value=Name(id=''response'', ctx=Load()), conversion=-1)])],
    keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
    ctx=Load()), attr=''error'', ctx=Load()), args=[Constant(value=''Failed to generate
    model response'')], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id=''response'',
    ctx=Load()))], decorator_list=[], returns=Name(id=''str'', ctx=Load())), FunctionDef(name=''process_items'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''question_type'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''question_id'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''base_name'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''name'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''info'', annotation=Name(id=''Dict'',
    ctx=Load())), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''item_type'',
    annotation=Name(id=''str'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]),
    body=[If(test=Subscript(value=Name(id=''info'', ctx=Load()), slice=Name(id=''item_type'',
    ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id=''items'', ctx=Store())],
    value=ListComp(elt=Call(func=Attribute(value=Name(id=''item'', ctx=Load()), attr=''strip'',
    ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id=''item'',
    ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''clean_and_get_unique_elements'', ctx=Load()), args=[Call(func=Name(id=''str'',
    ctx=Load()), args=[Subscript(value=Name(id=''info'', ctx=Load()), slice=Name(id=''item_type'',
    ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), attr=''split'', ctx=Load()),
    args=[Constant(value='','')], keywords=[]), ifs=[Name(id=''item'', ctx=Load())],
    is_async=0)])), Assign(targets=[Name(id=''itemstring'', ctx=Store())], value=Call(func=Attribute(value=Constant(value='',
    ''), attr=''join'', ctx=Load()), args=[Name(id=''items'', ctx=Load())], keywords=[])),
    Assign(targets=[Name(id=''query'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''question_text'',
    ctx=Load()), attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''filename'',
    value=Name(id=''base_name'', ctx=Load())), keyword(value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''question_type'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''_'')], keywords=[]),
    slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=''_name'')]),
    JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''question_type'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''_'')], keywords=[]),
    slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=''_variables'')])],
    values=[Name(id=''name'', ctx=Load()), Name(id=''itemstring'', ctx=Load())]))])),
    Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''process_question'',
    ctx=Load()), args=[Name(id=''question_type'', ctx=Load()), Name(id=''question_id'',
    ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'', ctx=Load()),
    Name(id=''info'', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[],
    returns=Constant(value=None)), FunctionDef(name=''process_question'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''question_type'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''question_id'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''query'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''context'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''info'', annotation=Name(id=''Dict'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id=''question_id'',
    ctx=Load()), attr=''endswith'', ctx=Load()), args=[Constant(value=''code_graph'')],
    keywords=[]), body=[Assign(targets=[Name(id=''response'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''info'',
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''question_id'', ctx=Load()),
    Dict(keys=[], values=[])], keywords=[]))], orelse=[Assign(targets=[Name(id=''response'',
    ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Load()), Call(func=Attribute(value=Name(id=''question_id'',
    ctx=Load()), attr=''endswith'', ctx=Load()), args=[Constant(value=''purpose'')],
    keywords=[])]), body=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''get_response_from_llm'', ctx=Load()), args=[Name(id=''query'', ctx=Load()),
    Name(id=''context'', ctx=Load())], keywords=[]), orelse=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''clean_and_get_unique_elements'', ctx=Load()), args=[Call(func=Name(id=''str'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''info'', ctx=Load()), attr=''get'',
    ctx=Load()), args=[Name(id=''question_id'', ctx=Load()), Constant(value='''')],
    keywords=[])], keywords=[])], keywords=[])))]), If(test=BoolOp(op=And(), values=[Name(id=''response'',
    ctx=Load()), Compare(left=Name(id=''response'', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''None'')])]),
    body=[Assign(targets=[Name(id=''response_str'', ctx=Store())], value=Call(func=Name(id=''str'',
    ctx=Load()), args=[Name(id=''response'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''response_str'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''response_str'', ctx=Load()),
    attr=''strip'', ctx=Load()), args=[], keywords=[])), If(test=Name(id=''response_str'',
    ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''qa_list'', ctx=Load()), attr=''append'', ctx=Load()), args=[Dict(keys=[Constant(value=''question''),
    Constant(value=''answer'')], values=[Name(id=''query'', ctx=Load()), Name(id=''response_str'',
    ctx=Load())])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''file'')]), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_summary'', ctx=Load())]), body=[Assign(targets=[Name(id=''context'',
    ctx=Store())], value=Subscript(value=Name(id=''info'', ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''instruct_list'', ctx=Load()), attr=''append'', ctx=Load()),
    args=[Dict(keys=[Constant(value=''instruction''), Constant(value=''input''), Constant(value=''output'')],
    values=[Name(id=''query'', ctx=Load()), Name(id=''context'', ctx=Load()), Name(id=''response_str'',
    ctx=Load())])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)),
    FunctionDef(name=''process_question_type'', args=arguments(posonlyargs=[], args=[arg(arg=''self''),
    arg(arg=''question_type'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''question_id'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''question_text'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''file'')]), body=[Assign(targets=[Name(id=''query'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()),
    attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load()))])), Assign(targets=[Name(id=''context'',
    ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Constant(value=''file_info''),
    ctx=Load()), slice=Constant(value=''file_code''), ctx=Load())), Assign(targets=[Name(id=''info'',
    ctx=Store())], value=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''file_details'', ctx=Load()), slice=Constant(value=''file_info''), ctx=Load())),
    Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''process_question'',
    ctx=Load()), args=[Name(id=''question_type'', ctx=Load()), Name(id=''question_id'',
    ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'', ctx=Load()),
    Name(id=''info'', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''method'')]), body=[For(target=Tuple(elts=[Name(id=''class_name'',
    ctx=Store()), Name(id=''class_info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Constant(value=''classes''),
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id=''key'',
    ctx=Store()), Name(id=''method_info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_info'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id=''key'',
    ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[]), body=[Assign(targets=[Name(id=''method_name'', ctx=Store())], value=Subscript(value=Name(id=''key'',
    ctx=Load()), slice=Slice(lower=Call(func=Name(id=''len'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[])), ctx=Load())), Assign(targets=[Name(id=''context'', ctx=Store())],
    value=Subscript(value=Name(id=''method_info'', ctx=Load()), slice=Constant(value=''method_code''),
    ctx=Load())), Assign(targets=[Name(id=''mapping'', ctx=Store())], value=Dict(keys=[Constant(value=''class_name''),
    Constant(value=''method_name'')], values=[Name(id=''class_name'', ctx=Load()),
    Name(id=''method_name'', ctx=Load())])), Assign(targets=[Name(id=''query'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()), attr=''format'',
    ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load())), keyword(value=Name(id=''mapping'',
    ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''process_question'', ctx=Load()), args=[Name(id=''question_type'', ctx=Load()),
    Name(id=''question_id'', ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'',
    ctx=Load()), Name(id=''method_info'', ctx=Load())], keywords=[]))], orelse=[])],
    orelse=[])], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id=''name'', ctx=Store()),
    Name(id=''info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''question_mapping'', ctx=Load()), slice=Name(id=''question_type'',
    ctx=Load()), ctx=Load()), ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]),
    body=[Assign(targets=[Name(id=''context'', ctx=Store())], value=Subscript(value=Name(id=''info'',
    ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_code'')]), ctx=Load())), Assign(targets=[Name(id=''mapping'',
    ctx=Store())], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_name'')])], values=[Name(id=''name'',
    ctx=Load())])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_id'',
    ctx=Load()), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variable_purpose'')])]), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''process_items'', ctx=Load()), args=[Name(id=''question_type'',
    ctx=Load()), Name(id=''question_id'', ctx=Load()), Name(id=''question_text'',
    ctx=Load()), Attribute(value=Name(id=''self'', ctx=Load()), attr=''base_name'',
    ctx=Load()), Name(id=''name'', ctx=Load()), Name(id=''info'', ctx=Load()), Name(id=''context'',
    ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variables'')])], keywords=[]))],
    orelse=[If(test=Compare(left=Name(id=''question_id'', ctx=Load()), ops=[NotEq()],
    comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variable_purpose'')])]), body=[Assign(targets=[Name(id=''query'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()),
    attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load())), keyword(value=Name(id=''mapping'',
    ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''process_question'', ctx=Load()), args=[Name(id=''question_type'', ctx=Load()),
    Name(id=''question_id'', ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'',
    ctx=Load()), Name(id=''info'', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])])])],
    decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''generate'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self'')], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[For(target=Name(id=''question'', ctx=Store()), iter=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''questions'', ctx=Load()), body=[Assign(targets=[Name(id=''question_id'',
    ctx=Store())], value=Subscript(value=Name(id=''question'', ctx=Load()), slice=Constant(value=''id''),
    ctx=Load())), Assign(targets=[Name(id=''question_text'', ctx=Store())], value=Subscript(value=Name(id=''question'',
    ctx=Load()), slice=Constant(value=''text''), ctx=Load())), Assign(targets=[Name(id=''question_type'',
    ctx=Store())], value=Subscript(value=Name(id=''question'', ctx=Load()), slice=Constant(value=''type''),
    ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''process_question_type'', ctx=Load()), args=[Name(id=''question_type'',
    ctx=Load()), Name(id=''question_id'', ctx=Load()), Name(id=''question_text'',
    ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''qa_list'', ctx=Load()), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''instruct_list'', ctx=Load())], ctx=Load()))], decorator_list=[],
    returns=Subscript(value=Name(id=''tuple'', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))],
    decorator_list=[]), FunctionDef(name=''get_python_datasets'', args=arguments(posonlyargs=[],
    args=[arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''file_details'',
    annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''base_name'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''llm''),
    arg(arg=''prompt''), arg(arg=''use_llm'', annotation=Name(id=''bool'', ctx=Load())),
    arg(arg=''use_summary'', annotation=Name(id=''bool'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Extract
    information from a Python file and return it in JSON format.\n    Args:\n        file_path
    (str): The path to the Python file.\n        file_details (Dict): The details
    of the file.\n        base_name (str): The base name.\n        questions (List[Dict]):
    The list of questions.\n        use_llm (bool): Whether to use the language model.\n        user_config
    (dict): User-provided model configurations.\n    Returns:\n        Tuple[List[Dict],
    List[Dict]]: Extracted information in JSON format.\n    '')), Assign(targets=[Name(id=''generator'',
    ctx=Store())], value=Call(func=Name(id=''DatasetGenerator'', ctx=Load()), args=[Name(id=''file_path'',
    ctx=Load()), Name(id=''file_details'', ctx=Load()), Name(id=''base_name'', ctx=Load()),
    Name(id=''questions'', ctx=Load()), Name(id=''use_llm'', ctx=Load()), Name(id=''use_summary'',
    ctx=Load()), Name(id=''llm'', ctx=Load()), Name(id=''prompt'', ctx=Load())], keywords=[])),
    Return(value=Call(func=Attribute(value=Name(id=''generator'', ctx=Load()), attr=''generate'',
    ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id=''tuple'',
    ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Name(id=''Dict'', ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))],
    type_ignores=[])'
  file_dependencies:
  - re
  - typing
  - random
  - logging
  - yaml
  - sys
  - os
  - json
  file_functions:
  - get_python_datasets
  file_classes:
  - DatasetGenerator
  file_control_flow: module -> class -> def __init__ -> if -> def clean_and_get_unique_elements
    -> def add_to_list -> if -> def get_response_from_llm -> if -> try -> except ->
    def process_items -> if -> def process_question -> if -> if -> if -> if -> def
    process_question_type -> if -> if -> for -> for -> if -> for -> if -> if -> def
    generate -> for -> def get_python_datasets
  file_summary: '{dependencies: [re, typing, random, logging, yaml, sys, os, json],
    function_defs: [{get_python_datasets: {inputs: [file_path, file_details, base_name,
    questions, llm, prompt, use_llm, use_summary], calls: [DatasetGenerator, generator.generate],
    returns: [generator.generate()]}}], class_defs: [{DatasetGenerator: {method_defs:
    {__init__: {inputs: [self, file_path, file_details, base_name, questions, use_llm,
    use_summary, llm, prompt], calls: [], returns: []}, clean_and_get_unique_elements:
    {inputs: [input_str], calls: [set, re.sub, re.sub(''\\\\s+'', '' '', input_str).split,
    element.strip, '', ''.join], returns: ['', ''.join(cleaned_elements)]}, add_to_list:
    {inputs: [list_to_update, query, response, additional_field], calls: [response.strip,
    list_to_update.append], returns: [list_to_update]}, get_response_from_llm: {inputs:
    [self, query, context], calls: [self.prompt.format, logging.info, self.llm, logger.error],
    returns: [response, response]}, process_items: {inputs: [self, question_type,
    question_id, question_text, base_name, name, info, context, item_type], calls:
    [item.strip, question_text.format, str, question_type.split, self.clean_and_get_unique_elements(str(info[item_type])).split,
    self.clean_and_get_unique_elements, self.process_question, '', ''.join], returns:
    []}, process_question: {inputs: [self, question_type, question_id, query, context,
    info], calls: [self.get_response_from_llm, self.qa_list.append, str, response_str.strip,
    self.instruct_list.append, question_id.endswith, info.get, self.clean_and_get_unique_elements],
    returns: []}, process_question_type: {inputs: [self, question_type, question_id,
    question_text], calls: [question_text.format, self.file_details[''classes''].items,
    key.startswith, len, self.file_details[self.question_mapping[question_type]].items,
    self.process_items, self.process_question, class_info.items], returns: []}, generate:
    {inputs: [self], calls: [self.process_question_type], returns: [(self.qa_list,
    self.instruct_list)]}}}}]}'
  internal_code_graph:
    nodes:
    - DatasetGenerator
    - DatasetGenerator.__init__
    - DatasetGenerator.clean_and_get_unique_elements
    - DatasetGenerator.add_to_list
    - DatasetGenerator.get_response_from_llm
    - DatasetGenerator.process_items
    - DatasetGenerator.process_question
    - DatasetGenerator.process_question_type
    - DatasetGenerator.generate
    - get_python_datasets
    edges:
    - source: DatasetGenerator
      target: DatasetGenerator.__init__
      target_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - use_llm
      - use_summary
      - llm
      - prompt
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator
      target: DatasetGenerator.add_to_list
      target_inputs:
      - list_to_update
      - query
      - response
      - additional_field
      target_returns:
      - list_to_update
    - source: DatasetGenerator
      target: DatasetGenerator.get_response_from_llm
      target_inputs:
      - self
      - query
      - context
      target_returns:
      - response
    - source: DatasetGenerator
      target: DatasetGenerator.process_items
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      - base_name
      - name
      - info
      - context
      - item_type
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.process_question_type
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.generate
      target_inputs:
      - self
      target_returns:
      - (self.qa_list, self.instruct_list)
    - source: DatasetGenerator.process_items
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator.process_items
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator.process_question
      target: DatasetGenerator.get_response_from_llm
      target_inputs:
      - self
      - query
      - context
      target_returns:
      - response
    - source: DatasetGenerator.process_question
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator.process_question_type
      target: DatasetGenerator.process_items
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      - base_name
      - name
      - info
      - context
      - item_type
      target_returns: []
    - source: DatasetGenerator.process_question_type
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator.generate
      target: DatasetGenerator.process_question_type
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      target_returns: []
    - source: get_python_datasets
      target: DatasetGenerator
      target_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - use_llm
      - use_summary
      - llm
      - prompt
      target_returns: []
  entire_code_graph:
    nodes:
    - DatasetGenerator
    - DatasetGenerator.__init__
    - DatasetGenerator.clean_and_get_unique_elements
    - DatasetGenerator.add_to_list
    - DatasetGenerator.get_response_from_llm
    - DatasetGenerator.process_items
    - DatasetGenerator.process_question
    - DatasetGenerator.process_question_type
    - DatasetGenerator.generate
    - get_python_datasets
    - generator.generate
    - set
    - re.sub
    - re.sub('\\s+', ' ', input_str).split
    - element.strip
    - ''', ''.join'
    - response.strip
    - list_to_update.append
    - self.prompt.format
    - logging.info
    - self.llm
    - logger.error
    - item.strip
    - question_text.format
    - str
    - question_type.split
    - self.clean_and_get_unique_elements(str(info[item_type])).split
    - self.qa_list.append
    - response_str.strip
    - self.instruct_list.append
    - question_id.endswith
    - info.get
    - self.file_details['classes'].items
    - key.startswith
    - len
    - self.file_details[self.question_mapping[question_type]].items
    - class_info.items
    edges:
    - source: DatasetGenerator
      target: DatasetGenerator.__init__
      target_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - use_llm
      - use_summary
      - llm
      - prompt
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator
      target: DatasetGenerator.add_to_list
      target_inputs:
      - list_to_update
      - query
      - response
      - additional_field
      target_returns:
      - list_to_update
    - source: DatasetGenerator
      target: DatasetGenerator.get_response_from_llm
      target_inputs:
      - self
      - query
      - context
      target_returns:
      - response
    - source: DatasetGenerator
      target: DatasetGenerator.process_items
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      - base_name
      - name
      - info
      - context
      - item_type
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.process_question_type
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      target_returns: []
    - source: DatasetGenerator
      target: DatasetGenerator.generate
      target_inputs:
      - self
      target_returns:
      - (self.qa_list, self.instruct_list)
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: set
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: re.sub
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: re.sub('\\s+', ' ', input_str).split
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: element.strip
    - source: DatasetGenerator.clean_and_get_unique_elements
      target: ''', ''.join'
    - source: DatasetGenerator.add_to_list
      target: response.strip
    - source: DatasetGenerator.add_to_list
      target: list_to_update.append
    - source: DatasetGenerator.get_response_from_llm
      target: self.prompt.format
    - source: DatasetGenerator.get_response_from_llm
      target: logging.info
    - source: DatasetGenerator.get_response_from_llm
      target: self.llm
    - source: DatasetGenerator.get_response_from_llm
      target: logger.error
    - source: DatasetGenerator.process_items
      target: item.strip
    - source: DatasetGenerator.process_items
      target: question_text.format
    - source: DatasetGenerator.process_items
      target: str
    - source: DatasetGenerator.process_items
      target: question_type.split
    - source: DatasetGenerator.process_items
      target: self.clean_and_get_unique_elements(str(info[item_type])).split
    - source: DatasetGenerator.process_items
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator.process_items
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator.process_items
      target: ''', ''.join'
    - source: DatasetGenerator.process_question
      target: DatasetGenerator.get_response_from_llm
      target_inputs:
      - self
      - query
      - context
      target_returns:
      - response
    - source: DatasetGenerator.process_question
      target: self.qa_list.append
    - source: DatasetGenerator.process_question
      target: str
    - source: DatasetGenerator.process_question
      target: response_str.strip
    - source: DatasetGenerator.process_question
      target: self.instruct_list.append
    - source: DatasetGenerator.process_question
      target: question_id.endswith
    - source: DatasetGenerator.process_question
      target: info.get
    - source: DatasetGenerator.process_question
      target: DatasetGenerator.clean_and_get_unique_elements
      target_inputs:
      - input_str
      target_returns:
      - ''', ''.join(cleaned_elements)'
    - source: DatasetGenerator.process_question_type
      target: question_text.format
    - source: DatasetGenerator.process_question_type
      target: self.file_details['classes'].items
    - source: DatasetGenerator.process_question_type
      target: key.startswith
    - source: DatasetGenerator.process_question_type
      target: len
    - source: DatasetGenerator.process_question_type
      target: self.file_details[self.question_mapping[question_type]].items
    - source: DatasetGenerator.process_question_type
      target: DatasetGenerator.process_items
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      - base_name
      - name
      - info
      - context
      - item_type
      target_returns: []
    - source: DatasetGenerator.process_question_type
      target: DatasetGenerator.process_question
      target_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      target_returns: []
    - source: DatasetGenerator.process_question_type
      target: class_info.items
    - source: DatasetGenerator.generate
      target: DatasetGenerator.process_question_type
      target_inputs:
      - self
      - question_type
      - question_id
      - question_text
      target_returns: []
    - source: get_python_datasets
      target: DatasetGenerator
      target_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - use_llm
      - use_summary
      - llm
      - prompt
      target_returns: []
    - source: get_python_datasets
      target: generator.generate
functions:
  get_python_datasets:
    function_name: get_python_datasets
    function_code: "def get_python_datasets(file_path: str, file_details: Dict, base_name:\
      \ str, questions: List[Dict], llm, prompt, use_llm: bool, use_summary: bool)\
      \ -> tuple[List[Dict], List[Dict]]:\n    \"\"\"\n    Extract information from\
      \ a Python file and return it in JSON format.\n    Args:\n        file_path\
      \ (str): The path to the Python file.\n        file_details (Dict): The details\
      \ of the file.\n        base_name (str): The base name.\n        questions (List[Dict]):\
      \ The list of questions.\n        use_llm (bool): Whether to use the language\
      \ model.\n        user_config (dict): User-provided model configurations.\n\
      \    Returns:\n        Tuple[List[Dict], List[Dict]]: Extracted information\
      \ in JSON format.\n    \"\"\"\n    generator = DatasetGenerator(file_path, file_details,\
      \ base_name, questions, use_llm, use_summary, llm, prompt)\n    return generator.generate()"
    function_ast: 'FunctionDef(name=''get_python_datasets'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load(), lineno=187,
      col_offset=35, end_lineno=187, end_col_offset=38), lineno=187, col_offset=24,
      end_lineno=187, end_col_offset=38), arg(arg=''file_details'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=187, col_offset=54, end_lineno=187, end_col_offset=58), lineno=187,
      col_offset=40, end_lineno=187, end_col_offset=58), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=187, col_offset=71, end_lineno=187, end_col_offset=74), lineno=187,
      col_offset=60, end_lineno=187, end_col_offset=74), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=187, col_offset=87, end_lineno=187, end_col_offset=91), slice=Name(id=''Dict'',
      ctx=Load(), lineno=187, col_offset=92, end_lineno=187, end_col_offset=96), ctx=Load(),
      lineno=187, col_offset=87, end_lineno=187, end_col_offset=97), lineno=187, col_offset=76,
      end_lineno=187, end_col_offset=97), arg(arg=''llm'', lineno=187, col_offset=99,
      end_lineno=187, end_col_offset=102), arg(arg=''prompt'', lineno=187, col_offset=104,
      end_lineno=187, end_col_offset=110), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=187, col_offset=121, end_lineno=187, end_col_offset=125),
      lineno=187, col_offset=112, end_lineno=187, end_col_offset=125), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=187, col_offset=140, end_lineno=187,
      end_col_offset=144), lineno=187, col_offset=127, end_lineno=187, end_col_offset=144)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Extract
      information from a Python file and return it in JSON format.\n    Args:\n        file_path
      (str): The path to the Python file.\n        file_details (Dict): The details
      of the file.\n        base_name (str): The base name.\n        questions (List[Dict]):
      The list of questions.\n        use_llm (bool): Whether to use the language
      model.\n        user_config (dict): User-provided model configurations.\n    Returns:\n        Tuple[List[Dict],
      List[Dict]]: Extracted information in JSON format.\n    '', lineno=188, col_offset=4,
      end_lineno=199, end_col_offset=7), lineno=188, col_offset=4, end_lineno=199,
      end_col_offset=7), Assign(targets=[Name(id=''generator'', ctx=Store(), lineno=200,
      col_offset=4, end_lineno=200, end_col_offset=13)], value=Call(func=Name(id=''DatasetGenerator'',
      ctx=Load(), lineno=200, col_offset=16, end_lineno=200, end_col_offset=32), args=[Name(id=''file_path'',
      ctx=Load(), lineno=200, col_offset=33, end_lineno=200, end_col_offset=42), Name(id=''file_details'',
      ctx=Load(), lineno=200, col_offset=44, end_lineno=200, end_col_offset=56), Name(id=''base_name'',
      ctx=Load(), lineno=200, col_offset=58, end_lineno=200, end_col_offset=67), Name(id=''questions'',
      ctx=Load(), lineno=200, col_offset=69, end_lineno=200, end_col_offset=78), Name(id=''use_llm'',
      ctx=Load(), lineno=200, col_offset=80, end_lineno=200, end_col_offset=87), Name(id=''use_summary'',
      ctx=Load(), lineno=200, col_offset=89, end_lineno=200, end_col_offset=100),
      Name(id=''llm'', ctx=Load(), lineno=200, col_offset=102, end_lineno=200, end_col_offset=105),
      Name(id=''prompt'', ctx=Load(), lineno=200, col_offset=107, end_lineno=200,
      end_col_offset=113)], keywords=[], lineno=200, col_offset=16, end_lineno=200,
      end_col_offset=114), lineno=200, col_offset=4, end_lineno=200, end_col_offset=114),
      Return(value=Call(func=Attribute(value=Name(id=''generator'', ctx=Load(), lineno=201,
      col_offset=11, end_lineno=201, end_col_offset=20), attr=''generate'', ctx=Load(),
      lineno=201, col_offset=11, end_lineno=201, end_col_offset=29), args=[], keywords=[],
      lineno=201, col_offset=11, end_lineno=201, end_col_offset=31), lineno=201, col_offset=4,
      end_lineno=201, end_col_offset=31)], decorator_list=[], returns=Subscript(value=Name(id=''tuple'',
      ctx=Load(), lineno=187, col_offset=149, end_lineno=187, end_col_offset=154),
      slice=Tuple(elts=[Subscript(value=Name(id=''List'', ctx=Load(), lineno=187,
      col_offset=155, end_lineno=187, end_col_offset=159), slice=Name(id=''Dict'',
      ctx=Load(), lineno=187, col_offset=160, end_lineno=187, end_col_offset=164),
      ctx=Load(), lineno=187, col_offset=155, end_lineno=187, end_col_offset=165),
      Subscript(value=Name(id=''List'', ctx=Load(), lineno=187, col_offset=167, end_lineno=187,
      end_col_offset=171), slice=Name(id=''Dict'', ctx=Load(), lineno=187, col_offset=172,
      end_lineno=187, end_col_offset=176), ctx=Load(), lineno=187, col_offset=167,
      end_lineno=187, end_col_offset=177)], ctx=Load(), lineno=187, col_offset=155,
      end_lineno=187, end_col_offset=177), ctx=Load(), lineno=187, col_offset=149,
      end_lineno=187, end_col_offset=178), lineno=187, col_offset=0, end_lineno=201,
      end_col_offset=31)'
    function_docstring: "Extract information from a Python file and return it in JSON\
      \ format.\nArgs:\n    file_path (str): The path to the Python file.\n    file_details\
      \ (Dict): The details of the file.\n    base_name (str): The base name.\n  \
      \  questions (List[Dict]): The list of questions.\n    use_llm (bool): Whether\
      \ to use the language model.\n    user_config (dict): User-provided model configurations.\n\
      Returns:\n    Tuple[List[Dict], List[Dict]]: Extracted information in JSON format."
    function_inputs:
    - file_path
    - file_details
    - base_name
    - questions
    - llm
    - prompt
    - use_llm
    - use_summary
    function_defaults: []
    function_returns:
    - generator.generate()
    function_calls:
    - DatasetGenerator
    - generator.generate
    function_variables:
    - generator
    function_decorators: []
    function_annotations: []
    function_properties: []
classes:
  DatasetGenerator:
    class_name: DatasetGenerator
    class_code: "class DatasetGenerator:\n    \"\"\"\n    A class used to generate\
      \ JSON formatted dictionary outputs for a Python \n    file.\n    Attributes:\n\
      \        file_path (str): The path to the Python file.\n        file_details\
      \ (Dict): A dictionary containing details of the Python\n            file.\n\
      \        base_name (str): The base name of the Python file.\n        questions\
      \ (List): A list of questions for which responses are to be\n            generated.\n\
      \        qa_list (List): A list to store the generated question-answer pairs.\n\
      \        instruct_list (List): A list to store the generated instructions.\n\
      \        question_mapping (Dict): A dictionary mapping question types to their\n\
      \            corresponding keys in the file details.\n        use_llm (bool):\
      \ A flag indicating whether to use a language model for\n            generating\
      \ responses.\n        llm (AutoModelForCausalLM): The language model to be used\
      \ for\n            generating responses.\n    Methods:\n        clean_and_get_unique_elements(input_str:\
      \ str) -> str: Cleans an input \n            string and returns a string of\
      \ unique elements.\n        add_to_list(list_to_update: List[Dict], query: str,\
      \ response: str,\n            additional_field=None) -> List[Dict]: Adds a response\
      \ to a list.\n        get_response_from_llm(query: str, context: str) -> str:\
      \ Gets a \n            response from the language model.\n        get_variable_purpose(question_id:\
      \ str, question_text: str, base_name:\n            str, name: str, info: Dict,\
      \ context: str, variable_type: str) -> \n                None: Processes questions\
      \ related to the purpose of a variable.\n        process_question(question_id:\
      \ str, query: str, context: str, info) -> \n            None: Processes a question\
      \ and adds the generated response to the\n            qa_list and instruct_list.\n\
      \        process_file_question(question_id: str, question_text: str) -> None:\n\
      \            Processes questions related to a file.\n        process_func_class_question(question_type:\
      \ str, question_id: str, \n            question_text: str) -> None: Processes\
      \ questions related to a \n            function or class.\n        generate()\
      \ -> Tuple[List[Dict], List[Dict]]: Generates responses for\n            all\
      \ the questions and returns the qa_list and instruct_list.\n    \"\"\"\n\n \
      \   def __init__(self, file_path: str, file_details: Dict, base_name: str, questions:\
      \ List[Dict], use_llm: bool, use_summary: bool, llm, prompt):\n        self.file_path\
      \ = file_path\n        self.file_details = file_details\n        self.base_name\
      \ = base_name\n        self.questions = questions\n        self.qa_list = []\n\
      \        self.instruct_list = []\n        self.question_mapping = {'file': 'file',\
      \ 'function': 'functions', 'class': 'classes', 'method': 'classes'}\n      \
      \  self.use_llm = use_llm\n        self.llm = llm\n        self.prompt = prompt\n\
      \        if not self.use_llm or self.llm is None:\n            self.use_llm\
      \ = False\n            self.llm = None\n        self.use_summary = use_summary\n\
      \n    @staticmethod\n    def clean_and_get_unique_elements(input_str: str) ->\
      \ str:\n        cleaned_elements = set((re.sub('[^\\\\w\\\\-_>\\\\s:/.]', '',\
      \ element.strip()) for element in re.sub('\\\\s+', ' ', input_str).split(',')))\n\
      \        return ', '.join(cleaned_elements)\n\n    @staticmethod\n    def add_to_list(list_to_update:\
      \ List[Dict], query: str, response: str, additional_field=None) -> List[Dict]:\n\
      \        if response and response.strip() and (response != 'None'):\n      \
      \      list_to_update.append({'instruction': query, 'input': additional_field,\
      \ 'output': response} if additional_field else {'question': query, 'answer':\
      \ response})\n        return list_to_update\n\n    def get_response_from_llm(self,\
      \ query: str, context: str) -> str:\n        response = ''\n        if not self.llm:\n\
      \            logger.error('AI model not available.')\n            return response\n\
      \        try:\n            prompt = self.prompt.format(context=context, query=query)\n\
      \            logging.info(f'Query: {query}')\n            response = self.llm(prompt)\n\
      \            logging.info(f'Response: {response}')\n        except:\n      \
      \      logger.error('Failed to generate model response')\n        return response\n\
      \n    def process_items(self, question_type: str, question_id: str, question_text:\
      \ str, base_name: str, name: str, info: Dict, context: str, item_type: str)\
      \ -> None:\n        if info[item_type]:\n            items = [item.strip() for\
      \ item in self.clean_and_get_unique_elements(str(info[item_type])).split(',')\
      \ if item]\n            itemstring = ', '.join(items)\n            query = question_text.format(filename=base_name,\
      \ **{f\"{question_type.split('_')[0]}_name\": name, f\"{question_type.split('_')[0]}_variables\"\
      : itemstring})\n            self.process_question(question_type, question_id,\
      \ query, context, info)\n\n    def process_question(self, question_type: str,\
      \ question_id: str, query: str, context: str, info: Dict) -> None:\n       \
      \ if question_id.endswith('code_graph'):\n            response = info.get(question_id,\
      \ {})\n        else:\n            response = self.get_response_from_llm(query,\
      \ context) if self.use_llm and question_id.endswith('purpose') else self.clean_and_get_unique_elements(str(info.get(question_id,\
      \ '')))\n        if response and response != 'None':\n            response_str\
      \ = str(response)\n            response_str = response_str.strip()\n       \
      \     if response_str:\n                self.qa_list.append({'question': query,\
      \ 'answer': response_str})\n                if question_type == 'file' and self.use_summary:\n\
      \                    context = info['file_summary']\n                self.instruct_list.append({'instruction':\
      \ query, 'input': context, 'output': response_str})\n\n    def process_question_type(self,\
      \ question_type: str, question_id: str, question_text: str) -> None:\n     \
      \   if question_type == 'file':\n            query = question_text.format(filename=self.base_name)\n\
      \            context = self.file_details['file_info']['file_code']\n       \
      \     info = self.file_details['file_info']\n            self.process_question(question_type,\
      \ question_id, query, context, info)\n        elif question_type == 'method':\n\
      \            for class_name, class_info in self.file_details['classes'].items():\n\
      \                for key, method_info in class_info.items():\n             \
      \       if key.startswith('class_method_'):\n                        method_name\
      \ = key[len('class_method_'):]\n                        context = method_info['method_code']\n\
      \                        mapping = {'class_name': class_name, 'method_name':\
      \ method_name}\n                        query = question_text.format(filename=self.base_name,\
      \ **mapping)\n                        self.process_question(question_type, question_id,\
      \ query, context, method_info)\n        else:\n            for name, info in\
      \ self.file_details[self.question_mapping[question_type]].items():\n       \
      \         context = info[f'{question_type}_code']\n                mapping =\
      \ {f'{question_type}_name': name}\n                if question_id == f'{question_type}_variable_purpose'\
      \ and self.use_llm:\n                    self.process_items(question_type, question_id,\
      \ question_text, self.base_name, name, info, context, f'{question_type}_variables')\n\
      \                elif question_id != f'{question_type}_variable_purpose':\n\
      \                    query = question_text.format(filename=self.base_name, **mapping)\n\
      \                    self.process_question(question_type, question_id, query,\
      \ context, info)\n\n    def generate(self) -> tuple[List[Dict], List[Dict]]:\n\
      \        for question in self.questions:\n            question_id = question['id']\n\
      \            question_text = question['text']\n            question_type = question['type']\n\
      \            self.process_question_type(question_type, question_id, question_text)\n\
      \        return (self.qa_list, self.instruct_list)"
    class_ast: 'ClassDef(name=''DatasetGenerator'', bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    A
      class used to generate JSON formatted dictionary outputs for a Python \n    file.\n    Attributes:\n        file_path
      (str): The path to the Python file.\n        file_details (Dict): A dictionary
      containing details of the Python\n            file.\n        base_name (str):
      The base name of the Python file.\n        questions (List): A list of questions
      for which responses are to be\n            generated.\n        qa_list (List):
      A list to store the generated question-answer pairs.\n        instruct_list
      (List): A list to store the generated instructions.\n        question_mapping
      (Dict): A dictionary mapping question types to their\n            corresponding
      keys in the file details.\n        use_llm (bool): A flag indicating whether
      to use a language model for\n            generating responses.\n        llm
      (AutoModelForCausalLM): The language model to be used for\n            generating
      responses.\n    Methods:\n        clean_and_get_unique_elements(input_str: str)
      -> str: Cleans an input \n            string and returns a string of unique
      elements.\n        add_to_list(list_to_update: List[Dict], query: str, response:
      str,\n            additional_field=None) -> List[Dict]: Adds a response to a
      list.\n        get_response_from_llm(query: str, context: str) -> str: Gets
      a \n            response from the language model.\n        get_variable_purpose(question_id:
      str, question_text: str, base_name:\n            str, name: str, info: Dict,
      context: str, variable_type: str) -> \n                None: Processes questions
      related to the purpose of a variable.\n        process_question(question_id:
      str, query: str, context: str, info) -> \n            None: Processes a question
      and adds the generated response to the\n            qa_list and instruct_list.\n        process_file_question(question_id:
      str, question_text: str) -> None:\n            Processes questions related to
      a file.\n        process_func_class_question(question_type: str, question_id:
      str, \n            question_text: str) -> None: Processes questions related
      to a \n            function or class.\n        generate() -> Tuple[List[Dict],
      List[Dict]]: Generates responses for\n            all the questions and returns
      the qa_list and instruct_list.\n    '', lineno=42, col_offset=4, end_lineno=80,
      end_col_offset=7), lineno=42, col_offset=4, end_lineno=80, end_col_offset=7),
      FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
      lineno=81, col_offset=17, end_lineno=81, end_col_offset=21), arg(arg=''file_path'',
      annotation=Name(id=''str'', ctx=Load(), lineno=81, col_offset=34, end_lineno=81,
      end_col_offset=37), lineno=81, col_offset=23, end_lineno=81, end_col_offset=37),
      arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load(), lineno=81,
      col_offset=53, end_lineno=81, end_col_offset=57), lineno=81, col_offset=39,
      end_lineno=81, end_col_offset=57), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=81, col_offset=70, end_lineno=81, end_col_offset=73), lineno=81,
      col_offset=59, end_lineno=81, end_col_offset=73), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=81, col_offset=86, end_lineno=81, end_col_offset=90), slice=Name(id=''Dict'',
      ctx=Load(), lineno=81, col_offset=91, end_lineno=81, end_col_offset=95), ctx=Load(),
      lineno=81, col_offset=86, end_lineno=81, end_col_offset=96), lineno=81, col_offset=75,
      end_lineno=81, end_col_offset=96), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=81, col_offset=107, end_lineno=81, end_col_offset=111), lineno=81,
      col_offset=98, end_lineno=81, end_col_offset=111), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=81, col_offset=126, end_lineno=81,
      end_col_offset=130), lineno=81, col_offset=113, end_lineno=81, end_col_offset=130),
      arg(arg=''llm'', lineno=81, col_offset=132, end_lineno=81, end_col_offset=135),
      arg(arg=''prompt'', lineno=81, col_offset=137, end_lineno=81, end_col_offset=143)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=12), attr=''file_path'',
      ctx=Store(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=22)], value=Name(id=''file_path'',
      ctx=Load(), lineno=82, col_offset=25, end_lineno=82, end_col_offset=34), lineno=82,
      col_offset=8, end_lineno=82, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=83, col_offset=8, end_lineno=83, end_col_offset=12), attr=''file_details'',
      ctx=Store(), lineno=83, col_offset=8, end_lineno=83, end_col_offset=25)], value=Name(id=''file_details'',
      ctx=Load(), lineno=83, col_offset=28, end_lineno=83, end_col_offset=40), lineno=83,
      col_offset=8, end_lineno=83, end_col_offset=40), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=84, col_offset=8, end_lineno=84, end_col_offset=12), attr=''base_name'',
      ctx=Store(), lineno=84, col_offset=8, end_lineno=84, end_col_offset=22)], value=Name(id=''base_name'',
      ctx=Load(), lineno=84, col_offset=25, end_lineno=84, end_col_offset=34), lineno=84,
      col_offset=8, end_lineno=84, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=85, col_offset=8, end_lineno=85, end_col_offset=12), attr=''questions'',
      ctx=Store(), lineno=85, col_offset=8, end_lineno=85, end_col_offset=22)], value=Name(id=''questions'',
      ctx=Load(), lineno=85, col_offset=25, end_lineno=85, end_col_offset=34), lineno=85,
      col_offset=8, end_lineno=85, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=86, col_offset=8, end_lineno=86, end_col_offset=12), attr=''qa_list'',
      ctx=Store(), lineno=86, col_offset=8, end_lineno=86, end_col_offset=20)], value=List(elts=[],
      ctx=Load(), lineno=86, col_offset=23, end_lineno=86, end_col_offset=25), lineno=86,
      col_offset=8, end_lineno=86, end_col_offset=25), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=87, col_offset=8, end_lineno=87, end_col_offset=12), attr=''instruct_list'',
      ctx=Store(), lineno=87, col_offset=8, end_lineno=87, end_col_offset=26)], value=List(elts=[],
      ctx=Load(), lineno=87, col_offset=29, end_lineno=87, end_col_offset=31), lineno=87,
      col_offset=8, end_lineno=87, end_col_offset=31), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=88, col_offset=8, end_lineno=88, end_col_offset=12), attr=''question_mapping'',
      ctx=Store(), lineno=88, col_offset=8, end_lineno=88, end_col_offset=29)], value=Dict(keys=[Constant(value=''file'',
      lineno=89, col_offset=12, end_lineno=89, end_col_offset=18), Constant(value=''function'',
      lineno=90, col_offset=12, end_lineno=90, end_col_offset=22), Constant(value=''class'',
      lineno=91, col_offset=12, end_lineno=91, end_col_offset=19), Constant(value=''method'',
      lineno=92, col_offset=12, end_lineno=92, end_col_offset=20)], values=[Constant(value=''file'',
      lineno=89, col_offset=20, end_lineno=89, end_col_offset=26), Constant(value=''functions'',
      lineno=90, col_offset=24, end_lineno=90, end_col_offset=35), Constant(value=''classes'',
      lineno=91, col_offset=21, end_lineno=91, end_col_offset=30), Constant(value=''classes'',
      lineno=92, col_offset=22, end_lineno=92, end_col_offset=31)], lineno=88, col_offset=32,
      end_lineno=93, end_col_offset=9), lineno=88, col_offset=8, end_lineno=93, end_col_offset=9),
      Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=94, col_offset=8,
      end_lineno=94, end_col_offset=12), attr=''use_llm'', ctx=Store(), lineno=94,
      col_offset=8, end_lineno=94, end_col_offset=20)], value=Name(id=''use_llm'',
      ctx=Load(), lineno=94, col_offset=23, end_lineno=94, end_col_offset=30), lineno=94,
      col_offset=8, end_lineno=94, end_col_offset=30), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=95, col_offset=8, end_lineno=95, end_col_offset=12), attr=''llm'',
      ctx=Store(), lineno=95, col_offset=8, end_lineno=95, end_col_offset=16)], value=Name(id=''llm'',
      ctx=Load(), lineno=95, col_offset=19, end_lineno=95, end_col_offset=22), lineno=95,
      col_offset=8, end_lineno=95, end_col_offset=22), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=96, col_offset=8, end_lineno=96, end_col_offset=12), attr=''prompt'',
      ctx=Store(), lineno=96, col_offset=8, end_lineno=96, end_col_offset=19)], value=Name(id=''prompt'',
      ctx=Load(), lineno=96, col_offset=22, end_lineno=96, end_col_offset=28), lineno=96,
      col_offset=8, end_lineno=96, end_col_offset=28), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(),
      operand=Attribute(value=Name(id=''self'', ctx=Load(), lineno=98, col_offset=15,
      end_lineno=98, end_col_offset=19), attr=''use_llm'', ctx=Load(), lineno=98,
      col_offset=15, end_lineno=98, end_col_offset=27), lineno=98, col_offset=11,
      end_lineno=98, end_col_offset=27), Compare(left=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=98, col_offset=31, end_lineno=98, end_col_offset=35), attr=''llm'',
      ctx=Load(), lineno=98, col_offset=31, end_lineno=98, end_col_offset=39), ops=[Is()],
      comparators=[Constant(value=None, lineno=98, col_offset=43, end_lineno=98, end_col_offset=47)],
      lineno=98, col_offset=31, end_lineno=98, end_col_offset=47)], lineno=98, col_offset=11,
      end_lineno=98, end_col_offset=47), body=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=99, col_offset=12, end_lineno=99, end_col_offset=16), attr=''use_llm'',
      ctx=Store(), lineno=99, col_offset=12, end_lineno=99, end_col_offset=24)], value=Constant(value=False,
      lineno=99, col_offset=27, end_lineno=99, end_col_offset=32), lineno=99, col_offset=12,
      end_lineno=99, end_col_offset=32), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=100, col_offset=12, end_lineno=100, end_col_offset=16), attr=''llm'',
      ctx=Store(), lineno=100, col_offset=12, end_lineno=100, end_col_offset=20)],
      value=Constant(value=None, lineno=100, col_offset=23, end_lineno=100, end_col_offset=27),
      lineno=100, col_offset=12, end_lineno=100, end_col_offset=27)], orelse=[], lineno=98,
      col_offset=8, end_lineno=100, end_col_offset=27), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=101, col_offset=8, end_lineno=101, end_col_offset=12), attr=''use_summary'',
      ctx=Store(), lineno=101, col_offset=8, end_lineno=101, end_col_offset=24)],
      value=Name(id=''use_summary'', ctx=Load(), lineno=101, col_offset=27, end_lineno=101,
      end_col_offset=38), lineno=101, col_offset=8, end_lineno=101, end_col_offset=38)],
      decorator_list=[], lineno=81, col_offset=4, end_lineno=101, end_col_offset=38),
      FunctionDef(name=''clean_and_get_unique_elements'', args=arguments(posonlyargs=[],
      args=[arg(arg=''input_str'', annotation=Name(id=''str'', ctx=Load(), lineno=104,
      col_offset=49, end_lineno=104, end_col_offset=52), lineno=104, col_offset=38,
      end_lineno=104, end_col_offset=52)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Assign(targets=[Name(id=''cleaned_elements'', ctx=Store(), lineno=105,
      col_offset=8, end_lineno=105, end_col_offset=24)], value=Call(func=Name(id=''set'',
      ctx=Load(), lineno=105, col_offset=27, end_lineno=105, end_col_offset=30), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''re'',
      ctx=Load(), lineno=105, col_offset=31, end_lineno=105, end_col_offset=33), attr=''sub'',
      ctx=Load(), lineno=105, col_offset=31, end_lineno=105, end_col_offset=37), args=[Constant(value=''[^\\w\\-_>\\s:/.]'',
      lineno=105, col_offset=38, end_lineno=105, end_col_offset=55), Constant(value='''',
      lineno=105, col_offset=57, end_lineno=105, end_col_offset=59), Call(func=Attribute(value=Name(id=''element'',
      ctx=Load(), lineno=105, col_offset=61, end_lineno=105, end_col_offset=68), attr=''strip'',
      ctx=Load(), lineno=105, col_offset=61, end_lineno=105, end_col_offset=74), args=[],
      keywords=[], lineno=105, col_offset=61, end_lineno=105, end_col_offset=76)],
      keywords=[], lineno=105, col_offset=31, end_lineno=105, end_col_offset=77),
      generators=[comprehension(target=Name(id=''element'', ctx=Store(), lineno=106,
      col_offset=35, end_lineno=106, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''re'',
      ctx=Load(), lineno=106, col_offset=46, end_lineno=106, end_col_offset=48), attr=''sub'',
      ctx=Load(), lineno=106, col_offset=46, end_lineno=106, end_col_offset=52), args=[Constant(value=''\\s+'',
      lineno=106, col_offset=53, end_lineno=106, end_col_offset=59), Constant(value=''
      '', lineno=106, col_offset=61, end_lineno=106, end_col_offset=64), Name(id=''input_str'',
      ctx=Load(), lineno=106, col_offset=66, end_lineno=106, end_col_offset=75)],
      keywords=[], lineno=106, col_offset=46, end_lineno=106, end_col_offset=76),
      attr=''split'', ctx=Load(), lineno=106, col_offset=46, end_lineno=106, end_col_offset=82),
      args=[Constant(value='','', lineno=106, col_offset=83, end_lineno=106, end_col_offset=86)],
      keywords=[], lineno=106, col_offset=46, end_lineno=106, end_col_offset=87),
      ifs=[], is_async=0)], lineno=105, col_offset=30, end_lineno=106, end_col_offset=88)],
      keywords=[], lineno=105, col_offset=27, end_lineno=106, end_col_offset=88),
      lineno=105, col_offset=8, end_lineno=106, end_col_offset=88), Return(value=Call(func=Attribute(value=Constant(value='',
      '', lineno=107, col_offset=15, end_lineno=107, end_col_offset=19), attr=''join'',
      ctx=Load(), lineno=107, col_offset=15, end_lineno=107, end_col_offset=24), args=[Name(id=''cleaned_elements'',
      ctx=Load(), lineno=107, col_offset=25, end_lineno=107, end_col_offset=41)],
      keywords=[], lineno=107, col_offset=15, end_lineno=107, end_col_offset=42),
      lineno=107, col_offset=8, end_lineno=107, end_col_offset=42)], decorator_list=[Name(id=''staticmethod'',
      ctx=Load(), lineno=103, col_offset=5, end_lineno=103, end_col_offset=17)], returns=Name(id=''str'',
      ctx=Load(), lineno=104, col_offset=57, end_lineno=104, end_col_offset=60), lineno=104,
      col_offset=4, end_lineno=107, end_col_offset=42), FunctionDef(name=''add_to_list'',
      args=arguments(posonlyargs=[], args=[arg(arg=''list_to_update'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=110, col_offset=36, end_lineno=110, end_col_offset=40), slice=Name(id=''Dict'',
      ctx=Load(), lineno=110, col_offset=41, end_lineno=110, end_col_offset=45), ctx=Load(),
      lineno=110, col_offset=36, end_lineno=110, end_col_offset=46), lineno=110, col_offset=20,
      end_lineno=110, end_col_offset=46), arg(arg=''query'', annotation=Name(id=''str'',
      ctx=Load(), lineno=110, col_offset=55, end_lineno=110, end_col_offset=58), lineno=110,
      col_offset=48, end_lineno=110, end_col_offset=58), arg(arg=''response'', annotation=Name(id=''str'',
      ctx=Load(), lineno=110, col_offset=70, end_lineno=110, end_col_offset=73), lineno=110,
      col_offset=60, end_lineno=110, end_col_offset=73), arg(arg=''additional_field'',
      lineno=110, col_offset=75, end_lineno=110, end_col_offset=91)], kwonlyargs=[],
      kw_defaults=[], defaults=[Constant(value=None, lineno=110, col_offset=92, end_lineno=110,
      end_col_offset=96)]), body=[If(test=BoolOp(op=And(), values=[Name(id=''response'',
      ctx=Load(), lineno=111, col_offset=11, end_lineno=111, end_col_offset=19), Call(func=Attribute(value=Name(id=''response'',
      ctx=Load(), lineno=111, col_offset=24, end_lineno=111, end_col_offset=32), attr=''strip'',
      ctx=Load(), lineno=111, col_offset=24, end_lineno=111, end_col_offset=38), args=[],
      keywords=[], lineno=111, col_offset=24, end_lineno=111, end_col_offset=40),
      Compare(left=Name(id=''response'', ctx=Load(), lineno=111, col_offset=45, end_lineno=111,
      end_col_offset=53), ops=[NotEq()], comparators=[Constant(value=''None'', lineno=111,
      col_offset=57, end_lineno=111, end_col_offset=63)], lineno=111, col_offset=45,
      end_lineno=111, end_col_offset=63)], lineno=111, col_offset=11, end_lineno=111,
      end_col_offset=63), body=[Expr(value=Call(func=Attribute(value=Name(id=''list_to_update'',
      ctx=Load(), lineno=112, col_offset=12, end_lineno=112, end_col_offset=26), attr=''append'',
      ctx=Load(), lineno=112, col_offset=12, end_lineno=112, end_col_offset=33), args=[IfExp(test=Name(id=''additional_field'',
      ctx=Load(), lineno=114, col_offset=19, end_lineno=114, end_col_offset=35), body=Dict(keys=[Constant(value=''instruction'',
      lineno=113, col_offset=17, end_lineno=113, end_col_offset=30), Constant(value=''input'',
      lineno=113, col_offset=39, end_lineno=113, end_col_offset=46), Constant(value=''output'',
      lineno=113, col_offset=67, end_lineno=113, end_col_offset=75)], values=[Name(id=''query'',
      ctx=Load(), lineno=113, col_offset=32, end_lineno=113, end_col_offset=37), Name(id=''additional_field'',
      ctx=Load(), lineno=113, col_offset=49, end_lineno=113, end_col_offset=65), Name(id=''response'',
      ctx=Load(), lineno=113, col_offset=77, end_lineno=113, end_col_offset=85)],
      lineno=113, col_offset=16, end_lineno=113, end_col_offset=86), orelse=Dict(keys=[Constant(value=''question'',
      lineno=115, col_offset=17, end_lineno=115, end_col_offset=27), Constant(value=''answer'',
      lineno=115, col_offset=36, end_lineno=115, end_col_offset=44)], values=[Name(id=''query'',
      ctx=Load(), lineno=115, col_offset=29, end_lineno=115, end_col_offset=34), Name(id=''response'',
      ctx=Load(), lineno=115, col_offset=46, end_lineno=115, end_col_offset=54)],
      lineno=115, col_offset=16, end_lineno=115, end_col_offset=55), lineno=113, col_offset=16,
      end_lineno=115, end_col_offset=55)], keywords=[], lineno=112, col_offset=12,
      end_lineno=116, end_col_offset=13), lineno=112, col_offset=12, end_lineno=116,
      end_col_offset=13)], orelse=[], lineno=111, col_offset=8, end_lineno=116, end_col_offset=13),
      Return(value=Name(id=''list_to_update'', ctx=Load(), lineno=117, col_offset=15,
      end_lineno=117, end_col_offset=29), lineno=117, col_offset=8, end_lineno=117,
      end_col_offset=29)], decorator_list=[Name(id=''staticmethod'', ctx=Load(), lineno=109,
      col_offset=5, end_lineno=109, end_col_offset=17)], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=110, col_offset=101, end_lineno=110, end_col_offset=105),
      slice=Name(id=''Dict'', ctx=Load(), lineno=110, col_offset=106, end_lineno=110,
      end_col_offset=110), ctx=Load(), lineno=110, col_offset=101, end_lineno=110,
      end_col_offset=111), lineno=110, col_offset=4, end_lineno=117, end_col_offset=29),
      FunctionDef(name=''get_response_from_llm'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
      lineno=119, col_offset=30, end_lineno=119, end_col_offset=34), arg(arg=''query'',
      annotation=Name(id=''str'', ctx=Load(), lineno=119, col_offset=43, end_lineno=119,
      end_col_offset=46), lineno=119, col_offset=36, end_lineno=119, end_col_offset=46),
      arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(), lineno=119, col_offset=57,
      end_lineno=119, end_col_offset=60), lineno=119, col_offset=48, end_lineno=119,
      end_col_offset=60)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''response'',
      ctx=Store(), lineno=120, col_offset=8, end_lineno=120, end_col_offset=16)],
      value=Constant(value='''', lineno=120, col_offset=19, end_lineno=120, end_col_offset=21),
      lineno=120, col_offset=8, end_lineno=120, end_col_offset=21), If(test=UnaryOp(op=Not(),
      operand=Attribute(value=Name(id=''self'', ctx=Load(), lineno=121, col_offset=15,
      end_lineno=121, end_col_offset=19), attr=''llm'', ctx=Load(), lineno=121, col_offset=15,
      end_lineno=121, end_col_offset=23), lineno=121, col_offset=11, end_lineno=121,
      end_col_offset=23), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
      ctx=Load(), lineno=122, col_offset=12, end_lineno=122, end_col_offset=18), attr=''error'',
      ctx=Load(), lineno=122, col_offset=12, end_lineno=122, end_col_offset=24), args=[Constant(value=''AI
      model not available.'', lineno=122, col_offset=25, end_lineno=122, end_col_offset=50)],
      keywords=[], lineno=122, col_offset=12, end_lineno=122, end_col_offset=51),
      lineno=122, col_offset=12, end_lineno=122, end_col_offset=51), Return(value=Name(id=''response'',
      ctx=Load(), lineno=123, col_offset=19, end_lineno=123, end_col_offset=27), lineno=123,
      col_offset=12, end_lineno=123, end_col_offset=27)], orelse=[], lineno=121, col_offset=8,
      end_lineno=123, end_col_offset=27), Try(body=[Assign(targets=[Name(id=''prompt'',
      ctx=Store(), lineno=125, col_offset=12, end_lineno=125, end_col_offset=18)],
      value=Call(func=Attribute(value=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=125, col_offset=21, end_lineno=125, end_col_offset=25), attr=''prompt'',
      ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=32), attr=''format'',
      ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=39), args=[],
      keywords=[keyword(arg=''context'', value=Name(id=''context'', ctx=Load(), lineno=125,
      col_offset=48, end_lineno=125, end_col_offset=55), lineno=125, col_offset=40,
      end_lineno=125, end_col_offset=55), keyword(arg=''query'', value=Name(id=''query'',
      ctx=Load(), lineno=125, col_offset=63, end_lineno=125, end_col_offset=68), lineno=125,
      col_offset=57, end_lineno=125, end_col_offset=68)], lineno=125, col_offset=21,
      end_lineno=125, end_col_offset=69), lineno=125, col_offset=12, end_lineno=125,
      end_col_offset=69), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=19), attr=''info'',
      ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=24), args=[JoinedStr(values=[Constant(value=''Query:
      '', lineno=126, col_offset=25, end_lineno=126, end_col_offset=42), FormattedValue(value=Name(id=''query'',
      ctx=Load(), lineno=126, col_offset=35, end_lineno=126, end_col_offset=40), conversion=-1,
      lineno=126, col_offset=25, end_lineno=126, end_col_offset=42)], lineno=126,
      col_offset=25, end_lineno=126, end_col_offset=42)], keywords=[], lineno=126,
      col_offset=12, end_lineno=126, end_col_offset=43), lineno=126, col_offset=12,
      end_lineno=126, end_col_offset=43), Assign(targets=[Name(id=''response'', ctx=Store(),
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=20)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=127, col_offset=23, end_lineno=127, end_col_offset=27), attr=''llm'',
      ctx=Load(), lineno=127, col_offset=23, end_lineno=127, end_col_offset=31), args=[Name(id=''prompt'',
      ctx=Load(), lineno=127, col_offset=32, end_lineno=127, end_col_offset=38)],
      keywords=[], lineno=127, col_offset=23, end_lineno=127, end_col_offset=39),
      lineno=127, col_offset=12, end_lineno=127, end_col_offset=39), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=19), attr=''info'',
      ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=24), args=[JoinedStr(values=[Constant(value=''Response:
      '', lineno=128, col_offset=25, end_lineno=128, end_col_offset=48), FormattedValue(value=Name(id=''response'',
      ctx=Load(), lineno=128, col_offset=38, end_lineno=128, end_col_offset=46), conversion=-1,
      lineno=128, col_offset=25, end_lineno=128, end_col_offset=48)], lineno=128,
      col_offset=25, end_lineno=128, end_col_offset=48)], keywords=[], lineno=128,
      col_offset=12, end_lineno=128, end_col_offset=49), lineno=128, col_offset=12,
      end_lineno=128, end_col_offset=49)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
      ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=18), attr=''error'',
      ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=24), args=[Constant(value=''Failed
      to generate model response'', lineno=130, col_offset=25, end_lineno=130, end_col_offset=60)],
      keywords=[], lineno=130, col_offset=12, end_lineno=130, end_col_offset=61),
      lineno=130, col_offset=12, end_lineno=130, end_col_offset=61)], lineno=129,
      col_offset=8, end_lineno=130, end_col_offset=61)], orelse=[], finalbody=[],
      lineno=124, col_offset=8, end_lineno=130, end_col_offset=61), Return(value=Name(id=''response'',
      ctx=Load(), lineno=131, col_offset=15, end_lineno=131, end_col_offset=23), lineno=131,
      col_offset=8, end_lineno=131, end_col_offset=23)], decorator_list=[], returns=Name(id=''str'',
      ctx=Load(), lineno=119, col_offset=65, end_lineno=119, end_col_offset=68), lineno=119,
      col_offset=4, end_lineno=131, end_col_offset=23), FunctionDef(name=''process_items'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=133, col_offset=22,
      end_lineno=133, end_col_offset=26), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=133, col_offset=43, end_lineno=133, end_col_offset=46), lineno=133,
      col_offset=28, end_lineno=133, end_col_offset=46), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=133, col_offset=61, end_lineno=133,
      end_col_offset=64), lineno=133, col_offset=48, end_lineno=133, end_col_offset=64),
      arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load(), lineno=133,
      col_offset=81, end_lineno=133, end_col_offset=84), lineno=133, col_offset=66,
      end_lineno=133, end_col_offset=84), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=133, col_offset=97, end_lineno=133, end_col_offset=100),
      lineno=133, col_offset=86, end_lineno=133, end_col_offset=100), arg(arg=''name'',
      annotation=Name(id=''str'', ctx=Load(), lineno=133, col_offset=108, end_lineno=133,
      end_col_offset=111), lineno=133, col_offset=102, end_lineno=133, end_col_offset=111),
      arg(arg=''info'', annotation=Name(id=''Dict'', ctx=Load(), lineno=133, col_offset=119,
      end_lineno=133, end_col_offset=123), lineno=133, col_offset=113, end_lineno=133,
      end_col_offset=123), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
      lineno=133, col_offset=134, end_lineno=133, end_col_offset=137), lineno=133,
      col_offset=125, end_lineno=133, end_col_offset=137), arg(arg=''item_type'',
      annotation=Name(id=''str'', ctx=Load(), lineno=133, col_offset=150, end_lineno=133,
      end_col_offset=153), lineno=133, col_offset=139, end_lineno=133, end_col_offset=153)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Name(id=''info'',
      ctx=Load(), lineno=134, col_offset=11, end_lineno=134, end_col_offset=15), slice=Name(id=''item_type'',
      ctx=Load(), lineno=134, col_offset=16, end_lineno=134, end_col_offset=25), ctx=Load(),
      lineno=134, col_offset=11, end_lineno=134, end_col_offset=26), body=[Assign(targets=[Name(id=''items'',
      ctx=Store(), lineno=135, col_offset=12, end_lineno=135, end_col_offset=17)],
      value=ListComp(elt=Call(func=Attribute(value=Name(id=''item'', ctx=Load(), lineno=135,
      col_offset=21, end_lineno=135, end_col_offset=25), attr=''strip'', ctx=Load(),
      lineno=135, col_offset=21, end_lineno=135, end_col_offset=31), args=[], keywords=[],
      lineno=135, col_offset=21, end_lineno=135, end_col_offset=33), generators=[comprehension(target=Name(id=''item'',
      ctx=Store(), lineno=135, col_offset=38, end_lineno=135, end_col_offset=42),
      iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=135, col_offset=46, end_lineno=135, end_col_offset=50), attr=''clean_and_get_unique_elements'',
      ctx=Load(), lineno=135, col_offset=46, end_lineno=135, end_col_offset=80), args=[Call(func=Name(id=''str'',
      ctx=Load(), lineno=135, col_offset=81, end_lineno=135, end_col_offset=84), args=[Subscript(value=Name(id=''info'',
      ctx=Load(), lineno=135, col_offset=85, end_lineno=135, end_col_offset=89), slice=Name(id=''item_type'',
      ctx=Load(), lineno=135, col_offset=90, end_lineno=135, end_col_offset=99), ctx=Load(),
      lineno=135, col_offset=85, end_lineno=135, end_col_offset=100)], keywords=[],
      lineno=135, col_offset=81, end_lineno=135, end_col_offset=101)], keywords=[],
      lineno=135, col_offset=46, end_lineno=135, end_col_offset=102), attr=''split'',
      ctx=Load(), lineno=135, col_offset=46, end_lineno=135, end_col_offset=108),
      args=[Constant(value='','', lineno=135, col_offset=109, end_lineno=135, end_col_offset=112)],
      keywords=[], lineno=135, col_offset=46, end_lineno=135, end_col_offset=113),
      ifs=[Name(id=''item'', ctx=Load(), lineno=135, col_offset=117, end_lineno=135,
      end_col_offset=121)], is_async=0)], lineno=135, col_offset=20, end_lineno=135,
      end_col_offset=122), lineno=135, col_offset=12, end_lineno=135, end_col_offset=122),
      Assign(targets=[Name(id=''itemstring'', ctx=Store(), lineno=136, col_offset=12,
      end_lineno=136, end_col_offset=22)], value=Call(func=Attribute(value=Constant(value='',
      '', lineno=136, col_offset=25, end_lineno=136, end_col_offset=29), attr=''join'',
      ctx=Load(), lineno=136, col_offset=25, end_lineno=136, end_col_offset=34), args=[Name(id=''items'',
      ctx=Load(), lineno=136, col_offset=35, end_lineno=136, end_col_offset=40)],
      keywords=[], lineno=136, col_offset=25, end_lineno=136, end_col_offset=41),
      lineno=136, col_offset=12, end_lineno=136, end_col_offset=41), Assign(targets=[Name(id=''query'',
      ctx=Store(), lineno=137, col_offset=12, end_lineno=137, end_col_offset=17)],
      value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load(), lineno=137,
      col_offset=20, end_lineno=137, end_col_offset=33), attr=''format'', ctx=Load(),
      lineno=137, col_offset=20, end_lineno=137, end_col_offset=40), args=[], keywords=[keyword(arg=''filename'',
      value=Name(id=''base_name'', ctx=Load(), lineno=137, col_offset=50, end_lineno=137,
      end_col_offset=59), lineno=137, col_offset=41, end_lineno=137, end_col_offset=59),
      keyword(value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''question_type'',
      ctx=Load(), lineno=137, col_offset=67, end_lineno=137, end_col_offset=80), attr=''split'',
      ctx=Load(), lineno=137, col_offset=67, end_lineno=137, end_col_offset=86), args=[Constant(value=''_'',
      lineno=137, col_offset=87, end_lineno=137, end_col_offset=90)], keywords=[],
      lineno=137, col_offset=67, end_lineno=137, end_col_offset=91), slice=Constant(value=0,
      lineno=137, col_offset=92, end_lineno=137, end_col_offset=93), ctx=Load(), lineno=137,
      col_offset=67, end_lineno=137, end_col_offset=94), conversion=-1, lineno=137,
      col_offset=64, end_lineno=137, end_col_offset=101), Constant(value=''_name'',
      lineno=137, col_offset=64, end_lineno=137, end_col_offset=101)], lineno=137,
      col_offset=64, end_lineno=137, end_col_offset=101), JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''question_type'',
      ctx=Load(), lineno=137, col_offset=112, end_lineno=137, end_col_offset=125),
      attr=''split'', ctx=Load(), lineno=137, col_offset=112, end_lineno=137, end_col_offset=131),
      args=[Constant(value=''_'', lineno=137, col_offset=132, end_lineno=137, end_col_offset=135)],
      keywords=[], lineno=137, col_offset=112, end_lineno=137, end_col_offset=136),
      slice=Constant(value=0, lineno=137, col_offset=137, end_lineno=137, end_col_offset=138),
      ctx=Load(), lineno=137, col_offset=112, end_lineno=137, end_col_offset=139),
      conversion=-1, lineno=137, col_offset=109, end_lineno=137, end_col_offset=151),
      Constant(value=''_variables'', lineno=137, col_offset=109, end_lineno=137, end_col_offset=151)],
      lineno=137, col_offset=109, end_lineno=137, end_col_offset=151)], values=[Name(id=''name'',
      ctx=Load(), lineno=137, col_offset=103, end_lineno=137, end_col_offset=107),
      Name(id=''itemstring'', ctx=Load(), lineno=137, col_offset=153, end_lineno=137,
      end_col_offset=163)], lineno=137, col_offset=63, end_lineno=137, end_col_offset=164),
      lineno=137, col_offset=61, end_lineno=137, end_col_offset=164)], lineno=137,
      col_offset=20, end_lineno=137, end_col_offset=165), lineno=137, col_offset=12,
      end_lineno=137, end_col_offset=165), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=138, col_offset=12, end_lineno=138, end_col_offset=16), attr=''process_question'',
      ctx=Load(), lineno=138, col_offset=12, end_lineno=138, end_col_offset=33), args=[Name(id=''question_type'',
      ctx=Load(), lineno=138, col_offset=34, end_lineno=138, end_col_offset=47), Name(id=''question_id'',
      ctx=Load(), lineno=138, col_offset=49, end_lineno=138, end_col_offset=60), Name(id=''query'',
      ctx=Load(), lineno=138, col_offset=62, end_lineno=138, end_col_offset=67), Name(id=''context'',
      ctx=Load(), lineno=138, col_offset=69, end_lineno=138, end_col_offset=76), Name(id=''info'',
      ctx=Load(), lineno=138, col_offset=78, end_lineno=138, end_col_offset=82)],
      keywords=[], lineno=138, col_offset=12, end_lineno=138, end_col_offset=83),
      lineno=138, col_offset=12, end_lineno=138, end_col_offset=83)], orelse=[], lineno=134,
      col_offset=8, end_lineno=138, end_col_offset=83)], decorator_list=[], returns=Constant(value=None,
      lineno=133, col_offset=158, end_lineno=133, end_col_offset=162), lineno=133,
      col_offset=4, end_lineno=138, end_col_offset=83), FunctionDef(name=''process_question'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=140, col_offset=25,
      end_lineno=140, end_col_offset=29), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=140, col_offset=46, end_lineno=140, end_col_offset=49), lineno=140,
      col_offset=31, end_lineno=140, end_col_offset=49), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=140, col_offset=64, end_lineno=140,
      end_col_offset=67), lineno=140, col_offset=51, end_lineno=140, end_col_offset=67),
      arg(arg=''query'', annotation=Name(id=''str'', ctx=Load(), lineno=140, col_offset=76,
      end_lineno=140, end_col_offset=79), lineno=140, col_offset=69, end_lineno=140,
      end_col_offset=79), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
      lineno=140, col_offset=90, end_lineno=140, end_col_offset=93), lineno=140, col_offset=81,
      end_lineno=140, end_col_offset=93), arg(arg=''info'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=140, col_offset=101, end_lineno=140, end_col_offset=105),
      lineno=140, col_offset=95, end_lineno=140, end_col_offset=105)], kwonlyargs=[],
      kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id=''question_id'',
      ctx=Load(), lineno=141, col_offset=11, end_lineno=141, end_col_offset=22), attr=''endswith'',
      ctx=Load(), lineno=141, col_offset=11, end_lineno=141, end_col_offset=31), args=[Constant(value=''code_graph'',
      lineno=141, col_offset=32, end_lineno=141, end_col_offset=44)], keywords=[],
      lineno=141, col_offset=11, end_lineno=141, end_col_offset=45), body=[Assign(targets=[Name(id=''response'',
      ctx=Store(), lineno=142, col_offset=12, end_lineno=142, end_col_offset=20)],
      value=Call(func=Attribute(value=Name(id=''info'', ctx=Load(), lineno=142, col_offset=23,
      end_lineno=142, end_col_offset=27), attr=''get'', ctx=Load(), lineno=142, col_offset=23,
      end_lineno=142, end_col_offset=31), args=[Name(id=''question_id'', ctx=Load(),
      lineno=142, col_offset=32, end_lineno=142, end_col_offset=43), Dict(keys=[],
      values=[], lineno=142, col_offset=45, end_lineno=142, end_col_offset=47)], keywords=[],
      lineno=142, col_offset=23, end_lineno=142, end_col_offset=48), lineno=142, col_offset=12,
      end_lineno=142, end_col_offset=48)], orelse=[Assign(targets=[Name(id=''response'',
      ctx=Store(), lineno=144, col_offset=12, end_lineno=144, end_col_offset=20)],
      value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=144, col_offset=69, end_lineno=144, end_col_offset=73), attr=''use_llm'',
      ctx=Load(), lineno=144, col_offset=69, end_lineno=144, end_col_offset=81), Call(func=Attribute(value=Name(id=''question_id'',
      ctx=Load(), lineno=144, col_offset=86, end_lineno=144, end_col_offset=97), attr=''endswith'',
      ctx=Load(), lineno=144, col_offset=86, end_lineno=144, end_col_offset=106),
      args=[Constant(value=''purpose'', lineno=144, col_offset=107, end_lineno=144,
      end_col_offset=116)], keywords=[], lineno=144, col_offset=86, end_lineno=144,
      end_col_offset=117)], lineno=144, col_offset=69, end_lineno=144, end_col_offset=117),
      body=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=144, col_offset=23,
      end_lineno=144, end_col_offset=27), attr=''get_response_from_llm'', ctx=Load(),
      lineno=144, col_offset=23, end_lineno=144, end_col_offset=49), args=[Name(id=''query'',
      ctx=Load(), lineno=144, col_offset=50, end_lineno=144, end_col_offset=55), Name(id=''context'',
      ctx=Load(), lineno=144, col_offset=57, end_lineno=144, end_col_offset=64)],
      keywords=[], lineno=144, col_offset=23, end_lineno=144, end_col_offset=65),
      orelse=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=144, col_offset=123,
      end_lineno=144, end_col_offset=127), attr=''clean_and_get_unique_elements'',
      ctx=Load(), lineno=144, col_offset=123, end_lineno=144, end_col_offset=157),
      args=[Call(func=Name(id=''str'', ctx=Load(), lineno=144, col_offset=158, end_lineno=144,
      end_col_offset=161), args=[Call(func=Attribute(value=Name(id=''info'', ctx=Load(),
      lineno=144, col_offset=162, end_lineno=144, end_col_offset=166), attr=''get'',
      ctx=Load(), lineno=144, col_offset=162, end_lineno=144, end_col_offset=170),
      args=[Name(id=''question_id'', ctx=Load(), lineno=144, col_offset=171, end_lineno=144,
      end_col_offset=182), Constant(value='''', lineno=144, col_offset=184, end_lineno=144,
      end_col_offset=186)], keywords=[], lineno=144, col_offset=162, end_lineno=144,
      end_col_offset=187)], keywords=[], lineno=144, col_offset=158, end_lineno=144,
      end_col_offset=188)], keywords=[], lineno=144, col_offset=123, end_lineno=144,
      end_col_offset=189), lineno=144, col_offset=23, end_lineno=144, end_col_offset=189),
      lineno=144, col_offset=12, end_lineno=144, end_col_offset=189)], lineno=141,
      col_offset=8, end_lineno=144, end_col_offset=189), If(test=BoolOp(op=And(),
      values=[Name(id=''response'', ctx=Load(), lineno=145, col_offset=11, end_lineno=145,
      end_col_offset=19), Compare(left=Name(id=''response'', ctx=Load(), lineno=145,
      col_offset=24, end_lineno=145, end_col_offset=32), ops=[NotEq()], comparators=[Constant(value=''None'',
      lineno=145, col_offset=36, end_lineno=145, end_col_offset=42)], lineno=145,
      col_offset=24, end_lineno=145, end_col_offset=42)], lineno=145, col_offset=11,
      end_lineno=145, end_col_offset=42), body=[Assign(targets=[Name(id=''response_str'',
      ctx=Store(), lineno=146, col_offset=12, end_lineno=146, end_col_offset=24)],
      value=Call(func=Name(id=''str'', ctx=Load(), lineno=146, col_offset=27, end_lineno=146,
      end_col_offset=30), args=[Name(id=''response'', ctx=Load(), lineno=146, col_offset=31,
      end_lineno=146, end_col_offset=39)], keywords=[], lineno=146, col_offset=27,
      end_lineno=146, end_col_offset=40), lineno=146, col_offset=12, end_lineno=146,
      end_col_offset=40), Assign(targets=[Name(id=''response_str'', ctx=Store(), lineno=147,
      col_offset=12, end_lineno=147, end_col_offset=24)], value=Call(func=Attribute(value=Name(id=''response_str'',
      ctx=Load(), lineno=147, col_offset=27, end_lineno=147, end_col_offset=39), attr=''strip'',
      ctx=Load(), lineno=147, col_offset=27, end_lineno=147, end_col_offset=45), args=[],
      keywords=[], lineno=147, col_offset=27, end_lineno=147, end_col_offset=47),
      lineno=147, col_offset=12, end_lineno=147, end_col_offset=47), If(test=Name(id=''response_str'',
      ctx=Load(), lineno=148, col_offset=15, end_lineno=148, end_col_offset=27), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=149, col_offset=16, end_lineno=149, end_col_offset=20), attr=''qa_list'',
      ctx=Load(), lineno=149, col_offset=16, end_lineno=149, end_col_offset=28), attr=''append'',
      ctx=Load(), lineno=149, col_offset=16, end_lineno=149, end_col_offset=35), args=[Dict(keys=[Constant(value=''question'',
      lineno=149, col_offset=37, end_lineno=149, end_col_offset=47), Constant(value=''answer'',
      lineno=149, col_offset=56, end_lineno=149, end_col_offset=64)], values=[Name(id=''query'',
      ctx=Load(), lineno=149, col_offset=49, end_lineno=149, end_col_offset=54), Name(id=''response_str'',
      ctx=Load(), lineno=149, col_offset=66, end_lineno=149, end_col_offset=78)],
      lineno=149, col_offset=36, end_lineno=149, end_col_offset=79)], keywords=[],
      lineno=149, col_offset=16, end_lineno=149, end_col_offset=80), lineno=149, col_offset=16,
      end_lineno=149, end_col_offset=80), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_type'',
      ctx=Load(), lineno=150, col_offset=19, end_lineno=150, end_col_offset=32), ops=[Eq()],
      comparators=[Constant(value=''file'', lineno=150, col_offset=36, end_lineno=150,
      end_col_offset=42)], lineno=150, col_offset=19, end_lineno=150, end_col_offset=42),
      Attribute(value=Name(id=''self'', ctx=Load(), lineno=150, col_offset=47, end_lineno=150,
      end_col_offset=51), attr=''use_summary'', ctx=Load(), lineno=150, col_offset=47,
      end_lineno=150, end_col_offset=63)], lineno=150, col_offset=19, end_lineno=150,
      end_col_offset=63), body=[Assign(targets=[Name(id=''context'', ctx=Store(),
      lineno=151, col_offset=20, end_lineno=151, end_col_offset=27)], value=Subscript(value=Name(id=''info'',
      ctx=Load(), lineno=151, col_offset=30, end_lineno=151, end_col_offset=34), slice=Constant(value=''file_summary'',
      lineno=151, col_offset=35, end_lineno=151, end_col_offset=49), ctx=Load(), lineno=151,
      col_offset=30, end_lineno=151, end_col_offset=50), lineno=151, col_offset=20,
      end_lineno=151, end_col_offset=50)], orelse=[], lineno=150, col_offset=16, end_lineno=151,
      end_col_offset=50), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=20), attr=''instruct_list'',
      ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=34), attr=''append'',
      ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=41), args=[Dict(keys=[Constant(value=''instruction'',
      lineno=152, col_offset=43, end_lineno=152, end_col_offset=56), Constant(value=''input'',
      lineno=152, col_offset=65, end_lineno=152, end_col_offset=72), Constant(value=''output'',
      lineno=152, col_offset=83, end_lineno=152, end_col_offset=91)], values=[Name(id=''query'',
      ctx=Load(), lineno=152, col_offset=58, end_lineno=152, end_col_offset=63), Name(id=''context'',
      ctx=Load(), lineno=152, col_offset=74, end_lineno=152, end_col_offset=81), Name(id=''response_str'',
      ctx=Load(), lineno=152, col_offset=93, end_lineno=152, end_col_offset=105)],
      lineno=152, col_offset=42, end_lineno=152, end_col_offset=106)], keywords=[],
      lineno=152, col_offset=16, end_lineno=152, end_col_offset=107), lineno=152,
      col_offset=16, end_lineno=152, end_col_offset=107)], orelse=[], lineno=148,
      col_offset=12, end_lineno=152, end_col_offset=107)], orelse=[], lineno=145,
      col_offset=8, end_lineno=152, end_col_offset=107)], decorator_list=[], returns=Constant(value=None,
      lineno=140, col_offset=110, end_lineno=140, end_col_offset=114), lineno=140,
      col_offset=4, end_lineno=152, end_col_offset=107), FunctionDef(name=''process_question_type'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=154, col_offset=30,
      end_lineno=154, end_col_offset=34), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=154, col_offset=51, end_lineno=154, end_col_offset=54), lineno=154,
      col_offset=36, end_lineno=154, end_col_offset=54), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=154, col_offset=69, end_lineno=154,
      end_col_offset=72), lineno=154, col_offset=56, end_lineno=154, end_col_offset=72),
      arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load(), lineno=154,
      col_offset=89, end_lineno=154, end_col_offset=92), lineno=154, col_offset=74,
      end_lineno=154, end_col_offset=92)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[If(test=Compare(left=Name(id=''question_type'', ctx=Load(), lineno=155,
      col_offset=11, end_lineno=155, end_col_offset=24), ops=[Eq()], comparators=[Constant(value=''file'',
      lineno=155, col_offset=28, end_lineno=155, end_col_offset=34)], lineno=155,
      col_offset=11, end_lineno=155, end_col_offset=34), body=[Assign(targets=[Name(id=''query'',
      ctx=Store(), lineno=156, col_offset=12, end_lineno=156, end_col_offset=17)],
      value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load(), lineno=156,
      col_offset=20, end_lineno=156, end_col_offset=33), attr=''format'', ctx=Load(),
      lineno=156, col_offset=20, end_lineno=156, end_col_offset=40), args=[], keywords=[keyword(arg=''filename'',
      value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=156, col_offset=50,
      end_lineno=156, end_col_offset=54), attr=''base_name'', ctx=Load(), lineno=156,
      col_offset=50, end_lineno=156, end_col_offset=64), lineno=156, col_offset=41,
      end_lineno=156, end_col_offset=64)], lineno=156, col_offset=20, end_lineno=156,
      end_col_offset=65), lineno=156, col_offset=12, end_lineno=156, end_col_offset=65),
      Assign(targets=[Name(id=''context'', ctx=Store(), lineno=157, col_offset=12,
      end_lineno=157, end_col_offset=19)], value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=157, col_offset=22, end_lineno=157, end_col_offset=26), attr=''file_details'',
      ctx=Load(), lineno=157, col_offset=22, end_lineno=157, end_col_offset=39), slice=Constant(value=''file_info'',
      lineno=157, col_offset=40, end_lineno=157, end_col_offset=51), ctx=Load(), lineno=157,
      col_offset=22, end_lineno=157, end_col_offset=52), slice=Constant(value=''file_code'',
      lineno=157, col_offset=53, end_lineno=157, end_col_offset=64), ctx=Load(), lineno=157,
      col_offset=22, end_lineno=157, end_col_offset=65), lineno=157, col_offset=12,
      end_lineno=157, end_col_offset=65), Assign(targets=[Name(id=''info'', ctx=Store(),
      lineno=158, col_offset=12, end_lineno=158, end_col_offset=16)], value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=158, col_offset=19, end_lineno=158, end_col_offset=23), attr=''file_details'',
      ctx=Load(), lineno=158, col_offset=19, end_lineno=158, end_col_offset=36), slice=Constant(value=''file_info'',
      lineno=158, col_offset=37, end_lineno=158, end_col_offset=48), ctx=Load(), lineno=158,
      col_offset=19, end_lineno=158, end_col_offset=49), lineno=158, col_offset=12,
      end_lineno=158, end_col_offset=49), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=159, col_offset=12, end_lineno=159, end_col_offset=16), attr=''process_question'',
      ctx=Load(), lineno=159, col_offset=12, end_lineno=159, end_col_offset=33), args=[Name(id=''question_type'',
      ctx=Load(), lineno=159, col_offset=34, end_lineno=159, end_col_offset=47), Name(id=''question_id'',
      ctx=Load(), lineno=159, col_offset=49, end_lineno=159, end_col_offset=60), Name(id=''query'',
      ctx=Load(), lineno=159, col_offset=62, end_lineno=159, end_col_offset=67), Name(id=''context'',
      ctx=Load(), lineno=159, col_offset=69, end_lineno=159, end_col_offset=76), Name(id=''info'',
      ctx=Load(), lineno=159, col_offset=78, end_lineno=159, end_col_offset=82)],
      keywords=[], lineno=159, col_offset=12, end_lineno=159, end_col_offset=83),
      lineno=159, col_offset=12, end_lineno=159, end_col_offset=83)], orelse=[If(test=Compare(left=Name(id=''question_type'',
      ctx=Load(), lineno=160, col_offset=13, end_lineno=160, end_col_offset=26), ops=[Eq()],
      comparators=[Constant(value=''method'', lineno=160, col_offset=30, end_lineno=160,
      end_col_offset=38)], lineno=160, col_offset=13, end_lineno=160, end_col_offset=38),
      body=[For(target=Tuple(elts=[Name(id=''class_name'', ctx=Store(), lineno=161,
      col_offset=16, end_lineno=161, end_col_offset=26), Name(id=''class_info'', ctx=Store(),
      lineno=161, col_offset=28, end_lineno=161, end_col_offset=38)], ctx=Store(),
      lineno=161, col_offset=16, end_lineno=161, end_col_offset=38), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=161, col_offset=42, end_lineno=161, end_col_offset=46), attr=''file_details'',
      ctx=Load(), lineno=161, col_offset=42, end_lineno=161, end_col_offset=59), slice=Constant(value=''classes'',
      lineno=161, col_offset=60, end_lineno=161, end_col_offset=69), ctx=Load(), lineno=161,
      col_offset=42, end_lineno=161, end_col_offset=70), attr=''items'', ctx=Load(),
      lineno=161, col_offset=42, end_lineno=161, end_col_offset=76), args=[], keywords=[],
      lineno=161, col_offset=42, end_lineno=161, end_col_offset=78), body=[For(target=Tuple(elts=[Name(id=''key'',
      ctx=Store(), lineno=162, col_offset=20, end_lineno=162, end_col_offset=23),
      Name(id=''method_info'', ctx=Store(), lineno=162, col_offset=25, end_lineno=162,
      end_col_offset=36)], ctx=Store(), lineno=162, col_offset=20, end_lineno=162,
      end_col_offset=36), iter=Call(func=Attribute(value=Name(id=''class_info'', ctx=Load(),
      lineno=162, col_offset=40, end_lineno=162, end_col_offset=50), attr=''items'',
      ctx=Load(), lineno=162, col_offset=40, end_lineno=162, end_col_offset=56), args=[],
      keywords=[], lineno=162, col_offset=40, end_lineno=162, end_col_offset=58),
      body=[If(test=Call(func=Attribute(value=Name(id=''key'', ctx=Load(), lineno=163,
      col_offset=23, end_lineno=163, end_col_offset=26), attr=''startswith'', ctx=Load(),
      lineno=163, col_offset=23, end_lineno=163, end_col_offset=37), args=[Constant(value=''class_method_'',
      lineno=163, col_offset=38, end_lineno=163, end_col_offset=53)], keywords=[],
      lineno=163, col_offset=23, end_lineno=163, end_col_offset=54), body=[Assign(targets=[Name(id=''method_name'',
      ctx=Store(), lineno=164, col_offset=24, end_lineno=164, end_col_offset=35)],
      value=Subscript(value=Name(id=''key'', ctx=Load(), lineno=164, col_offset=38,
      end_lineno=164, end_col_offset=41), slice=Slice(lower=Call(func=Name(id=''len'',
      ctx=Load(), lineno=164, col_offset=42, end_lineno=164, end_col_offset=45), args=[Constant(value=''class_method_'',
      lineno=164, col_offset=46, end_lineno=164, end_col_offset=61)], keywords=[],
      lineno=164, col_offset=42, end_lineno=164, end_col_offset=62), lineno=164, col_offset=42,
      end_lineno=164, end_col_offset=63), ctx=Load(), lineno=164, col_offset=38, end_lineno=164,
      end_col_offset=64), lineno=164, col_offset=24, end_lineno=164, end_col_offset=64),
      Assign(targets=[Name(id=''context'', ctx=Store(), lineno=165, col_offset=24,
      end_lineno=165, end_col_offset=31)], value=Subscript(value=Name(id=''method_info'',
      ctx=Load(), lineno=165, col_offset=34, end_lineno=165, end_col_offset=45), slice=Constant(value=''method_code'',
      lineno=165, col_offset=46, end_lineno=165, end_col_offset=59), ctx=Load(), lineno=165,
      col_offset=34, end_lineno=165, end_col_offset=60), lineno=165, col_offset=24,
      end_lineno=165, end_col_offset=60), Assign(targets=[Name(id=''mapping'', ctx=Store(),
      lineno=166, col_offset=24, end_lineno=166, end_col_offset=31)], value=Dict(keys=[Constant(value=''class_name'',
      lineno=166, col_offset=35, end_lineno=166, end_col_offset=47), Constant(value=''method_name'',
      lineno=166, col_offset=61, end_lineno=166, end_col_offset=74)], values=[Name(id=''class_name'',
      ctx=Load(), lineno=166, col_offset=49, end_lineno=166, end_col_offset=59), Name(id=''method_name'',
      ctx=Load(), lineno=166, col_offset=76, end_lineno=166, end_col_offset=87)],
      lineno=166, col_offset=34, end_lineno=166, end_col_offset=88), lineno=166, col_offset=24,
      end_lineno=166, end_col_offset=88), Assign(targets=[Name(id=''query'', ctx=Store(),
      lineno=167, col_offset=24, end_lineno=167, end_col_offset=29)], value=Call(func=Attribute(value=Name(id=''question_text'',
      ctx=Load(), lineno=167, col_offset=32, end_lineno=167, end_col_offset=45), attr=''format'',
      ctx=Load(), lineno=167, col_offset=32, end_lineno=167, end_col_offset=52), args=[],
      keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=167, col_offset=62, end_lineno=167, end_col_offset=66), attr=''base_name'',
      ctx=Load(), lineno=167, col_offset=62, end_lineno=167, end_col_offset=76), lineno=167,
      col_offset=53, end_lineno=167, end_col_offset=76), keyword(value=Name(id=''mapping'',
      ctx=Load(), lineno=167, col_offset=80, end_lineno=167, end_col_offset=87), lineno=167,
      col_offset=78, end_lineno=167, end_col_offset=87)], lineno=167, col_offset=32,
      end_lineno=167, end_col_offset=88), lineno=167, col_offset=24, end_lineno=167,
      end_col_offset=88), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=168, col_offset=24, end_lineno=168, end_col_offset=28), attr=''process_question'',
      ctx=Load(), lineno=168, col_offset=24, end_lineno=168, end_col_offset=45), args=[Name(id=''question_type'',
      ctx=Load(), lineno=168, col_offset=46, end_lineno=168, end_col_offset=59), Name(id=''question_id'',
      ctx=Load(), lineno=168, col_offset=61, end_lineno=168, end_col_offset=72), Name(id=''query'',
      ctx=Load(), lineno=168, col_offset=74, end_lineno=168, end_col_offset=79), Name(id=''context'',
      ctx=Load(), lineno=168, col_offset=81, end_lineno=168, end_col_offset=88), Name(id=''method_info'',
      ctx=Load(), lineno=168, col_offset=90, end_lineno=168, end_col_offset=101)],
      keywords=[], lineno=168, col_offset=24, end_lineno=168, end_col_offset=102),
      lineno=168, col_offset=24, end_lineno=168, end_col_offset=102)], orelse=[],
      lineno=163, col_offset=20, end_lineno=168, end_col_offset=102)], orelse=[],
      lineno=162, col_offset=16, end_lineno=168, end_col_offset=102)], orelse=[],
      lineno=161, col_offset=12, end_lineno=168, end_col_offset=102)], orelse=[For(target=Tuple(elts=[Name(id=''name'',
      ctx=Store(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=20),
      Name(id=''info'', ctx=Store(), lineno=170, col_offset=22, end_lineno=170, end_col_offset=26)],
      ctx=Store(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=26),
      iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=170, col_offset=30, end_lineno=170, end_col_offset=34), attr=''file_details'',
      ctx=Load(), lineno=170, col_offset=30, end_lineno=170, end_col_offset=47), slice=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=170, col_offset=48, end_lineno=170, end_col_offset=52), attr=''question_mapping'',
      ctx=Load(), lineno=170, col_offset=48, end_lineno=170, end_col_offset=69), slice=Name(id=''question_type'',
      ctx=Load(), lineno=170, col_offset=70, end_lineno=170, end_col_offset=83), ctx=Load(),
      lineno=170, col_offset=48, end_lineno=170, end_col_offset=84), ctx=Load(), lineno=170,
      col_offset=30, end_lineno=170, end_col_offset=85), attr=''items'', ctx=Load(),
      lineno=170, col_offset=30, end_lineno=170, end_col_offset=91), args=[], keywords=[],
      lineno=170, col_offset=30, end_lineno=170, end_col_offset=93), body=[Assign(targets=[Name(id=''context'',
      ctx=Store(), lineno=171, col_offset=16, end_lineno=171, end_col_offset=23)],
      value=Subscript(value=Name(id=''info'', ctx=Load(), lineno=171, col_offset=26,
      end_lineno=171, end_col_offset=30), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=171, col_offset=34, end_lineno=171, end_col_offset=47), conversion=-1,
      lineno=171, col_offset=31, end_lineno=171, end_col_offset=54), Constant(value=''_code'',
      lineno=171, col_offset=31, end_lineno=171, end_col_offset=54)], lineno=171,
      col_offset=31, end_lineno=171, end_col_offset=54), ctx=Load(), lineno=171, col_offset=26,
      end_lineno=171, end_col_offset=55), lineno=171, col_offset=16, end_lineno=171,
      end_col_offset=55), Assign(targets=[Name(id=''mapping'', ctx=Store(), lineno=172,
      col_offset=16, end_lineno=172, end_col_offset=23)], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=172, col_offset=30, end_lineno=172, end_col_offset=43), conversion=-1,
      lineno=172, col_offset=27, end_lineno=172, end_col_offset=50), Constant(value=''_name'',
      lineno=172, col_offset=27, end_lineno=172, end_col_offset=50)], lineno=172,
      col_offset=27, end_lineno=172, end_col_offset=50)], values=[Name(id=''name'',
      ctx=Load(), lineno=172, col_offset=52, end_lineno=172, end_col_offset=56)],
      lineno=172, col_offset=26, end_lineno=172, end_col_offset=57), lineno=172, col_offset=16,
      end_lineno=172, end_col_offset=57), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_id'',
      ctx=Load(), lineno=173, col_offset=19, end_lineno=173, end_col_offset=30), ops=[Eq()],
      comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=173, col_offset=37, end_lineno=173, end_col_offset=50), conversion=-1,
      lineno=173, col_offset=34, end_lineno=173, end_col_offset=69), Constant(value=''_variable_purpose'',
      lineno=173, col_offset=34, end_lineno=173, end_col_offset=69)], lineno=173,
      col_offset=34, end_lineno=173, end_col_offset=69)], lineno=173, col_offset=19,
      end_lineno=173, end_col_offset=69), Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=173, col_offset=74, end_lineno=173, end_col_offset=78), attr=''use_llm'',
      ctx=Load(), lineno=173, col_offset=74, end_lineno=173, end_col_offset=86)],
      lineno=173, col_offset=19, end_lineno=173, end_col_offset=86), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=174, col_offset=20, end_lineno=174, end_col_offset=24), attr=''process_items'',
      ctx=Load(), lineno=174, col_offset=20, end_lineno=174, end_col_offset=38), args=[Name(id=''question_type'',
      ctx=Load(), lineno=174, col_offset=39, end_lineno=174, end_col_offset=52), Name(id=''question_id'',
      ctx=Load(), lineno=174, col_offset=54, end_lineno=174, end_col_offset=65), Name(id=''question_text'',
      ctx=Load(), lineno=174, col_offset=67, end_lineno=174, end_col_offset=80), Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=174, col_offset=82, end_lineno=174, end_col_offset=86), attr=''base_name'',
      ctx=Load(), lineno=174, col_offset=82, end_lineno=174, end_col_offset=96), Name(id=''name'',
      ctx=Load(), lineno=174, col_offset=98, end_lineno=174, end_col_offset=102),
      Name(id=''info'', ctx=Load(), lineno=174, col_offset=104, end_lineno=174, end_col_offset=108),
      Name(id=''context'', ctx=Load(), lineno=174, col_offset=110, end_lineno=174,
      end_col_offset=117), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=174, col_offset=122, end_lineno=174, end_col_offset=135),
      conversion=-1, lineno=174, col_offset=119, end_lineno=174, end_col_offset=147),
      Constant(value=''_variables'', lineno=174, col_offset=119, end_lineno=174, end_col_offset=147)],
      lineno=174, col_offset=119, end_lineno=174, end_col_offset=147)], keywords=[],
      lineno=174, col_offset=20, end_lineno=174, end_col_offset=148), lineno=174,
      col_offset=20, end_lineno=174, end_col_offset=148)], orelse=[If(test=Compare(left=Name(id=''question_id'',
      ctx=Load(), lineno=175, col_offset=21, end_lineno=175, end_col_offset=32), ops=[NotEq()],
      comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=175, col_offset=39, end_lineno=175, end_col_offset=52), conversion=-1,
      lineno=175, col_offset=36, end_lineno=175, end_col_offset=71), Constant(value=''_variable_purpose'',
      lineno=175, col_offset=36, end_lineno=175, end_col_offset=71)], lineno=175,
      col_offset=36, end_lineno=175, end_col_offset=71)], lineno=175, col_offset=21,
      end_lineno=175, end_col_offset=71), body=[Assign(targets=[Name(id=''query'',
      ctx=Store(), lineno=176, col_offset=20, end_lineno=176, end_col_offset=25)],
      value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load(), lineno=176,
      col_offset=28, end_lineno=176, end_col_offset=41), attr=''format'', ctx=Load(),
      lineno=176, col_offset=28, end_lineno=176, end_col_offset=48), args=[], keywords=[keyword(arg=''filename'',
      value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=176, col_offset=58,
      end_lineno=176, end_col_offset=62), attr=''base_name'', ctx=Load(), lineno=176,
      col_offset=58, end_lineno=176, end_col_offset=72), lineno=176, col_offset=49,
      end_lineno=176, end_col_offset=72), keyword(value=Name(id=''mapping'', ctx=Load(),
      lineno=176, col_offset=76, end_lineno=176, end_col_offset=83), lineno=176, col_offset=74,
      end_lineno=176, end_col_offset=83)], lineno=176, col_offset=28, end_lineno=176,
      end_col_offset=84), lineno=176, col_offset=20, end_lineno=176, end_col_offset=84),
      Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=177,
      col_offset=20, end_lineno=177, end_col_offset=24), attr=''process_question'',
      ctx=Load(), lineno=177, col_offset=20, end_lineno=177, end_col_offset=41), args=[Name(id=''question_type'',
      ctx=Load(), lineno=177, col_offset=42, end_lineno=177, end_col_offset=55), Name(id=''question_id'',
      ctx=Load(), lineno=177, col_offset=57, end_lineno=177, end_col_offset=68), Name(id=''query'',
      ctx=Load(), lineno=177, col_offset=70, end_lineno=177, end_col_offset=75), Name(id=''context'',
      ctx=Load(), lineno=177, col_offset=77, end_lineno=177, end_col_offset=84), Name(id=''info'',
      ctx=Load(), lineno=177, col_offset=86, end_lineno=177, end_col_offset=90)],
      keywords=[], lineno=177, col_offset=20, end_lineno=177, end_col_offset=91),
      lineno=177, col_offset=20, end_lineno=177, end_col_offset=91)], orelse=[], lineno=175,
      col_offset=16, end_lineno=177, end_col_offset=91)], lineno=173, col_offset=16,
      end_lineno=177, end_col_offset=91)], orelse=[], lineno=170, col_offset=12, end_lineno=177,
      end_col_offset=91)], lineno=160, col_offset=8, end_lineno=177, end_col_offset=91)],
      lineno=155, col_offset=8, end_lineno=177, end_col_offset=91)], decorator_list=[],
      returns=Constant(value=None, lineno=154, col_offset=97, end_lineno=154, end_col_offset=101),
      lineno=154, col_offset=4, end_lineno=177, end_col_offset=91), FunctionDef(name=''generate'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=179, col_offset=17,
      end_lineno=179, end_col_offset=21)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[For(target=Name(id=''question'', ctx=Store(), lineno=180, col_offset=12,
      end_lineno=180, end_col_offset=20), iter=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=180, col_offset=24, end_lineno=180, end_col_offset=28), attr=''questions'',
      ctx=Load(), lineno=180, col_offset=24, end_lineno=180, end_col_offset=38), body=[Assign(targets=[Name(id=''question_id'',
      ctx=Store(), lineno=181, col_offset=12, end_lineno=181, end_col_offset=23)],
      value=Subscript(value=Name(id=''question'', ctx=Load(), lineno=181, col_offset=26,
      end_lineno=181, end_col_offset=34), slice=Constant(value=''id'', lineno=181,
      col_offset=35, end_lineno=181, end_col_offset=39), ctx=Load(), lineno=181, col_offset=26,
      end_lineno=181, end_col_offset=40), lineno=181, col_offset=12, end_lineno=181,
      end_col_offset=40), Assign(targets=[Name(id=''question_text'', ctx=Store(),
      lineno=182, col_offset=12, end_lineno=182, end_col_offset=25)], value=Subscript(value=Name(id=''question'',
      ctx=Load(), lineno=182, col_offset=28, end_lineno=182, end_col_offset=36), slice=Constant(value=''text'',
      lineno=182, col_offset=37, end_lineno=182, end_col_offset=43), ctx=Load(), lineno=182,
      col_offset=28, end_lineno=182, end_col_offset=44), lineno=182, col_offset=12,
      end_lineno=182, end_col_offset=44), Assign(targets=[Name(id=''question_type'',
      ctx=Store(), lineno=183, col_offset=12, end_lineno=183, end_col_offset=25)],
      value=Subscript(value=Name(id=''question'', ctx=Load(), lineno=183, col_offset=28,
      end_lineno=183, end_col_offset=36), slice=Constant(value=''type'', lineno=183,
      col_offset=37, end_lineno=183, end_col_offset=43), ctx=Load(), lineno=183, col_offset=28,
      end_lineno=183, end_col_offset=44), lineno=183, col_offset=12, end_lineno=183,
      end_col_offset=44), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=184, col_offset=12, end_lineno=184, end_col_offset=16), attr=''process_question_type'',
      ctx=Load(), lineno=184, col_offset=12, end_lineno=184, end_col_offset=38), args=[Name(id=''question_type'',
      ctx=Load(), lineno=184, col_offset=39, end_lineno=184, end_col_offset=52), Name(id=''question_id'',
      ctx=Load(), lineno=184, col_offset=54, end_lineno=184, end_col_offset=65), Name(id=''question_text'',
      ctx=Load(), lineno=184, col_offset=67, end_lineno=184, end_col_offset=80)],
      keywords=[], lineno=184, col_offset=12, end_lineno=184, end_col_offset=81),
      lineno=184, col_offset=12, end_lineno=184, end_col_offset=81)], orelse=[], lineno=180,
      col_offset=8, end_lineno=184, end_col_offset=81), Return(value=Tuple(elts=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=185, col_offset=15, end_lineno=185, end_col_offset=19), attr=''qa_list'',
      ctx=Load(), lineno=185, col_offset=15, end_lineno=185, end_col_offset=27), Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=185, col_offset=29, end_lineno=185, end_col_offset=33), attr=''instruct_list'',
      ctx=Load(), lineno=185, col_offset=29, end_lineno=185, end_col_offset=47)],
      ctx=Load(), lineno=185, col_offset=15, end_lineno=185, end_col_offset=47), lineno=185,
      col_offset=8, end_lineno=185, end_col_offset=47)], decorator_list=[], returns=Subscript(value=Name(id=''tuple'',
      ctx=Load(), lineno=179, col_offset=26, end_lineno=179, end_col_offset=31), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=179, col_offset=32, end_lineno=179, end_col_offset=36), slice=Name(id=''Dict'',
      ctx=Load(), lineno=179, col_offset=37, end_lineno=179, end_col_offset=41), ctx=Load(),
      lineno=179, col_offset=32, end_lineno=179, end_col_offset=42), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=179, col_offset=44, end_lineno=179, end_col_offset=48), slice=Name(id=''Dict'',
      ctx=Load(), lineno=179, col_offset=49, end_lineno=179, end_col_offset=53), ctx=Load(),
      lineno=179, col_offset=44, end_lineno=179, end_col_offset=54)], ctx=Load(),
      lineno=179, col_offset=32, end_lineno=179, end_col_offset=54), ctx=Load(), lineno=179,
      col_offset=26, end_lineno=179, end_col_offset=55), lineno=179, col_offset=4,
      end_lineno=185, end_col_offset=47)], decorator_list=[], lineno=41, col_offset=0,
      end_lineno=185, end_col_offset=47)'
    class_docstring: "A class used to generate JSON formatted dictionary outputs for\
      \ a Python \nfile.\nAttributes:\n    file_path (str): The path to the Python\
      \ file.\n    file_details (Dict): A dictionary containing details of the Python\n\
      \        file.\n    base_name (str): The base name of the Python file.\n   \
      \ questions (List): A list of questions for which responses are to be\n    \
      \    generated.\n    qa_list (List): A list to store the generated question-answer\
      \ pairs.\n    instruct_list (List): A list to store the generated instructions.\n\
      \    question_mapping (Dict): A dictionary mapping question types to their\n\
      \        corresponding keys in the file details.\n    use_llm (bool): A flag\
      \ indicating whether to use a language model for\n        generating responses.\n\
      \    llm (AutoModelForCausalLM): The language model to be used for\n       \
      \ generating responses.\nMethods:\n    clean_and_get_unique_elements(input_str:\
      \ str) -> str: Cleans an input \n        string and returns a string of unique\
      \ elements.\n    add_to_list(list_to_update: List[Dict], query: str, response:\
      \ str,\n        additional_field=None) -> List[Dict]: Adds a response to a list.\n\
      \    get_response_from_llm(query: str, context: str) -> str: Gets a \n     \
      \   response from the language model.\n    get_variable_purpose(question_id:\
      \ str, question_text: str, base_name:\n        str, name: str, info: Dict, context:\
      \ str, variable_type: str) -> \n            None: Processes questions related\
      \ to the purpose of a variable.\n    process_question(question_id: str, query:\
      \ str, context: str, info) -> \n        None: Processes a question and adds\
      \ the generated response to the\n        qa_list and instruct_list.\n    process_file_question(question_id:\
      \ str, question_text: str) -> None:\n        Processes questions related to\
      \ a file.\n    process_func_class_question(question_type: str, question_id:\
      \ str, \n        question_text: str) -> None: Processes questions related to\
      \ a \n        function or class.\n    generate() -> Tuple[List[Dict], List[Dict]]:\
      \ Generates responses for\n        all the questions and returns the qa_list\
      \ and instruct_list."
    class_inputs: null
    class_defaults: null
    class_returns:
    - ''', ''.join(cleaned_elements)'
    - list_to_update
    - response
    - (self.qa_list, self.instruct_list)
    - response
    class_calls:
    - logging.info
    - item.strip
    - self.process_question_type
    - question_type.split
    - len
    - question_id.endswith
    - ''', ''.join'
    - class_info.items
    - list_to_update.append
    - response.strip
    - self.clean_and_get_unique_elements
    - self.process_items
    - self.llm
    - self.get_response_from_llm
    - self.qa_list.append
    - question_text.format
    - str
    - key.startswith
    - self.file_details[self.question_mapping[question_type]].items
    - re.sub
    - response_str.strip
    - self.clean_and_get_unique_elements(str(info[item_type])).split
    - self.instruct_list.append
    - element.strip
    - logger.error
    - self.prompt.format
    - self.file_details['classes'].items
    - set
    - re.sub('\\s+', ' ', input_str).split
    - info.get
    - self.process_question
    class_variables:
    - response
    - question_id
    - prompt
    - query
    - info
    - method_name
    - itemstring
    - question_type
    - response_str
    - mapping
    - question_text
    - items
    - cleaned_elements
    - context
    class_decorators: []
    class_annotations: []
    class_properties:
    - self.base_name
    - self.qa_list
    - self.instruct_list
    - self.use_llm
    - self.llm
    - self.question_mapping
    - self.use_summary
    - self.prompt
    - self.file_details
    - self.file_path
    - self.questions
    class_attributes:
    - file_path
    - file_details
    - base_name
    - questions
    - qa_list
    - instruct_list
    - question_mapping
    - use_llm
    - llm
    - prompt
    - use_summary
    - use_llm
    - llm
    class_methods:
    - clean_and_get_unique_elements
    - add_to_list
    - get_response_from_llm
    - process_items
    - process_question
    - process_question_type
    - generate
    class_inheritance: []
    class_static_methods:
    - clean_and_get_unique_elements
    - add_to_list
    class_method___init__:
      method_name: __init__
      method_code: "def __init__(self, file_path: str, file_details: Dict, base_name:\
        \ str, questions: List[Dict], use_llm: bool, use_summary: bool, llm, prompt):\n\
        \    self.file_path = file_path\n    self.file_details = file_details\n  \
        \  self.base_name = base_name\n    self.questions = questions\n    self.qa_list\
        \ = []\n    self.instruct_list = []\n    self.question_mapping = {'file':\
        \ 'file', 'function': 'functions', 'class': 'classes', 'method': 'classes'}\n\
        \    self.use_llm = use_llm\n    self.llm = llm\n    self.prompt = prompt\n\
        \    if not self.use_llm or self.llm is None:\n        self.use_llm = False\n\
        \        self.llm = None\n    self.use_summary = use_summary"
      method_ast: FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self',
        lineno=81, col_offset=17, end_lineno=81, end_col_offset=21), arg(arg='file_path',
        annotation=Name(id='str', ctx=Load(), lineno=81, col_offset=34, end_lineno=81,
        end_col_offset=37), lineno=81, col_offset=23, end_lineno=81, end_col_offset=37),
        arg(arg='file_details', annotation=Name(id='Dict', ctx=Load(), lineno=81,
        col_offset=53, end_lineno=81, end_col_offset=57), lineno=81, col_offset=39,
        end_lineno=81, end_col_offset=57), arg(arg='base_name', annotation=Name(id='str',
        ctx=Load(), lineno=81, col_offset=70, end_lineno=81, end_col_offset=73), lineno=81,
        col_offset=59, end_lineno=81, end_col_offset=73), arg(arg='questions', annotation=Subscript(value=Name(id='List',
        ctx=Load(), lineno=81, col_offset=86, end_lineno=81, end_col_offset=90), slice=Name(id='Dict',
        ctx=Load(), lineno=81, col_offset=91, end_lineno=81, end_col_offset=95), ctx=Load(),
        lineno=81, col_offset=86, end_lineno=81, end_col_offset=96), lineno=81, col_offset=75,
        end_lineno=81, end_col_offset=96), arg(arg='use_llm', annotation=Name(id='bool',
        ctx=Load(), lineno=81, col_offset=107, end_lineno=81, end_col_offset=111),
        lineno=81, col_offset=98, end_lineno=81, end_col_offset=111), arg(arg='use_summary',
        annotation=Name(id='bool', ctx=Load(), lineno=81, col_offset=126, end_lineno=81,
        end_col_offset=130), lineno=81, col_offset=113, end_lineno=81, end_col_offset=130),
        arg(arg='llm', lineno=81, col_offset=132, end_lineno=81, end_col_offset=135),
        arg(arg='prompt', lineno=81, col_offset=137, end_lineno=81, end_col_offset=143)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=12), attr='file_path',
        ctx=Store(), lineno=82, col_offset=8, end_lineno=82, end_col_offset=22)],
        value=Name(id='file_path', ctx=Load(), lineno=82, col_offset=25, end_lineno=82,
        end_col_offset=34), lineno=82, col_offset=8, end_lineno=82, end_col_offset=34),
        Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=83, col_offset=8,
        end_lineno=83, end_col_offset=12), attr='file_details', ctx=Store(), lineno=83,
        col_offset=8, end_lineno=83, end_col_offset=25)], value=Name(id='file_details',
        ctx=Load(), lineno=83, col_offset=28, end_lineno=83, end_col_offset=40), lineno=83,
        col_offset=8, end_lineno=83, end_col_offset=40), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=84, col_offset=8, end_lineno=84, end_col_offset=12), attr='base_name',
        ctx=Store(), lineno=84, col_offset=8, end_lineno=84, end_col_offset=22)],
        value=Name(id='base_name', ctx=Load(), lineno=84, col_offset=25, end_lineno=84,
        end_col_offset=34), lineno=84, col_offset=8, end_lineno=84, end_col_offset=34),
        Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=85, col_offset=8,
        end_lineno=85, end_col_offset=12), attr='questions', ctx=Store(), lineno=85,
        col_offset=8, end_lineno=85, end_col_offset=22)], value=Name(id='questions',
        ctx=Load(), lineno=85, col_offset=25, end_lineno=85, end_col_offset=34), lineno=85,
        col_offset=8, end_lineno=85, end_col_offset=34), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=86, col_offset=8, end_lineno=86, end_col_offset=12), attr='qa_list',
        ctx=Store(), lineno=86, col_offset=8, end_lineno=86, end_col_offset=20)],
        value=List(elts=[], ctx=Load(), lineno=86, col_offset=23, end_lineno=86, end_col_offset=25),
        lineno=86, col_offset=8, end_lineno=86, end_col_offset=25), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=87, col_offset=8, end_lineno=87, end_col_offset=12), attr='instruct_list',
        ctx=Store(), lineno=87, col_offset=8, end_lineno=87, end_col_offset=26)],
        value=List(elts=[], ctx=Load(), lineno=87, col_offset=29, end_lineno=87, end_col_offset=31),
        lineno=87, col_offset=8, end_lineno=87, end_col_offset=31), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=88, col_offset=8, end_lineno=88, end_col_offset=12), attr='question_mapping',
        ctx=Store(), lineno=88, col_offset=8, end_lineno=88, end_col_offset=29)],
        value=Dict(keys=[Constant(value='file', lineno=89, col_offset=12, end_lineno=89,
        end_col_offset=18), Constant(value='function', lineno=90, col_offset=12, end_lineno=90,
        end_col_offset=22), Constant(value='class', lineno=91, col_offset=12, end_lineno=91,
        end_col_offset=19), Constant(value='method', lineno=92, col_offset=12, end_lineno=92,
        end_col_offset=20)], values=[Constant(value='file', lineno=89, col_offset=20,
        end_lineno=89, end_col_offset=26), Constant(value='functions', lineno=90,
        col_offset=24, end_lineno=90, end_col_offset=35), Constant(value='classes',
        lineno=91, col_offset=21, end_lineno=91, end_col_offset=30), Constant(value='classes',
        lineno=92, col_offset=22, end_lineno=92, end_col_offset=31)], lineno=88, col_offset=32,
        end_lineno=93, end_col_offset=9), lineno=88, col_offset=8, end_lineno=93,
        end_col_offset=9), Assign(targets=[Attribute(value=Name(id='self', ctx=Load(),
        lineno=94, col_offset=8, end_lineno=94, end_col_offset=12), attr='use_llm',
        ctx=Store(), lineno=94, col_offset=8, end_lineno=94, end_col_offset=20)],
        value=Name(id='use_llm', ctx=Load(), lineno=94, col_offset=23, end_lineno=94,
        end_col_offset=30), lineno=94, col_offset=8, end_lineno=94, end_col_offset=30),
        Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=95, col_offset=8,
        end_lineno=95, end_col_offset=12), attr='llm', ctx=Store(), lineno=95, col_offset=8,
        end_lineno=95, end_col_offset=16)], value=Name(id='llm', ctx=Load(), lineno=95,
        col_offset=19, end_lineno=95, end_col_offset=22), lineno=95, col_offset=8,
        end_lineno=95, end_col_offset=22), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=96, col_offset=8, end_lineno=96, end_col_offset=12), attr='prompt',
        ctx=Store(), lineno=96, col_offset=8, end_lineno=96, end_col_offset=19)],
        value=Name(id='prompt', ctx=Load(), lineno=96, col_offset=22, end_lineno=96,
        end_col_offset=28), lineno=96, col_offset=8, end_lineno=96, end_col_offset=28),
        If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self',
        ctx=Load(), lineno=98, col_offset=15, end_lineno=98, end_col_offset=19), attr='use_llm',
        ctx=Load(), lineno=98, col_offset=15, end_lineno=98, end_col_offset=27), lineno=98,
        col_offset=11, end_lineno=98, end_col_offset=27), Compare(left=Attribute(value=Name(id='self',
        ctx=Load(), lineno=98, col_offset=31, end_lineno=98, end_col_offset=35), attr='llm',
        ctx=Load(), lineno=98, col_offset=31, end_lineno=98, end_col_offset=39), ops=[Is()],
        comparators=[Constant(value=None, lineno=98, col_offset=43, end_lineno=98,
        end_col_offset=47)], lineno=98, col_offset=31, end_lineno=98, end_col_offset=47)],
        lineno=98, col_offset=11, end_lineno=98, end_col_offset=47), body=[Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=99, col_offset=12, end_lineno=99, end_col_offset=16), attr='use_llm',
        ctx=Store(), lineno=99, col_offset=12, end_lineno=99, end_col_offset=24)],
        value=Constant(value=False, lineno=99, col_offset=27, end_lineno=99, end_col_offset=32),
        lineno=99, col_offset=12, end_lineno=99, end_col_offset=32), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=100, col_offset=12, end_lineno=100, end_col_offset=16),
        attr='llm', ctx=Store(), lineno=100, col_offset=12, end_lineno=100, end_col_offset=20)],
        value=Constant(value=None, lineno=100, col_offset=23, end_lineno=100, end_col_offset=27),
        lineno=100, col_offset=12, end_lineno=100, end_col_offset=27)], orelse=[],
        lineno=98, col_offset=8, end_lineno=100, end_col_offset=27), Assign(targets=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=101, col_offset=8, end_lineno=101, end_col_offset=12),
        attr='use_summary', ctx=Store(), lineno=101, col_offset=8, end_lineno=101,
        end_col_offset=24)], value=Name(id='use_summary', ctx=Load(), lineno=101,
        col_offset=27, end_lineno=101, end_col_offset=38), lineno=101, col_offset=8,
        end_lineno=101, end_col_offset=38)], decorator_list=[], lineno=81, col_offset=4,
        end_lineno=101, end_col_offset=38)
      method_docstring: null
      method_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - use_llm
      - use_summary
      - llm
      - prompt
      method_defaults: []
      method_returns: []
      method_calls: []
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.base_name
      - self.qa_list
      - self.instruct_list
      - self.use_llm
      - self.llm
      - self.question_mapping
      - self.use_summary
      - self.prompt
      - self.file_details
      - self.file_path
      - self.questions
    class_method_clean_and_get_unique_elements:
      method_name: clean_and_get_unique_elements
      method_code: "@staticmethod\ndef clean_and_get_unique_elements(input_str: str)\
        \ -> str:\n    cleaned_elements = set((re.sub('[^\\\\w\\\\-_>\\\\s:/.]', '',\
        \ element.strip()) for element in re.sub('\\\\s+', ' ', input_str).split(',')))\n\
        \    return ', '.join(cleaned_elements)"
      method_ast: FunctionDef(name='clean_and_get_unique_elements', args=arguments(posonlyargs=[],
        args=[arg(arg='input_str', annotation=Name(id='str', ctx=Load(), lineno=104,
        col_offset=49, end_lineno=104, end_col_offset=52), lineno=104, col_offset=38,
        end_lineno=104, end_col_offset=52)], kwonlyargs=[], kw_defaults=[], defaults=[]),
        body=[Assign(targets=[Name(id='cleaned_elements', ctx=Store(), lineno=105,
        col_offset=8, end_lineno=105, end_col_offset=24)], value=Call(func=Name(id='set',
        ctx=Load(), lineno=105, col_offset=27, end_lineno=105, end_col_offset=30),
        args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='re', ctx=Load(),
        lineno=105, col_offset=31, end_lineno=105, end_col_offset=33), attr='sub',
        ctx=Load(), lineno=105, col_offset=31, end_lineno=105, end_col_offset=37),
        args=[Constant(value='[^\\w\\-_>\\s:/.]', lineno=105, col_offset=38, end_lineno=105,
        end_col_offset=55), Constant(value='', lineno=105, col_offset=57, end_lineno=105,
        end_col_offset=59), Call(func=Attribute(value=Name(id='element', ctx=Load(),
        lineno=105, col_offset=61, end_lineno=105, end_col_offset=68), attr='strip',
        ctx=Load(), lineno=105, col_offset=61, end_lineno=105, end_col_offset=74),
        args=[], keywords=[], lineno=105, col_offset=61, end_lineno=105, end_col_offset=76)],
        keywords=[], lineno=105, col_offset=31, end_lineno=105, end_col_offset=77),
        generators=[comprehension(target=Name(id='element', ctx=Store(), lineno=106,
        col_offset=35, end_lineno=106, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re',
        ctx=Load(), lineno=106, col_offset=46, end_lineno=106, end_col_offset=48),
        attr='sub', ctx=Load(), lineno=106, col_offset=46, end_lineno=106, end_col_offset=52),
        args=[Constant(value='\\s+', lineno=106, col_offset=53, end_lineno=106, end_col_offset=59),
        Constant(value=' ', lineno=106, col_offset=61, end_lineno=106, end_col_offset=64),
        Name(id='input_str', ctx=Load(), lineno=106, col_offset=66, end_lineno=106,
        end_col_offset=75)], keywords=[], lineno=106, col_offset=46, end_lineno=106,
        end_col_offset=76), attr='split', ctx=Load(), lineno=106, col_offset=46, end_lineno=106,
        end_col_offset=82), args=[Constant(value=',', lineno=106, col_offset=83, end_lineno=106,
        end_col_offset=86)], keywords=[], lineno=106, col_offset=46, end_lineno=106,
        end_col_offset=87), ifs=[], is_async=0)], lineno=105, col_offset=30, end_lineno=106,
        end_col_offset=88)], keywords=[], lineno=105, col_offset=27, end_lineno=106,
        end_col_offset=88), lineno=105, col_offset=8, end_lineno=106, end_col_offset=88),
        Return(value=Call(func=Attribute(value=Constant(value=', ', lineno=107, col_offset=15,
        end_lineno=107, end_col_offset=19), attr='join', ctx=Load(), lineno=107, col_offset=15,
        end_lineno=107, end_col_offset=24), args=[Name(id='cleaned_elements', ctx=Load(),
        lineno=107, col_offset=25, end_lineno=107, end_col_offset=41)], keywords=[],
        lineno=107, col_offset=15, end_lineno=107, end_col_offset=42), lineno=107,
        col_offset=8, end_lineno=107, end_col_offset=42)], decorator_list=[Name(id='staticmethod',
        ctx=Load(), lineno=103, col_offset=5, end_lineno=103, end_col_offset=17)],
        returns=Name(id='str', ctx=Load(), lineno=104, col_offset=57, end_lineno=104,
        end_col_offset=60), lineno=104, col_offset=4, end_lineno=107, end_col_offset=42)
      method_docstring: null
      method_inputs:
      - input_str
      method_defaults: []
      method_returns:
      - ''', ''.join(cleaned_elements)'
      method_calls:
      - set
      - re.sub
      - re.sub('\\s+', ' ', input_str).split
      - element.strip
      - ''', ''.join'
      method_variables:
      - cleaned_elements
      method_decorators:
      - staticmethod
      method_annotations: []
      method_properties: []
    class_method_add_to_list:
      method_name: add_to_list
      method_code: "@staticmethod\ndef add_to_list(list_to_update: List[Dict], query:\
        \ str, response: str, additional_field=None) -> List[Dict]:\n    if response\
        \ and response.strip() and (response != 'None'):\n        list_to_update.append({'instruction':\
        \ query, 'input': additional_field, 'output': response} if additional_field\
        \ else {'question': query, 'answer': response})\n    return list_to_update"
      method_ast: FunctionDef(name='add_to_list', args=arguments(posonlyargs=[], args=[arg(arg='list_to_update',
        annotation=Subscript(value=Name(id='List', ctx=Load(), lineno=110, col_offset=36,
        end_lineno=110, end_col_offset=40), slice=Name(id='Dict', ctx=Load(), lineno=110,
        col_offset=41, end_lineno=110, end_col_offset=45), ctx=Load(), lineno=110,
        col_offset=36, end_lineno=110, end_col_offset=46), lineno=110, col_offset=20,
        end_lineno=110, end_col_offset=46), arg(arg='query', annotation=Name(id='str',
        ctx=Load(), lineno=110, col_offset=55, end_lineno=110, end_col_offset=58),
        lineno=110, col_offset=48, end_lineno=110, end_col_offset=58), arg(arg='response',
        annotation=Name(id='str', ctx=Load(), lineno=110, col_offset=70, end_lineno=110,
        end_col_offset=73), lineno=110, col_offset=60, end_lineno=110, end_col_offset=73),
        arg(arg='additional_field', lineno=110, col_offset=75, end_lineno=110, end_col_offset=91)],
        kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None, lineno=110,
        col_offset=92, end_lineno=110, end_col_offset=96)]), body=[If(test=BoolOp(op=And(),
        values=[Name(id='response', ctx=Load(), lineno=111, col_offset=11, end_lineno=111,
        end_col_offset=19), Call(func=Attribute(value=Name(id='response', ctx=Load(),
        lineno=111, col_offset=24, end_lineno=111, end_col_offset=32), attr='strip',
        ctx=Load(), lineno=111, col_offset=24, end_lineno=111, end_col_offset=38),
        args=[], keywords=[], lineno=111, col_offset=24, end_lineno=111, end_col_offset=40),
        Compare(left=Name(id='response', ctx=Load(), lineno=111, col_offset=45, end_lineno=111,
        end_col_offset=53), ops=[NotEq()], comparators=[Constant(value='None', lineno=111,
        col_offset=57, end_lineno=111, end_col_offset=63)], lineno=111, col_offset=45,
        end_lineno=111, end_col_offset=63)], lineno=111, col_offset=11, end_lineno=111,
        end_col_offset=63), body=[Expr(value=Call(func=Attribute(value=Name(id='list_to_update',
        ctx=Load(), lineno=112, col_offset=12, end_lineno=112, end_col_offset=26),
        attr='append', ctx=Load(), lineno=112, col_offset=12, end_lineno=112, end_col_offset=33),
        args=[IfExp(test=Name(id='additional_field', ctx=Load(), lineno=114, col_offset=19,
        end_lineno=114, end_col_offset=35), body=Dict(keys=[Constant(value='instruction',
        lineno=113, col_offset=17, end_lineno=113, end_col_offset=30), Constant(value='input',
        lineno=113, col_offset=39, end_lineno=113, end_col_offset=46), Constant(value='output',
        lineno=113, col_offset=67, end_lineno=113, end_col_offset=75)], values=[Name(id='query',
        ctx=Load(), lineno=113, col_offset=32, end_lineno=113, end_col_offset=37),
        Name(id='additional_field', ctx=Load(), lineno=113, col_offset=49, end_lineno=113,
        end_col_offset=65), Name(id='response', ctx=Load(), lineno=113, col_offset=77,
        end_lineno=113, end_col_offset=85)], lineno=113, col_offset=16, end_lineno=113,
        end_col_offset=86), orelse=Dict(keys=[Constant(value='question', lineno=115,
        col_offset=17, end_lineno=115, end_col_offset=27), Constant(value='answer',
        lineno=115, col_offset=36, end_lineno=115, end_col_offset=44)], values=[Name(id='query',
        ctx=Load(), lineno=115, col_offset=29, end_lineno=115, end_col_offset=34),
        Name(id='response', ctx=Load(), lineno=115, col_offset=46, end_lineno=115,
        end_col_offset=54)], lineno=115, col_offset=16, end_lineno=115, end_col_offset=55),
        lineno=113, col_offset=16, end_lineno=115, end_col_offset=55)], keywords=[],
        lineno=112, col_offset=12, end_lineno=116, end_col_offset=13), lineno=112,
        col_offset=12, end_lineno=116, end_col_offset=13)], orelse=[], lineno=111,
        col_offset=8, end_lineno=116, end_col_offset=13), Return(value=Name(id='list_to_update',
        ctx=Load(), lineno=117, col_offset=15, end_lineno=117, end_col_offset=29),
        lineno=117, col_offset=8, end_lineno=117, end_col_offset=29)], decorator_list=[Name(id='staticmethod',
        ctx=Load(), lineno=109, col_offset=5, end_lineno=109, end_col_offset=17)],
        returns=Subscript(value=Name(id='List', ctx=Load(), lineno=110, col_offset=101,
        end_lineno=110, end_col_offset=105), slice=Name(id='Dict', ctx=Load(), lineno=110,
        col_offset=106, end_lineno=110, end_col_offset=110), ctx=Load(), lineno=110,
        col_offset=101, end_lineno=110, end_col_offset=111), lineno=110, col_offset=4,
        end_lineno=117, end_col_offset=29)
      method_docstring: null
      method_inputs:
      - list_to_update
      - query
      - response
      - additional_field
      method_defaults:
      - None
      method_returns:
      - list_to_update
      method_calls:
      - response.strip
      - list_to_update.append
      method_variables: []
      method_decorators:
      - staticmethod
      method_annotations: []
      method_properties: []
    class_method_get_response_from_llm:
      method_name: get_response_from_llm
      method_code: "def get_response_from_llm(self, query: str, context: str) -> str:\n\
        \    response = ''\n    if not self.llm:\n        logger.error('AI model not\
        \ available.')\n        return response\n    try:\n        prompt = self.prompt.format(context=context,\
        \ query=query)\n        logging.info(f'Query: {query}')\n        response\
        \ = self.llm(prompt)\n        logging.info(f'Response: {response}')\n    except:\n\
        \        logger.error('Failed to generate model response')\n    return response"
      method_ast: 'FunctionDef(name=''get_response_from_llm'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=119, col_offset=30, end_lineno=119, end_col_offset=34),
        arg(arg=''query'', annotation=Name(id=''str'', ctx=Load(), lineno=119, col_offset=43,
        end_lineno=119, end_col_offset=46), lineno=119, col_offset=36, end_lineno=119,
        end_col_offset=46), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
        lineno=119, col_offset=57, end_lineno=119, end_col_offset=60), lineno=119,
        col_offset=48, end_lineno=119, end_col_offset=60)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[Assign(targets=[Name(id=''response'', ctx=Store(), lineno=120,
        col_offset=8, end_lineno=120, end_col_offset=16)], value=Constant(value='''',
        lineno=120, col_offset=19, end_lineno=120, end_col_offset=21), lineno=120,
        col_offset=8, end_lineno=120, end_col_offset=21), If(test=UnaryOp(op=Not(),
        operand=Attribute(value=Name(id=''self'', ctx=Load(), lineno=121, col_offset=15,
        end_lineno=121, end_col_offset=19), attr=''llm'', ctx=Load(), lineno=121,
        col_offset=15, end_lineno=121, end_col_offset=23), lineno=121, col_offset=11,
        end_lineno=121, end_col_offset=23), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
        ctx=Load(), lineno=122, col_offset=12, end_lineno=122, end_col_offset=18),
        attr=''error'', ctx=Load(), lineno=122, col_offset=12, end_lineno=122, end_col_offset=24),
        args=[Constant(value=''AI model not available.'', lineno=122, col_offset=25,
        end_lineno=122, end_col_offset=50)], keywords=[], lineno=122, col_offset=12,
        end_lineno=122, end_col_offset=51), lineno=122, col_offset=12, end_lineno=122,
        end_col_offset=51), Return(value=Name(id=''response'', ctx=Load(), lineno=123,
        col_offset=19, end_lineno=123, end_col_offset=27), lineno=123, col_offset=12,
        end_lineno=123, end_col_offset=27)], orelse=[], lineno=121, col_offset=8,
        end_lineno=123, end_col_offset=27), Try(body=[Assign(targets=[Name(id=''prompt'',
        ctx=Store(), lineno=125, col_offset=12, end_lineno=125, end_col_offset=18)],
        value=Call(func=Attribute(value=Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=125, col_offset=21, end_lineno=125, end_col_offset=25), attr=''prompt'',
        ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=32),
        attr=''format'', ctx=Load(), lineno=125, col_offset=21, end_lineno=125, end_col_offset=39),
        args=[], keywords=[keyword(arg=''context'', value=Name(id=''context'', ctx=Load(),
        lineno=125, col_offset=48, end_lineno=125, end_col_offset=55), lineno=125,
        col_offset=40, end_lineno=125, end_col_offset=55), keyword(arg=''query'',
        value=Name(id=''query'', ctx=Load(), lineno=125, col_offset=63, end_lineno=125,
        end_col_offset=68), lineno=125, col_offset=57, end_lineno=125, end_col_offset=68)],
        lineno=125, col_offset=21, end_lineno=125, end_col_offset=69), lineno=125,
        col_offset=12, end_lineno=125, end_col_offset=69), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
        ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=19),
        attr=''info'', ctx=Load(), lineno=126, col_offset=12, end_lineno=126, end_col_offset=24),
        args=[JoinedStr(values=[Constant(value=''Query: '', lineno=126, col_offset=25,
        end_lineno=126, end_col_offset=42), FormattedValue(value=Name(id=''query'',
        ctx=Load(), lineno=126, col_offset=35, end_lineno=126, end_col_offset=40),
        conversion=-1, lineno=126, col_offset=25, end_lineno=126, end_col_offset=42)],
        lineno=126, col_offset=25, end_lineno=126, end_col_offset=42)], keywords=[],
        lineno=126, col_offset=12, end_lineno=126, end_col_offset=43), lineno=126,
        col_offset=12, end_lineno=126, end_col_offset=43), Assign(targets=[Name(id=''response'',
        ctx=Store(), lineno=127, col_offset=12, end_lineno=127, end_col_offset=20)],
        value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=127,
        col_offset=23, end_lineno=127, end_col_offset=27), attr=''llm'', ctx=Load(),
        lineno=127, col_offset=23, end_lineno=127, end_col_offset=31), args=[Name(id=''prompt'',
        ctx=Load(), lineno=127, col_offset=32, end_lineno=127, end_col_offset=38)],
        keywords=[], lineno=127, col_offset=23, end_lineno=127, end_col_offset=39),
        lineno=127, col_offset=12, end_lineno=127, end_col_offset=39), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
        ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=19),
        attr=''info'', ctx=Load(), lineno=128, col_offset=12, end_lineno=128, end_col_offset=24),
        args=[JoinedStr(values=[Constant(value=''Response: '', lineno=128, col_offset=25,
        end_lineno=128, end_col_offset=48), FormattedValue(value=Name(id=''response'',
        ctx=Load(), lineno=128, col_offset=38, end_lineno=128, end_col_offset=46),
        conversion=-1, lineno=128, col_offset=25, end_lineno=128, end_col_offset=48)],
        lineno=128, col_offset=25, end_lineno=128, end_col_offset=48)], keywords=[],
        lineno=128, col_offset=12, end_lineno=128, end_col_offset=49), lineno=128,
        col_offset=12, end_lineno=128, end_col_offset=49)], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
        ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=18),
        attr=''error'', ctx=Load(), lineno=130, col_offset=12, end_lineno=130, end_col_offset=24),
        args=[Constant(value=''Failed to generate model response'', lineno=130, col_offset=25,
        end_lineno=130, end_col_offset=60)], keywords=[], lineno=130, col_offset=12,
        end_lineno=130, end_col_offset=61), lineno=130, col_offset=12, end_lineno=130,
        end_col_offset=61)], lineno=129, col_offset=8, end_lineno=130, end_col_offset=61)],
        orelse=[], finalbody=[], lineno=124, col_offset=8, end_lineno=130, end_col_offset=61),
        Return(value=Name(id=''response'', ctx=Load(), lineno=131, col_offset=15,
        end_lineno=131, end_col_offset=23), lineno=131, col_offset=8, end_lineno=131,
        end_col_offset=23)], decorator_list=[], returns=Name(id=''str'', ctx=Load(),
        lineno=119, col_offset=65, end_lineno=119, end_col_offset=68), lineno=119,
        col_offset=4, end_lineno=131, end_col_offset=23)'
      method_docstring: null
      method_inputs:
      - self
      - query
      - context
      method_defaults: []
      method_returns:
      - response
      - response
      method_calls:
      - self.prompt.format
      - logging.info
      - self.llm
      - logger.error
      method_variables:
      - response
      - prompt
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_items:
      method_name: process_items
      method_code: "def process_items(self, question_type: str, question_id: str,\
        \ question_text: str, base_name: str, name: str, info: Dict, context: str,\
        \ item_type: str) -> None:\n    if info[item_type]:\n        items = [item.strip()\
        \ for item in self.clean_and_get_unique_elements(str(info[item_type])).split(',')\
        \ if item]\n        itemstring = ', '.join(items)\n        query = question_text.format(filename=base_name,\
        \ **{f\"{question_type.split('_')[0]}_name\": name, f\"{question_type.split('_')[0]}_variables\"\
        : itemstring})\n        self.process_question(question_type, question_id,\
        \ query, context, info)"
      method_ast: FunctionDef(name='process_items', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=133, col_offset=22, end_lineno=133, end_col_offset=26),
        arg(arg='question_type', annotation=Name(id='str', ctx=Load(), lineno=133,
        col_offset=43, end_lineno=133, end_col_offset=46), lineno=133, col_offset=28,
        end_lineno=133, end_col_offset=46), arg(arg='question_id', annotation=Name(id='str',
        ctx=Load(), lineno=133, col_offset=61, end_lineno=133, end_col_offset=64),
        lineno=133, col_offset=48, end_lineno=133, end_col_offset=64), arg(arg='question_text',
        annotation=Name(id='str', ctx=Load(), lineno=133, col_offset=81, end_lineno=133,
        end_col_offset=84), lineno=133, col_offset=66, end_lineno=133, end_col_offset=84),
        arg(arg='base_name', annotation=Name(id='str', ctx=Load(), lineno=133, col_offset=97,
        end_lineno=133, end_col_offset=100), lineno=133, col_offset=86, end_lineno=133,
        end_col_offset=100), arg(arg='name', annotation=Name(id='str', ctx=Load(),
        lineno=133, col_offset=108, end_lineno=133, end_col_offset=111), lineno=133,
        col_offset=102, end_lineno=133, end_col_offset=111), arg(arg='info', annotation=Name(id='Dict',
        ctx=Load(), lineno=133, col_offset=119, end_lineno=133, end_col_offset=123),
        lineno=133, col_offset=113, end_lineno=133, end_col_offset=123), arg(arg='context',
        annotation=Name(id='str', ctx=Load(), lineno=133, col_offset=134, end_lineno=133,
        end_col_offset=137), lineno=133, col_offset=125, end_lineno=133, end_col_offset=137),
        arg(arg='item_type', annotation=Name(id='str', ctx=Load(), lineno=133, col_offset=150,
        end_lineno=133, end_col_offset=153), lineno=133, col_offset=139, end_lineno=133,
        end_col_offset=153)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Name(id='info',
        ctx=Load(), lineno=134, col_offset=11, end_lineno=134, end_col_offset=15),
        slice=Name(id='item_type', ctx=Load(), lineno=134, col_offset=16, end_lineno=134,
        end_col_offset=25), ctx=Load(), lineno=134, col_offset=11, end_lineno=134,
        end_col_offset=26), body=[Assign(targets=[Name(id='items', ctx=Store(), lineno=135,
        col_offset=12, end_lineno=135, end_col_offset=17)], value=ListComp(elt=Call(func=Attribute(value=Name(id='item',
        ctx=Load(), lineno=135, col_offset=21, end_lineno=135, end_col_offset=25),
        attr='strip', ctx=Load(), lineno=135, col_offset=21, end_lineno=135, end_col_offset=31),
        args=[], keywords=[], lineno=135, col_offset=21, end_lineno=135, end_col_offset=33),
        generators=[comprehension(target=Name(id='item', ctx=Store(), lineno=135,
        col_offset=38, end_lineno=135, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=135, col_offset=46, end_lineno=135, end_col_offset=50),
        attr='clean_and_get_unique_elements', ctx=Load(), lineno=135, col_offset=46,
        end_lineno=135, end_col_offset=80), args=[Call(func=Name(id='str', ctx=Load(),
        lineno=135, col_offset=81, end_lineno=135, end_col_offset=84), args=[Subscript(value=Name(id='info',
        ctx=Load(), lineno=135, col_offset=85, end_lineno=135, end_col_offset=89),
        slice=Name(id='item_type', ctx=Load(), lineno=135, col_offset=90, end_lineno=135,
        end_col_offset=99), ctx=Load(), lineno=135, col_offset=85, end_lineno=135,
        end_col_offset=100)], keywords=[], lineno=135, col_offset=81, end_lineno=135,
        end_col_offset=101)], keywords=[], lineno=135, col_offset=46, end_lineno=135,
        end_col_offset=102), attr='split', ctx=Load(), lineno=135, col_offset=46,
        end_lineno=135, end_col_offset=108), args=[Constant(value=',', lineno=135,
        col_offset=109, end_lineno=135, end_col_offset=112)], keywords=[], lineno=135,
        col_offset=46, end_lineno=135, end_col_offset=113), ifs=[Name(id='item', ctx=Load(),
        lineno=135, col_offset=117, end_lineno=135, end_col_offset=121)], is_async=0)],
        lineno=135, col_offset=20, end_lineno=135, end_col_offset=122), lineno=135,
        col_offset=12, end_lineno=135, end_col_offset=122), Assign(targets=[Name(id='itemstring',
        ctx=Store(), lineno=136, col_offset=12, end_lineno=136, end_col_offset=22)],
        value=Call(func=Attribute(value=Constant(value=', ', lineno=136, col_offset=25,
        end_lineno=136, end_col_offset=29), attr='join', ctx=Load(), lineno=136, col_offset=25,
        end_lineno=136, end_col_offset=34), args=[Name(id='items', ctx=Load(), lineno=136,
        col_offset=35, end_lineno=136, end_col_offset=40)], keywords=[], lineno=136,
        col_offset=25, end_lineno=136, end_col_offset=41), lineno=136, col_offset=12,
        end_lineno=136, end_col_offset=41), Assign(targets=[Name(id='query', ctx=Store(),
        lineno=137, col_offset=12, end_lineno=137, end_col_offset=17)], value=Call(func=Attribute(value=Name(id='question_text',
        ctx=Load(), lineno=137, col_offset=20, end_lineno=137, end_col_offset=33),
        attr='format', ctx=Load(), lineno=137, col_offset=20, end_lineno=137, end_col_offset=40),
        args=[], keywords=[keyword(arg='filename', value=Name(id='base_name', ctx=Load(),
        lineno=137, col_offset=50, end_lineno=137, end_col_offset=59), lineno=137,
        col_offset=41, end_lineno=137, end_col_offset=59), keyword(value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id='question_type',
        ctx=Load(), lineno=137, col_offset=67, end_lineno=137, end_col_offset=80),
        attr='split', ctx=Load(), lineno=137, col_offset=67, end_lineno=137, end_col_offset=86),
        args=[Constant(value='_', lineno=137, col_offset=87, end_lineno=137, end_col_offset=90)],
        keywords=[], lineno=137, col_offset=67, end_lineno=137, end_col_offset=91),
        slice=Constant(value=0, lineno=137, col_offset=92, end_lineno=137, end_col_offset=93),
        ctx=Load(), lineno=137, col_offset=67, end_lineno=137, end_col_offset=94),
        conversion=-1, lineno=137, col_offset=64, end_lineno=137, end_col_offset=101),
        Constant(value='_name', lineno=137, col_offset=64, end_lineno=137, end_col_offset=101)],
        lineno=137, col_offset=64, end_lineno=137, end_col_offset=101), JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id='question_type',
        ctx=Load(), lineno=137, col_offset=112, end_lineno=137, end_col_offset=125),
        attr='split', ctx=Load(), lineno=137, col_offset=112, end_lineno=137, end_col_offset=131),
        args=[Constant(value='_', lineno=137, col_offset=132, end_lineno=137, end_col_offset=135)],
        keywords=[], lineno=137, col_offset=112, end_lineno=137, end_col_offset=136),
        slice=Constant(value=0, lineno=137, col_offset=137, end_lineno=137, end_col_offset=138),
        ctx=Load(), lineno=137, col_offset=112, end_lineno=137, end_col_offset=139),
        conversion=-1, lineno=137, col_offset=109, end_lineno=137, end_col_offset=151),
        Constant(value='_variables', lineno=137, col_offset=109, end_lineno=137, end_col_offset=151)],
        lineno=137, col_offset=109, end_lineno=137, end_col_offset=151)], values=[Name(id='name',
        ctx=Load(), lineno=137, col_offset=103, end_lineno=137, end_col_offset=107),
        Name(id='itemstring', ctx=Load(), lineno=137, col_offset=153, end_lineno=137,
        end_col_offset=163)], lineno=137, col_offset=63, end_lineno=137, end_col_offset=164),
        lineno=137, col_offset=61, end_lineno=137, end_col_offset=164)], lineno=137,
        col_offset=20, end_lineno=137, end_col_offset=165), lineno=137, col_offset=12,
        end_lineno=137, end_col_offset=165), Expr(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=138, col_offset=12, end_lineno=138, end_col_offset=16),
        attr='process_question', ctx=Load(), lineno=138, col_offset=12, end_lineno=138,
        end_col_offset=33), args=[Name(id='question_type', ctx=Load(), lineno=138,
        col_offset=34, end_lineno=138, end_col_offset=47), Name(id='question_id',
        ctx=Load(), lineno=138, col_offset=49, end_lineno=138, end_col_offset=60),
        Name(id='query', ctx=Load(), lineno=138, col_offset=62, end_lineno=138, end_col_offset=67),
        Name(id='context', ctx=Load(), lineno=138, col_offset=69, end_lineno=138,
        end_col_offset=76), Name(id='info', ctx=Load(), lineno=138, col_offset=78,
        end_lineno=138, end_col_offset=82)], keywords=[], lineno=138, col_offset=12,
        end_lineno=138, end_col_offset=83), lineno=138, col_offset=12, end_lineno=138,
        end_col_offset=83)], orelse=[], lineno=134, col_offset=8, end_lineno=138,
        end_col_offset=83)], decorator_list=[], returns=Constant(value=None, lineno=133,
        col_offset=158, end_lineno=133, end_col_offset=162), lineno=133, col_offset=4,
        end_lineno=138, end_col_offset=83)
      method_docstring: null
      method_inputs:
      - self
      - question_type
      - question_id
      - question_text
      - base_name
      - name
      - info
      - context
      - item_type
      method_defaults: []
      method_returns: []
      method_calls:
      - item.strip
      - question_text.format
      - str
      - question_type.split
      - self.clean_and_get_unique_elements(str(info[item_type])).split
      - self.clean_and_get_unique_elements
      - self.process_question
      - ''', ''.join'
      method_variables:
      - query
      - items
      - itemstring
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_question:
      method_name: process_question
      method_code: "def process_question(self, question_type: str, question_id: str,\
        \ query: str, context: str, info: Dict) -> None:\n    if question_id.endswith('code_graph'):\n\
        \        response = info.get(question_id, {})\n    else:\n        response\
        \ = self.get_response_from_llm(query, context) if self.use_llm and question_id.endswith('purpose')\
        \ else self.clean_and_get_unique_elements(str(info.get(question_id, '')))\n\
        \    if response and response != 'None':\n        response_str = str(response)\n\
        \        response_str = response_str.strip()\n        if response_str:\n \
        \           self.qa_list.append({'question': query, 'answer': response_str})\n\
        \            if question_type == 'file' and self.use_summary:\n          \
        \      context = info['file_summary']\n            self.instruct_list.append({'instruction':\
        \ query, 'input': context, 'output': response_str})"
      method_ast: FunctionDef(name='process_question', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=140, col_offset=25, end_lineno=140, end_col_offset=29),
        arg(arg='question_type', annotation=Name(id='str', ctx=Load(), lineno=140,
        col_offset=46, end_lineno=140, end_col_offset=49), lineno=140, col_offset=31,
        end_lineno=140, end_col_offset=49), arg(arg='question_id', annotation=Name(id='str',
        ctx=Load(), lineno=140, col_offset=64, end_lineno=140, end_col_offset=67),
        lineno=140, col_offset=51, end_lineno=140, end_col_offset=67), arg(arg='query',
        annotation=Name(id='str', ctx=Load(), lineno=140, col_offset=76, end_lineno=140,
        end_col_offset=79), lineno=140, col_offset=69, end_lineno=140, end_col_offset=79),
        arg(arg='context', annotation=Name(id='str', ctx=Load(), lineno=140, col_offset=90,
        end_lineno=140, end_col_offset=93), lineno=140, col_offset=81, end_lineno=140,
        end_col_offset=93), arg(arg='info', annotation=Name(id='Dict', ctx=Load(),
        lineno=140, col_offset=101, end_lineno=140, end_col_offset=105), lineno=140,
        col_offset=95, end_lineno=140, end_col_offset=105)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='question_id',
        ctx=Load(), lineno=141, col_offset=11, end_lineno=141, end_col_offset=22),
        attr='endswith', ctx=Load(), lineno=141, col_offset=11, end_lineno=141, end_col_offset=31),
        args=[Constant(value='code_graph', lineno=141, col_offset=32, end_lineno=141,
        end_col_offset=44)], keywords=[], lineno=141, col_offset=11, end_lineno=141,
        end_col_offset=45), body=[Assign(targets=[Name(id='response', ctx=Store(),
        lineno=142, col_offset=12, end_lineno=142, end_col_offset=20)], value=Call(func=Attribute(value=Name(id='info',
        ctx=Load(), lineno=142, col_offset=23, end_lineno=142, end_col_offset=27),
        attr='get', ctx=Load(), lineno=142, col_offset=23, end_lineno=142, end_col_offset=31),
        args=[Name(id='question_id', ctx=Load(), lineno=142, col_offset=32, end_lineno=142,
        end_col_offset=43), Dict(keys=[], values=[], lineno=142, col_offset=45, end_lineno=142,
        end_col_offset=47)], keywords=[], lineno=142, col_offset=23, end_lineno=142,
        end_col_offset=48), lineno=142, col_offset=12, end_lineno=142, end_col_offset=48)],
        orelse=[Assign(targets=[Name(id='response', ctx=Store(), lineno=144, col_offset=12,
        end_lineno=144, end_col_offset=20)], value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=144, col_offset=69, end_lineno=144, end_col_offset=73),
        attr='use_llm', ctx=Load(), lineno=144, col_offset=69, end_lineno=144, end_col_offset=81),
        Call(func=Attribute(value=Name(id='question_id', ctx=Load(), lineno=144, col_offset=86,
        end_lineno=144, end_col_offset=97), attr='endswith', ctx=Load(), lineno=144,
        col_offset=86, end_lineno=144, end_col_offset=106), args=[Constant(value='purpose',
        lineno=144, col_offset=107, end_lineno=144, end_col_offset=116)], keywords=[],
        lineno=144, col_offset=86, end_lineno=144, end_col_offset=117)], lineno=144,
        col_offset=69, end_lineno=144, end_col_offset=117), body=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=144, col_offset=23, end_lineno=144, end_col_offset=27),
        attr='get_response_from_llm', ctx=Load(), lineno=144, col_offset=23, end_lineno=144,
        end_col_offset=49), args=[Name(id='query', ctx=Load(), lineno=144, col_offset=50,
        end_lineno=144, end_col_offset=55), Name(id='context', ctx=Load(), lineno=144,
        col_offset=57, end_lineno=144, end_col_offset=64)], keywords=[], lineno=144,
        col_offset=23, end_lineno=144, end_col_offset=65), orelse=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=144, col_offset=123, end_lineno=144, end_col_offset=127),
        attr='clean_and_get_unique_elements', ctx=Load(), lineno=144, col_offset=123,
        end_lineno=144, end_col_offset=157), args=[Call(func=Name(id='str', ctx=Load(),
        lineno=144, col_offset=158, end_lineno=144, end_col_offset=161), args=[Call(func=Attribute(value=Name(id='info',
        ctx=Load(), lineno=144, col_offset=162, end_lineno=144, end_col_offset=166),
        attr='get', ctx=Load(), lineno=144, col_offset=162, end_lineno=144, end_col_offset=170),
        args=[Name(id='question_id', ctx=Load(), lineno=144, col_offset=171, end_lineno=144,
        end_col_offset=182), Constant(value='', lineno=144, col_offset=184, end_lineno=144,
        end_col_offset=186)], keywords=[], lineno=144, col_offset=162, end_lineno=144,
        end_col_offset=187)], keywords=[], lineno=144, col_offset=158, end_lineno=144,
        end_col_offset=188)], keywords=[], lineno=144, col_offset=123, end_lineno=144,
        end_col_offset=189), lineno=144, col_offset=23, end_lineno=144, end_col_offset=189),
        lineno=144, col_offset=12, end_lineno=144, end_col_offset=189)], lineno=141,
        col_offset=8, end_lineno=144, end_col_offset=189), If(test=BoolOp(op=And(),
        values=[Name(id='response', ctx=Load(), lineno=145, col_offset=11, end_lineno=145,
        end_col_offset=19), Compare(left=Name(id='response', ctx=Load(), lineno=145,
        col_offset=24, end_lineno=145, end_col_offset=32), ops=[NotEq()], comparators=[Constant(value='None',
        lineno=145, col_offset=36, end_lineno=145, end_col_offset=42)], lineno=145,
        col_offset=24, end_lineno=145, end_col_offset=42)], lineno=145, col_offset=11,
        end_lineno=145, end_col_offset=42), body=[Assign(targets=[Name(id='response_str',
        ctx=Store(), lineno=146, col_offset=12, end_lineno=146, end_col_offset=24)],
        value=Call(func=Name(id='str', ctx=Load(), lineno=146, col_offset=27, end_lineno=146,
        end_col_offset=30), args=[Name(id='response', ctx=Load(), lineno=146, col_offset=31,
        end_lineno=146, end_col_offset=39)], keywords=[], lineno=146, col_offset=27,
        end_lineno=146, end_col_offset=40), lineno=146, col_offset=12, end_lineno=146,
        end_col_offset=40), Assign(targets=[Name(id='response_str', ctx=Store(), lineno=147,
        col_offset=12, end_lineno=147, end_col_offset=24)], value=Call(func=Attribute(value=Name(id='response_str',
        ctx=Load(), lineno=147, col_offset=27, end_lineno=147, end_col_offset=39),
        attr='strip', ctx=Load(), lineno=147, col_offset=27, end_lineno=147, end_col_offset=45),
        args=[], keywords=[], lineno=147, col_offset=27, end_lineno=147, end_col_offset=47),
        lineno=147, col_offset=12, end_lineno=147, end_col_offset=47), If(test=Name(id='response_str',
        ctx=Load(), lineno=148, col_offset=15, end_lineno=148, end_col_offset=27),
        body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=149, col_offset=16, end_lineno=149, end_col_offset=20),
        attr='qa_list', ctx=Load(), lineno=149, col_offset=16, end_lineno=149, end_col_offset=28),
        attr='append', ctx=Load(), lineno=149, col_offset=16, end_lineno=149, end_col_offset=35),
        args=[Dict(keys=[Constant(value='question', lineno=149, col_offset=37, end_lineno=149,
        end_col_offset=47), Constant(value='answer', lineno=149, col_offset=56, end_lineno=149,
        end_col_offset=64)], values=[Name(id='query', ctx=Load(), lineno=149, col_offset=49,
        end_lineno=149, end_col_offset=54), Name(id='response_str', ctx=Load(), lineno=149,
        col_offset=66, end_lineno=149, end_col_offset=78)], lineno=149, col_offset=36,
        end_lineno=149, end_col_offset=79)], keywords=[], lineno=149, col_offset=16,
        end_lineno=149, end_col_offset=80), lineno=149, col_offset=16, end_lineno=149,
        end_col_offset=80), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='question_type',
        ctx=Load(), lineno=150, col_offset=19, end_lineno=150, end_col_offset=32),
        ops=[Eq()], comparators=[Constant(value='file', lineno=150, col_offset=36,
        end_lineno=150, end_col_offset=42)], lineno=150, col_offset=19, end_lineno=150,
        end_col_offset=42), Attribute(value=Name(id='self', ctx=Load(), lineno=150,
        col_offset=47, end_lineno=150, end_col_offset=51), attr='use_summary', ctx=Load(),
        lineno=150, col_offset=47, end_lineno=150, end_col_offset=63)], lineno=150,
        col_offset=19, end_lineno=150, end_col_offset=63), body=[Assign(targets=[Name(id='context',
        ctx=Store(), lineno=151, col_offset=20, end_lineno=151, end_col_offset=27)],
        value=Subscript(value=Name(id='info', ctx=Load(), lineno=151, col_offset=30,
        end_lineno=151, end_col_offset=34), slice=Constant(value='file_summary', lineno=151,
        col_offset=35, end_lineno=151, end_col_offset=49), ctx=Load(), lineno=151,
        col_offset=30, end_lineno=151, end_col_offset=50), lineno=151, col_offset=20,
        end_lineno=151, end_col_offset=50)], orelse=[], lineno=150, col_offset=16,
        end_lineno=151, end_col_offset=50), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=152, col_offset=16, end_lineno=152, end_col_offset=20),
        attr='instruct_list', ctx=Load(), lineno=152, col_offset=16, end_lineno=152,
        end_col_offset=34), attr='append', ctx=Load(), lineno=152, col_offset=16,
        end_lineno=152, end_col_offset=41), args=[Dict(keys=[Constant(value='instruction',
        lineno=152, col_offset=43, end_lineno=152, end_col_offset=56), Constant(value='input',
        lineno=152, col_offset=65, end_lineno=152, end_col_offset=72), Constant(value='output',
        lineno=152, col_offset=83, end_lineno=152, end_col_offset=91)], values=[Name(id='query',
        ctx=Load(), lineno=152, col_offset=58, end_lineno=152, end_col_offset=63),
        Name(id='context', ctx=Load(), lineno=152, col_offset=74, end_lineno=152,
        end_col_offset=81), Name(id='response_str', ctx=Load(), lineno=152, col_offset=93,
        end_lineno=152, end_col_offset=105)], lineno=152, col_offset=42, end_lineno=152,
        end_col_offset=106)], keywords=[], lineno=152, col_offset=16, end_lineno=152,
        end_col_offset=107), lineno=152, col_offset=16, end_lineno=152, end_col_offset=107)],
        orelse=[], lineno=148, col_offset=12, end_lineno=152, end_col_offset=107)],
        orelse=[], lineno=145, col_offset=8, end_lineno=152, end_col_offset=107)],
        decorator_list=[], returns=Constant(value=None, lineno=140, col_offset=110,
        end_lineno=140, end_col_offset=114), lineno=140, col_offset=4, end_lineno=152,
        end_col_offset=107)
      method_docstring: null
      method_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      method_defaults: []
      method_returns: []
      method_calls:
      - self.get_response_from_llm
      - self.qa_list.append
      - str
      - response_str.strip
      - self.instruct_list.append
      - question_id.endswith
      - info.get
      - self.clean_and_get_unique_elements
      method_variables:
      - response
      - response_str
      - context
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_question_type:
      method_name: process_question_type
      method_code: "def process_question_type(self, question_type: str, question_id:\
        \ str, question_text: str) -> None:\n    if question_type == 'file':\n   \
        \     query = question_text.format(filename=self.base_name)\n        context\
        \ = self.file_details['file_info']['file_code']\n        info = self.file_details['file_info']\n\
        \        self.process_question(question_type, question_id, query, context,\
        \ info)\n    elif question_type == 'method':\n        for class_name, class_info\
        \ in self.file_details['classes'].items():\n            for key, method_info\
        \ in class_info.items():\n                if key.startswith('class_method_'):\n\
        \                    method_name = key[len('class_method_'):]\n          \
        \          context = method_info['method_code']\n                    mapping\
        \ = {'class_name': class_name, 'method_name': method_name}\n             \
        \       query = question_text.format(filename=self.base_name, **mapping)\n\
        \                    self.process_question(question_type, question_id, query,\
        \ context, method_info)\n    else:\n        for name, info in self.file_details[self.question_mapping[question_type]].items():\n\
        \            context = info[f'{question_type}_code']\n            mapping\
        \ = {f'{question_type}_name': name}\n            if question_id == f'{question_type}_variable_purpose'\
        \ and self.use_llm:\n                self.process_items(question_type, question_id,\
        \ question_text, self.base_name, name, info, context, f'{question_type}_variables')\n\
        \            elif question_id != f'{question_type}_variable_purpose':\n  \
        \              query = question_text.format(filename=self.base_name, **mapping)\n\
        \                self.process_question(question_type, question_id, query,\
        \ context, info)"
      method_ast: FunctionDef(name='process_question_type', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=154, col_offset=30, end_lineno=154, end_col_offset=34),
        arg(arg='question_type', annotation=Name(id='str', ctx=Load(), lineno=154,
        col_offset=51, end_lineno=154, end_col_offset=54), lineno=154, col_offset=36,
        end_lineno=154, end_col_offset=54), arg(arg='question_id', annotation=Name(id='str',
        ctx=Load(), lineno=154, col_offset=69, end_lineno=154, end_col_offset=72),
        lineno=154, col_offset=56, end_lineno=154, end_col_offset=72), arg(arg='question_text',
        annotation=Name(id='str', ctx=Load(), lineno=154, col_offset=89, end_lineno=154,
        end_col_offset=92), lineno=154, col_offset=74, end_lineno=154, end_col_offset=92)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='question_type',
        ctx=Load(), lineno=155, col_offset=11, end_lineno=155, end_col_offset=24),
        ops=[Eq()], comparators=[Constant(value='file', lineno=155, col_offset=28,
        end_lineno=155, end_col_offset=34)], lineno=155, col_offset=11, end_lineno=155,
        end_col_offset=34), body=[Assign(targets=[Name(id='query', ctx=Store(), lineno=156,
        col_offset=12, end_lineno=156, end_col_offset=17)], value=Call(func=Attribute(value=Name(id='question_text',
        ctx=Load(), lineno=156, col_offset=20, end_lineno=156, end_col_offset=33),
        attr='format', ctx=Load(), lineno=156, col_offset=20, end_lineno=156, end_col_offset=40),
        args=[], keywords=[keyword(arg='filename', value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=156, col_offset=50, end_lineno=156, end_col_offset=54),
        attr='base_name', ctx=Load(), lineno=156, col_offset=50, end_lineno=156, end_col_offset=64),
        lineno=156, col_offset=41, end_lineno=156, end_col_offset=64)], lineno=156,
        col_offset=20, end_lineno=156, end_col_offset=65), lineno=156, col_offset=12,
        end_lineno=156, end_col_offset=65), Assign(targets=[Name(id='context', ctx=Store(),
        lineno=157, col_offset=12, end_lineno=157, end_col_offset=19)], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=157, col_offset=22, end_lineno=157, end_col_offset=26),
        attr='file_details', ctx=Load(), lineno=157, col_offset=22, end_lineno=157,
        end_col_offset=39), slice=Constant(value='file_info', lineno=157, col_offset=40,
        end_lineno=157, end_col_offset=51), ctx=Load(), lineno=157, col_offset=22,
        end_lineno=157, end_col_offset=52), slice=Constant(value='file_code', lineno=157,
        col_offset=53, end_lineno=157, end_col_offset=64), ctx=Load(), lineno=157,
        col_offset=22, end_lineno=157, end_col_offset=65), lineno=157, col_offset=12,
        end_lineno=157, end_col_offset=65), Assign(targets=[Name(id='info', ctx=Store(),
        lineno=158, col_offset=12, end_lineno=158, end_col_offset=16)], value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=158, col_offset=19, end_lineno=158, end_col_offset=23),
        attr='file_details', ctx=Load(), lineno=158, col_offset=19, end_lineno=158,
        end_col_offset=36), slice=Constant(value='file_info', lineno=158, col_offset=37,
        end_lineno=158, end_col_offset=48), ctx=Load(), lineno=158, col_offset=19,
        end_lineno=158, end_col_offset=49), lineno=158, col_offset=12, end_lineno=158,
        end_col_offset=49), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=159, col_offset=12, end_lineno=159, end_col_offset=16), attr='process_question',
        ctx=Load(), lineno=159, col_offset=12, end_lineno=159, end_col_offset=33),
        args=[Name(id='question_type', ctx=Load(), lineno=159, col_offset=34, end_lineno=159,
        end_col_offset=47), Name(id='question_id', ctx=Load(), lineno=159, col_offset=49,
        end_lineno=159, end_col_offset=60), Name(id='query', ctx=Load(), lineno=159,
        col_offset=62, end_lineno=159, end_col_offset=67), Name(id='context', ctx=Load(),
        lineno=159, col_offset=69, end_lineno=159, end_col_offset=76), Name(id='info',
        ctx=Load(), lineno=159, col_offset=78, end_lineno=159, end_col_offset=82)],
        keywords=[], lineno=159, col_offset=12, end_lineno=159, end_col_offset=83),
        lineno=159, col_offset=12, end_lineno=159, end_col_offset=83)], orelse=[If(test=Compare(left=Name(id='question_type',
        ctx=Load(), lineno=160, col_offset=13, end_lineno=160, end_col_offset=26),
        ops=[Eq()], comparators=[Constant(value='method', lineno=160, col_offset=30,
        end_lineno=160, end_col_offset=38)], lineno=160, col_offset=13, end_lineno=160,
        end_col_offset=38), body=[For(target=Tuple(elts=[Name(id='class_name', ctx=Store(),
        lineno=161, col_offset=16, end_lineno=161, end_col_offset=26), Name(id='class_info',
        ctx=Store(), lineno=161, col_offset=28, end_lineno=161, end_col_offset=38)],
        ctx=Store(), lineno=161, col_offset=16, end_lineno=161, end_col_offset=38),
        iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=161, col_offset=42, end_lineno=161, end_col_offset=46),
        attr='file_details', ctx=Load(), lineno=161, col_offset=42, end_lineno=161,
        end_col_offset=59), slice=Constant(value='classes', lineno=161, col_offset=60,
        end_lineno=161, end_col_offset=69), ctx=Load(), lineno=161, col_offset=42,
        end_lineno=161, end_col_offset=70), attr='items', ctx=Load(), lineno=161,
        col_offset=42, end_lineno=161, end_col_offset=76), args=[], keywords=[], lineno=161,
        col_offset=42, end_lineno=161, end_col_offset=78), body=[For(target=Tuple(elts=[Name(id='key',
        ctx=Store(), lineno=162, col_offset=20, end_lineno=162, end_col_offset=23),
        Name(id='method_info', ctx=Store(), lineno=162, col_offset=25, end_lineno=162,
        end_col_offset=36)], ctx=Store(), lineno=162, col_offset=20, end_lineno=162,
        end_col_offset=36), iter=Call(func=Attribute(value=Name(id='class_info', ctx=Load(),
        lineno=162, col_offset=40, end_lineno=162, end_col_offset=50), attr='items',
        ctx=Load(), lineno=162, col_offset=40, end_lineno=162, end_col_offset=56),
        args=[], keywords=[], lineno=162, col_offset=40, end_lineno=162, end_col_offset=58),
        body=[If(test=Call(func=Attribute(value=Name(id='key', ctx=Load(), lineno=163,
        col_offset=23, end_lineno=163, end_col_offset=26), attr='startswith', ctx=Load(),
        lineno=163, col_offset=23, end_lineno=163, end_col_offset=37), args=[Constant(value='class_method_',
        lineno=163, col_offset=38, end_lineno=163, end_col_offset=53)], keywords=[],
        lineno=163, col_offset=23, end_lineno=163, end_col_offset=54), body=[Assign(targets=[Name(id='method_name',
        ctx=Store(), lineno=164, col_offset=24, end_lineno=164, end_col_offset=35)],
        value=Subscript(value=Name(id='key', ctx=Load(), lineno=164, col_offset=38,
        end_lineno=164, end_col_offset=41), slice=Slice(lower=Call(func=Name(id='len',
        ctx=Load(), lineno=164, col_offset=42, end_lineno=164, end_col_offset=45),
        args=[Constant(value='class_method_', lineno=164, col_offset=46, end_lineno=164,
        end_col_offset=61)], keywords=[], lineno=164, col_offset=42, end_lineno=164,
        end_col_offset=62), lineno=164, col_offset=42, end_lineno=164, end_col_offset=63),
        ctx=Load(), lineno=164, col_offset=38, end_lineno=164, end_col_offset=64),
        lineno=164, col_offset=24, end_lineno=164, end_col_offset=64), Assign(targets=[Name(id='context',
        ctx=Store(), lineno=165, col_offset=24, end_lineno=165, end_col_offset=31)],
        value=Subscript(value=Name(id='method_info', ctx=Load(), lineno=165, col_offset=34,
        end_lineno=165, end_col_offset=45), slice=Constant(value='method_code', lineno=165,
        col_offset=46, end_lineno=165, end_col_offset=59), ctx=Load(), lineno=165,
        col_offset=34, end_lineno=165, end_col_offset=60), lineno=165, col_offset=24,
        end_lineno=165, end_col_offset=60), Assign(targets=[Name(id='mapping', ctx=Store(),
        lineno=166, col_offset=24, end_lineno=166, end_col_offset=31)], value=Dict(keys=[Constant(value='class_name',
        lineno=166, col_offset=35, end_lineno=166, end_col_offset=47), Constant(value='method_name',
        lineno=166, col_offset=61, end_lineno=166, end_col_offset=74)], values=[Name(id='class_name',
        ctx=Load(), lineno=166, col_offset=49, end_lineno=166, end_col_offset=59),
        Name(id='method_name', ctx=Load(), lineno=166, col_offset=76, end_lineno=166,
        end_col_offset=87)], lineno=166, col_offset=34, end_lineno=166, end_col_offset=88),
        lineno=166, col_offset=24, end_lineno=166, end_col_offset=88), Assign(targets=[Name(id='query',
        ctx=Store(), lineno=167, col_offset=24, end_lineno=167, end_col_offset=29)],
        value=Call(func=Attribute(value=Name(id='question_text', ctx=Load(), lineno=167,
        col_offset=32, end_lineno=167, end_col_offset=45), attr='format', ctx=Load(),
        lineno=167, col_offset=32, end_lineno=167, end_col_offset=52), args=[], keywords=[keyword(arg='filename',
        value=Attribute(value=Name(id='self', ctx=Load(), lineno=167, col_offset=62,
        end_lineno=167, end_col_offset=66), attr='base_name', ctx=Load(), lineno=167,
        col_offset=62, end_lineno=167, end_col_offset=76), lineno=167, col_offset=53,
        end_lineno=167, end_col_offset=76), keyword(value=Name(id='mapping', ctx=Load(),
        lineno=167, col_offset=80, end_lineno=167, end_col_offset=87), lineno=167,
        col_offset=78, end_lineno=167, end_col_offset=87)], lineno=167, col_offset=32,
        end_lineno=167, end_col_offset=88), lineno=167, col_offset=24, end_lineno=167,
        end_col_offset=88), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=168, col_offset=24, end_lineno=168, end_col_offset=28), attr='process_question',
        ctx=Load(), lineno=168, col_offset=24, end_lineno=168, end_col_offset=45),
        args=[Name(id='question_type', ctx=Load(), lineno=168, col_offset=46, end_lineno=168,
        end_col_offset=59), Name(id='question_id', ctx=Load(), lineno=168, col_offset=61,
        end_lineno=168, end_col_offset=72), Name(id='query', ctx=Load(), lineno=168,
        col_offset=74, end_lineno=168, end_col_offset=79), Name(id='context', ctx=Load(),
        lineno=168, col_offset=81, end_lineno=168, end_col_offset=88), Name(id='method_info',
        ctx=Load(), lineno=168, col_offset=90, end_lineno=168, end_col_offset=101)],
        keywords=[], lineno=168, col_offset=24, end_lineno=168, end_col_offset=102),
        lineno=168, col_offset=24, end_lineno=168, end_col_offset=102)], orelse=[],
        lineno=163, col_offset=20, end_lineno=168, end_col_offset=102)], orelse=[],
        lineno=162, col_offset=16, end_lineno=168, end_col_offset=102)], orelse=[],
        lineno=161, col_offset=12, end_lineno=168, end_col_offset=102)], orelse=[For(target=Tuple(elts=[Name(id='name',
        ctx=Store(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=20),
        Name(id='info', ctx=Store(), lineno=170, col_offset=22, end_lineno=170, end_col_offset=26)],
        ctx=Store(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=26),
        iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=170, col_offset=30, end_lineno=170, end_col_offset=34),
        attr='file_details', ctx=Load(), lineno=170, col_offset=30, end_lineno=170,
        end_col_offset=47), slice=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=170, col_offset=48, end_lineno=170, end_col_offset=52),
        attr='question_mapping', ctx=Load(), lineno=170, col_offset=48, end_lineno=170,
        end_col_offset=69), slice=Name(id='question_type', ctx=Load(), lineno=170,
        col_offset=70, end_lineno=170, end_col_offset=83), ctx=Load(), lineno=170,
        col_offset=48, end_lineno=170, end_col_offset=84), ctx=Load(), lineno=170,
        col_offset=30, end_lineno=170, end_col_offset=85), attr='items', ctx=Load(),
        lineno=170, col_offset=30, end_lineno=170, end_col_offset=91), args=[], keywords=[],
        lineno=170, col_offset=30, end_lineno=170, end_col_offset=93), body=[Assign(targets=[Name(id='context',
        ctx=Store(), lineno=171, col_offset=16, end_lineno=171, end_col_offset=23)],
        value=Subscript(value=Name(id='info', ctx=Load(), lineno=171, col_offset=26,
        end_lineno=171, end_col_offset=30), slice=JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=171, col_offset=34, end_lineno=171, end_col_offset=47),
        conversion=-1, lineno=171, col_offset=31, end_lineno=171, end_col_offset=54),
        Constant(value='_code', lineno=171, col_offset=31, end_lineno=171, end_col_offset=54)],
        lineno=171, col_offset=31, end_lineno=171, end_col_offset=54), ctx=Load(),
        lineno=171, col_offset=26, end_lineno=171, end_col_offset=55), lineno=171,
        col_offset=16, end_lineno=171, end_col_offset=55), Assign(targets=[Name(id='mapping',
        ctx=Store(), lineno=172, col_offset=16, end_lineno=172, end_col_offset=23)],
        value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=172, col_offset=30, end_lineno=172, end_col_offset=43),
        conversion=-1, lineno=172, col_offset=27, end_lineno=172, end_col_offset=50),
        Constant(value='_name', lineno=172, col_offset=27, end_lineno=172, end_col_offset=50)],
        lineno=172, col_offset=27, end_lineno=172, end_col_offset=50)], values=[Name(id='name',
        ctx=Load(), lineno=172, col_offset=52, end_lineno=172, end_col_offset=56)],
        lineno=172, col_offset=26, end_lineno=172, end_col_offset=57), lineno=172,
        col_offset=16, end_lineno=172, end_col_offset=57), If(test=BoolOp(op=And(),
        values=[Compare(left=Name(id='question_id', ctx=Load(), lineno=173, col_offset=19,
        end_lineno=173, end_col_offset=30), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=173, col_offset=37, end_lineno=173, end_col_offset=50),
        conversion=-1, lineno=173, col_offset=34, end_lineno=173, end_col_offset=69),
        Constant(value='_variable_purpose', lineno=173, col_offset=34, end_lineno=173,
        end_col_offset=69)], lineno=173, col_offset=34, end_lineno=173, end_col_offset=69)],
        lineno=173, col_offset=19, end_lineno=173, end_col_offset=69), Attribute(value=Name(id='self',
        ctx=Load(), lineno=173, col_offset=74, end_lineno=173, end_col_offset=78),
        attr='use_llm', ctx=Load(), lineno=173, col_offset=74, end_lineno=173, end_col_offset=86)],
        lineno=173, col_offset=19, end_lineno=173, end_col_offset=86), body=[Expr(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=174, col_offset=20, end_lineno=174, end_col_offset=24),
        attr='process_items', ctx=Load(), lineno=174, col_offset=20, end_lineno=174,
        end_col_offset=38), args=[Name(id='question_type', ctx=Load(), lineno=174,
        col_offset=39, end_lineno=174, end_col_offset=52), Name(id='question_id',
        ctx=Load(), lineno=174, col_offset=54, end_lineno=174, end_col_offset=65),
        Name(id='question_text', ctx=Load(), lineno=174, col_offset=67, end_lineno=174,
        end_col_offset=80), Attribute(value=Name(id='self', ctx=Load(), lineno=174,
        col_offset=82, end_lineno=174, end_col_offset=86), attr='base_name', ctx=Load(),
        lineno=174, col_offset=82, end_lineno=174, end_col_offset=96), Name(id='name',
        ctx=Load(), lineno=174, col_offset=98, end_lineno=174, end_col_offset=102),
        Name(id='info', ctx=Load(), lineno=174, col_offset=104, end_lineno=174, end_col_offset=108),
        Name(id='context', ctx=Load(), lineno=174, col_offset=110, end_lineno=174,
        end_col_offset=117), JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=174, col_offset=122, end_lineno=174, end_col_offset=135),
        conversion=-1, lineno=174, col_offset=119, end_lineno=174, end_col_offset=147),
        Constant(value='_variables', lineno=174, col_offset=119, end_lineno=174, end_col_offset=147)],
        lineno=174, col_offset=119, end_lineno=174, end_col_offset=147)], keywords=[],
        lineno=174, col_offset=20, end_lineno=174, end_col_offset=148), lineno=174,
        col_offset=20, end_lineno=174, end_col_offset=148)], orelse=[If(test=Compare(left=Name(id='question_id',
        ctx=Load(), lineno=175, col_offset=21, end_lineno=175, end_col_offset=32),
        ops=[NotEq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=175, col_offset=39, end_lineno=175, end_col_offset=52),
        conversion=-1, lineno=175, col_offset=36, end_lineno=175, end_col_offset=71),
        Constant(value='_variable_purpose', lineno=175, col_offset=36, end_lineno=175,
        end_col_offset=71)], lineno=175, col_offset=36, end_lineno=175, end_col_offset=71)],
        lineno=175, col_offset=21, end_lineno=175, end_col_offset=71), body=[Assign(targets=[Name(id='query',
        ctx=Store(), lineno=176, col_offset=20, end_lineno=176, end_col_offset=25)],
        value=Call(func=Attribute(value=Name(id='question_text', ctx=Load(), lineno=176,
        col_offset=28, end_lineno=176, end_col_offset=41), attr='format', ctx=Load(),
        lineno=176, col_offset=28, end_lineno=176, end_col_offset=48), args=[], keywords=[keyword(arg='filename',
        value=Attribute(value=Name(id='self', ctx=Load(), lineno=176, col_offset=58,
        end_lineno=176, end_col_offset=62), attr='base_name', ctx=Load(), lineno=176,
        col_offset=58, end_lineno=176, end_col_offset=72), lineno=176, col_offset=49,
        end_lineno=176, end_col_offset=72), keyword(value=Name(id='mapping', ctx=Load(),
        lineno=176, col_offset=76, end_lineno=176, end_col_offset=83), lineno=176,
        col_offset=74, end_lineno=176, end_col_offset=83)], lineno=176, col_offset=28,
        end_lineno=176, end_col_offset=84), lineno=176, col_offset=20, end_lineno=176,
        end_col_offset=84), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=177, col_offset=20, end_lineno=177, end_col_offset=24), attr='process_question',
        ctx=Load(), lineno=177, col_offset=20, end_lineno=177, end_col_offset=41),
        args=[Name(id='question_type', ctx=Load(), lineno=177, col_offset=42, end_lineno=177,
        end_col_offset=55), Name(id='question_id', ctx=Load(), lineno=177, col_offset=57,
        end_lineno=177, end_col_offset=68), Name(id='query', ctx=Load(), lineno=177,
        col_offset=70, end_lineno=177, end_col_offset=75), Name(id='context', ctx=Load(),
        lineno=177, col_offset=77, end_lineno=177, end_col_offset=84), Name(id='info',
        ctx=Load(), lineno=177, col_offset=86, end_lineno=177, end_col_offset=90)],
        keywords=[], lineno=177, col_offset=20, end_lineno=177, end_col_offset=91),
        lineno=177, col_offset=20, end_lineno=177, end_col_offset=91)], orelse=[],
        lineno=175, col_offset=16, end_lineno=177, end_col_offset=91)], lineno=173,
        col_offset=16, end_lineno=177, end_col_offset=91)], orelse=[], lineno=170,
        col_offset=12, end_lineno=177, end_col_offset=91)], lineno=160, col_offset=8,
        end_lineno=177, end_col_offset=91)], lineno=155, col_offset=8, end_lineno=177,
        end_col_offset=91)], decorator_list=[], returns=Constant(value=None, lineno=154,
        col_offset=97, end_lineno=154, end_col_offset=101), lineno=154, col_offset=4,
        end_lineno=177, end_col_offset=91)
      method_docstring: null
      method_inputs:
      - self
      - question_type
      - question_id
      - question_text
      method_defaults: []
      method_returns: []
      method_calls:
      - question_text.format
      - self.file_details['classes'].items
      - key.startswith
      - len
      - self.file_details[self.question_mapping[question_type]].items
      - self.process_items
      - self.process_question
      - class_info.items
      method_variables:
      - query
      - info
      - context
      - mapping
      - method_name
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_generate:
      method_name: generate
      method_code: "def generate(self) -> tuple[List[Dict], List[Dict]]:\n    for\
        \ question in self.questions:\n        question_id = question['id']\n    \
        \    question_text = question['text']\n        question_type = question['type']\n\
        \        self.process_question_type(question_type, question_id, question_text)\n\
        \    return (self.qa_list, self.instruct_list)"
      method_ast: FunctionDef(name='generate', args=arguments(posonlyargs=[], args=[arg(arg='self',
        lineno=179, col_offset=17, end_lineno=179, end_col_offset=21)], kwonlyargs=[],
        kw_defaults=[], defaults=[]), body=[For(target=Name(id='question', ctx=Store(),
        lineno=180, col_offset=12, end_lineno=180, end_col_offset=20), iter=Attribute(value=Name(id='self',
        ctx=Load(), lineno=180, col_offset=24, end_lineno=180, end_col_offset=28),
        attr='questions', ctx=Load(), lineno=180, col_offset=24, end_lineno=180, end_col_offset=38),
        body=[Assign(targets=[Name(id='question_id', ctx=Store(), lineno=181, col_offset=12,
        end_lineno=181, end_col_offset=23)], value=Subscript(value=Name(id='question',
        ctx=Load(), lineno=181, col_offset=26, end_lineno=181, end_col_offset=34),
        slice=Constant(value='id', lineno=181, col_offset=35, end_lineno=181, end_col_offset=39),
        ctx=Load(), lineno=181, col_offset=26, end_lineno=181, end_col_offset=40),
        lineno=181, col_offset=12, end_lineno=181, end_col_offset=40), Assign(targets=[Name(id='question_text',
        ctx=Store(), lineno=182, col_offset=12, end_lineno=182, end_col_offset=25)],
        value=Subscript(value=Name(id='question', ctx=Load(), lineno=182, col_offset=28,
        end_lineno=182, end_col_offset=36), slice=Constant(value='text', lineno=182,
        col_offset=37, end_lineno=182, end_col_offset=43), ctx=Load(), lineno=182,
        col_offset=28, end_lineno=182, end_col_offset=44), lineno=182, col_offset=12,
        end_lineno=182, end_col_offset=44), Assign(targets=[Name(id='question_type',
        ctx=Store(), lineno=183, col_offset=12, end_lineno=183, end_col_offset=25)],
        value=Subscript(value=Name(id='question', ctx=Load(), lineno=183, col_offset=28,
        end_lineno=183, end_col_offset=36), slice=Constant(value='type', lineno=183,
        col_offset=37, end_lineno=183, end_col_offset=43), ctx=Load(), lineno=183,
        col_offset=28, end_lineno=183, end_col_offset=44), lineno=183, col_offset=12,
        end_lineno=183, end_col_offset=44), Expr(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=184, col_offset=12, end_lineno=184, end_col_offset=16),
        attr='process_question_type', ctx=Load(), lineno=184, col_offset=12, end_lineno=184,
        end_col_offset=38), args=[Name(id='question_type', ctx=Load(), lineno=184,
        col_offset=39, end_lineno=184, end_col_offset=52), Name(id='question_id',
        ctx=Load(), lineno=184, col_offset=54, end_lineno=184, end_col_offset=65),
        Name(id='question_text', ctx=Load(), lineno=184, col_offset=67, end_lineno=184,
        end_col_offset=80)], keywords=[], lineno=184, col_offset=12, end_lineno=184,
        end_col_offset=81), lineno=184, col_offset=12, end_lineno=184, end_col_offset=81)],
        orelse=[], lineno=180, col_offset=8, end_lineno=184, end_col_offset=81), Return(value=Tuple(elts=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=185, col_offset=15, end_lineno=185, end_col_offset=19),
        attr='qa_list', ctx=Load(), lineno=185, col_offset=15, end_lineno=185, end_col_offset=27),
        Attribute(value=Name(id='self', ctx=Load(), lineno=185, col_offset=29, end_lineno=185,
        end_col_offset=33), attr='instruct_list', ctx=Load(), lineno=185, col_offset=29,
        end_lineno=185, end_col_offset=47)], ctx=Load(), lineno=185, col_offset=15,
        end_lineno=185, end_col_offset=47), lineno=185, col_offset=8, end_lineno=185,
        end_col_offset=47)], decorator_list=[], returns=Subscript(value=Name(id='tuple',
        ctx=Load(), lineno=179, col_offset=26, end_lineno=179, end_col_offset=31),
        slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load(), lineno=179,
        col_offset=32, end_lineno=179, end_col_offset=36), slice=Name(id='Dict', ctx=Load(),
        lineno=179, col_offset=37, end_lineno=179, end_col_offset=41), ctx=Load(),
        lineno=179, col_offset=32, end_lineno=179, end_col_offset=42), Subscript(value=Name(id='List',
        ctx=Load(), lineno=179, col_offset=44, end_lineno=179, end_col_offset=48),
        slice=Name(id='Dict', ctx=Load(), lineno=179, col_offset=49, end_lineno=179,
        end_col_offset=53), ctx=Load(), lineno=179, col_offset=44, end_lineno=179,
        end_col_offset=54)], ctx=Load(), lineno=179, col_offset=32, end_lineno=179,
        end_col_offset=54), ctx=Load(), lineno=179, col_offset=26, end_lineno=179,
        end_col_offset=55), lineno=179, col_offset=4, end_lineno=185, end_col_offset=47)
      method_docstring: null
      method_inputs:
      - self
      method_defaults: []
      method_returns:
      - (self.qa_list, self.instruct_list)
      method_calls:
      - self.process_question_type
      method_variables:
      - question_type
      - question_id
      - question_text
      method_decorators: []
      method_annotations: []
      method_properties: []
