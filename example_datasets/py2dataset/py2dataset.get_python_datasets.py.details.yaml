file_info:
  file_code: "\"\"\"\nGenerates JSON format question-answer pairs and instructions\
    \ for a Python file\nRequirements:\n[req01] The get_model function should import\
    \ the specified model class using\n        the information from the model configuration,\
    \ instantiate the model\n        class with the provided parameters from the model\
    \ configuration,\n        and return the instantiated model.\n[req02] The PythonJsonGenerator\
    \ class shall parse a Python file and a list of\n        questions to generate\
    \ JSON-formatted question-answer pairs and \n        instructions.\n[req03] The\
    \ PythonJsonGenerator class shall add the generated question-answer\n        pairs\
    \ to the qa_list attribute.\n[req04] The PythonJsonGenerator class shall add the\
    \ generated instructions to\n        the instruct_list attribute.\n[req05] If\
    \ the use_llm attribute is set to True, the PythonJsonGenerator class\n      \
    \  shall use a language model to generate responses.\n[req06] The PythonJsonGenerator\
    \ class shall handle exceptions that may occur\n        during the loading of\
    \ the language model.\n[req07] The generate method in the PythonJsonGenerator\
    \ class shall generate and\n        return qa_list and instruct_list.\n[req08]\
    \ The PythonJsonGenerator class shall use the get_model function to load\n   \
    \     the specified language model according to the configuration file.\n[req09]\
    \ The PythonJsonGenerator class shall use the loaded language model to\n     \
    \   generate responses to the questions.\n[req10] The PythonJsonGenerator class\
    \ shall handle exceptions that may occur\n        during the generation of responses.\n\
    [req11] The get_python_datasets function shall create an instance of\n       \
    \ PythonJsonGenerator and call the generate method.\n[req12] The get_python_datasets\
    \ function shall return qa_list and instruct_list\n        generated by the PythonJsonGenerator\
    \ instance.\n[req13] The PythonJsonGenerator class shall read the configuration\
    \ file to set\n        the inference model parameters.\n[req14] The PythonJsonGenerator\
    \ class shall process questions related to a\n        file, function, class, or\
    \ method.\n[req15] If the question type is related to a variable's purpose and\
    \ the use_llm\n        attribute is set to True, the PythonJsonGenerator class\
    \ shall use the\n        language model to generate the response.\n[req16] The\
    \ PythonJsonGenerator class shall generate responses for all the\n        questions\
    \ in the provided list, adding the responses to the qa_list and\n        instruct_list.\n\
    [req17] The PythonJsonGenerator class shall use the\n        clean_and_get_unique_elements\
    \ method to clean an input string and return\n        a string of unique elements.\n\
    [req18] The PythonJsonGenerator class shall use the add_to_list method to add\
    \ a\n        response to a list.\n[req19] If the use_llm attribute is set to True,\
    \ the PythonJsonGenerator class\n        shall use the get_response_from_llm method\
    \ to get a response from the\n        language model.\n[req20] The PythonJsonGenerator\
    \ class shall handle exceptions that may occur\n        during the response generation\
    \ from the language model.\n[req21] If the use_summary attribute is set to True,\
    \ the PythonJsonGenerator\n        class shall include the file summary in the\
    \ context for generating the\n        instruction list.\n\"\"\"\nimport re\nimport\
    \ os\nimport json\nimport logging\nimport importlib\nimport yaml\nfrom typing\
    \ import List, Dict\n\n# Set up logging\nlogging.basicConfig(\n    format='%(asctime)s\
    \ - %(levelname)s - %(message)s', \n    level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\
    \n\ndef get_model(model_config: dict, user_config: dict = None) -> object:\n \
    \   \"\"\"\n    Imports and instantiates a model based on the provided configuration.\n\
    \    Args:\n        model_config (dict): A dictionary containing the configuration\
    \ for the\n            model. It should include the import path for the model\
    \ class and\n            parameters for instantiation.\n        user_config (dict):\
    \ A dictionary containing user-provided configurations.\n            If provided,\
    \ these configurations will override the defaults.\n    Returns:\n        object:\
    \ An instance of the specified model class, or None if there was\n           \
    \ an error.\n    \"\"\"\n    # If a user configuration is provided, override the\
    \ defaults\n    if user_config is not None:\n        model_config.update(user_config)\n\
    \n    # The rest of the function remains the same\n    model = None\n    try:\n\
    \        module_name, class_name = model_config['model_import_path'].rsplit('.',\
    \ 1)\n        module = importlib.import_module(module_name)\n    except ImportError\
    \ as e:\n        print(f\"Failed to import module {module_name}. Error: {e}\"\
    )\n        return model\n    try:\n        ModelClass = getattr(module, class_name)\n\
    \    except AttributeError as e:\n        print(f\"Module {module_name} does not\
    \ have a class named {class_name}. Error: {e}\")\n        return model\n    model_params\
    \ = model_config['model_params']\n    try:\n        model = ModelClass.from_pretrained(model_params.pop('model_path'),\
    \ **model_params)\n    except Exception as e:\n        print(f\"Failed to instantiate\
    \ the model with the provided parameters. Error: {e}\")\n        return model\n\
    \    return model\n\n\nclass PythonJsonGenerator:\n    \"\"\"\n    A class used\
    \ to generate JSON formatted dictionary outputs for a Python \n    file.\n   \
    \ Attributes:\n        file_path (str): The path to the Python file.\n       \
    \ file_details (Dict): A dictionary containing details of the Python\n       \
    \     file.\n        base_name (str): The base name of the Python file.\n    \
    \    questions (List): A list of questions for which responses are to be\n   \
    \         generated.\n        qa_list (List): A list to store the generated question-answer\
    \ pairs.\n        instruct_list (List): A list to store the generated instructions.\n\
    \        question_mapping (Dict): A dictionary mapping question types to their\n\
    \            corresponding keys in the file details.\n        use_llm (bool):\
    \ A flag indicating whether to use a language model for\n            generating\
    \ responses.\n        llm (AutoModelForCausalLM): The language model to be used\
    \ for\n            generating responses.\n    Methods:\n        clean_and_get_unique_elements(input_str:\
    \ str) -> str: Cleans an input \n            string and returns a string of unique\
    \ elements.\n        add_to_list(list_to_update: List[Dict], query: str, response:\
    \ str,\n            additional_field=None) -> List[Dict]: Adds a response to a\
    \ list.\n        get_response_from_llm(query: str, context: str) -> str: Gets\
    \ a \n            response from the language model.\n        get_variable_purpose(question_id:\
    \ str, question_text: str, base_name:\n            str, name: str, info: Dict,\
    \ context: str, variable_type: str) -> \n                None: Processes questions\
    \ related to the purpose of a variable.\n        process_question(question_id:\
    \ str, query: str, context: str, info) -> \n            None: Processes a question\
    \ and adds the generated response to the\n            qa_list and instruct_list.\n\
    \        process_file_question(question_id: str, question_text: str) -> None:\n\
    \            Processes questions related to a file.\n        process_func_class_question(question_type:\
    \ str, question_id: str, \n            question_text: str) -> None: Processes\
    \ questions related to a \n            function or class.\n        generate()\
    \ -> Tuple[List[Dict], List[Dict]]: Generates responses for\n            all the\
    \ questions and returns the qa_list and instruct_list.\n    \"\"\"\n    def __init__(self,\
    \ file_path: str, file_details: Dict, base_name: str, questions: List[Dict], use_llm:\
    \ bool, use_summary: bool, config: Dict):\n        self.file_path = file_path\n\
    \        self.file_details = file_details\n        self.base_name = base_name\n\
    \        self.questions = questions\n        self.qa_list = []\n        self.instruct_list\
    \ = []\n        self.question_mapping = {\n            'file': 'file',\n     \
    \       'function': 'functions',\n            'class': 'classes',\n          \
    \  'method': 'classes'\n        }\n        self.use_llm = use_llm\n        self.config\
    \ = config\n        if self.use_llm:\n            try:\n                self.llm_config\
    \ = config['inference_model']\n                self.llm = get_model(self.llm_config)\n\
    \            except (FileNotFoundError, yaml.YAMLError, ImportError, AttributeError)\
    \ as e:\n                logger.error(f'Failed to load configuration file: {e}')\n\
    \                self.use_llm = False\n                self.llm_config = None\n\
    \                self.llm = None\n        else:\n            self.llm = None\n\
    \        self.use_summary = use_summary\n\n    @staticmethod\n    def clean_and_get_unique_elements(input_str:\
    \ str) -> str:\n        cleaned_elements = set(re.sub(r'[^\\w\\-_>\\s:/.]', '',\
    \ element.strip())\n                               for element in re.sub(r'\\\
    s+', ' ', input_str).split(','))\n        return ', '.join(cleaned_elements)\n\
    \n    @staticmethod\n    def add_to_list(list_to_update: List[Dict], query: str,\
    \ response: str, additional_field=None) -> List[Dict]:\n        if response and\
    \ response.strip() and response != 'None':\n            list_to_update.append(\n\
    \                {'instruction': query, 'input' : additional_field, 'output':\
    \ response}\n                if additional_field else\n                {'question':\
    \ query, 'answer': response}\n            )\n        return list_to_update\n\n\
    \    def get_response_from_llm(self, query: str, context: str) -> str:\n     \
    \   if not self.llm:\n            logger.error('AI model not available.')\n  \
    \          return ''\n        prompt = self.config[\"prompt_template\"].format(context=context,\
    \ query=query)\n        logging.info(f'Query: {query}')\n        response = self.llm(prompt)\n\
    \        logging.info(f'Response: {response}')\n        return response\n\n  \
    \  def process_items(self, question_type: str, question_id: str, question_text:\
    \ str, base_name: str, name: str, info: Dict, context: str, item_type: str) ->\
    \ None:\n        if info[item_type]:\n            items = [item.strip() for item\
    \ in self.clean_and_get_unique_elements(str(info[item_type])).split(',') if item]\n\
    \            for item in items:\n                query = question_text.format(filename=base_name,\
    \ **{f'{item_type.split(\"_\")[0]}_name': name, f'{item_type.split(\"_\")[0]}_variable':\
    \ item})\n                self.process_question(question_type, question_id, query,\
    \ context, info)\n\n    def process_question(self, question_type: str, question_id:\
    \ str, query: str, context: str, info: Dict) -> None:\n        if question_id.endswith('code_graph'):\n\
    \            response = info.get(question_id, {})\n        else:\n           \
    \ response = self.get_response_from_llm(query, context) if self.use_llm and question_id.endswith('purpose')\
    \ else self.clean_and_get_unique_elements(str(info.get(question_id, '')))\n  \
    \      if response and response != 'None':\n            response_str = str(response)\n\
    \            response_str = response_str.strip()\n            if response_str:\n\
    \                self.qa_list.append({'question': query, 'answer': response_str})\n\
    \                if question_type == 'file' and self.use_summary:\n          \
    \          context = info['file_summary']\n                self.instruct_list.append({'instruction':\
    \ query, 'input': context, 'output': response_str})\n\n    def process_file_question(self,\
    \ question_type: str, question_id: str, question_text: str) -> None:\n       \
    \ query = question_text.format(filename=self.base_name)\n        context = self.file_details['file_info']['file_code']\n\
    \        info = self.file_details['file_info']\n        self.process_question(question_type,\
    \ question_id, query, context, info)\n\n    def process_func_class_question(self,\
    \ question_type: str, question_id: str, question_text: str) -> None:\n       \
    \ if question_type == 'method':  \n            for class_name, class_info in self.file_details['classes'].items():\n\
    \                for key, method_info in class_info.items():\n               \
    \     if key.startswith('class_method_'):\n                        method_name\
    \ = key[len('class_method_'):]\n                        context = method_info['method_code']\n\
    \                        mapping = {'class_name': class_name, 'method_name': method_name}\n\
    \                        query = question_text.format(filename=self.base_name,\
    \ **mapping)\n                        self.process_question(question_type, question_id,\
    \ query, context, method_info)\n        else:\n            for name, info in self.file_details[self.question_mapping[question_type]].items():\n\
    \                context = info[f'{question_type}_code']\n                mapping\
    \ = {f'{question_type}_name': name}\n                if question_id == f'{question_type}_variable_purpose'\
    \ and self.use_llm:\n                    self.process_items(question_type, question_id,\
    \ question_text, self.base_name, name, info, context, f'{question_type}_variables')\n\
    \                elif question_id != f'{question_type}_variable_purpose':\n  \
    \                  query = question_text.format(filename=self.base_name, **mapping)\n\
    \                    self.process_question(question_type, question_id, query,\
    \ context, info)\n\n    def generate(self) -> tuple[List[Dict], List[Dict]]:\n\
    \        for question in self.questions:\n            question_id = question['id']\n\
    \            question_text = question['text']\n            question_type = question['type']\n\
    \            if question_type == 'file':\n                self.process_file_question(question_type,\
    \ question_id, question_text)\n            elif question_type in ['function',\
    \ 'class', 'method']:\n                self.process_func_class_question(question_type,\
    \ question_id, question_text)\n        return self.qa_list, self.instruct_list\n\
    \n\ndef get_python_datasets(file_path: str, file_details: Dict, base_name: str,\
    \ questions: List[Dict], use_llm: bool, use_summary: bool, model_config_path:\
    \ str) -> tuple[List[Dict], List[Dict]]:\n    \"\"\"\n    Extract information\
    \ from a Python file and return it in JSON format.\n    Args:\n        file_path\
    \ (str): The path to the Python file.\n        file_details (Dict): The details\
    \ of the file.\n        base_name (str): The base name.\n        questions (List[Dict]):\
    \ The list of questions.\n        use_llm (bool): Whether to use the language\
    \ model.\n        user_config (dict): User-provided model configurations.\n  \
    \  Returns:\n        Tuple[List[Dict], List[Dict]]: Extracted information in JSON\
    \ format.\n    \"\"\"\n    # Load model configuration from the YAML file\n   \
    \ config = None\n    with open(model_config_path, 'r') as config_file:\n     \
    \   config = yaml.safe_load(config_file)\n\n    generator = PythonJsonGenerator(file_path,\
    \ file_details, base_name, questions, use_llm, use_summary, config)\n    return\
    \ generator.generate()\n"
  file_ast: 'Module(body=[Expr(value=Constant(value="\nGenerates JSON format question-answer
    pairs and instructions for a Python file\nRequirements:\n[req01] The get_model
    function should import the specified model class using\n        the information
    from the model configuration, instantiate the model\n        class with the provided
    parameters from the model configuration,\n        and return the instantiated
    model.\n[req02] The PythonJsonGenerator class shall parse a Python file and a
    list of\n        questions to generate JSON-formatted question-answer pairs and
    \n        instructions.\n[req03] The PythonJsonGenerator class shall add the generated
    question-answer\n        pairs to the qa_list attribute.\n[req04] The PythonJsonGenerator
    class shall add the generated instructions to\n        the instruct_list attribute.\n[req05]
    If the use_llm attribute is set to True, the PythonJsonGenerator class\n        shall
    use a language model to generate responses.\n[req06] The PythonJsonGenerator class
    shall handle exceptions that may occur\n        during the loading of the language
    model.\n[req07] The generate method in the PythonJsonGenerator class shall generate
    and\n        return qa_list and instruct_list.\n[req08] The PythonJsonGenerator
    class shall use the get_model function to load\n        the specified language
    model according to the configuration file.\n[req09] The PythonJsonGenerator class
    shall use the loaded language model to\n        generate responses to the questions.\n[req10]
    The PythonJsonGenerator class shall handle exceptions that may occur\n        during
    the generation of responses.\n[req11] The get_python_datasets function shall create
    an instance of\n        PythonJsonGenerator and call the generate method.\n[req12]
    The get_python_datasets function shall return qa_list and instruct_list\n        generated
    by the PythonJsonGenerator instance.\n[req13] The PythonJsonGenerator class shall
    read the configuration file to set\n        the inference model parameters.\n[req14]
    The PythonJsonGenerator class shall process questions related to a\n        file,
    function, class, or method.\n[req15] If the question type is related to a variable''s
    purpose and the use_llm\n        attribute is set to True, the PythonJsonGenerator
    class shall use the\n        language model to generate the response.\n[req16]
    The PythonJsonGenerator class shall generate responses for all the\n        questions
    in the provided list, adding the responses to the qa_list and\n        instruct_list.\n[req17]
    The PythonJsonGenerator class shall use the\n        clean_and_get_unique_elements
    method to clean an input string and return\n        a string of unique elements.\n[req18]
    The PythonJsonGenerator class shall use the add_to_list method to add a\n        response
    to a list.\n[req19] If the use_llm attribute is set to True, the PythonJsonGenerator
    class\n        shall use the get_response_from_llm method to get a response from
    the\n        language model.\n[req20] The PythonJsonGenerator class shall handle
    exceptions that may occur\n        during the response generation from the language
    model.\n[req21] If the use_summary attribute is set to True, the PythonJsonGenerator\n        class
    shall include the file summary in the context for generating the\n        instruction
    list.\n")), Import(names=[alias(name=''re'')]), Import(names=[alias(name=''os'')]),
    Import(names=[alias(name=''json'')]), Import(names=[alias(name=''logging'')]),
    Import(names=[alias(name=''importlib'')]), Import(names=[alias(name=''yaml'')]),
    ImportFrom(module=''typing'', names=[alias(name=''List''), alias(name=''Dict'')],
    level=0), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''basicConfig'', ctx=Load()), args=[], keywords=[keyword(arg=''format'',
    value=Constant(value=''%(asctime)s - %(levelname)s - %(message)s'')), keyword(arg=''level'',
    value=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''INFO'', ctx=Load()))])),
    Assign(targets=[Name(id=''logger'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[Name(id=''__name__'', ctx=Load())],
    keywords=[])), FunctionDef(name=''get_model'', args=arguments(posonlyargs=[],
    args=[arg(arg=''model_config'', annotation=Name(id=''dict'', ctx=Load())), arg(arg=''user_config'',
    annotation=Name(id=''dict'', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]),
    body=[Expr(value=Constant(value=''\n    Imports and instantiates a model based
    on the provided configuration.\n    Args:\n        model_config (dict): A dictionary
    containing the configuration for the\n            model. It should include the
    import path for the model class and\n            parameters for instantiation.\n        user_config
    (dict): A dictionary containing user-provided configurations.\n            If
    provided, these configurations will override the defaults.\n    Returns:\n        object:
    An instance of the specified model class, or None if there was\n            an
    error.\n    '')), If(test=Compare(left=Name(id=''user_config'', ctx=Load()), ops=[IsNot()],
    comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id=''model_config'',
    ctx=Load()), attr=''update'', ctx=Load()), args=[Name(id=''user_config'', ctx=Load())],
    keywords=[]))], orelse=[]), Assign(targets=[Name(id=''model'', ctx=Store())],
    value=Constant(value=None)), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
    ctx=Store()), Name(id=''class_name'', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_import_path''), ctx=Load()), attr=''rsplit'',
    ctx=Load()), args=[Constant(value=''.''), Constant(value=1)], keywords=[])), Assign(targets=[Name(id=''module'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''importlib'', ctx=Load()),
    attr=''import_module'', ctx=Load()), args=[Name(id=''module_name'', ctx=Load())],
    keywords=[]))], handlers=[ExceptHandler(type=Name(id=''ImportError'', ctx=Load()),
    name=''e'', body=[Expr(value=Call(func=Name(id=''print'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed
    to import module ''), FormattedValue(value=Name(id=''module_name'', ctx=Load()),
    conversion=-1), Constant(value=''. Error: ''), FormattedValue(value=Name(id=''e'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id=''model'',
    ctx=Load()))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id=''ModelClass'',
    ctx=Store())], value=Call(func=Name(id=''getattr'', ctx=Load()), args=[Name(id=''module'',
    ctx=Load()), Name(id=''class_name'', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id=''AttributeError'',
    ctx=Load()), name=''e'', body=[Expr(value=Call(func=Name(id=''print'', ctx=Load()),
    args=[JoinedStr(values=[Constant(value=''Module ''), FormattedValue(value=Name(id=''module_name'',
    ctx=Load()), conversion=-1), Constant(value='' does not have a class named ''),
    FormattedValue(value=Name(id=''class_name'', ctx=Load()), conversion=-1), Constant(value=''.
    Error: ''), FormattedValue(value=Name(id=''e'', ctx=Load()), conversion=-1)])],
    keywords=[])), Return(value=Name(id=''model'', ctx=Load()))])], orelse=[], finalbody=[]),
    Assign(targets=[Name(id=''model_params'', ctx=Store())], value=Subscript(value=Name(id=''model_config'',
    ctx=Load()), slice=Constant(value=''model_params''), ctx=Load())), Try(body=[Assign(targets=[Name(id=''model'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''ModelClass'', ctx=Load()),
    attr=''from_pretrained'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''model_params'',
    ctx=Load()), attr=''pop'', ctx=Load()), args=[Constant(value=''model_path'')],
    keywords=[])], keywords=[keyword(value=Name(id=''model_params'', ctx=Load()))]))],
    handlers=[ExceptHandler(type=Name(id=''Exception'', ctx=Load()), name=''e'', body=[Expr(value=Call(func=Name(id=''print'',
    ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed to instantiate the
    model with the provided parameters. Error: ''), FormattedValue(value=Name(id=''e'',
    ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id=''model'',
    ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id=''model'', ctx=Load()))],
    decorator_list=[], returns=Name(id=''object'', ctx=Load())), ClassDef(name=''PythonJsonGenerator'',
    bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    A class used to
    generate JSON formatted dictionary outputs for a Python \n    file.\n    Attributes:\n        file_path
    (str): The path to the Python file.\n        file_details (Dict): A dictionary
    containing details of the Python\n            file.\n        base_name (str):
    The base name of the Python file.\n        questions (List): A list of questions
    for which responses are to be\n            generated.\n        qa_list (List):
    A list to store the generated question-answer pairs.\n        instruct_list (List):
    A list to store the generated instructions.\n        question_mapping (Dict):
    A dictionary mapping question types to their\n            corresponding keys in
    the file details.\n        use_llm (bool): A flag indicating whether to use a
    language model for\n            generating responses.\n        llm (AutoModelForCausalLM):
    The language model to be used for\n            generating responses.\n    Methods:\n        clean_and_get_unique_elements(input_str:
    str) -> str: Cleans an input \n            string and returns a string of unique
    elements.\n        add_to_list(list_to_update: List[Dict], query: str, response:
    str,\n            additional_field=None) -> List[Dict]: Adds a response to a list.\n        get_response_from_llm(query:
    str, context: str) -> str: Gets a \n            response from the language model.\n        get_variable_purpose(question_id:
    str, question_text: str, base_name:\n            str, name: str, info: Dict, context:
    str, variable_type: str) -> \n                None: Processes questions related
    to the purpose of a variable.\n        process_question(question_id: str, query:
    str, context: str, info) -> \n            None: Processes a question and adds
    the generated response to the\n            qa_list and instruct_list.\n        process_file_question(question_id:
    str, question_text: str) -> None:\n            Processes questions related to
    a file.\n        process_func_class_question(question_type: str, question_id:
    str, \n            question_text: str) -> None: Processes questions related to
    a \n            function or class.\n        generate() -> Tuple[List[Dict], List[Dict]]:
    Generates responses for\n            all the questions and returns the qa_list
    and instruct_list.\n    '')), FunctionDef(name=''__init__'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''base_name'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''use_llm'',
    annotation=Name(id=''bool'', ctx=Load())), arg(arg=''use_summary'', annotation=Name(id=''bool'',
    ctx=Load())), arg(arg=''config'', annotation=Name(id=''Dict'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_path'', ctx=Store())], value=Name(id=''file_path'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''file_details'',
    ctx=Store())], value=Name(id=''file_details'', ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Store())], value=Name(id=''base_name'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''questions'',
    ctx=Store())], value=Name(id=''questions'', ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''qa_list'', ctx=Store())], value=List(elts=[], ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''instruct_list'',
    ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''question_mapping'', ctx=Store())], value=Dict(keys=[Constant(value=''file''),
    Constant(value=''function''), Constant(value=''class''), Constant(value=''method'')],
    values=[Constant(value=''file''), Constant(value=''functions''), Constant(value=''classes''),
    Constant(value=''classes'')])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Store())], value=Name(id=''use_llm'', ctx=Load())),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''config'',
    ctx=Store())], value=Name(id=''config'', ctx=Load())), If(test=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Load()), body=[Try(body=[Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm_config'', ctx=Store())], value=Subscript(value=Name(id=''config'',
    ctx=Load()), slice=Constant(value=''inference_model''), ctx=Load())), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Store())], value=Call(func=Name(id=''get_model'',
    ctx=Load()), args=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''llm_config'',
    ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id=''FileNotFoundError'',
    ctx=Load()), Attribute(value=Name(id=''yaml'', ctx=Load()), attr=''YAMLError'',
    ctx=Load()), Name(id=''ImportError'', ctx=Load()), Name(id=''AttributeError'',
    ctx=Load())], ctx=Load()), name=''e'', body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
    ctx=Load()), attr=''error'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed
    to load configuration file: ''), FormattedValue(value=Name(id=''e'', ctx=Load()),
    conversion=-1)])], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm_config'', ctx=Store())], value=Constant(value=None)),
    Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()), attr=''llm'', ctx=Store())],
    value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_summary'', ctx=Store())], value=Name(id=''use_summary'',
    ctx=Load()))], decorator_list=[]), FunctionDef(name=''clean_and_get_unique_elements'',
    args=arguments(posonlyargs=[], args=[arg(arg=''input_str'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''cleaned_elements'',
    ctx=Store())], value=Call(func=Name(id=''set'', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''re'',
    ctx=Load()), attr=''sub'', ctx=Load()), args=[Constant(value=''[^\\w\\-_>\\s:/.]''),
    Constant(value=''''), Call(func=Attribute(value=Name(id=''element'', ctx=Load()),
    attr=''strip'', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id=''element'',
    ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''re'',
    ctx=Load()), attr=''sub'', ctx=Load()), args=[Constant(value=''\\s+''), Constant(value=''
    ''), Name(id=''input_str'', ctx=Load())], keywords=[]), attr=''split'', ctx=Load()),
    args=[Constant(value='','')], keywords=[]), ifs=[], is_async=0)])], keywords=[])),
    Return(value=Call(func=Attribute(value=Constant(value='', ''), attr=''join'',
    ctx=Load()), args=[Name(id=''cleaned_elements'', ctx=Load())], keywords=[]))],
    decorator_list=[Name(id=''staticmethod'', ctx=Load())], returns=Name(id=''str'',
    ctx=Load())), FunctionDef(name=''add_to_list'', args=arguments(posonlyargs=[],
    args=[arg(arg=''list_to_update'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''query'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''response'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''additional_field'')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]),
    body=[If(test=BoolOp(op=And(), values=[Name(id=''response'', ctx=Load()), Call(func=Attribute(value=Name(id=''response'',
    ctx=Load()), attr=''strip'', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id=''response'',
    ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''None'')])]), body=[Expr(value=Call(func=Attribute(value=Name(id=''list_to_update'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[IfExp(test=Name(id=''additional_field'',
    ctx=Load()), body=Dict(keys=[Constant(value=''instruction''), Constant(value=''input''),
    Constant(value=''output'')], values=[Name(id=''query'', ctx=Load()), Name(id=''additional_field'',
    ctx=Load()), Name(id=''response'', ctx=Load())]), orelse=Dict(keys=[Constant(value=''question''),
    Constant(value=''answer'')], values=[Name(id=''query'', ctx=Load()), Name(id=''response'',
    ctx=Load())]))], keywords=[]))], orelse=[]), Return(value=Name(id=''list_to_update'',
    ctx=Load()))], decorator_list=[Name(id=''staticmethod'', ctx=Load())], returns=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), FunctionDef(name=''get_response_from_llm'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''query'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
    ctx=Load()), attr=''error'', ctx=Load()), args=[Constant(value=''AI model not
    available.'')], keywords=[])), Return(value=Constant(value=''''))], orelse=[]),
    Assign(targets=[Name(id=''prompt'', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''config'', ctx=Load()), slice=Constant(value=''prompt_template''),
    ctx=Load()), attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''context'',
    value=Name(id=''context'', ctx=Load())), keyword(arg=''query'', value=Name(id=''query'',
    ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Query: ''),
    FormattedValue(value=Name(id=''query'', ctx=Load()), conversion=-1)])], keywords=[])),
    Assign(targets=[Name(id=''response'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''llm'', ctx=Load()), args=[Name(id=''prompt'', ctx=Load())],
    keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''info'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Response:
    ''), FormattedValue(value=Name(id=''response'', ctx=Load()), conversion=-1)])],
    keywords=[])), Return(value=Name(id=''response'', ctx=Load()))], decorator_list=[],
    returns=Name(id=''str'', ctx=Load())), FunctionDef(name=''process_items'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''question_type'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''question_id'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''base_name'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''name'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''info'', annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''context'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''item_type'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Name(id=''info'',
    ctx=Load()), slice=Name(id=''item_type'', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id=''items'',
    ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id=''item'',
    ctx=Load()), attr=''strip'', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id=''item'',
    ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''clean_and_get_unique_elements'', ctx=Load()), args=[Call(func=Name(id=''str'',
    ctx=Load()), args=[Subscript(value=Name(id=''info'', ctx=Load()), slice=Name(id=''item_type'',
    ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), attr=''split'', ctx=Load()),
    args=[Constant(value='','')], keywords=[]), ifs=[Name(id=''item'', ctx=Load())],
    is_async=0)])), For(target=Name(id=''item'', ctx=Store()), iter=Name(id=''items'',
    ctx=Load()), body=[Assign(targets=[Name(id=''query'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''question_text'',
    ctx=Load()), attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''filename'',
    value=Name(id=''base_name'', ctx=Load())), keyword(value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''item_type'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''_'')], keywords=[]),
    slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=''_name'')]),
    JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''item_type'',
    ctx=Load()), attr=''split'', ctx=Load()), args=[Constant(value=''_'')], keywords=[]),
    slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=''_variable'')])],
    values=[Name(id=''name'', ctx=Load()), Name(id=''item'', ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''process_question'', ctx=Load()), args=[Name(id=''question_type'',
    ctx=Load()), Name(id=''question_id'', ctx=Load()), Name(id=''query'', ctx=Load()),
    Name(id=''context'', ctx=Load()), Name(id=''info'', ctx=Load())], keywords=[]))],
    orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''process_question'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''question_type'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''question_id'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''query'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''context'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''info'', annotation=Name(id=''Dict'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id=''question_id'',
    ctx=Load()), attr=''endswith'', ctx=Load()), args=[Constant(value=''code_graph'')],
    keywords=[]), body=[Assign(targets=[Name(id=''response'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''info'',
    ctx=Load()), attr=''get'', ctx=Load()), args=[Name(id=''question_id'', ctx=Load()),
    Dict(keys=[], values=[])], keywords=[]))], orelse=[Assign(targets=[Name(id=''response'',
    ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Load()), Call(func=Attribute(value=Name(id=''question_id'',
    ctx=Load()), attr=''endswith'', ctx=Load()), args=[Constant(value=''purpose'')],
    keywords=[])]), body=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''get_response_from_llm'', ctx=Load()), args=[Name(id=''query'', ctx=Load()),
    Name(id=''context'', ctx=Load())], keywords=[]), orelse=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''clean_and_get_unique_elements'', ctx=Load()), args=[Call(func=Name(id=''str'',
    ctx=Load()), args=[Call(func=Attribute(value=Name(id=''info'', ctx=Load()), attr=''get'',
    ctx=Load()), args=[Name(id=''question_id'', ctx=Load()), Constant(value='''')],
    keywords=[])], keywords=[])], keywords=[])))]), If(test=BoolOp(op=And(), values=[Name(id=''response'',
    ctx=Load()), Compare(left=Name(id=''response'', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=''None'')])]),
    body=[Assign(targets=[Name(id=''response_str'', ctx=Store())], value=Call(func=Name(id=''str'',
    ctx=Load()), args=[Name(id=''response'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''response_str'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''response_str'', ctx=Load()),
    attr=''strip'', ctx=Load()), args=[], keywords=[])), If(test=Name(id=''response_str'',
    ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''qa_list'', ctx=Load()), attr=''append'', ctx=Load()), args=[Dict(keys=[Constant(value=''question''),
    Constant(value=''answer'')], values=[Name(id=''query'', ctx=Load()), Name(id=''response_str'',
    ctx=Load())])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''file'')]), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_summary'', ctx=Load())]), body=[Assign(targets=[Name(id=''context'',
    ctx=Store())], value=Subscript(value=Name(id=''info'', ctx=Load()), slice=Constant(value=''file_summary''),
    ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''instruct_list'', ctx=Load()), attr=''append'', ctx=Load()),
    args=[Dict(keys=[Constant(value=''instruction''), Constant(value=''input''), Constant(value=''output'')],
    values=[Name(id=''query'', ctx=Load()), Name(id=''context'', ctx=Load()), Name(id=''response_str'',
    ctx=Load())])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)),
    FunctionDef(name=''process_file_question'', args=arguments(posonlyargs=[], args=[arg(arg=''self''),
    arg(arg=''question_type'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''question_id'',
    annotation=Name(id=''str'', ctx=Load())), arg(arg=''question_text'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''query'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()),
    attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load()))])), Assign(targets=[Name(id=''context'',
    ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Constant(value=''file_info''),
    ctx=Load()), slice=Constant(value=''file_code''), ctx=Load())), Assign(targets=[Name(id=''info'',
    ctx=Store())], value=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''file_details'', ctx=Load()), slice=Constant(value=''file_info''), ctx=Load())),
    Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()), attr=''process_question'',
    ctx=Load()), args=[Name(id=''question_type'', ctx=Load()), Name(id=''question_id'',
    ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'', ctx=Load()),
    Name(id=''info'', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)),
    FunctionDef(name=''process_func_class_question'', args=arguments(posonlyargs=[],
    args=[arg(arg=''self''), arg(arg=''question_type'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''question_id'', annotation=Name(id=''str'', ctx=Load())),
    arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load()))], kwonlyargs=[],
    kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[Eq()], comparators=[Constant(value=''method'')]), body=[For(target=Tuple(elts=[Name(id=''class_name'',
    ctx=Store()), Name(id=''class_info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Constant(value=''classes''),
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id=''key'',
    ctx=Store()), Name(id=''method_info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id=''class_info'',
    ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id=''key'',
    ctx=Load()), attr=''startswith'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[]), body=[Assign(targets=[Name(id=''method_name'', ctx=Store())], value=Subscript(value=Name(id=''key'',
    ctx=Load()), slice=Slice(lower=Call(func=Name(id=''len'', ctx=Load()), args=[Constant(value=''class_method_'')],
    keywords=[])), ctx=Load())), Assign(targets=[Name(id=''context'', ctx=Store())],
    value=Subscript(value=Name(id=''method_info'', ctx=Load()), slice=Constant(value=''method_code''),
    ctx=Load())), Assign(targets=[Name(id=''mapping'', ctx=Store())], value=Dict(keys=[Constant(value=''class_name''),
    Constant(value=''method_name'')], values=[Name(id=''class_name'', ctx=Load()),
    Name(id=''method_name'', ctx=Load())])), Assign(targets=[Name(id=''query'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()), attr=''format'',
    ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load())), keyword(value=Name(id=''mapping'',
    ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''process_question'', ctx=Load()), args=[Name(id=''question_type'', ctx=Load()),
    Name(id=''question_id'', ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'',
    ctx=Load()), Name(id=''method_info'', ctx=Load())], keywords=[]))], orelse=[])],
    orelse=[])], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id=''name'', ctx=Store()),
    Name(id=''info'', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''file_details'', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''question_mapping'', ctx=Load()), slice=Name(id=''question_type'',
    ctx=Load()), ctx=Load()), ctx=Load()), attr=''items'', ctx=Load()), args=[], keywords=[]),
    body=[Assign(targets=[Name(id=''context'', ctx=Store())], value=Subscript(value=Name(id=''info'',
    ctx=Load()), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_code'')]), ctx=Load())), Assign(targets=[Name(id=''mapping'',
    ctx=Store())], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_name'')])], values=[Name(id=''name'',
    ctx=Load())])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_id'',
    ctx=Load()), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variable_purpose'')])]), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''use_llm'', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''process_items'', ctx=Load()), args=[Name(id=''question_type'',
    ctx=Load()), Name(id=''question_id'', ctx=Load()), Name(id=''question_text'',
    ctx=Load()), Attribute(value=Name(id=''self'', ctx=Load()), attr=''base_name'',
    ctx=Load()), Name(id=''name'', ctx=Load()), Name(id=''info'', ctx=Load()), Name(id=''context'',
    ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variables'')])], keywords=[]))],
    orelse=[If(test=Compare(left=Name(id=''question_id'', ctx=Load()), ops=[NotEq()],
    comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
    ctx=Load()), conversion=-1), Constant(value=''_variable_purpose'')])]), body=[Assign(targets=[Name(id=''query'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load()),
    attr=''format'', ctx=Load()), args=[], keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''base_name'', ctx=Load())), keyword(value=Name(id=''mapping'',
    ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''process_question'', ctx=Load()), args=[Name(id=''question_type'', ctx=Load()),
    Name(id=''question_id'', ctx=Load()), Name(id=''query'', ctx=Load()), Name(id=''context'',
    ctx=Load()), Name(id=''info'', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])])],
    decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''generate'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self'')], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[For(target=Name(id=''question'', ctx=Store()), iter=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''questions'', ctx=Load()), body=[Assign(targets=[Name(id=''question_id'',
    ctx=Store())], value=Subscript(value=Name(id=''question'', ctx=Load()), slice=Constant(value=''id''),
    ctx=Load())), Assign(targets=[Name(id=''question_text'', ctx=Store())], value=Subscript(value=Name(id=''question'',
    ctx=Load()), slice=Constant(value=''text''), ctx=Load())), Assign(targets=[Name(id=''question_type'',
    ctx=Store())], value=Subscript(value=Name(id=''question'', ctx=Load()), slice=Constant(value=''type''),
    ctx=Load())), If(test=Compare(left=Name(id=''question_type'', ctx=Load()), ops=[Eq()],
    comparators=[Constant(value=''file'')]), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''process_file_question'', ctx=Load()), args=[Name(id=''question_type'',
    ctx=Load()), Name(id=''question_id'', ctx=Load()), Name(id=''question_text'',
    ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id=''question_type'',
    ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=''function''),
    Constant(value=''class''), Constant(value=''method'')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''process_func_class_question'', ctx=Load()), args=[Name(id=''question_type'',
    ctx=Load()), Name(id=''question_id'', ctx=Load()), Name(id=''question_text'',
    ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Return(value=Tuple(elts=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''qa_list'', ctx=Load()), Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''instruct_list'', ctx=Load())], ctx=Load()))], decorator_list=[],
    returns=Subscript(value=Name(id=''tuple'', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))],
    decorator_list=[]), FunctionDef(name=''get_python_datasets'', args=arguments(posonlyargs=[],
    args=[arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''file_details'',
    annotation=Name(id=''Dict'', ctx=Load())), arg(arg=''base_name'', annotation=Name(id=''str'',
    ctx=Load())), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())), arg(arg=''use_llm'',
    annotation=Name(id=''bool'', ctx=Load())), arg(arg=''use_summary'', annotation=Name(id=''bool'',
    ctx=Load())), arg(arg=''model_config_path'', annotation=Name(id=''str'', ctx=Load()))],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Extract
    information from a Python file and return it in JSON format.\n    Args:\n        file_path
    (str): The path to the Python file.\n        file_details (Dict): The details
    of the file.\n        base_name (str): The base name.\n        questions (List[Dict]):
    The list of questions.\n        use_llm (bool): Whether to use the language model.\n        user_config
    (dict): User-provided model configurations.\n    Returns:\n        Tuple[List[Dict],
    List[Dict]]: Extracted information in JSON format.\n    '')), Assign(targets=[Name(id=''config'',
    ctx=Store())], value=Constant(value=None)), With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Name(id=''model_config_path'', ctx=Load()), Constant(value=''r'')],
    keywords=[]), optional_vars=Name(id=''config_file'', ctx=Store()))], body=[Assign(targets=[Name(id=''config'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''yaml'', ctx=Load()),
    attr=''safe_load'', ctx=Load()), args=[Name(id=''config_file'', ctx=Load())],
    keywords=[]))]), Assign(targets=[Name(id=''generator'', ctx=Store())], value=Call(func=Name(id=''PythonJsonGenerator'',
    ctx=Load()), args=[Name(id=''file_path'', ctx=Load()), Name(id=''file_details'',
    ctx=Load()), Name(id=''base_name'', ctx=Load()), Name(id=''questions'', ctx=Load()),
    Name(id=''use_llm'', ctx=Load()), Name(id=''use_summary'', ctx=Load()), Name(id=''config'',
    ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id=''generator'',
    ctx=Load()), attr=''generate'', ctx=Load()), args=[], keywords=[]))], decorator_list=[],
    returns=Subscript(value=Name(id=''tuple'', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'',
    ctx=Load()), slice=Name(id=''Dict'', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))],
    type_ignores=[])'
  file_dependencies:
  - logging
  - json
  - re
  - yaml
  - typing
  - importlib
  - os
  file_functions:
  - get_model
  - get_python_datasets
  file_classes:
  - PythonJsonGenerator
  file_control_flow: module -> def get_model -> if -> try -> except -> try -> except
    -> try -> except -> class -> def __init__ -> if -> try -> except -> def clean_and_get_unique_elements
    -> def add_to_list -> if -> def get_response_from_llm -> if -> def process_items
    -> if -> for -> def process_question -> if -> if -> if -> if -> def process_file_question
    -> def process_func_class_question -> if -> for -> for -> if -> for -> if -> if
    -> def generate -> for -> if -> if -> def get_python_datasets -> with
  file_summary: '{dependencies: [logging, json, re, yaml, typing, importlib, os],
    function_defs: [{get_model: {inputs: [model_config, user_config], calls: [print,
    model_params.pop, model_config[''model_import_path''].rsplit, importlib.import_module,
    getattr, model_config.update, ModelClass.from_pretrained], returns: [model, model,
    model, model]}}, {get_python_datasets: {inputs: [file_path, file_details, base_name,
    questions, use_llm, use_summary, model_config_path], calls: [open, generator.generate,
    PythonJsonGenerator, yaml.safe_load], returns: [generator.generate()]}}], class_defs:
    [{PythonJsonGenerator: {method_defs: {__init__: {inputs: [self, file_path, file_details,
    base_name, questions, use_llm, use_summary, config], calls: [get_model, logger.error],
    returns: []}, clean_and_get_unique_elements: {inputs: [input_str], calls: [re.sub(''\\\\s+'',
    '' '', input_str).split, element.strip, re.sub, '', ''.join, set], returns: ['',
    ''.join(cleaned_elements)]}, add_to_list: {inputs: [list_to_update, query, response,
    additional_field], calls: [response.strip, list_to_update.append], returns: [list_to_update]},
    get_response_from_llm: {inputs: [self, query, context], calls: [logger.error,
    self.llm, logging.info, self.config[''prompt_template''].format], returns: [response,
    '''']}, process_items: {inputs: [self, question_type, question_id, question_text,
    base_name, name, info, context, item_type], calls: [item_type.split, self.clean_and_get_unique_elements(str(info[item_type])).split,
    str, question_text.format, item.strip, self.process_question, self.clean_and_get_unique_elements],
    returns: []}, process_question: {inputs: [self, question_type, question_id, query,
    context, info], calls: [question_id.endswith, info.get, str, self.instruct_list.append,
    self.qa_list.append, self.get_response_from_llm, response_str.strip, self.clean_and_get_unique_elements],
    returns: []}, process_file_question: {inputs: [self, question_type, question_id,
    question_text], calls: [question_text.format, self.process_question], returns:
    []}, process_func_class_question: {inputs: [self, question_type, question_id,
    question_text], calls: [self.file_details[''classes''].items, class_info.items,
    key.startswith, question_text.format, len, self.file_details[self.question_mapping[question_type]].items,
    self.process_items, self.process_question], returns: []}, generate: {inputs: [self],
    calls: [self.process_file_question, self.process_func_class_question], returns:
    [(self.qa_list, self.instruct_list)]}}}}]}'
  internal_code_graph:
    nodes:
    - get_model
    - get_python_datasets
    - PythonJsonGenerator
    - PythonJsonGenerator.__init__
    - PythonJsonGenerator.clean_and_get_unique_elements
    - PythonJsonGenerator.add_to_list
    - PythonJsonGenerator.get_response_from_llm
    - PythonJsonGenerator.process_items
    - PythonJsonGenerator.process_question
    - PythonJsonGenerator.process_file_question
    - PythonJsonGenerator.process_func_class_question
    - PythonJsonGenerator.generate
    - logger.error
    - re.sub('\\s+', ' ', input_str).split
    - element.strip
    - re.sub
    - ''', ''.join'
    - set
    - response.strip
    - list_to_update.append
    - self.llm
    - logging.info
    - self.config['prompt_template'].format
    - item_type.split
    - self.clean_and_get_unique_elements(str(info[item_type])).split
    - str
    - question_text.format
    - item.strip
    - self.process_question
    - self.clean_and_get_unique_elements
    - question_id.endswith
    - info.get
    - self.instruct_list.append
    - self.qa_list.append
    - self.get_response_from_llm
    - response_str.strip
    - self.file_details['classes'].items
    - class_info.items
    - key.startswith
    - len
    - self.file_details[self.question_mapping[question_type]].items
    - self.process_items
    - self.process_file_question
    - self.process_func_class_question
    edges:
    - source: get_python_datasets
      target: PythonJsonGenerator
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.__init__
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.clean_and_get_unique_elements
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.add_to_list
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.get_response_from_llm
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_items
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_question
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_file_question
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_func_class_question
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.generate
    - source: PythonJsonGenerator.__init__
      target: get_model
      target_inputs:
      - model_config
      - user_config
      target_returns:
      - model
      - model
      - model
      - model
    - source: PythonJsonGenerator.__init__
      target: logger.error
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: re.sub('\\s+', ' ', input_str).split
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: element.strip
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: re.sub
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: ''', ''.join'
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: set
    - source: PythonJsonGenerator.add_to_list
      target: response.strip
    - source: PythonJsonGenerator.add_to_list
      target: list_to_update.append
    - source: PythonJsonGenerator.get_response_from_llm
      target: logger.error
    - source: PythonJsonGenerator.get_response_from_llm
      target: self.llm
    - source: PythonJsonGenerator.get_response_from_llm
      target: logging.info
    - source: PythonJsonGenerator.get_response_from_llm
      target: self.config['prompt_template'].format
    - source: PythonJsonGenerator.process_items
      target: item_type.split
    - source: PythonJsonGenerator.process_items
      target: self.clean_and_get_unique_elements(str(info[item_type])).split
    - source: PythonJsonGenerator.process_items
      target: str
    - source: PythonJsonGenerator.process_items
      target: question_text.format
    - source: PythonJsonGenerator.process_items
      target: item.strip
    - source: PythonJsonGenerator.process_items
      target: self.process_question
    - source: PythonJsonGenerator.process_items
      target: self.clean_and_get_unique_elements
    - source: PythonJsonGenerator.process_question
      target: question_id.endswith
    - source: PythonJsonGenerator.process_question
      target: info.get
    - source: PythonJsonGenerator.process_question
      target: str
    - source: PythonJsonGenerator.process_question
      target: self.instruct_list.append
    - source: PythonJsonGenerator.process_question
      target: self.qa_list.append
    - source: PythonJsonGenerator.process_question
      target: self.get_response_from_llm
    - source: PythonJsonGenerator.process_question
      target: response_str.strip
    - source: PythonJsonGenerator.process_question
      target: self.clean_and_get_unique_elements
    - source: PythonJsonGenerator.process_file_question
      target: question_text.format
    - source: PythonJsonGenerator.process_file_question
      target: self.process_question
    - source: PythonJsonGenerator.process_func_class_question
      target: self.file_details['classes'].items
    - source: PythonJsonGenerator.process_func_class_question
      target: class_info.items
    - source: PythonJsonGenerator.process_func_class_question
      target: key.startswith
    - source: PythonJsonGenerator.process_func_class_question
      target: question_text.format
    - source: PythonJsonGenerator.process_func_class_question
      target: len
    - source: PythonJsonGenerator.process_func_class_question
      target: self.file_details[self.question_mapping[question_type]].items
    - source: PythonJsonGenerator.process_func_class_question
      target: self.process_items
    - source: PythonJsonGenerator.process_func_class_question
      target: self.process_question
    - source: PythonJsonGenerator.generate
      target: self.process_file_question
    - source: PythonJsonGenerator.generate
      target: self.process_func_class_question
  entire_code_graph:
    nodes:
    - get_model
    - get_python_datasets
    - PythonJsonGenerator
    - PythonJsonGenerator.__init__
    - PythonJsonGenerator.clean_and_get_unique_elements
    - PythonJsonGenerator.add_to_list
    - PythonJsonGenerator.get_response_from_llm
    - PythonJsonGenerator.process_items
    - PythonJsonGenerator.process_question
    - PythonJsonGenerator.process_file_question
    - PythonJsonGenerator.process_func_class_question
    - PythonJsonGenerator.generate
    - print
    - model_params.pop
    - model_config['model_import_path'].rsplit
    - importlib.import_module
    - getattr
    - model_config.update
    - ModelClass.from_pretrained
    - open
    - generator.generate
    - yaml.safe_load
    - logger.error
    - re.sub('\\s+', ' ', input_str).split
    - element.strip
    - re.sub
    - ''', ''.join'
    - set
    - response.strip
    - list_to_update.append
    - self.llm
    - logging.info
    - self.config['prompt_template'].format
    - item_type.split
    - self.clean_and_get_unique_elements(str(info[item_type])).split
    - str
    - question_text.format
    - item.strip
    - self.process_question
    - self.clean_and_get_unique_elements
    - question_id.endswith
    - info.get
    - self.instruct_list.append
    - self.qa_list.append
    - self.get_response_from_llm
    - response_str.strip
    - self.file_details['classes'].items
    - class_info.items
    - key.startswith
    - len
    - self.file_details[self.question_mapping[question_type]].items
    - self.process_items
    - self.process_file_question
    - self.process_func_class_question
    edges:
    - source: get_model
      target: print
    - source: get_model
      target: model_params.pop
    - source: get_model
      target: model_config['model_import_path'].rsplit
    - source: get_model
      target: importlib.import_module
    - source: get_model
      target: getattr
    - source: get_model
      target: model_config.update
    - source: get_model
      target: ModelClass.from_pretrained
    - source: get_python_datasets
      target: open
    - source: get_python_datasets
      target: generator.generate
    - source: get_python_datasets
      target: PythonJsonGenerator
    - source: get_python_datasets
      target: yaml.safe_load
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.__init__
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.clean_and_get_unique_elements
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.add_to_list
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.get_response_from_llm
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_items
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_question
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_file_question
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.process_func_class_question
    - source: PythonJsonGenerator
      target: PythonJsonGenerator.generate
    - source: PythonJsonGenerator.__init__
      target: get_model
      target_inputs:
      - model_config
      - user_config
      target_returns:
      - model
      - model
      - model
      - model
    - source: PythonJsonGenerator.__init__
      target: logger.error
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: re.sub('\\s+', ' ', input_str).split
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: element.strip
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: re.sub
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: ''', ''.join'
    - source: PythonJsonGenerator.clean_and_get_unique_elements
      target: set
    - source: PythonJsonGenerator.add_to_list
      target: response.strip
    - source: PythonJsonGenerator.add_to_list
      target: list_to_update.append
    - source: PythonJsonGenerator.get_response_from_llm
      target: logger.error
    - source: PythonJsonGenerator.get_response_from_llm
      target: self.llm
    - source: PythonJsonGenerator.get_response_from_llm
      target: logging.info
    - source: PythonJsonGenerator.get_response_from_llm
      target: self.config['prompt_template'].format
    - source: PythonJsonGenerator.process_items
      target: item_type.split
    - source: PythonJsonGenerator.process_items
      target: self.clean_and_get_unique_elements(str(info[item_type])).split
    - source: PythonJsonGenerator.process_items
      target: str
    - source: PythonJsonGenerator.process_items
      target: question_text.format
    - source: PythonJsonGenerator.process_items
      target: item.strip
    - source: PythonJsonGenerator.process_items
      target: self.process_question
    - source: PythonJsonGenerator.process_items
      target: self.clean_and_get_unique_elements
    - source: PythonJsonGenerator.process_question
      target: question_id.endswith
    - source: PythonJsonGenerator.process_question
      target: info.get
    - source: PythonJsonGenerator.process_question
      target: str
    - source: PythonJsonGenerator.process_question
      target: self.instruct_list.append
    - source: PythonJsonGenerator.process_question
      target: self.qa_list.append
    - source: PythonJsonGenerator.process_question
      target: self.get_response_from_llm
    - source: PythonJsonGenerator.process_question
      target: response_str.strip
    - source: PythonJsonGenerator.process_question
      target: self.clean_and_get_unique_elements
    - source: PythonJsonGenerator.process_file_question
      target: question_text.format
    - source: PythonJsonGenerator.process_file_question
      target: self.process_question
    - source: PythonJsonGenerator.process_func_class_question
      target: self.file_details['classes'].items
    - source: PythonJsonGenerator.process_func_class_question
      target: class_info.items
    - source: PythonJsonGenerator.process_func_class_question
      target: key.startswith
    - source: PythonJsonGenerator.process_func_class_question
      target: question_text.format
    - source: PythonJsonGenerator.process_func_class_question
      target: len
    - source: PythonJsonGenerator.process_func_class_question
      target: self.file_details[self.question_mapping[question_type]].items
    - source: PythonJsonGenerator.process_func_class_question
      target: self.process_items
    - source: PythonJsonGenerator.process_func_class_question
      target: self.process_question
    - source: PythonJsonGenerator.generate
      target: self.process_file_question
    - source: PythonJsonGenerator.generate
      target: self.process_func_class_question
functions:
  get_model:
    function_name: get_model
    function_code: "def get_model(model_config: dict, user_config: dict=None) -> object:\n\
      \    \"\"\"\n    Imports and instantiates a model based on the provided configuration.\n\
      \    Args:\n        model_config (dict): A dictionary containing the configuration\
      \ for the\n            model. It should include the import path for the model\
      \ class and\n            parameters for instantiation.\n        user_config\
      \ (dict): A dictionary containing user-provided configurations.\n          \
      \  If provided, these configurations will override the defaults.\n    Returns:\n\
      \        object: An instance of the specified model class, or None if there\
      \ was\n            an error.\n    \"\"\"\n    if user_config is not None:\n\
      \        model_config.update(user_config)\n    model = None\n    try:\n    \
      \    module_name, class_name = model_config['model_import_path'].rsplit('.',\
      \ 1)\n        module = importlib.import_module(module_name)\n    except ImportError\
      \ as e:\n        print(f'Failed to import module {module_name}. Error: {e}')\n\
      \        return model\n    try:\n        ModelClass = getattr(module, class_name)\n\
      \    except AttributeError as e:\n        print(f'Module {module_name} does\
      \ not have a class named {class_name}. Error: {e}')\n        return model\n\
      \    model_params = model_config['model_params']\n    try:\n        model =\
      \ ModelClass.from_pretrained(model_params.pop('model_path'), **model_params)\n\
      \    except Exception as e:\n        print(f'Failed to instantiate the model\
      \ with the provided parameters. Error: {e}')\n        return model\n    return\
      \ model"
    function_ast: 'FunctionDef(name=''get_model'', args=arguments(posonlyargs=[],
      args=[arg(arg=''model_config'', annotation=Name(id=''dict'', ctx=Load(), lineno=70,
      col_offset=28, end_lineno=70, end_col_offset=32), lineno=70, col_offset=14,
      end_lineno=70, end_col_offset=32), arg(arg=''user_config'', annotation=Name(id=''dict'',
      ctx=Load(), lineno=70, col_offset=47, end_lineno=70, end_col_offset=51), lineno=70,
      col_offset=34, end_lineno=70, end_col_offset=51)], kwonlyargs=[], kw_defaults=[],
      defaults=[Constant(value=None, lineno=70, col_offset=54, end_lineno=70, end_col_offset=58)]),
      body=[Expr(value=Constant(value=''\n    Imports and instantiates a model based
      on the provided configuration.\n    Args:\n        model_config (dict): A dictionary
      containing the configuration for the\n            model. It should include the
      import path for the model class and\n            parameters for instantiation.\n        user_config
      (dict): A dictionary containing user-provided configurations.\n            If
      provided, these configurations will override the defaults.\n    Returns:\n        object:
      An instance of the specified model class, or None if there was\n            an
      error.\n    '', lineno=71, col_offset=4, end_lineno=82, end_col_offset=7), lineno=71,
      col_offset=4, end_lineno=82, end_col_offset=7), If(test=Compare(left=Name(id=''user_config'',
      ctx=Load(), lineno=84, col_offset=7, end_lineno=84, end_col_offset=18), ops=[IsNot()],
      comparators=[Constant(value=None, lineno=84, col_offset=26, end_lineno=84, end_col_offset=30)],
      lineno=84, col_offset=7, end_lineno=84, end_col_offset=30), body=[Expr(value=Call(func=Attribute(value=Name(id=''model_config'',
      ctx=Load(), lineno=85, col_offset=8, end_lineno=85, end_col_offset=20), attr=''update'',
      ctx=Load(), lineno=85, col_offset=8, end_lineno=85, end_col_offset=27), args=[Name(id=''user_config'',
      ctx=Load(), lineno=85, col_offset=28, end_lineno=85, end_col_offset=39)], keywords=[],
      lineno=85, col_offset=8, end_lineno=85, end_col_offset=40), lineno=85, col_offset=8,
      end_lineno=85, end_col_offset=40)], orelse=[], lineno=84, col_offset=4, end_lineno=85,
      end_col_offset=40), Assign(targets=[Name(id=''model'', ctx=Store(), lineno=88,
      col_offset=4, end_lineno=88, end_col_offset=9)], value=Constant(value=None,
      lineno=88, col_offset=12, end_lineno=88, end_col_offset=16), lineno=88, col_offset=4,
      end_lineno=88, end_col_offset=16), Try(body=[Assign(targets=[Tuple(elts=[Name(id=''module_name'',
      ctx=Store(), lineno=90, col_offset=8, end_lineno=90, end_col_offset=19), Name(id=''class_name'',
      ctx=Store(), lineno=90, col_offset=21, end_lineno=90, end_col_offset=31)], ctx=Store(),
      lineno=90, col_offset=8, end_lineno=90, end_col_offset=31)], value=Call(func=Attribute(value=Subscript(value=Name(id=''model_config'',
      ctx=Load(), lineno=90, col_offset=34, end_lineno=90, end_col_offset=46), slice=Constant(value=''model_import_path'',
      lineno=90, col_offset=47, end_lineno=90, end_col_offset=66), ctx=Load(), lineno=90,
      col_offset=34, end_lineno=90, end_col_offset=67), attr=''rsplit'', ctx=Load(),
      lineno=90, col_offset=34, end_lineno=90, end_col_offset=74), args=[Constant(value=''.'',
      lineno=90, col_offset=75, end_lineno=90, end_col_offset=78), Constant(value=1,
      lineno=90, col_offset=80, end_lineno=90, end_col_offset=81)], keywords=[], lineno=90,
      col_offset=34, end_lineno=90, end_col_offset=82), lineno=90, col_offset=8, end_lineno=90,
      end_col_offset=82), Assign(targets=[Name(id=''module'', ctx=Store(), lineno=91,
      col_offset=8, end_lineno=91, end_col_offset=14)], value=Call(func=Attribute(value=Name(id=''importlib'',
      ctx=Load(), lineno=91, col_offset=17, end_lineno=91, end_col_offset=26), attr=''import_module'',
      ctx=Load(), lineno=91, col_offset=17, end_lineno=91, end_col_offset=40), args=[Name(id=''module_name'',
      ctx=Load(), lineno=91, col_offset=41, end_lineno=91, end_col_offset=52)], keywords=[],
      lineno=91, col_offset=17, end_lineno=91, end_col_offset=53), lineno=91, col_offset=8,
      end_lineno=91, end_col_offset=53)], handlers=[ExceptHandler(type=Name(id=''ImportError'',
      ctx=Load(), lineno=92, col_offset=11, end_lineno=92, end_col_offset=22), name=''e'',
      body=[Expr(value=Call(func=Name(id=''print'', ctx=Load(), lineno=93, col_offset=8,
      end_lineno=93, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Failed
      to import module '', lineno=93, col_offset=14, end_lineno=93, end_col_offset=66),
      FormattedValue(value=Name(id=''module_name'', ctx=Load(), lineno=93, col_offset=41,
      end_lineno=93, end_col_offset=52), conversion=-1, lineno=93, col_offset=14,
      end_lineno=93, end_col_offset=66), Constant(value=''. Error: '', lineno=93,
      col_offset=14, end_lineno=93, end_col_offset=66), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=93, col_offset=63, end_lineno=93, end_col_offset=64), conversion=-1,
      lineno=93, col_offset=14, end_lineno=93, end_col_offset=66)], lineno=93, col_offset=14,
      end_lineno=93, end_col_offset=66)], keywords=[], lineno=93, col_offset=8, end_lineno=93,
      end_col_offset=67), lineno=93, col_offset=8, end_lineno=93, end_col_offset=67),
      Return(value=Name(id=''model'', ctx=Load(), lineno=94, col_offset=15, end_lineno=94,
      end_col_offset=20), lineno=94, col_offset=8, end_lineno=94, end_col_offset=20)],
      lineno=92, col_offset=4, end_lineno=94, end_col_offset=20)], orelse=[], finalbody=[],
      lineno=89, col_offset=4, end_lineno=94, end_col_offset=20), Try(body=[Assign(targets=[Name(id=''ModelClass'',
      ctx=Store(), lineno=96, col_offset=8, end_lineno=96, end_col_offset=18)], value=Call(func=Name(id=''getattr'',
      ctx=Load(), lineno=96, col_offset=21, end_lineno=96, end_col_offset=28), args=[Name(id=''module'',
      ctx=Load(), lineno=96, col_offset=29, end_lineno=96, end_col_offset=35), Name(id=''class_name'',
      ctx=Load(), lineno=96, col_offset=37, end_lineno=96, end_col_offset=47)], keywords=[],
      lineno=96, col_offset=21, end_lineno=96, end_col_offset=48), lineno=96, col_offset=8,
      end_lineno=96, end_col_offset=48)], handlers=[ExceptHandler(type=Name(id=''AttributeError'',
      ctx=Load(), lineno=97, col_offset=11, end_lineno=97, end_col_offset=25), name=''e'',
      body=[Expr(value=Call(func=Name(id=''print'', ctx=Load(), lineno=98, col_offset=8,
      end_lineno=98, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Module
      '', lineno=98, col_offset=14, end_lineno=98, end_col_offset=90), FormattedValue(value=Name(id=''module_name'',
      ctx=Load(), lineno=98, col_offset=24, end_lineno=98, end_col_offset=35), conversion=-1,
      lineno=98, col_offset=14, end_lineno=98, end_col_offset=90), Constant(value=''
      does not have a class named '', lineno=98, col_offset=14, end_lineno=98, end_col_offset=90),
      FormattedValue(value=Name(id=''class_name'', ctx=Load(), lineno=98, col_offset=66,
      end_lineno=98, end_col_offset=76), conversion=-1, lineno=98, col_offset=14,
      end_lineno=98, end_col_offset=90), Constant(value=''. Error: '', lineno=98,
      col_offset=14, end_lineno=98, end_col_offset=90), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=98, col_offset=87, end_lineno=98, end_col_offset=88), conversion=-1,
      lineno=98, col_offset=14, end_lineno=98, end_col_offset=90)], lineno=98, col_offset=14,
      end_lineno=98, end_col_offset=90)], keywords=[], lineno=98, col_offset=8, end_lineno=98,
      end_col_offset=91), lineno=98, col_offset=8, end_lineno=98, end_col_offset=91),
      Return(value=Name(id=''model'', ctx=Load(), lineno=99, col_offset=15, end_lineno=99,
      end_col_offset=20), lineno=99, col_offset=8, end_lineno=99, end_col_offset=20)],
      lineno=97, col_offset=4, end_lineno=99, end_col_offset=20)], orelse=[], finalbody=[],
      lineno=95, col_offset=4, end_lineno=99, end_col_offset=20), Assign(targets=[Name(id=''model_params'',
      ctx=Store(), lineno=100, col_offset=4, end_lineno=100, end_col_offset=16)],
      value=Subscript(value=Name(id=''model_config'', ctx=Load(), lineno=100, col_offset=19,
      end_lineno=100, end_col_offset=31), slice=Constant(value=''model_params'', lineno=100,
      col_offset=32, end_lineno=100, end_col_offset=46), ctx=Load(), lineno=100, col_offset=19,
      end_lineno=100, end_col_offset=47), lineno=100, col_offset=4, end_lineno=100,
      end_col_offset=47), Try(body=[Assign(targets=[Name(id=''model'', ctx=Store(),
      lineno=102, col_offset=8, end_lineno=102, end_col_offset=13)], value=Call(func=Attribute(value=Name(id=''ModelClass'',
      ctx=Load(), lineno=102, col_offset=16, end_lineno=102, end_col_offset=26), attr=''from_pretrained'',
      ctx=Load(), lineno=102, col_offset=16, end_lineno=102, end_col_offset=42), args=[Call(func=Attribute(value=Name(id=''model_params'',
      ctx=Load(), lineno=102, col_offset=43, end_lineno=102, end_col_offset=55), attr=''pop'',
      ctx=Load(), lineno=102, col_offset=43, end_lineno=102, end_col_offset=59), args=[Constant(value=''model_path'',
      lineno=102, col_offset=60, end_lineno=102, end_col_offset=72)], keywords=[],
      lineno=102, col_offset=43, end_lineno=102, end_col_offset=73)], keywords=[keyword(value=Name(id=''model_params'',
      ctx=Load(), lineno=102, col_offset=77, end_lineno=102, end_col_offset=89), lineno=102,
      col_offset=75, end_lineno=102, end_col_offset=89)], lineno=102, col_offset=16,
      end_lineno=102, end_col_offset=90), lineno=102, col_offset=8, end_lineno=102,
      end_col_offset=90)], handlers=[ExceptHandler(type=Name(id=''Exception'', ctx=Load(),
      lineno=103, col_offset=11, end_lineno=103, end_col_offset=20), name=''e'', body=[Expr(value=Call(func=Name(id=''print'',
      ctx=Load(), lineno=104, col_offset=8, end_lineno=104, end_col_offset=13), args=[JoinedStr(values=[Constant(value=''Failed
      to instantiate the model with the provided parameters. Error: '', lineno=104,
      col_offset=14, end_lineno=104, end_col_offset=89), FormattedValue(value=Name(id=''e'',
      ctx=Load(), lineno=104, col_offset=86, end_lineno=104, end_col_offset=87), conversion=-1,
      lineno=104, col_offset=14, end_lineno=104, end_col_offset=89)], lineno=104,
      col_offset=14, end_lineno=104, end_col_offset=89)], keywords=[], lineno=104,
      col_offset=8, end_lineno=104, end_col_offset=90), lineno=104, col_offset=8,
      end_lineno=104, end_col_offset=90), Return(value=Name(id=''model'', ctx=Load(),
      lineno=105, col_offset=15, end_lineno=105, end_col_offset=20), lineno=105, col_offset=8,
      end_lineno=105, end_col_offset=20)], lineno=103, col_offset=4, end_lineno=105,
      end_col_offset=20)], orelse=[], finalbody=[], lineno=101, col_offset=4, end_lineno=105,
      end_col_offset=20), Return(value=Name(id=''model'', ctx=Load(), lineno=106,
      col_offset=11, end_lineno=106, end_col_offset=16), lineno=106, col_offset=4,
      end_lineno=106, end_col_offset=16)], decorator_list=[], returns=Name(id=''object'',
      ctx=Load(), lineno=70, col_offset=63, end_lineno=70, end_col_offset=69), lineno=70,
      col_offset=0, end_lineno=106, end_col_offset=16)'
    function_docstring: "Imports and instantiates a model based on the provided configuration.\n\
      Args:\n    model_config (dict): A dictionary containing the configuration for\
      \ the\n        model. It should include the import path for the model class\
      \ and\n        parameters for instantiation.\n    user_config (dict): A dictionary\
      \ containing user-provided configurations.\n        If provided, these configurations\
      \ will override the defaults.\nReturns:\n    object: An instance of the specified\
      \ model class, or None if there was\n        an error."
    function_inputs:
    - model_config
    - user_config
    function_defaults:
    - None
    function_returns:
    - model
    - model
    - model
    - model
    function_calls:
    - print
    - model_params.pop
    - model_config['model_import_path'].rsplit
    - importlib.import_module
    - getattr
    - model_config.update
    - ModelClass.from_pretrained
    function_variables:
    - model_params
    - model
    - ModelClass
    - module
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_python_datasets:
    function_name: get_python_datasets
    function_code: "def get_python_datasets(file_path: str, file_details: Dict, base_name:\
      \ str, questions: List[Dict], use_llm: bool, use_summary: bool, model_config_path:\
      \ str) -> tuple[List[Dict], List[Dict]]:\n    \"\"\"\n    Extract information\
      \ from a Python file and return it in JSON format.\n    Args:\n        file_path\
      \ (str): The path to the Python file.\n        file_details (Dict): The details\
      \ of the file.\n        base_name (str): The base name.\n        questions (List[Dict]):\
      \ The list of questions.\n        use_llm (bool): Whether to use the language\
      \ model.\n        user_config (dict): User-provided model configurations.\n\
      \    Returns:\n        Tuple[List[Dict], List[Dict]]: Extracted information\
      \ in JSON format.\n    \"\"\"\n    config = None\n    with open(model_config_path,\
      \ 'r') as config_file:\n        config = yaml.safe_load(config_file)\n    generator\
      \ = PythonJsonGenerator(file_path, file_details, base_name, questions, use_llm,\
      \ use_summary, config)\n    return generator.generate()"
    function_ast: 'FunctionDef(name=''get_python_datasets'', args=arguments(posonlyargs=[],
      args=[arg(arg=''file_path'', annotation=Name(id=''str'', ctx=Load(), lineno=262,
      col_offset=35, end_lineno=262, end_col_offset=38), lineno=262, col_offset=24,
      end_lineno=262, end_col_offset=38), arg(arg=''file_details'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=262, col_offset=54, end_lineno=262, end_col_offset=58), lineno=262,
      col_offset=40, end_lineno=262, end_col_offset=58), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=262, col_offset=71, end_lineno=262, end_col_offset=74), lineno=262,
      col_offset=60, end_lineno=262, end_col_offset=74), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=262, col_offset=87, end_lineno=262, end_col_offset=91), slice=Name(id=''Dict'',
      ctx=Load(), lineno=262, col_offset=92, end_lineno=262, end_col_offset=96), ctx=Load(),
      lineno=262, col_offset=87, end_lineno=262, end_col_offset=97), lineno=262, col_offset=76,
      end_lineno=262, end_col_offset=97), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=262, col_offset=108, end_lineno=262, end_col_offset=112),
      lineno=262, col_offset=99, end_lineno=262, end_col_offset=112), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=262, col_offset=127, end_lineno=262,
      end_col_offset=131), lineno=262, col_offset=114, end_lineno=262, end_col_offset=131),
      arg(arg=''model_config_path'', annotation=Name(id=''str'', ctx=Load(), lineno=262,
      col_offset=152, end_lineno=262, end_col_offset=155), lineno=262, col_offset=133,
      end_lineno=262, end_col_offset=155)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Expr(value=Constant(value=''\n    Extract information from a Python file
      and return it in JSON format.\n    Args:\n        file_path (str): The path
      to the Python file.\n        file_details (Dict): The details of the file.\n        base_name
      (str): The base name.\n        questions (List[Dict]): The list of questions.\n        use_llm
      (bool): Whether to use the language model.\n        user_config (dict): User-provided
      model configurations.\n    Returns:\n        Tuple[List[Dict], List[Dict]]:
      Extracted information in JSON format.\n    '', lineno=263, col_offset=4, end_lineno=274,
      end_col_offset=7), lineno=263, col_offset=4, end_lineno=274, end_col_offset=7),
      Assign(targets=[Name(id=''config'', ctx=Store(), lineno=276, col_offset=4, end_lineno=276,
      end_col_offset=10)], value=Constant(value=None, lineno=276, col_offset=13, end_lineno=276,
      end_col_offset=17), lineno=276, col_offset=4, end_lineno=276, end_col_offset=17),
      With(items=[withitem(context_expr=Call(func=Name(id=''open'', ctx=Load(), lineno=277,
      col_offset=9, end_lineno=277, end_col_offset=13), args=[Name(id=''model_config_path'',
      ctx=Load(), lineno=277, col_offset=14, end_lineno=277, end_col_offset=31), Constant(value=''r'',
      lineno=277, col_offset=33, end_lineno=277, end_col_offset=36)], keywords=[],
      lineno=277, col_offset=9, end_lineno=277, end_col_offset=37), optional_vars=Name(id=''config_file'',
      ctx=Store(), lineno=277, col_offset=41, end_lineno=277, end_col_offset=52))],
      body=[Assign(targets=[Name(id=''config'', ctx=Store(), lineno=278, col_offset=8,
      end_lineno=278, end_col_offset=14)], value=Call(func=Attribute(value=Name(id=''yaml'',
      ctx=Load(), lineno=278, col_offset=17, end_lineno=278, end_col_offset=21), attr=''safe_load'',
      ctx=Load(), lineno=278, col_offset=17, end_lineno=278, end_col_offset=31), args=[Name(id=''config_file'',
      ctx=Load(), lineno=278, col_offset=32, end_lineno=278, end_col_offset=43)],
      keywords=[], lineno=278, col_offset=17, end_lineno=278, end_col_offset=44),
      lineno=278, col_offset=8, end_lineno=278, end_col_offset=44)], lineno=277, col_offset=4,
      end_lineno=278, end_col_offset=44), Assign(targets=[Name(id=''generator'', ctx=Store(),
      lineno=280, col_offset=4, end_lineno=280, end_col_offset=13)], value=Call(func=Name(id=''PythonJsonGenerator'',
      ctx=Load(), lineno=280, col_offset=16, end_lineno=280, end_col_offset=35), args=[Name(id=''file_path'',
      ctx=Load(), lineno=280, col_offset=36, end_lineno=280, end_col_offset=45), Name(id=''file_details'',
      ctx=Load(), lineno=280, col_offset=47, end_lineno=280, end_col_offset=59), Name(id=''base_name'',
      ctx=Load(), lineno=280, col_offset=61, end_lineno=280, end_col_offset=70), Name(id=''questions'',
      ctx=Load(), lineno=280, col_offset=72, end_lineno=280, end_col_offset=81), Name(id=''use_llm'',
      ctx=Load(), lineno=280, col_offset=83, end_lineno=280, end_col_offset=90), Name(id=''use_summary'',
      ctx=Load(), lineno=280, col_offset=92, end_lineno=280, end_col_offset=103),
      Name(id=''config'', ctx=Load(), lineno=280, col_offset=105, end_lineno=280,
      end_col_offset=111)], keywords=[], lineno=280, col_offset=16, end_lineno=280,
      end_col_offset=112), lineno=280, col_offset=4, end_lineno=280, end_col_offset=112),
      Return(value=Call(func=Attribute(value=Name(id=''generator'', ctx=Load(), lineno=281,
      col_offset=11, end_lineno=281, end_col_offset=20), attr=''generate'', ctx=Load(),
      lineno=281, col_offset=11, end_lineno=281, end_col_offset=29), args=[], keywords=[],
      lineno=281, col_offset=11, end_lineno=281, end_col_offset=31), lineno=281, col_offset=4,
      end_lineno=281, end_col_offset=31)], decorator_list=[], returns=Subscript(value=Name(id=''tuple'',
      ctx=Load(), lineno=262, col_offset=160, end_lineno=262, end_col_offset=165),
      slice=Tuple(elts=[Subscript(value=Name(id=''List'', ctx=Load(), lineno=262,
      col_offset=166, end_lineno=262, end_col_offset=170), slice=Name(id=''Dict'',
      ctx=Load(), lineno=262, col_offset=171, end_lineno=262, end_col_offset=175),
      ctx=Load(), lineno=262, col_offset=166, end_lineno=262, end_col_offset=176),
      Subscript(value=Name(id=''List'', ctx=Load(), lineno=262, col_offset=178, end_lineno=262,
      end_col_offset=182), slice=Name(id=''Dict'', ctx=Load(), lineno=262, col_offset=183,
      end_lineno=262, end_col_offset=187), ctx=Load(), lineno=262, col_offset=178,
      end_lineno=262, end_col_offset=188)], ctx=Load(), lineno=262, col_offset=166,
      end_lineno=262, end_col_offset=188), ctx=Load(), lineno=262, col_offset=160,
      end_lineno=262, end_col_offset=189), lineno=262, col_offset=0, end_lineno=281,
      end_col_offset=31)'
    function_docstring: "Extract information from a Python file and return it in JSON\
      \ format.\nArgs:\n    file_path (str): The path to the Python file.\n    file_details\
      \ (Dict): The details of the file.\n    base_name (str): The base name.\n  \
      \  questions (List[Dict]): The list of questions.\n    use_llm (bool): Whether\
      \ to use the language model.\n    user_config (dict): User-provided model configurations.\n\
      Returns:\n    Tuple[List[Dict], List[Dict]]: Extracted information in JSON format."
    function_inputs:
    - file_path
    - file_details
    - base_name
    - questions
    - use_llm
    - use_summary
    - model_config_path
    function_defaults: []
    function_returns:
    - generator.generate()
    function_calls:
    - open
    - generator.generate
    - PythonJsonGenerator
    - yaml.safe_load
    function_variables:
    - config
    - generator
    function_decorators: []
    function_annotations: []
    function_properties: []
classes:
  PythonJsonGenerator:
    class_name: PythonJsonGenerator
    class_code: "class PythonJsonGenerator:\n    \"\"\"\n    A class used to generate\
      \ JSON formatted dictionary outputs for a Python \n    file.\n    Attributes:\n\
      \        file_path (str): The path to the Python file.\n        file_details\
      \ (Dict): A dictionary containing details of the Python\n            file.\n\
      \        base_name (str): The base name of the Python file.\n        questions\
      \ (List): A list of questions for which responses are to be\n            generated.\n\
      \        qa_list (List): A list to store the generated question-answer pairs.\n\
      \        instruct_list (List): A list to store the generated instructions.\n\
      \        question_mapping (Dict): A dictionary mapping question types to their\n\
      \            corresponding keys in the file details.\n        use_llm (bool):\
      \ A flag indicating whether to use a language model for\n            generating\
      \ responses.\n        llm (AutoModelForCausalLM): The language model to be used\
      \ for\n            generating responses.\n    Methods:\n        clean_and_get_unique_elements(input_str:\
      \ str) -> str: Cleans an input \n            string and returns a string of\
      \ unique elements.\n        add_to_list(list_to_update: List[Dict], query: str,\
      \ response: str,\n            additional_field=None) -> List[Dict]: Adds a response\
      \ to a list.\n        get_response_from_llm(query: str, context: str) -> str:\
      \ Gets a \n            response from the language model.\n        get_variable_purpose(question_id:\
      \ str, question_text: str, base_name:\n            str, name: str, info: Dict,\
      \ context: str, variable_type: str) -> \n                None: Processes questions\
      \ related to the purpose of a variable.\n        process_question(question_id:\
      \ str, query: str, context: str, info) -> \n            None: Processes a question\
      \ and adds the generated response to the\n            qa_list and instruct_list.\n\
      \        process_file_question(question_id: str, question_text: str) -> None:\n\
      \            Processes questions related to a file.\n        process_func_class_question(question_type:\
      \ str, question_id: str, \n            question_text: str) -> None: Processes\
      \ questions related to a \n            function or class.\n        generate()\
      \ -> Tuple[List[Dict], List[Dict]]: Generates responses for\n            all\
      \ the questions and returns the qa_list and instruct_list.\n    \"\"\"\n\n \
      \   def __init__(self, file_path: str, file_details: Dict, base_name: str, questions:\
      \ List[Dict], use_llm: bool, use_summary: bool, config: Dict):\n        self.file_path\
      \ = file_path\n        self.file_details = file_details\n        self.base_name\
      \ = base_name\n        self.questions = questions\n        self.qa_list = []\n\
      \        self.instruct_list = []\n        self.question_mapping = {'file': 'file',\
      \ 'function': 'functions', 'class': 'classes', 'method': 'classes'}\n      \
      \  self.use_llm = use_llm\n        self.config = config\n        if self.use_llm:\n\
      \            try:\n                self.llm_config = config['inference_model']\n\
      \                self.llm = get_model(self.llm_config)\n            except (FileNotFoundError,\
      \ yaml.YAMLError, ImportError, AttributeError) as e:\n                logger.error(f'Failed\
      \ to load configuration file: {e}')\n                self.use_llm = False\n\
      \                self.llm_config = None\n                self.llm = None\n \
      \       else:\n            self.llm = None\n        self.use_summary = use_summary\n\
      \n    @staticmethod\n    def clean_and_get_unique_elements(input_str: str) ->\
      \ str:\n        cleaned_elements = set((re.sub('[^\\\\w\\\\-_>\\\\s:/.]', '',\
      \ element.strip()) for element in re.sub('\\\\s+', ' ', input_str).split(',')))\n\
      \        return ', '.join(cleaned_elements)\n\n    @staticmethod\n    def add_to_list(list_to_update:\
      \ List[Dict], query: str, response: str, additional_field=None) -> List[Dict]:\n\
      \        if response and response.strip() and (response != 'None'):\n      \
      \      list_to_update.append({'instruction': query, 'input': additional_field,\
      \ 'output': response} if additional_field else {'question': query, 'answer':\
      \ response})\n        return list_to_update\n\n    def get_response_from_llm(self,\
      \ query: str, context: str) -> str:\n        if not self.llm:\n            logger.error('AI\
      \ model not available.')\n            return ''\n        prompt = self.config['prompt_template'].format(context=context,\
      \ query=query)\n        logging.info(f'Query: {query}')\n        response =\
      \ self.llm(prompt)\n        logging.info(f'Response: {response}')\n        return\
      \ response\n\n    def process_items(self, question_type: str, question_id: str,\
      \ question_text: str, base_name: str, name: str, info: Dict, context: str, item_type:\
      \ str) -> None:\n        if info[item_type]:\n            items = [item.strip()\
      \ for item in self.clean_and_get_unique_elements(str(info[item_type])).split(',')\
      \ if item]\n            for item in items:\n                query = question_text.format(filename=base_name,\
      \ **{f\"{item_type.split('_')[0]}_name\": name, f\"{item_type.split('_')[0]}_variable\"\
      : item})\n                self.process_question(question_type, question_id,\
      \ query, context, info)\n\n    def process_question(self, question_type: str,\
      \ question_id: str, query: str, context: str, info: Dict) -> None:\n       \
      \ if question_id.endswith('code_graph'):\n            response = info.get(question_id,\
      \ {})\n        else:\n            response = self.get_response_from_llm(query,\
      \ context) if self.use_llm and question_id.endswith('purpose') else self.clean_and_get_unique_elements(str(info.get(question_id,\
      \ '')))\n        if response and response != 'None':\n            response_str\
      \ = str(response)\n            response_str = response_str.strip()\n       \
      \     if response_str:\n                self.qa_list.append({'question': query,\
      \ 'answer': response_str})\n                if question_type == 'file' and self.use_summary:\n\
      \                    context = info['file_summary']\n                self.instruct_list.append({'instruction':\
      \ query, 'input': context, 'output': response_str})\n\n    def process_file_question(self,\
      \ question_type: str, question_id: str, question_text: str) -> None:\n     \
      \   query = question_text.format(filename=self.base_name)\n        context =\
      \ self.file_details['file_info']['file_code']\n        info = self.file_details['file_info']\n\
      \        self.process_question(question_type, question_id, query, context, info)\n\
      \n    def process_func_class_question(self, question_type: str, question_id:\
      \ str, question_text: str) -> None:\n        if question_type == 'method':\n\
      \            for class_name, class_info in self.file_details['classes'].items():\n\
      \                for key, method_info in class_info.items():\n             \
      \       if key.startswith('class_method_'):\n                        method_name\
      \ = key[len('class_method_'):]\n                        context = method_info['method_code']\n\
      \                        mapping = {'class_name': class_name, 'method_name':\
      \ method_name}\n                        query = question_text.format(filename=self.base_name,\
      \ **mapping)\n                        self.process_question(question_type, question_id,\
      \ query, context, method_info)\n        else:\n            for name, info in\
      \ self.file_details[self.question_mapping[question_type]].items():\n       \
      \         context = info[f'{question_type}_code']\n                mapping =\
      \ {f'{question_type}_name': name}\n                if question_id == f'{question_type}_variable_purpose'\
      \ and self.use_llm:\n                    self.process_items(question_type, question_id,\
      \ question_text, self.base_name, name, info, context, f'{question_type}_variables')\n\
      \                elif question_id != f'{question_type}_variable_purpose':\n\
      \                    query = question_text.format(filename=self.base_name, **mapping)\n\
      \                    self.process_question(question_type, question_id, query,\
      \ context, info)\n\n    def generate(self) -> tuple[List[Dict], List[Dict]]:\n\
      \        for question in self.questions:\n            question_id = question['id']\n\
      \            question_text = question['text']\n            question_type = question['type']\n\
      \            if question_type == 'file':\n                self.process_file_question(question_type,\
      \ question_id, question_text)\n            elif question_type in ['function',\
      \ 'class', 'method']:\n                self.process_func_class_question(question_type,\
      \ question_id, question_text)\n        return (self.qa_list, self.instruct_list)"
    class_ast: 'ClassDef(name=''PythonJsonGenerator'', bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    A
      class used to generate JSON formatted dictionary outputs for a Python \n    file.\n    Attributes:\n        file_path
      (str): The path to the Python file.\n        file_details (Dict): A dictionary
      containing details of the Python\n            file.\n        base_name (str):
      The base name of the Python file.\n        questions (List): A list of questions
      for which responses are to be\n            generated.\n        qa_list (List):
      A list to store the generated question-answer pairs.\n        instruct_list
      (List): A list to store the generated instructions.\n        question_mapping
      (Dict): A dictionary mapping question types to their\n            corresponding
      keys in the file details.\n        use_llm (bool): A flag indicating whether
      to use a language model for\n            generating responses.\n        llm
      (AutoModelForCausalLM): The language model to be used for\n            generating
      responses.\n    Methods:\n        clean_and_get_unique_elements(input_str: str)
      -> str: Cleans an input \n            string and returns a string of unique
      elements.\n        add_to_list(list_to_update: List[Dict], query: str, response:
      str,\n            additional_field=None) -> List[Dict]: Adds a response to a
      list.\n        get_response_from_llm(query: str, context: str) -> str: Gets
      a \n            response from the language model.\n        get_variable_purpose(question_id:
      str, question_text: str, base_name:\n            str, name: str, info: Dict,
      context: str, variable_type: str) -> \n                None: Processes questions
      related to the purpose of a variable.\n        process_question(question_id:
      str, query: str, context: str, info) -> \n            None: Processes a question
      and adds the generated response to the\n            qa_list and instruct_list.\n        process_file_question(question_id:
      str, question_text: str) -> None:\n            Processes questions related to
      a file.\n        process_func_class_question(question_type: str, question_id:
      str, \n            question_text: str) -> None: Processes questions related
      to a \n            function or class.\n        generate() -> Tuple[List[Dict],
      List[Dict]]: Generates responses for\n            all the questions and returns
      the qa_list and instruct_list.\n    '', lineno=110, col_offset=4, end_lineno=148,
      end_col_offset=7), lineno=110, col_offset=4, end_lineno=148, end_col_offset=7),
      FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
      lineno=149, col_offset=17, end_lineno=149, end_col_offset=21), arg(arg=''file_path'',
      annotation=Name(id=''str'', ctx=Load(), lineno=149, col_offset=34, end_lineno=149,
      end_col_offset=37), lineno=149, col_offset=23, end_lineno=149, end_col_offset=37),
      arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load(), lineno=149,
      col_offset=53, end_lineno=149, end_col_offset=57), lineno=149, col_offset=39,
      end_lineno=149, end_col_offset=57), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=149, col_offset=70, end_lineno=149, end_col_offset=73), lineno=149,
      col_offset=59, end_lineno=149, end_col_offset=73), arg(arg=''questions'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=149, col_offset=86, end_lineno=149, end_col_offset=90), slice=Name(id=''Dict'',
      ctx=Load(), lineno=149, col_offset=91, end_lineno=149, end_col_offset=95), ctx=Load(),
      lineno=149, col_offset=86, end_lineno=149, end_col_offset=96), lineno=149, col_offset=75,
      end_lineno=149, end_col_offset=96), arg(arg=''use_llm'', annotation=Name(id=''bool'',
      ctx=Load(), lineno=149, col_offset=107, end_lineno=149, end_col_offset=111),
      lineno=149, col_offset=98, end_lineno=149, end_col_offset=111), arg(arg=''use_summary'',
      annotation=Name(id=''bool'', ctx=Load(), lineno=149, col_offset=126, end_lineno=149,
      end_col_offset=130), lineno=149, col_offset=113, end_lineno=149, end_col_offset=130),
      arg(arg=''config'', annotation=Name(id=''Dict'', ctx=Load(), lineno=149, col_offset=140,
      end_lineno=149, end_col_offset=144), lineno=149, col_offset=132, end_lineno=149,
      end_col_offset=144)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=150, col_offset=8, end_lineno=150, end_col_offset=12), attr=''file_path'',
      ctx=Store(), lineno=150, col_offset=8, end_lineno=150, end_col_offset=22)],
      value=Name(id=''file_path'', ctx=Load(), lineno=150, col_offset=25, end_lineno=150,
      end_col_offset=34), lineno=150, col_offset=8, end_lineno=150, end_col_offset=34),
      Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=151, col_offset=8,
      end_lineno=151, end_col_offset=12), attr=''file_details'', ctx=Store(), lineno=151,
      col_offset=8, end_lineno=151, end_col_offset=25)], value=Name(id=''file_details'',
      ctx=Load(), lineno=151, col_offset=28, end_lineno=151, end_col_offset=40), lineno=151,
      col_offset=8, end_lineno=151, end_col_offset=40), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=152, col_offset=8, end_lineno=152, end_col_offset=12), attr=''base_name'',
      ctx=Store(), lineno=152, col_offset=8, end_lineno=152, end_col_offset=22)],
      value=Name(id=''base_name'', ctx=Load(), lineno=152, col_offset=25, end_lineno=152,
      end_col_offset=34), lineno=152, col_offset=8, end_lineno=152, end_col_offset=34),
      Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=153, col_offset=8,
      end_lineno=153, end_col_offset=12), attr=''questions'', ctx=Store(), lineno=153,
      col_offset=8, end_lineno=153, end_col_offset=22)], value=Name(id=''questions'',
      ctx=Load(), lineno=153, col_offset=25, end_lineno=153, end_col_offset=34), lineno=153,
      col_offset=8, end_lineno=153, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=154, col_offset=8, end_lineno=154, end_col_offset=12), attr=''qa_list'',
      ctx=Store(), lineno=154, col_offset=8, end_lineno=154, end_col_offset=20)],
      value=List(elts=[], ctx=Load(), lineno=154, col_offset=23, end_lineno=154, end_col_offset=25),
      lineno=154, col_offset=8, end_lineno=154, end_col_offset=25), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=155, col_offset=8, end_lineno=155, end_col_offset=12), attr=''instruct_list'',
      ctx=Store(), lineno=155, col_offset=8, end_lineno=155, end_col_offset=26)],
      value=List(elts=[], ctx=Load(), lineno=155, col_offset=29, end_lineno=155, end_col_offset=31),
      lineno=155, col_offset=8, end_lineno=155, end_col_offset=31), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=156, col_offset=8, end_lineno=156, end_col_offset=12), attr=''question_mapping'',
      ctx=Store(), lineno=156, col_offset=8, end_lineno=156, end_col_offset=29)],
      value=Dict(keys=[Constant(value=''file'', lineno=157, col_offset=12, end_lineno=157,
      end_col_offset=18), Constant(value=''function'', lineno=158, col_offset=12,
      end_lineno=158, end_col_offset=22), Constant(value=''class'', lineno=159, col_offset=12,
      end_lineno=159, end_col_offset=19), Constant(value=''method'', lineno=160, col_offset=12,
      end_lineno=160, end_col_offset=20)], values=[Constant(value=''file'', lineno=157,
      col_offset=20, end_lineno=157, end_col_offset=26), Constant(value=''functions'',
      lineno=158, col_offset=24, end_lineno=158, end_col_offset=35), Constant(value=''classes'',
      lineno=159, col_offset=21, end_lineno=159, end_col_offset=30), Constant(value=''classes'',
      lineno=160, col_offset=22, end_lineno=160, end_col_offset=31)], lineno=156,
      col_offset=32, end_lineno=161, end_col_offset=9), lineno=156, col_offset=8,
      end_lineno=161, end_col_offset=9), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=162, col_offset=8, end_lineno=162, end_col_offset=12), attr=''use_llm'',
      ctx=Store(), lineno=162, col_offset=8, end_lineno=162, end_col_offset=20)],
      value=Name(id=''use_llm'', ctx=Load(), lineno=162, col_offset=23, end_lineno=162,
      end_col_offset=30), lineno=162, col_offset=8, end_lineno=162, end_col_offset=30),
      Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=163, col_offset=8,
      end_lineno=163, end_col_offset=12), attr=''config'', ctx=Store(), lineno=163,
      col_offset=8, end_lineno=163, end_col_offset=19)], value=Name(id=''config'',
      ctx=Load(), lineno=163, col_offset=22, end_lineno=163, end_col_offset=28), lineno=163,
      col_offset=8, end_lineno=163, end_col_offset=28), If(test=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=164, col_offset=11, end_lineno=164, end_col_offset=15), attr=''use_llm'',
      ctx=Load(), lineno=164, col_offset=11, end_lineno=164, end_col_offset=23), body=[Try(body=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=166, col_offset=16, end_lineno=166, end_col_offset=20), attr=''llm_config'',
      ctx=Store(), lineno=166, col_offset=16, end_lineno=166, end_col_offset=31)],
      value=Subscript(value=Name(id=''config'', ctx=Load(), lineno=166, col_offset=34,
      end_lineno=166, end_col_offset=40), slice=Constant(value=''inference_model'',
      lineno=166, col_offset=41, end_lineno=166, end_col_offset=58), ctx=Load(), lineno=166,
      col_offset=34, end_lineno=166, end_col_offset=59), lineno=166, col_offset=16,
      end_lineno=166, end_col_offset=59), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=20), attr=''llm'',
      ctx=Store(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=24)],
      value=Call(func=Name(id=''get_model'', ctx=Load(), lineno=167, col_offset=27,
      end_lineno=167, end_col_offset=36), args=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=167, col_offset=37, end_lineno=167, end_col_offset=41), attr=''llm_config'',
      ctx=Load(), lineno=167, col_offset=37, end_lineno=167, end_col_offset=52)],
      keywords=[], lineno=167, col_offset=27, end_lineno=167, end_col_offset=53),
      lineno=167, col_offset=16, end_lineno=167, end_col_offset=53)], handlers=[ExceptHandler(type=Tuple(elts=[Name(id=''FileNotFoundError'',
      ctx=Load(), lineno=168, col_offset=20, end_lineno=168, end_col_offset=37), Attribute(value=Name(id=''yaml'',
      ctx=Load(), lineno=168, col_offset=39, end_lineno=168, end_col_offset=43), attr=''YAMLError'',
      ctx=Load(), lineno=168, col_offset=39, end_lineno=168, end_col_offset=53), Name(id=''ImportError'',
      ctx=Load(), lineno=168, col_offset=55, end_lineno=168, end_col_offset=66), Name(id=''AttributeError'',
      ctx=Load(), lineno=168, col_offset=68, end_lineno=168, end_col_offset=82)],
      ctx=Load(), lineno=168, col_offset=19, end_lineno=168, end_col_offset=83), name=''e'',
      body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'', ctx=Load(), lineno=169,
      col_offset=16, end_lineno=169, end_col_offset=22), attr=''error'', ctx=Load(),
      lineno=169, col_offset=16, end_lineno=169, end_col_offset=28), args=[JoinedStr(values=[Constant(value=''Failed
      to load configuration file: '', lineno=169, col_offset=29, end_lineno=169, end_col_offset=70),
      FormattedValue(value=Name(id=''e'', ctx=Load(), lineno=169, col_offset=67, end_lineno=169,
      end_col_offset=68), conversion=-1, lineno=169, col_offset=29, end_lineno=169,
      end_col_offset=70)], lineno=169, col_offset=29, end_lineno=169, end_col_offset=70)],
      keywords=[], lineno=169, col_offset=16, end_lineno=169, end_col_offset=71),
      lineno=169, col_offset=16, end_lineno=169, end_col_offset=71), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=20), attr=''use_llm'',
      ctx=Store(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=28)],
      value=Constant(value=False, lineno=170, col_offset=31, end_lineno=170, end_col_offset=36),
      lineno=170, col_offset=16, end_lineno=170, end_col_offset=36), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=171, col_offset=16, end_lineno=171, end_col_offset=20), attr=''llm_config'',
      ctx=Store(), lineno=171, col_offset=16, end_lineno=171, end_col_offset=31)],
      value=Constant(value=None, lineno=171, col_offset=34, end_lineno=171, end_col_offset=38),
      lineno=171, col_offset=16, end_lineno=171, end_col_offset=38), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=172, col_offset=16, end_lineno=172, end_col_offset=20), attr=''llm'',
      ctx=Store(), lineno=172, col_offset=16, end_lineno=172, end_col_offset=24)],
      value=Constant(value=None, lineno=172, col_offset=27, end_lineno=172, end_col_offset=31),
      lineno=172, col_offset=16, end_lineno=172, end_col_offset=31)], lineno=168,
      col_offset=12, end_lineno=172, end_col_offset=31)], orelse=[], finalbody=[],
      lineno=165, col_offset=12, end_lineno=172, end_col_offset=31)], orelse=[Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=174, col_offset=12, end_lineno=174, end_col_offset=16), attr=''llm'',
      ctx=Store(), lineno=174, col_offset=12, end_lineno=174, end_col_offset=20)],
      value=Constant(value=None, lineno=174, col_offset=23, end_lineno=174, end_col_offset=27),
      lineno=174, col_offset=12, end_lineno=174, end_col_offset=27)], lineno=164,
      col_offset=8, end_lineno=174, end_col_offset=27), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=175, col_offset=8, end_lineno=175, end_col_offset=12), attr=''use_summary'',
      ctx=Store(), lineno=175, col_offset=8, end_lineno=175, end_col_offset=24)],
      value=Name(id=''use_summary'', ctx=Load(), lineno=175, col_offset=27, end_lineno=175,
      end_col_offset=38), lineno=175, col_offset=8, end_lineno=175, end_col_offset=38)],
      decorator_list=[], lineno=149, col_offset=4, end_lineno=175, end_col_offset=38),
      FunctionDef(name=''clean_and_get_unique_elements'', args=arguments(posonlyargs=[],
      args=[arg(arg=''input_str'', annotation=Name(id=''str'', ctx=Load(), lineno=178,
      col_offset=49, end_lineno=178, end_col_offset=52), lineno=178, col_offset=38,
      end_lineno=178, end_col_offset=52)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Assign(targets=[Name(id=''cleaned_elements'', ctx=Store(), lineno=179,
      col_offset=8, end_lineno=179, end_col_offset=24)], value=Call(func=Name(id=''set'',
      ctx=Load(), lineno=179, col_offset=27, end_lineno=179, end_col_offset=30), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id=''re'',
      ctx=Load(), lineno=179, col_offset=31, end_lineno=179, end_col_offset=33), attr=''sub'',
      ctx=Load(), lineno=179, col_offset=31, end_lineno=179, end_col_offset=37), args=[Constant(value=''[^\\w\\-_>\\s:/.]'',
      lineno=179, col_offset=38, end_lineno=179, end_col_offset=55), Constant(value='''',
      lineno=179, col_offset=57, end_lineno=179, end_col_offset=59), Call(func=Attribute(value=Name(id=''element'',
      ctx=Load(), lineno=179, col_offset=61, end_lineno=179, end_col_offset=68), attr=''strip'',
      ctx=Load(), lineno=179, col_offset=61, end_lineno=179, end_col_offset=74), args=[],
      keywords=[], lineno=179, col_offset=61, end_lineno=179, end_col_offset=76)],
      keywords=[], lineno=179, col_offset=31, end_lineno=179, end_col_offset=77),
      generators=[comprehension(target=Name(id=''element'', ctx=Store(), lineno=180,
      col_offset=35, end_lineno=180, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''re'',
      ctx=Load(), lineno=180, col_offset=46, end_lineno=180, end_col_offset=48), attr=''sub'',
      ctx=Load(), lineno=180, col_offset=46, end_lineno=180, end_col_offset=52), args=[Constant(value=''\\s+'',
      lineno=180, col_offset=53, end_lineno=180, end_col_offset=59), Constant(value=''
      '', lineno=180, col_offset=61, end_lineno=180, end_col_offset=64), Name(id=''input_str'',
      ctx=Load(), lineno=180, col_offset=66, end_lineno=180, end_col_offset=75)],
      keywords=[], lineno=180, col_offset=46, end_lineno=180, end_col_offset=76),
      attr=''split'', ctx=Load(), lineno=180, col_offset=46, end_lineno=180, end_col_offset=82),
      args=[Constant(value='','', lineno=180, col_offset=83, end_lineno=180, end_col_offset=86)],
      keywords=[], lineno=180, col_offset=46, end_lineno=180, end_col_offset=87),
      ifs=[], is_async=0)], lineno=179, col_offset=30, end_lineno=180, end_col_offset=88)],
      keywords=[], lineno=179, col_offset=27, end_lineno=180, end_col_offset=88),
      lineno=179, col_offset=8, end_lineno=180, end_col_offset=88), Return(value=Call(func=Attribute(value=Constant(value='',
      '', lineno=181, col_offset=15, end_lineno=181, end_col_offset=19), attr=''join'',
      ctx=Load(), lineno=181, col_offset=15, end_lineno=181, end_col_offset=24), args=[Name(id=''cleaned_elements'',
      ctx=Load(), lineno=181, col_offset=25, end_lineno=181, end_col_offset=41)],
      keywords=[], lineno=181, col_offset=15, end_lineno=181, end_col_offset=42),
      lineno=181, col_offset=8, end_lineno=181, end_col_offset=42)], decorator_list=[Name(id=''staticmethod'',
      ctx=Load(), lineno=177, col_offset=5, end_lineno=177, end_col_offset=17)], returns=Name(id=''str'',
      ctx=Load(), lineno=178, col_offset=57, end_lineno=178, end_col_offset=60), lineno=178,
      col_offset=4, end_lineno=181, end_col_offset=42), FunctionDef(name=''add_to_list'',
      args=arguments(posonlyargs=[], args=[arg(arg=''list_to_update'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=184, col_offset=36, end_lineno=184, end_col_offset=40), slice=Name(id=''Dict'',
      ctx=Load(), lineno=184, col_offset=41, end_lineno=184, end_col_offset=45), ctx=Load(),
      lineno=184, col_offset=36, end_lineno=184, end_col_offset=46), lineno=184, col_offset=20,
      end_lineno=184, end_col_offset=46), arg(arg=''query'', annotation=Name(id=''str'',
      ctx=Load(), lineno=184, col_offset=55, end_lineno=184, end_col_offset=58), lineno=184,
      col_offset=48, end_lineno=184, end_col_offset=58), arg(arg=''response'', annotation=Name(id=''str'',
      ctx=Load(), lineno=184, col_offset=70, end_lineno=184, end_col_offset=73), lineno=184,
      col_offset=60, end_lineno=184, end_col_offset=73), arg(arg=''additional_field'',
      lineno=184, col_offset=75, end_lineno=184, end_col_offset=91)], kwonlyargs=[],
      kw_defaults=[], defaults=[Constant(value=None, lineno=184, col_offset=92, end_lineno=184,
      end_col_offset=96)]), body=[If(test=BoolOp(op=And(), values=[Name(id=''response'',
      ctx=Load(), lineno=185, col_offset=11, end_lineno=185, end_col_offset=19), Call(func=Attribute(value=Name(id=''response'',
      ctx=Load(), lineno=185, col_offset=24, end_lineno=185, end_col_offset=32), attr=''strip'',
      ctx=Load(), lineno=185, col_offset=24, end_lineno=185, end_col_offset=38), args=[],
      keywords=[], lineno=185, col_offset=24, end_lineno=185, end_col_offset=40),
      Compare(left=Name(id=''response'', ctx=Load(), lineno=185, col_offset=45, end_lineno=185,
      end_col_offset=53), ops=[NotEq()], comparators=[Constant(value=''None'', lineno=185,
      col_offset=57, end_lineno=185, end_col_offset=63)], lineno=185, col_offset=45,
      end_lineno=185, end_col_offset=63)], lineno=185, col_offset=11, end_lineno=185,
      end_col_offset=63), body=[Expr(value=Call(func=Attribute(value=Name(id=''list_to_update'',
      ctx=Load(), lineno=186, col_offset=12, end_lineno=186, end_col_offset=26), attr=''append'',
      ctx=Load(), lineno=186, col_offset=12, end_lineno=186, end_col_offset=33), args=[IfExp(test=Name(id=''additional_field'',
      ctx=Load(), lineno=188, col_offset=19, end_lineno=188, end_col_offset=35), body=Dict(keys=[Constant(value=''instruction'',
      lineno=187, col_offset=17, end_lineno=187, end_col_offset=30), Constant(value=''input'',
      lineno=187, col_offset=39, end_lineno=187, end_col_offset=46), Constant(value=''output'',
      lineno=187, col_offset=67, end_lineno=187, end_col_offset=75)], values=[Name(id=''query'',
      ctx=Load(), lineno=187, col_offset=32, end_lineno=187, end_col_offset=37), Name(id=''additional_field'',
      ctx=Load(), lineno=187, col_offset=49, end_lineno=187, end_col_offset=65), Name(id=''response'',
      ctx=Load(), lineno=187, col_offset=77, end_lineno=187, end_col_offset=85)],
      lineno=187, col_offset=16, end_lineno=187, end_col_offset=86), orelse=Dict(keys=[Constant(value=''question'',
      lineno=189, col_offset=17, end_lineno=189, end_col_offset=27), Constant(value=''answer'',
      lineno=189, col_offset=36, end_lineno=189, end_col_offset=44)], values=[Name(id=''query'',
      ctx=Load(), lineno=189, col_offset=29, end_lineno=189, end_col_offset=34), Name(id=''response'',
      ctx=Load(), lineno=189, col_offset=46, end_lineno=189, end_col_offset=54)],
      lineno=189, col_offset=16, end_lineno=189, end_col_offset=55), lineno=187, col_offset=16,
      end_lineno=189, end_col_offset=55)], keywords=[], lineno=186, col_offset=12,
      end_lineno=190, end_col_offset=13), lineno=186, col_offset=12, end_lineno=190,
      end_col_offset=13)], orelse=[], lineno=185, col_offset=8, end_lineno=190, end_col_offset=13),
      Return(value=Name(id=''list_to_update'', ctx=Load(), lineno=191, col_offset=15,
      end_lineno=191, end_col_offset=29), lineno=191, col_offset=8, end_lineno=191,
      end_col_offset=29)], decorator_list=[Name(id=''staticmethod'', ctx=Load(), lineno=183,
      col_offset=5, end_lineno=183, end_col_offset=17)], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=184, col_offset=101, end_lineno=184, end_col_offset=105),
      slice=Name(id=''Dict'', ctx=Load(), lineno=184, col_offset=106, end_lineno=184,
      end_col_offset=110), ctx=Load(), lineno=184, col_offset=101, end_lineno=184,
      end_col_offset=111), lineno=184, col_offset=4, end_lineno=191, end_col_offset=29),
      FunctionDef(name=''get_response_from_llm'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
      lineno=193, col_offset=30, end_lineno=193, end_col_offset=34), arg(arg=''query'',
      annotation=Name(id=''str'', ctx=Load(), lineno=193, col_offset=43, end_lineno=193,
      end_col_offset=46), lineno=193, col_offset=36, end_lineno=193, end_col_offset=46),
      arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(), lineno=193, col_offset=57,
      end_lineno=193, end_col_offset=60), lineno=193, col_offset=48, end_lineno=193,
      end_col_offset=60)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(),
      operand=Attribute(value=Name(id=''self'', ctx=Load(), lineno=194, col_offset=15,
      end_lineno=194, end_col_offset=19), attr=''llm'', ctx=Load(), lineno=194, col_offset=15,
      end_lineno=194, end_col_offset=23), lineno=194, col_offset=11, end_lineno=194,
      end_col_offset=23), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
      ctx=Load(), lineno=195, col_offset=12, end_lineno=195, end_col_offset=18), attr=''error'',
      ctx=Load(), lineno=195, col_offset=12, end_lineno=195, end_col_offset=24), args=[Constant(value=''AI
      model not available.'', lineno=195, col_offset=25, end_lineno=195, end_col_offset=50)],
      keywords=[], lineno=195, col_offset=12, end_lineno=195, end_col_offset=51),
      lineno=195, col_offset=12, end_lineno=195, end_col_offset=51), Return(value=Constant(value='''',
      lineno=196, col_offset=19, end_lineno=196, end_col_offset=21), lineno=196, col_offset=12,
      end_lineno=196, end_col_offset=21)], orelse=[], lineno=194, col_offset=8, end_lineno=196,
      end_col_offset=21), Assign(targets=[Name(id=''prompt'', ctx=Store(), lineno=197,
      col_offset=8, end_lineno=197, end_col_offset=14)], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=197, col_offset=17, end_lineno=197, end_col_offset=21), attr=''config'',
      ctx=Load(), lineno=197, col_offset=17, end_lineno=197, end_col_offset=28), slice=Constant(value=''prompt_template'',
      lineno=197, col_offset=29, end_lineno=197, end_col_offset=46), ctx=Load(), lineno=197,
      col_offset=17, end_lineno=197, end_col_offset=47), attr=''format'', ctx=Load(),
      lineno=197, col_offset=17, end_lineno=197, end_col_offset=54), args=[], keywords=[keyword(arg=''context'',
      value=Name(id=''context'', ctx=Load(), lineno=197, col_offset=63, end_lineno=197,
      end_col_offset=70), lineno=197, col_offset=55, end_lineno=197, end_col_offset=70),
      keyword(arg=''query'', value=Name(id=''query'', ctx=Load(), lineno=197, col_offset=78,
      end_lineno=197, end_col_offset=83), lineno=197, col_offset=72, end_lineno=197,
      end_col_offset=83)], lineno=197, col_offset=17, end_lineno=197, end_col_offset=84),
      lineno=197, col_offset=8, end_lineno=197, end_col_offset=84), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=198, col_offset=8, end_lineno=198, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=198, col_offset=8, end_lineno=198, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Query:
      '', lineno=198, col_offset=21, end_lineno=198, end_col_offset=38), FormattedValue(value=Name(id=''query'',
      ctx=Load(), lineno=198, col_offset=31, end_lineno=198, end_col_offset=36), conversion=-1,
      lineno=198, col_offset=21, end_lineno=198, end_col_offset=38)], lineno=198,
      col_offset=21, end_lineno=198, end_col_offset=38)], keywords=[], lineno=198,
      col_offset=8, end_lineno=198, end_col_offset=39), lineno=198, col_offset=8,
      end_lineno=198, end_col_offset=39), Assign(targets=[Name(id=''response'', ctx=Store(),
      lineno=199, col_offset=8, end_lineno=199, end_col_offset=16)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=199, col_offset=19, end_lineno=199, end_col_offset=23), attr=''llm'',
      ctx=Load(), lineno=199, col_offset=19, end_lineno=199, end_col_offset=27), args=[Name(id=''prompt'',
      ctx=Load(), lineno=199, col_offset=28, end_lineno=199, end_col_offset=34)],
      keywords=[], lineno=199, col_offset=19, end_lineno=199, end_col_offset=35),
      lineno=199, col_offset=8, end_lineno=199, end_col_offset=35), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
      ctx=Load(), lineno=200, col_offset=8, end_lineno=200, end_col_offset=15), attr=''info'',
      ctx=Load(), lineno=200, col_offset=8, end_lineno=200, end_col_offset=20), args=[JoinedStr(values=[Constant(value=''Response:
      '', lineno=200, col_offset=21, end_lineno=200, end_col_offset=44), FormattedValue(value=Name(id=''response'',
      ctx=Load(), lineno=200, col_offset=34, end_lineno=200, end_col_offset=42), conversion=-1,
      lineno=200, col_offset=21, end_lineno=200, end_col_offset=44)], lineno=200,
      col_offset=21, end_lineno=200, end_col_offset=44)], keywords=[], lineno=200,
      col_offset=8, end_lineno=200, end_col_offset=45), lineno=200, col_offset=8,
      end_lineno=200, end_col_offset=45), Return(value=Name(id=''response'', ctx=Load(),
      lineno=201, col_offset=15, end_lineno=201, end_col_offset=23), lineno=201, col_offset=8,
      end_lineno=201, end_col_offset=23)], decorator_list=[], returns=Name(id=''str'',
      ctx=Load(), lineno=193, col_offset=65, end_lineno=193, end_col_offset=68), lineno=193,
      col_offset=4, end_lineno=201, end_col_offset=23), FunctionDef(name=''process_items'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=203, col_offset=22,
      end_lineno=203, end_col_offset=26), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=203, col_offset=43, end_lineno=203, end_col_offset=46), lineno=203,
      col_offset=28, end_lineno=203, end_col_offset=46), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=203, col_offset=61, end_lineno=203,
      end_col_offset=64), lineno=203, col_offset=48, end_lineno=203, end_col_offset=64),
      arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load(), lineno=203,
      col_offset=81, end_lineno=203, end_col_offset=84), lineno=203, col_offset=66,
      end_lineno=203, end_col_offset=84), arg(arg=''base_name'', annotation=Name(id=''str'',
      ctx=Load(), lineno=203, col_offset=97, end_lineno=203, end_col_offset=100),
      lineno=203, col_offset=86, end_lineno=203, end_col_offset=100), arg(arg=''name'',
      annotation=Name(id=''str'', ctx=Load(), lineno=203, col_offset=108, end_lineno=203,
      end_col_offset=111), lineno=203, col_offset=102, end_lineno=203, end_col_offset=111),
      arg(arg=''info'', annotation=Name(id=''Dict'', ctx=Load(), lineno=203, col_offset=119,
      end_lineno=203, end_col_offset=123), lineno=203, col_offset=113, end_lineno=203,
      end_col_offset=123), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
      lineno=203, col_offset=134, end_lineno=203, end_col_offset=137), lineno=203,
      col_offset=125, end_lineno=203, end_col_offset=137), arg(arg=''item_type'',
      annotation=Name(id=''str'', ctx=Load(), lineno=203, col_offset=150, end_lineno=203,
      end_col_offset=153), lineno=203, col_offset=139, end_lineno=203, end_col_offset=153)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Name(id=''info'',
      ctx=Load(), lineno=204, col_offset=11, end_lineno=204, end_col_offset=15), slice=Name(id=''item_type'',
      ctx=Load(), lineno=204, col_offset=16, end_lineno=204, end_col_offset=25), ctx=Load(),
      lineno=204, col_offset=11, end_lineno=204, end_col_offset=26), body=[Assign(targets=[Name(id=''items'',
      ctx=Store(), lineno=205, col_offset=12, end_lineno=205, end_col_offset=17)],
      value=ListComp(elt=Call(func=Attribute(value=Name(id=''item'', ctx=Load(), lineno=205,
      col_offset=21, end_lineno=205, end_col_offset=25), attr=''strip'', ctx=Load(),
      lineno=205, col_offset=21, end_lineno=205, end_col_offset=31), args=[], keywords=[],
      lineno=205, col_offset=21, end_lineno=205, end_col_offset=33), generators=[comprehension(target=Name(id=''item'',
      ctx=Store(), lineno=205, col_offset=38, end_lineno=205, end_col_offset=42),
      iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=205, col_offset=46, end_lineno=205, end_col_offset=50), attr=''clean_and_get_unique_elements'',
      ctx=Load(), lineno=205, col_offset=46, end_lineno=205, end_col_offset=80), args=[Call(func=Name(id=''str'',
      ctx=Load(), lineno=205, col_offset=81, end_lineno=205, end_col_offset=84), args=[Subscript(value=Name(id=''info'',
      ctx=Load(), lineno=205, col_offset=85, end_lineno=205, end_col_offset=89), slice=Name(id=''item_type'',
      ctx=Load(), lineno=205, col_offset=90, end_lineno=205, end_col_offset=99), ctx=Load(),
      lineno=205, col_offset=85, end_lineno=205, end_col_offset=100)], keywords=[],
      lineno=205, col_offset=81, end_lineno=205, end_col_offset=101)], keywords=[],
      lineno=205, col_offset=46, end_lineno=205, end_col_offset=102), attr=''split'',
      ctx=Load(), lineno=205, col_offset=46, end_lineno=205, end_col_offset=108),
      args=[Constant(value='','', lineno=205, col_offset=109, end_lineno=205, end_col_offset=112)],
      keywords=[], lineno=205, col_offset=46, end_lineno=205, end_col_offset=113),
      ifs=[Name(id=''item'', ctx=Load(), lineno=205, col_offset=117, end_lineno=205,
      end_col_offset=121)], is_async=0)], lineno=205, col_offset=20, end_lineno=205,
      end_col_offset=122), lineno=205, col_offset=12, end_lineno=205, end_col_offset=122),
      For(target=Name(id=''item'', ctx=Store(), lineno=206, col_offset=16, end_lineno=206,
      end_col_offset=20), iter=Name(id=''items'', ctx=Load(), lineno=206, col_offset=24,
      end_lineno=206, end_col_offset=29), body=[Assign(targets=[Name(id=''query'',
      ctx=Store(), lineno=207, col_offset=16, end_lineno=207, end_col_offset=21)],
      value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load(), lineno=207,
      col_offset=24, end_lineno=207, end_col_offset=37), attr=''format'', ctx=Load(),
      lineno=207, col_offset=24, end_lineno=207, end_col_offset=44), args=[], keywords=[keyword(arg=''filename'',
      value=Name(id=''base_name'', ctx=Load(), lineno=207, col_offset=54, end_lineno=207,
      end_col_offset=63), lineno=207, col_offset=45, end_lineno=207, end_col_offset=63),
      keyword(value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''item_type'',
      ctx=Load(), lineno=207, col_offset=71, end_lineno=207, end_col_offset=80), attr=''split'',
      ctx=Load(), lineno=207, col_offset=71, end_lineno=207, end_col_offset=86), args=[Constant(value=''_'',
      lineno=207, col_offset=87, end_lineno=207, end_col_offset=90)], keywords=[],
      lineno=207, col_offset=71, end_lineno=207, end_col_offset=91), slice=Constant(value=0,
      lineno=207, col_offset=92, end_lineno=207, end_col_offset=93), ctx=Load(), lineno=207,
      col_offset=71, end_lineno=207, end_col_offset=94), conversion=-1, lineno=207,
      col_offset=68, end_lineno=207, end_col_offset=101), Constant(value=''_name'',
      lineno=207, col_offset=68, end_lineno=207, end_col_offset=101)], lineno=207,
      col_offset=68, end_lineno=207, end_col_offset=101), JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id=''item_type'',
      ctx=Load(), lineno=207, col_offset=112, end_lineno=207, end_col_offset=121),
      attr=''split'', ctx=Load(), lineno=207, col_offset=112, end_lineno=207, end_col_offset=127),
      args=[Constant(value=''_'', lineno=207, col_offset=128, end_lineno=207, end_col_offset=131)],
      keywords=[], lineno=207, col_offset=112, end_lineno=207, end_col_offset=132),
      slice=Constant(value=0, lineno=207, col_offset=133, end_lineno=207, end_col_offset=134),
      ctx=Load(), lineno=207, col_offset=112, end_lineno=207, end_col_offset=135),
      conversion=-1, lineno=207, col_offset=109, end_lineno=207, end_col_offset=146),
      Constant(value=''_variable'', lineno=207, col_offset=109, end_lineno=207, end_col_offset=146)],
      lineno=207, col_offset=109, end_lineno=207, end_col_offset=146)], values=[Name(id=''name'',
      ctx=Load(), lineno=207, col_offset=103, end_lineno=207, end_col_offset=107),
      Name(id=''item'', ctx=Load(), lineno=207, col_offset=148, end_lineno=207, end_col_offset=152)],
      lineno=207, col_offset=67, end_lineno=207, end_col_offset=153), lineno=207,
      col_offset=65, end_lineno=207, end_col_offset=153)], lineno=207, col_offset=24,
      end_lineno=207, end_col_offset=154), lineno=207, col_offset=16, end_lineno=207,
      end_col_offset=154), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=208, col_offset=16, end_lineno=208, end_col_offset=20), attr=''process_question'',
      ctx=Load(), lineno=208, col_offset=16, end_lineno=208, end_col_offset=37), args=[Name(id=''question_type'',
      ctx=Load(), lineno=208, col_offset=38, end_lineno=208, end_col_offset=51), Name(id=''question_id'',
      ctx=Load(), lineno=208, col_offset=53, end_lineno=208, end_col_offset=64), Name(id=''query'',
      ctx=Load(), lineno=208, col_offset=66, end_lineno=208, end_col_offset=71), Name(id=''context'',
      ctx=Load(), lineno=208, col_offset=73, end_lineno=208, end_col_offset=80), Name(id=''info'',
      ctx=Load(), lineno=208, col_offset=82, end_lineno=208, end_col_offset=86)],
      keywords=[], lineno=208, col_offset=16, end_lineno=208, end_col_offset=87),
      lineno=208, col_offset=16, end_lineno=208, end_col_offset=87)], orelse=[], lineno=206,
      col_offset=12, end_lineno=208, end_col_offset=87)], orelse=[], lineno=204, col_offset=8,
      end_lineno=208, end_col_offset=87)], decorator_list=[], returns=Constant(value=None,
      lineno=203, col_offset=158, end_lineno=203, end_col_offset=162), lineno=203,
      col_offset=4, end_lineno=208, end_col_offset=87), FunctionDef(name=''process_question'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=210, col_offset=25,
      end_lineno=210, end_col_offset=29), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=210, col_offset=46, end_lineno=210, end_col_offset=49), lineno=210,
      col_offset=31, end_lineno=210, end_col_offset=49), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=210, col_offset=64, end_lineno=210,
      end_col_offset=67), lineno=210, col_offset=51, end_lineno=210, end_col_offset=67),
      arg(arg=''query'', annotation=Name(id=''str'', ctx=Load(), lineno=210, col_offset=76,
      end_lineno=210, end_col_offset=79), lineno=210, col_offset=69, end_lineno=210,
      end_col_offset=79), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
      lineno=210, col_offset=90, end_lineno=210, end_col_offset=93), lineno=210, col_offset=81,
      end_lineno=210, end_col_offset=93), arg(arg=''info'', annotation=Name(id=''Dict'',
      ctx=Load(), lineno=210, col_offset=101, end_lineno=210, end_col_offset=105),
      lineno=210, col_offset=95, end_lineno=210, end_col_offset=105)], kwonlyargs=[],
      kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id=''question_id'',
      ctx=Load(), lineno=211, col_offset=11, end_lineno=211, end_col_offset=22), attr=''endswith'',
      ctx=Load(), lineno=211, col_offset=11, end_lineno=211, end_col_offset=31), args=[Constant(value=''code_graph'',
      lineno=211, col_offset=32, end_lineno=211, end_col_offset=44)], keywords=[],
      lineno=211, col_offset=11, end_lineno=211, end_col_offset=45), body=[Assign(targets=[Name(id=''response'',
      ctx=Store(), lineno=212, col_offset=12, end_lineno=212, end_col_offset=20)],
      value=Call(func=Attribute(value=Name(id=''info'', ctx=Load(), lineno=212, col_offset=23,
      end_lineno=212, end_col_offset=27), attr=''get'', ctx=Load(), lineno=212, col_offset=23,
      end_lineno=212, end_col_offset=31), args=[Name(id=''question_id'', ctx=Load(),
      lineno=212, col_offset=32, end_lineno=212, end_col_offset=43), Dict(keys=[],
      values=[], lineno=212, col_offset=45, end_lineno=212, end_col_offset=47)], keywords=[],
      lineno=212, col_offset=23, end_lineno=212, end_col_offset=48), lineno=212, col_offset=12,
      end_lineno=212, end_col_offset=48)], orelse=[Assign(targets=[Name(id=''response'',
      ctx=Store(), lineno=214, col_offset=12, end_lineno=214, end_col_offset=20)],
      value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=214, col_offset=69, end_lineno=214, end_col_offset=73), attr=''use_llm'',
      ctx=Load(), lineno=214, col_offset=69, end_lineno=214, end_col_offset=81), Call(func=Attribute(value=Name(id=''question_id'',
      ctx=Load(), lineno=214, col_offset=86, end_lineno=214, end_col_offset=97), attr=''endswith'',
      ctx=Load(), lineno=214, col_offset=86, end_lineno=214, end_col_offset=106),
      args=[Constant(value=''purpose'', lineno=214, col_offset=107, end_lineno=214,
      end_col_offset=116)], keywords=[], lineno=214, col_offset=86, end_lineno=214,
      end_col_offset=117)], lineno=214, col_offset=69, end_lineno=214, end_col_offset=117),
      body=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=214, col_offset=23,
      end_lineno=214, end_col_offset=27), attr=''get_response_from_llm'', ctx=Load(),
      lineno=214, col_offset=23, end_lineno=214, end_col_offset=49), args=[Name(id=''query'',
      ctx=Load(), lineno=214, col_offset=50, end_lineno=214, end_col_offset=55), Name(id=''context'',
      ctx=Load(), lineno=214, col_offset=57, end_lineno=214, end_col_offset=64)],
      keywords=[], lineno=214, col_offset=23, end_lineno=214, end_col_offset=65),
      orelse=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=214, col_offset=123,
      end_lineno=214, end_col_offset=127), attr=''clean_and_get_unique_elements'',
      ctx=Load(), lineno=214, col_offset=123, end_lineno=214, end_col_offset=157),
      args=[Call(func=Name(id=''str'', ctx=Load(), lineno=214, col_offset=158, end_lineno=214,
      end_col_offset=161), args=[Call(func=Attribute(value=Name(id=''info'', ctx=Load(),
      lineno=214, col_offset=162, end_lineno=214, end_col_offset=166), attr=''get'',
      ctx=Load(), lineno=214, col_offset=162, end_lineno=214, end_col_offset=170),
      args=[Name(id=''question_id'', ctx=Load(), lineno=214, col_offset=171, end_lineno=214,
      end_col_offset=182), Constant(value='''', lineno=214, col_offset=184, end_lineno=214,
      end_col_offset=186)], keywords=[], lineno=214, col_offset=162, end_lineno=214,
      end_col_offset=187)], keywords=[], lineno=214, col_offset=158, end_lineno=214,
      end_col_offset=188)], keywords=[], lineno=214, col_offset=123, end_lineno=214,
      end_col_offset=189), lineno=214, col_offset=23, end_lineno=214, end_col_offset=189),
      lineno=214, col_offset=12, end_lineno=214, end_col_offset=189)], lineno=211,
      col_offset=8, end_lineno=214, end_col_offset=189), If(test=BoolOp(op=And(),
      values=[Name(id=''response'', ctx=Load(), lineno=215, col_offset=11, end_lineno=215,
      end_col_offset=19), Compare(left=Name(id=''response'', ctx=Load(), lineno=215,
      col_offset=24, end_lineno=215, end_col_offset=32), ops=[NotEq()], comparators=[Constant(value=''None'',
      lineno=215, col_offset=36, end_lineno=215, end_col_offset=42)], lineno=215,
      col_offset=24, end_lineno=215, end_col_offset=42)], lineno=215, col_offset=11,
      end_lineno=215, end_col_offset=42), body=[Assign(targets=[Name(id=''response_str'',
      ctx=Store(), lineno=216, col_offset=12, end_lineno=216, end_col_offset=24)],
      value=Call(func=Name(id=''str'', ctx=Load(), lineno=216, col_offset=27, end_lineno=216,
      end_col_offset=30), args=[Name(id=''response'', ctx=Load(), lineno=216, col_offset=31,
      end_lineno=216, end_col_offset=39)], keywords=[], lineno=216, col_offset=27,
      end_lineno=216, end_col_offset=40), lineno=216, col_offset=12, end_lineno=216,
      end_col_offset=40), Assign(targets=[Name(id=''response_str'', ctx=Store(), lineno=217,
      col_offset=12, end_lineno=217, end_col_offset=24)], value=Call(func=Attribute(value=Name(id=''response_str'',
      ctx=Load(), lineno=217, col_offset=27, end_lineno=217, end_col_offset=39), attr=''strip'',
      ctx=Load(), lineno=217, col_offset=27, end_lineno=217, end_col_offset=45), args=[],
      keywords=[], lineno=217, col_offset=27, end_lineno=217, end_col_offset=47),
      lineno=217, col_offset=12, end_lineno=217, end_col_offset=47), If(test=Name(id=''response_str'',
      ctx=Load(), lineno=218, col_offset=15, end_lineno=218, end_col_offset=27), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=219, col_offset=16, end_lineno=219, end_col_offset=20), attr=''qa_list'',
      ctx=Load(), lineno=219, col_offset=16, end_lineno=219, end_col_offset=28), attr=''append'',
      ctx=Load(), lineno=219, col_offset=16, end_lineno=219, end_col_offset=35), args=[Dict(keys=[Constant(value=''question'',
      lineno=219, col_offset=37, end_lineno=219, end_col_offset=47), Constant(value=''answer'',
      lineno=219, col_offset=56, end_lineno=219, end_col_offset=64)], values=[Name(id=''query'',
      ctx=Load(), lineno=219, col_offset=49, end_lineno=219, end_col_offset=54), Name(id=''response_str'',
      ctx=Load(), lineno=219, col_offset=66, end_lineno=219, end_col_offset=78)],
      lineno=219, col_offset=36, end_lineno=219, end_col_offset=79)], keywords=[],
      lineno=219, col_offset=16, end_lineno=219, end_col_offset=80), lineno=219, col_offset=16,
      end_lineno=219, end_col_offset=80), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_type'',
      ctx=Load(), lineno=220, col_offset=19, end_lineno=220, end_col_offset=32), ops=[Eq()],
      comparators=[Constant(value=''file'', lineno=220, col_offset=36, end_lineno=220,
      end_col_offset=42)], lineno=220, col_offset=19, end_lineno=220, end_col_offset=42),
      Attribute(value=Name(id=''self'', ctx=Load(), lineno=220, col_offset=47, end_lineno=220,
      end_col_offset=51), attr=''use_summary'', ctx=Load(), lineno=220, col_offset=47,
      end_lineno=220, end_col_offset=63)], lineno=220, col_offset=19, end_lineno=220,
      end_col_offset=63), body=[Assign(targets=[Name(id=''context'', ctx=Store(),
      lineno=221, col_offset=20, end_lineno=221, end_col_offset=27)], value=Subscript(value=Name(id=''info'',
      ctx=Load(), lineno=221, col_offset=30, end_lineno=221, end_col_offset=34), slice=Constant(value=''file_summary'',
      lineno=221, col_offset=35, end_lineno=221, end_col_offset=49), ctx=Load(), lineno=221,
      col_offset=30, end_lineno=221, end_col_offset=50), lineno=221, col_offset=20,
      end_lineno=221, end_col_offset=50)], orelse=[], lineno=220, col_offset=16, end_lineno=221,
      end_col_offset=50), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=222, col_offset=16, end_lineno=222, end_col_offset=20), attr=''instruct_list'',
      ctx=Load(), lineno=222, col_offset=16, end_lineno=222, end_col_offset=34), attr=''append'',
      ctx=Load(), lineno=222, col_offset=16, end_lineno=222, end_col_offset=41), args=[Dict(keys=[Constant(value=''instruction'',
      lineno=222, col_offset=43, end_lineno=222, end_col_offset=56), Constant(value=''input'',
      lineno=222, col_offset=65, end_lineno=222, end_col_offset=72), Constant(value=''output'',
      lineno=222, col_offset=83, end_lineno=222, end_col_offset=91)], values=[Name(id=''query'',
      ctx=Load(), lineno=222, col_offset=58, end_lineno=222, end_col_offset=63), Name(id=''context'',
      ctx=Load(), lineno=222, col_offset=74, end_lineno=222, end_col_offset=81), Name(id=''response_str'',
      ctx=Load(), lineno=222, col_offset=93, end_lineno=222, end_col_offset=105)],
      lineno=222, col_offset=42, end_lineno=222, end_col_offset=106)], keywords=[],
      lineno=222, col_offset=16, end_lineno=222, end_col_offset=107), lineno=222,
      col_offset=16, end_lineno=222, end_col_offset=107)], orelse=[], lineno=218,
      col_offset=12, end_lineno=222, end_col_offset=107)], orelse=[], lineno=215,
      col_offset=8, end_lineno=222, end_col_offset=107)], decorator_list=[], returns=Constant(value=None,
      lineno=210, col_offset=110, end_lineno=210, end_col_offset=114), lineno=210,
      col_offset=4, end_lineno=222, end_col_offset=107), FunctionDef(name=''process_file_question'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=224, col_offset=30,
      end_lineno=224, end_col_offset=34), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=224, col_offset=51, end_lineno=224, end_col_offset=54), lineno=224,
      col_offset=36, end_lineno=224, end_col_offset=54), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=224, col_offset=69, end_lineno=224,
      end_col_offset=72), lineno=224, col_offset=56, end_lineno=224, end_col_offset=72),
      arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load(), lineno=224,
      col_offset=89, end_lineno=224, end_col_offset=92), lineno=224, col_offset=74,
      end_lineno=224, end_col_offset=92)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[Assign(targets=[Name(id=''query'', ctx=Store(), lineno=225, col_offset=8,
      end_lineno=225, end_col_offset=13)], value=Call(func=Attribute(value=Name(id=''question_text'',
      ctx=Load(), lineno=225, col_offset=16, end_lineno=225, end_col_offset=29), attr=''format'',
      ctx=Load(), lineno=225, col_offset=16, end_lineno=225, end_col_offset=36), args=[],
      keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=225, col_offset=46, end_lineno=225, end_col_offset=50), attr=''base_name'',
      ctx=Load(), lineno=225, col_offset=46, end_lineno=225, end_col_offset=60), lineno=225,
      col_offset=37, end_lineno=225, end_col_offset=60)], lineno=225, col_offset=16,
      end_lineno=225, end_col_offset=61), lineno=225, col_offset=8, end_lineno=225,
      end_col_offset=61), Assign(targets=[Name(id=''context'', ctx=Store(), lineno=226,
      col_offset=8, end_lineno=226, end_col_offset=15)], value=Subscript(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=226, col_offset=18, end_lineno=226, end_col_offset=22), attr=''file_details'',
      ctx=Load(), lineno=226, col_offset=18, end_lineno=226, end_col_offset=35), slice=Constant(value=''file_info'',
      lineno=226, col_offset=36, end_lineno=226, end_col_offset=47), ctx=Load(), lineno=226,
      col_offset=18, end_lineno=226, end_col_offset=48), slice=Constant(value=''file_code'',
      lineno=226, col_offset=49, end_lineno=226, end_col_offset=60), ctx=Load(), lineno=226,
      col_offset=18, end_lineno=226, end_col_offset=61), lineno=226, col_offset=8,
      end_lineno=226, end_col_offset=61), Assign(targets=[Name(id=''info'', ctx=Store(),
      lineno=227, col_offset=8, end_lineno=227, end_col_offset=12)], value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=227, col_offset=15, end_lineno=227, end_col_offset=19), attr=''file_details'',
      ctx=Load(), lineno=227, col_offset=15, end_lineno=227, end_col_offset=32), slice=Constant(value=''file_info'',
      lineno=227, col_offset=33, end_lineno=227, end_col_offset=44), ctx=Load(), lineno=227,
      col_offset=15, end_lineno=227, end_col_offset=45), lineno=227, col_offset=8,
      end_lineno=227, end_col_offset=45), Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=228, col_offset=8, end_lineno=228, end_col_offset=12), attr=''process_question'',
      ctx=Load(), lineno=228, col_offset=8, end_lineno=228, end_col_offset=29), args=[Name(id=''question_type'',
      ctx=Load(), lineno=228, col_offset=30, end_lineno=228, end_col_offset=43), Name(id=''question_id'',
      ctx=Load(), lineno=228, col_offset=45, end_lineno=228, end_col_offset=56), Name(id=''query'',
      ctx=Load(), lineno=228, col_offset=58, end_lineno=228, end_col_offset=63), Name(id=''context'',
      ctx=Load(), lineno=228, col_offset=65, end_lineno=228, end_col_offset=72), Name(id=''info'',
      ctx=Load(), lineno=228, col_offset=74, end_lineno=228, end_col_offset=78)],
      keywords=[], lineno=228, col_offset=8, end_lineno=228, end_col_offset=79), lineno=228,
      col_offset=8, end_lineno=228, end_col_offset=79)], decorator_list=[], returns=Constant(value=None,
      lineno=224, col_offset=97, end_lineno=224, end_col_offset=101), lineno=224,
      col_offset=4, end_lineno=228, end_col_offset=79), FunctionDef(name=''process_func_class_question'',
      args=arguments(posonlyargs=[], args=[arg(arg=''self'', lineno=230, col_offset=36,
      end_lineno=230, end_col_offset=40), arg(arg=''question_type'', annotation=Name(id=''str'',
      ctx=Load(), lineno=230, col_offset=57, end_lineno=230, end_col_offset=60), lineno=230,
      col_offset=42, end_lineno=230, end_col_offset=60), arg(arg=''question_id'',
      annotation=Name(id=''str'', ctx=Load(), lineno=230, col_offset=75, end_lineno=230,
      end_col_offset=78), lineno=230, col_offset=62, end_lineno=230, end_col_offset=78),
      arg(arg=''question_text'', annotation=Name(id=''str'', ctx=Load(), lineno=230,
      col_offset=95, end_lineno=230, end_col_offset=98), lineno=230, col_offset=80,
      end_lineno=230, end_col_offset=98)], kwonlyargs=[], kw_defaults=[], defaults=[]),
      body=[If(test=Compare(left=Name(id=''question_type'', ctx=Load(), lineno=231,
      col_offset=11, end_lineno=231, end_col_offset=24), ops=[Eq()], comparators=[Constant(value=''method'',
      lineno=231, col_offset=28, end_lineno=231, end_col_offset=36)], lineno=231,
      col_offset=11, end_lineno=231, end_col_offset=36), body=[For(target=Tuple(elts=[Name(id=''class_name'',
      ctx=Store(), lineno=232, col_offset=16, end_lineno=232, end_col_offset=26),
      Name(id=''class_info'', ctx=Store(), lineno=232, col_offset=28, end_lineno=232,
      end_col_offset=38)], ctx=Store(), lineno=232, col_offset=16, end_lineno=232,
      end_col_offset=38), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=232, col_offset=42, end_lineno=232, end_col_offset=46), attr=''file_details'',
      ctx=Load(), lineno=232, col_offset=42, end_lineno=232, end_col_offset=59), slice=Constant(value=''classes'',
      lineno=232, col_offset=60, end_lineno=232, end_col_offset=69), ctx=Load(), lineno=232,
      col_offset=42, end_lineno=232, end_col_offset=70), attr=''items'', ctx=Load(),
      lineno=232, col_offset=42, end_lineno=232, end_col_offset=76), args=[], keywords=[],
      lineno=232, col_offset=42, end_lineno=232, end_col_offset=78), body=[For(target=Tuple(elts=[Name(id=''key'',
      ctx=Store(), lineno=233, col_offset=20, end_lineno=233, end_col_offset=23),
      Name(id=''method_info'', ctx=Store(), lineno=233, col_offset=25, end_lineno=233,
      end_col_offset=36)], ctx=Store(), lineno=233, col_offset=20, end_lineno=233,
      end_col_offset=36), iter=Call(func=Attribute(value=Name(id=''class_info'', ctx=Load(),
      lineno=233, col_offset=40, end_lineno=233, end_col_offset=50), attr=''items'',
      ctx=Load(), lineno=233, col_offset=40, end_lineno=233, end_col_offset=56), args=[],
      keywords=[], lineno=233, col_offset=40, end_lineno=233, end_col_offset=58),
      body=[If(test=Call(func=Attribute(value=Name(id=''key'', ctx=Load(), lineno=234,
      col_offset=23, end_lineno=234, end_col_offset=26), attr=''startswith'', ctx=Load(),
      lineno=234, col_offset=23, end_lineno=234, end_col_offset=37), args=[Constant(value=''class_method_'',
      lineno=234, col_offset=38, end_lineno=234, end_col_offset=53)], keywords=[],
      lineno=234, col_offset=23, end_lineno=234, end_col_offset=54), body=[Assign(targets=[Name(id=''method_name'',
      ctx=Store(), lineno=235, col_offset=24, end_lineno=235, end_col_offset=35)],
      value=Subscript(value=Name(id=''key'', ctx=Load(), lineno=235, col_offset=38,
      end_lineno=235, end_col_offset=41), slice=Slice(lower=Call(func=Name(id=''len'',
      ctx=Load(), lineno=235, col_offset=42, end_lineno=235, end_col_offset=45), args=[Constant(value=''class_method_'',
      lineno=235, col_offset=46, end_lineno=235, end_col_offset=61)], keywords=[],
      lineno=235, col_offset=42, end_lineno=235, end_col_offset=62), lineno=235, col_offset=42,
      end_lineno=235, end_col_offset=63), ctx=Load(), lineno=235, col_offset=38, end_lineno=235,
      end_col_offset=64), lineno=235, col_offset=24, end_lineno=235, end_col_offset=64),
      Assign(targets=[Name(id=''context'', ctx=Store(), lineno=236, col_offset=24,
      end_lineno=236, end_col_offset=31)], value=Subscript(value=Name(id=''method_info'',
      ctx=Load(), lineno=236, col_offset=34, end_lineno=236, end_col_offset=45), slice=Constant(value=''method_code'',
      lineno=236, col_offset=46, end_lineno=236, end_col_offset=59), ctx=Load(), lineno=236,
      col_offset=34, end_lineno=236, end_col_offset=60), lineno=236, col_offset=24,
      end_lineno=236, end_col_offset=60), Assign(targets=[Name(id=''mapping'', ctx=Store(),
      lineno=237, col_offset=24, end_lineno=237, end_col_offset=31)], value=Dict(keys=[Constant(value=''class_name'',
      lineno=237, col_offset=35, end_lineno=237, end_col_offset=47), Constant(value=''method_name'',
      lineno=237, col_offset=61, end_lineno=237, end_col_offset=74)], values=[Name(id=''class_name'',
      ctx=Load(), lineno=237, col_offset=49, end_lineno=237, end_col_offset=59), Name(id=''method_name'',
      ctx=Load(), lineno=237, col_offset=76, end_lineno=237, end_col_offset=87)],
      lineno=237, col_offset=34, end_lineno=237, end_col_offset=88), lineno=237, col_offset=24,
      end_lineno=237, end_col_offset=88), Assign(targets=[Name(id=''query'', ctx=Store(),
      lineno=238, col_offset=24, end_lineno=238, end_col_offset=29)], value=Call(func=Attribute(value=Name(id=''question_text'',
      ctx=Load(), lineno=238, col_offset=32, end_lineno=238, end_col_offset=45), attr=''format'',
      ctx=Load(), lineno=238, col_offset=32, end_lineno=238, end_col_offset=52), args=[],
      keywords=[keyword(arg=''filename'', value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=238, col_offset=62, end_lineno=238, end_col_offset=66), attr=''base_name'',
      ctx=Load(), lineno=238, col_offset=62, end_lineno=238, end_col_offset=76), lineno=238,
      col_offset=53, end_lineno=238, end_col_offset=76), keyword(value=Name(id=''mapping'',
      ctx=Load(), lineno=238, col_offset=80, end_lineno=238, end_col_offset=87), lineno=238,
      col_offset=78, end_lineno=238, end_col_offset=87)], lineno=238, col_offset=32,
      end_lineno=238, end_col_offset=88), lineno=238, col_offset=24, end_lineno=238,
      end_col_offset=88), Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=239, col_offset=24, end_lineno=239, end_col_offset=28), attr=''process_question'',
      ctx=Load(), lineno=239, col_offset=24, end_lineno=239, end_col_offset=45), args=[Name(id=''question_type'',
      ctx=Load(), lineno=239, col_offset=46, end_lineno=239, end_col_offset=59), Name(id=''question_id'',
      ctx=Load(), lineno=239, col_offset=61, end_lineno=239, end_col_offset=72), Name(id=''query'',
      ctx=Load(), lineno=239, col_offset=74, end_lineno=239, end_col_offset=79), Name(id=''context'',
      ctx=Load(), lineno=239, col_offset=81, end_lineno=239, end_col_offset=88), Name(id=''method_info'',
      ctx=Load(), lineno=239, col_offset=90, end_lineno=239, end_col_offset=101)],
      keywords=[], lineno=239, col_offset=24, end_lineno=239, end_col_offset=102),
      lineno=239, col_offset=24, end_lineno=239, end_col_offset=102)], orelse=[],
      lineno=234, col_offset=20, end_lineno=239, end_col_offset=102)], orelse=[],
      lineno=233, col_offset=16, end_lineno=239, end_col_offset=102)], orelse=[],
      lineno=232, col_offset=12, end_lineno=239, end_col_offset=102)], orelse=[For(target=Tuple(elts=[Name(id=''name'',
      ctx=Store(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=20),
      Name(id=''info'', ctx=Store(), lineno=241, col_offset=22, end_lineno=241, end_col_offset=26)],
      ctx=Store(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=26),
      iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=241, col_offset=30, end_lineno=241, end_col_offset=34), attr=''file_details'',
      ctx=Load(), lineno=241, col_offset=30, end_lineno=241, end_col_offset=47), slice=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=241, col_offset=48, end_lineno=241, end_col_offset=52), attr=''question_mapping'',
      ctx=Load(), lineno=241, col_offset=48, end_lineno=241, end_col_offset=69), slice=Name(id=''question_type'',
      ctx=Load(), lineno=241, col_offset=70, end_lineno=241, end_col_offset=83), ctx=Load(),
      lineno=241, col_offset=48, end_lineno=241, end_col_offset=84), ctx=Load(), lineno=241,
      col_offset=30, end_lineno=241, end_col_offset=85), attr=''items'', ctx=Load(),
      lineno=241, col_offset=30, end_lineno=241, end_col_offset=91), args=[], keywords=[],
      lineno=241, col_offset=30, end_lineno=241, end_col_offset=93), body=[Assign(targets=[Name(id=''context'',
      ctx=Store(), lineno=242, col_offset=16, end_lineno=242, end_col_offset=23)],
      value=Subscript(value=Name(id=''info'', ctx=Load(), lineno=242, col_offset=26,
      end_lineno=242, end_col_offset=30), slice=JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=242, col_offset=34, end_lineno=242, end_col_offset=47), conversion=-1,
      lineno=242, col_offset=31, end_lineno=242, end_col_offset=54), Constant(value=''_code'',
      lineno=242, col_offset=31, end_lineno=242, end_col_offset=54)], lineno=242,
      col_offset=31, end_lineno=242, end_col_offset=54), ctx=Load(), lineno=242, col_offset=26,
      end_lineno=242, end_col_offset=55), lineno=242, col_offset=16, end_lineno=242,
      end_col_offset=55), Assign(targets=[Name(id=''mapping'', ctx=Store(), lineno=243,
      col_offset=16, end_lineno=243, end_col_offset=23)], value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=243, col_offset=30, end_lineno=243, end_col_offset=43), conversion=-1,
      lineno=243, col_offset=27, end_lineno=243, end_col_offset=50), Constant(value=''_name'',
      lineno=243, col_offset=27, end_lineno=243, end_col_offset=50)], lineno=243,
      col_offset=27, end_lineno=243, end_col_offset=50)], values=[Name(id=''name'',
      ctx=Load(), lineno=243, col_offset=52, end_lineno=243, end_col_offset=56)],
      lineno=243, col_offset=26, end_lineno=243, end_col_offset=57), lineno=243, col_offset=16,
      end_lineno=243, end_col_offset=57), If(test=BoolOp(op=And(), values=[Compare(left=Name(id=''question_id'',
      ctx=Load(), lineno=244, col_offset=19, end_lineno=244, end_col_offset=30), ops=[Eq()],
      comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=244, col_offset=37, end_lineno=244, end_col_offset=50), conversion=-1,
      lineno=244, col_offset=34, end_lineno=244, end_col_offset=69), Constant(value=''_variable_purpose'',
      lineno=244, col_offset=34, end_lineno=244, end_col_offset=69)], lineno=244,
      col_offset=34, end_lineno=244, end_col_offset=69)], lineno=244, col_offset=19,
      end_lineno=244, end_col_offset=69), Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=244, col_offset=74, end_lineno=244, end_col_offset=78), attr=''use_llm'',
      ctx=Load(), lineno=244, col_offset=74, end_lineno=244, end_col_offset=86)],
      lineno=244, col_offset=19, end_lineno=244, end_col_offset=86), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=245, col_offset=20, end_lineno=245, end_col_offset=24), attr=''process_items'',
      ctx=Load(), lineno=245, col_offset=20, end_lineno=245, end_col_offset=38), args=[Name(id=''question_type'',
      ctx=Load(), lineno=245, col_offset=39, end_lineno=245, end_col_offset=52), Name(id=''question_id'',
      ctx=Load(), lineno=245, col_offset=54, end_lineno=245, end_col_offset=65), Name(id=''question_text'',
      ctx=Load(), lineno=245, col_offset=67, end_lineno=245, end_col_offset=80), Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=245, col_offset=82, end_lineno=245, end_col_offset=86), attr=''base_name'',
      ctx=Load(), lineno=245, col_offset=82, end_lineno=245, end_col_offset=96), Name(id=''name'',
      ctx=Load(), lineno=245, col_offset=98, end_lineno=245, end_col_offset=102),
      Name(id=''info'', ctx=Load(), lineno=245, col_offset=104, end_lineno=245, end_col_offset=108),
      Name(id=''context'', ctx=Load(), lineno=245, col_offset=110, end_lineno=245,
      end_col_offset=117), JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=245, col_offset=122, end_lineno=245, end_col_offset=135),
      conversion=-1, lineno=245, col_offset=119, end_lineno=245, end_col_offset=147),
      Constant(value=''_variables'', lineno=245, col_offset=119, end_lineno=245, end_col_offset=147)],
      lineno=245, col_offset=119, end_lineno=245, end_col_offset=147)], keywords=[],
      lineno=245, col_offset=20, end_lineno=245, end_col_offset=148), lineno=245,
      col_offset=20, end_lineno=245, end_col_offset=148)], orelse=[If(test=Compare(left=Name(id=''question_id'',
      ctx=Load(), lineno=246, col_offset=21, end_lineno=246, end_col_offset=32), ops=[NotEq()],
      comparators=[JoinedStr(values=[FormattedValue(value=Name(id=''question_type'',
      ctx=Load(), lineno=246, col_offset=39, end_lineno=246, end_col_offset=52), conversion=-1,
      lineno=246, col_offset=36, end_lineno=246, end_col_offset=71), Constant(value=''_variable_purpose'',
      lineno=246, col_offset=36, end_lineno=246, end_col_offset=71)], lineno=246,
      col_offset=36, end_lineno=246, end_col_offset=71)], lineno=246, col_offset=21,
      end_lineno=246, end_col_offset=71), body=[Assign(targets=[Name(id=''query'',
      ctx=Store(), lineno=247, col_offset=20, end_lineno=247, end_col_offset=25)],
      value=Call(func=Attribute(value=Name(id=''question_text'', ctx=Load(), lineno=247,
      col_offset=28, end_lineno=247, end_col_offset=41), attr=''format'', ctx=Load(),
      lineno=247, col_offset=28, end_lineno=247, end_col_offset=48), args=[], keywords=[keyword(arg=''filename'',
      value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=247, col_offset=58,
      end_lineno=247, end_col_offset=62), attr=''base_name'', ctx=Load(), lineno=247,
      col_offset=58, end_lineno=247, end_col_offset=72), lineno=247, col_offset=49,
      end_lineno=247, end_col_offset=72), keyword(value=Name(id=''mapping'', ctx=Load(),
      lineno=247, col_offset=76, end_lineno=247, end_col_offset=83), lineno=247, col_offset=74,
      end_lineno=247, end_col_offset=83)], lineno=247, col_offset=28, end_lineno=247,
      end_col_offset=84), lineno=247, col_offset=20, end_lineno=247, end_col_offset=84),
      Expr(value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=248,
      col_offset=20, end_lineno=248, end_col_offset=24), attr=''process_question'',
      ctx=Load(), lineno=248, col_offset=20, end_lineno=248, end_col_offset=41), args=[Name(id=''question_type'',
      ctx=Load(), lineno=248, col_offset=42, end_lineno=248, end_col_offset=55), Name(id=''question_id'',
      ctx=Load(), lineno=248, col_offset=57, end_lineno=248, end_col_offset=68), Name(id=''query'',
      ctx=Load(), lineno=248, col_offset=70, end_lineno=248, end_col_offset=75), Name(id=''context'',
      ctx=Load(), lineno=248, col_offset=77, end_lineno=248, end_col_offset=84), Name(id=''info'',
      ctx=Load(), lineno=248, col_offset=86, end_lineno=248, end_col_offset=90)],
      keywords=[], lineno=248, col_offset=20, end_lineno=248, end_col_offset=91),
      lineno=248, col_offset=20, end_lineno=248, end_col_offset=91)], orelse=[], lineno=246,
      col_offset=16, end_lineno=248, end_col_offset=91)], lineno=244, col_offset=16,
      end_lineno=248, end_col_offset=91)], orelse=[], lineno=241, col_offset=12, end_lineno=248,
      end_col_offset=91)], lineno=231, col_offset=8, end_lineno=248, end_col_offset=91)],
      decorator_list=[], returns=Constant(value=None, lineno=230, col_offset=103,
      end_lineno=230, end_col_offset=107), lineno=230, col_offset=4, end_lineno=248,
      end_col_offset=91), FunctionDef(name=''generate'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=250, col_offset=17, end_lineno=250, end_col_offset=21)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id=''question'',
      ctx=Store(), lineno=251, col_offset=12, end_lineno=251, end_col_offset=20),
      iter=Attribute(value=Name(id=''self'', ctx=Load(), lineno=251, col_offset=24,
      end_lineno=251, end_col_offset=28), attr=''questions'', ctx=Load(), lineno=251,
      col_offset=24, end_lineno=251, end_col_offset=38), body=[Assign(targets=[Name(id=''question_id'',
      ctx=Store(), lineno=252, col_offset=12, end_lineno=252, end_col_offset=23)],
      value=Subscript(value=Name(id=''question'', ctx=Load(), lineno=252, col_offset=26,
      end_lineno=252, end_col_offset=34), slice=Constant(value=''id'', lineno=252,
      col_offset=35, end_lineno=252, end_col_offset=39), ctx=Load(), lineno=252, col_offset=26,
      end_lineno=252, end_col_offset=40), lineno=252, col_offset=12, end_lineno=252,
      end_col_offset=40), Assign(targets=[Name(id=''question_text'', ctx=Store(),
      lineno=253, col_offset=12, end_lineno=253, end_col_offset=25)], value=Subscript(value=Name(id=''question'',
      ctx=Load(), lineno=253, col_offset=28, end_lineno=253, end_col_offset=36), slice=Constant(value=''text'',
      lineno=253, col_offset=37, end_lineno=253, end_col_offset=43), ctx=Load(), lineno=253,
      col_offset=28, end_lineno=253, end_col_offset=44), lineno=253, col_offset=12,
      end_lineno=253, end_col_offset=44), Assign(targets=[Name(id=''question_type'',
      ctx=Store(), lineno=254, col_offset=12, end_lineno=254, end_col_offset=25)],
      value=Subscript(value=Name(id=''question'', ctx=Load(), lineno=254, col_offset=28,
      end_lineno=254, end_col_offset=36), slice=Constant(value=''type'', lineno=254,
      col_offset=37, end_lineno=254, end_col_offset=43), ctx=Load(), lineno=254, col_offset=28,
      end_lineno=254, end_col_offset=44), lineno=254, col_offset=12, end_lineno=254,
      end_col_offset=44), If(test=Compare(left=Name(id=''question_type'', ctx=Load(),
      lineno=255, col_offset=15, end_lineno=255, end_col_offset=28), ops=[Eq()], comparators=[Constant(value=''file'',
      lineno=255, col_offset=32, end_lineno=255, end_col_offset=38)], lineno=255,
      col_offset=15, end_lineno=255, end_col_offset=38), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=256, col_offset=16, end_lineno=256, end_col_offset=20), attr=''process_file_question'',
      ctx=Load(), lineno=256, col_offset=16, end_lineno=256, end_col_offset=42), args=[Name(id=''question_type'',
      ctx=Load(), lineno=256, col_offset=43, end_lineno=256, end_col_offset=56), Name(id=''question_id'',
      ctx=Load(), lineno=256, col_offset=58, end_lineno=256, end_col_offset=69), Name(id=''question_text'',
      ctx=Load(), lineno=256, col_offset=71, end_lineno=256, end_col_offset=84)],
      keywords=[], lineno=256, col_offset=16, end_lineno=256, end_col_offset=85),
      lineno=256, col_offset=16, end_lineno=256, end_col_offset=85)], orelse=[If(test=Compare(left=Name(id=''question_type'',
      ctx=Load(), lineno=257, col_offset=17, end_lineno=257, end_col_offset=30), ops=[In()],
      comparators=[List(elts=[Constant(value=''function'', lineno=257, col_offset=35,
      end_lineno=257, end_col_offset=45), Constant(value=''class'', lineno=257, col_offset=47,
      end_lineno=257, end_col_offset=54), Constant(value=''method'', lineno=257, col_offset=56,
      end_lineno=257, end_col_offset=64)], ctx=Load(), lineno=257, col_offset=34,
      end_lineno=257, end_col_offset=65)], lineno=257, col_offset=17, end_lineno=257,
      end_col_offset=65), body=[Expr(value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=258, col_offset=16, end_lineno=258, end_col_offset=20), attr=''process_func_class_question'',
      ctx=Load(), lineno=258, col_offset=16, end_lineno=258, end_col_offset=48), args=[Name(id=''question_type'',
      ctx=Load(), lineno=258, col_offset=49, end_lineno=258, end_col_offset=62), Name(id=''question_id'',
      ctx=Load(), lineno=258, col_offset=64, end_lineno=258, end_col_offset=75), Name(id=''question_text'',
      ctx=Load(), lineno=258, col_offset=77, end_lineno=258, end_col_offset=90)],
      keywords=[], lineno=258, col_offset=16, end_lineno=258, end_col_offset=91),
      lineno=258, col_offset=16, end_lineno=258, end_col_offset=91)], orelse=[], lineno=257,
      col_offset=12, end_lineno=258, end_col_offset=91)], lineno=255, col_offset=12,
      end_lineno=258, end_col_offset=91)], orelse=[], lineno=251, col_offset=8, end_lineno=258,
      end_col_offset=91), Return(value=Tuple(elts=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=259, col_offset=15, end_lineno=259, end_col_offset=19), attr=''qa_list'',
      ctx=Load(), lineno=259, col_offset=15, end_lineno=259, end_col_offset=27), Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=259, col_offset=29, end_lineno=259, end_col_offset=33), attr=''instruct_list'',
      ctx=Load(), lineno=259, col_offset=29, end_lineno=259, end_col_offset=47)],
      ctx=Load(), lineno=259, col_offset=15, end_lineno=259, end_col_offset=47), lineno=259,
      col_offset=8, end_lineno=259, end_col_offset=47)], decorator_list=[], returns=Subscript(value=Name(id=''tuple'',
      ctx=Load(), lineno=250, col_offset=26, end_lineno=250, end_col_offset=31), slice=Tuple(elts=[Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=250, col_offset=32, end_lineno=250, end_col_offset=36), slice=Name(id=''Dict'',
      ctx=Load(), lineno=250, col_offset=37, end_lineno=250, end_col_offset=41), ctx=Load(),
      lineno=250, col_offset=32, end_lineno=250, end_col_offset=42), Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=250, col_offset=44, end_lineno=250, end_col_offset=48), slice=Name(id=''Dict'',
      ctx=Load(), lineno=250, col_offset=49, end_lineno=250, end_col_offset=53), ctx=Load(),
      lineno=250, col_offset=44, end_lineno=250, end_col_offset=54)], ctx=Load(),
      lineno=250, col_offset=32, end_lineno=250, end_col_offset=54), ctx=Load(), lineno=250,
      col_offset=26, end_lineno=250, end_col_offset=55), lineno=250, col_offset=4,
      end_lineno=259, end_col_offset=47)], decorator_list=[], lineno=109, col_offset=0,
      end_lineno=259, end_col_offset=47)'
    class_docstring: "A class used to generate JSON formatted dictionary outputs for\
      \ a Python \nfile.\nAttributes:\n    file_path (str): The path to the Python\
      \ file.\n    file_details (Dict): A dictionary containing details of the Python\n\
      \        file.\n    base_name (str): The base name of the Python file.\n   \
      \ questions (List): A list of questions for which responses are to be\n    \
      \    generated.\n    qa_list (List): A list to store the generated question-answer\
      \ pairs.\n    instruct_list (List): A list to store the generated instructions.\n\
      \    question_mapping (Dict): A dictionary mapping question types to their\n\
      \        corresponding keys in the file details.\n    use_llm (bool): A flag\
      \ indicating whether to use a language model for\n        generating responses.\n\
      \    llm (AutoModelForCausalLM): The language model to be used for\n       \
      \ generating responses.\nMethods:\n    clean_and_get_unique_elements(input_str:\
      \ str) -> str: Cleans an input \n        string and returns a string of unique\
      \ elements.\n    add_to_list(list_to_update: List[Dict], query: str, response:\
      \ str,\n        additional_field=None) -> List[Dict]: Adds a response to a list.\n\
      \    get_response_from_llm(query: str, context: str) -> str: Gets a \n     \
      \   response from the language model.\n    get_variable_purpose(question_id:\
      \ str, question_text: str, base_name:\n        str, name: str, info: Dict, context:\
      \ str, variable_type: str) -> \n            None: Processes questions related\
      \ to the purpose of a variable.\n    process_question(question_id: str, query:\
      \ str, context: str, info) -> \n        None: Processes a question and adds\
      \ the generated response to the\n        qa_list and instruct_list.\n    process_file_question(question_id:\
      \ str, question_text: str) -> None:\n        Processes questions related to\
      \ a file.\n    process_func_class_question(question_type: str, question_id:\
      \ str, \n        question_text: str) -> None: Processes questions related to\
      \ a \n        function or class.\n    generate() -> Tuple[List[Dict], List[Dict]]:\
      \ Generates responses for\n        all the questions and returns the qa_list\
      \ and instruct_list."
    class_inputs: null
    class_defaults: null
    class_returns:
    - ''', ''.join(cleaned_elements)'
    - list_to_update
    - response
    - (self.qa_list, self.instruct_list)
    - ''''''
    class_calls:
    - self.file_details['classes'].items
    - self.clean_and_get_unique_elements(str(info[item_type])).split
    - get_model
    - key.startswith
    - self.process_file_question
    - element.strip
    - item.strip
    - logger.error
    - logging.info
    - set
    - response_str.strip
    - self.config['prompt_template'].format
    - str
    - self.instruct_list.append
    - list_to_update.append
    - question_text.format
    - len
    - self.file_details[self.question_mapping[question_type]].items
    - re.sub
    - ''', ''.join'
    - self.llm
    - self.process_question
    - item_type.split
    - re.sub('\\s+', ' ', input_str).split
    - self.get_response_from_llm
    - question_id.endswith
    - self.process_func_class_question
    - info.get
    - class_info.items
    - response.strip
    - self.qa_list.append
    - self.process_items
    - self.clean_and_get_unique_elements
    class_variables:
    - question_id
    - question_text
    - query
    - response_str
    - method_name
    - question_type
    - cleaned_elements
    - items
    - mapping
    - prompt
    - response
    - context
    - info
    class_decorators: []
    class_annotations: []
    class_properties:
    - self.llm
    - self.instruct_list
    - self.use_summary
    - self.questions
    - self.file_details
    - self.base_name
    - self.config
    - self.question_mapping
    - self.use_llm
    - self.qa_list
    - self.file_path
    - self.llm_config
    class_attributes:
    - file_path
    - file_details
    - base_name
    - questions
    - qa_list
    - instruct_list
    - question_mapping
    - use_llm
    - config
    - use_summary
    - llm
    - llm_config
    - llm
    - use_llm
    - llm_config
    - llm
    class_methods:
    - clean_and_get_unique_elements
    - add_to_list
    - get_response_from_llm
    - process_items
    - process_question
    - process_file_question
    - process_func_class_question
    - generate
    class_inheritance: []
    class_static_methods:
    - clean_and_get_unique_elements
    - add_to_list
    class_method___init__:
      method_name: __init__
      method_code: "def __init__(self, file_path: str, file_details: Dict, base_name:\
        \ str, questions: List[Dict], use_llm: bool, use_summary: bool, config: Dict):\n\
        \    self.file_path = file_path\n    self.file_details = file_details\n  \
        \  self.base_name = base_name\n    self.questions = questions\n    self.qa_list\
        \ = []\n    self.instruct_list = []\n    self.question_mapping = {'file':\
        \ 'file', 'function': 'functions', 'class': 'classes', 'method': 'classes'}\n\
        \    self.use_llm = use_llm\n    self.config = config\n    if self.use_llm:\n\
        \        try:\n            self.llm_config = config['inference_model']\n \
        \           self.llm = get_model(self.llm_config)\n        except (FileNotFoundError,\
        \ yaml.YAMLError, ImportError, AttributeError) as e:\n            logger.error(f'Failed\
        \ to load configuration file: {e}')\n            self.use_llm = False\n  \
        \          self.llm_config = None\n            self.llm = None\n    else:\n\
        \        self.llm = None\n    self.use_summary = use_summary"
      method_ast: 'FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
        lineno=149, col_offset=17, end_lineno=149, end_col_offset=21), arg(arg=''file_path'',
        annotation=Name(id=''str'', ctx=Load(), lineno=149, col_offset=34, end_lineno=149,
        end_col_offset=37), lineno=149, col_offset=23, end_lineno=149, end_col_offset=37),
        arg(arg=''file_details'', annotation=Name(id=''Dict'', ctx=Load(), lineno=149,
        col_offset=53, end_lineno=149, end_col_offset=57), lineno=149, col_offset=39,
        end_lineno=149, end_col_offset=57), arg(arg=''base_name'', annotation=Name(id=''str'',
        ctx=Load(), lineno=149, col_offset=70, end_lineno=149, end_col_offset=73),
        lineno=149, col_offset=59, end_lineno=149, end_col_offset=73), arg(arg=''questions'',
        annotation=Subscript(value=Name(id=''List'', ctx=Load(), lineno=149, col_offset=86,
        end_lineno=149, end_col_offset=90), slice=Name(id=''Dict'', ctx=Load(), lineno=149,
        col_offset=91, end_lineno=149, end_col_offset=95), ctx=Load(), lineno=149,
        col_offset=86, end_lineno=149, end_col_offset=96), lineno=149, col_offset=75,
        end_lineno=149, end_col_offset=96), arg(arg=''use_llm'', annotation=Name(id=''bool'',
        ctx=Load(), lineno=149, col_offset=107, end_lineno=149, end_col_offset=111),
        lineno=149, col_offset=98, end_lineno=149, end_col_offset=111), arg(arg=''use_summary'',
        annotation=Name(id=''bool'', ctx=Load(), lineno=149, col_offset=126, end_lineno=149,
        end_col_offset=130), lineno=149, col_offset=113, end_lineno=149, end_col_offset=130),
        arg(arg=''config'', annotation=Name(id=''Dict'', ctx=Load(), lineno=149, col_offset=140,
        end_lineno=149, end_col_offset=144), lineno=149, col_offset=132, end_lineno=149,
        end_col_offset=144)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=150, col_offset=8, end_lineno=150, end_col_offset=12),
        attr=''file_path'', ctx=Store(), lineno=150, col_offset=8, end_lineno=150,
        end_col_offset=22)], value=Name(id=''file_path'', ctx=Load(), lineno=150,
        col_offset=25, end_lineno=150, end_col_offset=34), lineno=150, col_offset=8,
        end_lineno=150, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=151, col_offset=8, end_lineno=151, end_col_offset=12),
        attr=''file_details'', ctx=Store(), lineno=151, col_offset=8, end_lineno=151,
        end_col_offset=25)], value=Name(id=''file_details'', ctx=Load(), lineno=151,
        col_offset=28, end_lineno=151, end_col_offset=40), lineno=151, col_offset=8,
        end_lineno=151, end_col_offset=40), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=152, col_offset=8, end_lineno=152, end_col_offset=12),
        attr=''base_name'', ctx=Store(), lineno=152, col_offset=8, end_lineno=152,
        end_col_offset=22)], value=Name(id=''base_name'', ctx=Load(), lineno=152,
        col_offset=25, end_lineno=152, end_col_offset=34), lineno=152, col_offset=8,
        end_lineno=152, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=153, col_offset=8, end_lineno=153, end_col_offset=12),
        attr=''questions'', ctx=Store(), lineno=153, col_offset=8, end_lineno=153,
        end_col_offset=22)], value=Name(id=''questions'', ctx=Load(), lineno=153,
        col_offset=25, end_lineno=153, end_col_offset=34), lineno=153, col_offset=8,
        end_lineno=153, end_col_offset=34), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=154, col_offset=8, end_lineno=154, end_col_offset=12),
        attr=''qa_list'', ctx=Store(), lineno=154, col_offset=8, end_lineno=154, end_col_offset=20)],
        value=List(elts=[], ctx=Load(), lineno=154, col_offset=23, end_lineno=154,
        end_col_offset=25), lineno=154, col_offset=8, end_lineno=154, end_col_offset=25),
        Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=155,
        col_offset=8, end_lineno=155, end_col_offset=12), attr=''instruct_list'',
        ctx=Store(), lineno=155, col_offset=8, end_lineno=155, end_col_offset=26)],
        value=List(elts=[], ctx=Load(), lineno=155, col_offset=29, end_lineno=155,
        end_col_offset=31), lineno=155, col_offset=8, end_lineno=155, end_col_offset=31),
        Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=156,
        col_offset=8, end_lineno=156, end_col_offset=12), attr=''question_mapping'',
        ctx=Store(), lineno=156, col_offset=8, end_lineno=156, end_col_offset=29)],
        value=Dict(keys=[Constant(value=''file'', lineno=157, col_offset=12, end_lineno=157,
        end_col_offset=18), Constant(value=''function'', lineno=158, col_offset=12,
        end_lineno=158, end_col_offset=22), Constant(value=''class'', lineno=159,
        col_offset=12, end_lineno=159, end_col_offset=19), Constant(value=''method'',
        lineno=160, col_offset=12, end_lineno=160, end_col_offset=20)], values=[Constant(value=''file'',
        lineno=157, col_offset=20, end_lineno=157, end_col_offset=26), Constant(value=''functions'',
        lineno=158, col_offset=24, end_lineno=158, end_col_offset=35), Constant(value=''classes'',
        lineno=159, col_offset=21, end_lineno=159, end_col_offset=30), Constant(value=''classes'',
        lineno=160, col_offset=22, end_lineno=160, end_col_offset=31)], lineno=156,
        col_offset=32, end_lineno=161, end_col_offset=9), lineno=156, col_offset=8,
        end_lineno=161, end_col_offset=9), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=162, col_offset=8, end_lineno=162, end_col_offset=12),
        attr=''use_llm'', ctx=Store(), lineno=162, col_offset=8, end_lineno=162, end_col_offset=20)],
        value=Name(id=''use_llm'', ctx=Load(), lineno=162, col_offset=23, end_lineno=162,
        end_col_offset=30), lineno=162, col_offset=8, end_lineno=162, end_col_offset=30),
        Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=163,
        col_offset=8, end_lineno=163, end_col_offset=12), attr=''config'', ctx=Store(),
        lineno=163, col_offset=8, end_lineno=163, end_col_offset=19)], value=Name(id=''config'',
        ctx=Load(), lineno=163, col_offset=22, end_lineno=163, end_col_offset=28),
        lineno=163, col_offset=8, end_lineno=163, end_col_offset=28), If(test=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=164, col_offset=11, end_lineno=164, end_col_offset=15),
        attr=''use_llm'', ctx=Load(), lineno=164, col_offset=11, end_lineno=164, end_col_offset=23),
        body=[Try(body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=166, col_offset=16, end_lineno=166, end_col_offset=20), attr=''llm_config'',
        ctx=Store(), lineno=166, col_offset=16, end_lineno=166, end_col_offset=31)],
        value=Subscript(value=Name(id=''config'', ctx=Load(), lineno=166, col_offset=34,
        end_lineno=166, end_col_offset=40), slice=Constant(value=''inference_model'',
        lineno=166, col_offset=41, end_lineno=166, end_col_offset=58), ctx=Load(),
        lineno=166, col_offset=34, end_lineno=166, end_col_offset=59), lineno=166,
        col_offset=16, end_lineno=166, end_col_offset=59), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=20),
        attr=''llm'', ctx=Store(), lineno=167, col_offset=16, end_lineno=167, end_col_offset=24)],
        value=Call(func=Name(id=''get_model'', ctx=Load(), lineno=167, col_offset=27,
        end_lineno=167, end_col_offset=36), args=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=167, col_offset=37, end_lineno=167, end_col_offset=41),
        attr=''llm_config'', ctx=Load(), lineno=167, col_offset=37, end_lineno=167,
        end_col_offset=52)], keywords=[], lineno=167, col_offset=27, end_lineno=167,
        end_col_offset=53), lineno=167, col_offset=16, end_lineno=167, end_col_offset=53)],
        handlers=[ExceptHandler(type=Tuple(elts=[Name(id=''FileNotFoundError'', ctx=Load(),
        lineno=168, col_offset=20, end_lineno=168, end_col_offset=37), Attribute(value=Name(id=''yaml'',
        ctx=Load(), lineno=168, col_offset=39, end_lineno=168, end_col_offset=43),
        attr=''YAMLError'', ctx=Load(), lineno=168, col_offset=39, end_lineno=168,
        end_col_offset=53), Name(id=''ImportError'', ctx=Load(), lineno=168, col_offset=55,
        end_lineno=168, end_col_offset=66), Name(id=''AttributeError'', ctx=Load(),
        lineno=168, col_offset=68, end_lineno=168, end_col_offset=82)], ctx=Load(),
        lineno=168, col_offset=19, end_lineno=168, end_col_offset=83), name=''e'',
        body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'', ctx=Load(),
        lineno=169, col_offset=16, end_lineno=169, end_col_offset=22), attr=''error'',
        ctx=Load(), lineno=169, col_offset=16, end_lineno=169, end_col_offset=28),
        args=[JoinedStr(values=[Constant(value=''Failed to load configuration file:
        '', lineno=169, col_offset=29, end_lineno=169, end_col_offset=70), FormattedValue(value=Name(id=''e'',
        ctx=Load(), lineno=169, col_offset=67, end_lineno=169, end_col_offset=68),
        conversion=-1, lineno=169, col_offset=29, end_lineno=169, end_col_offset=70)],
        lineno=169, col_offset=29, end_lineno=169, end_col_offset=70)], keywords=[],
        lineno=169, col_offset=16, end_lineno=169, end_col_offset=71), lineno=169,
        col_offset=16, end_lineno=169, end_col_offset=71), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=170, col_offset=16, end_lineno=170, end_col_offset=20),
        attr=''use_llm'', ctx=Store(), lineno=170, col_offset=16, end_lineno=170,
        end_col_offset=28)], value=Constant(value=False, lineno=170, col_offset=31,
        end_lineno=170, end_col_offset=36), lineno=170, col_offset=16, end_lineno=170,
        end_col_offset=36), Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(),
        lineno=171, col_offset=16, end_lineno=171, end_col_offset=20), attr=''llm_config'',
        ctx=Store(), lineno=171, col_offset=16, end_lineno=171, end_col_offset=31)],
        value=Constant(value=None, lineno=171, col_offset=34, end_lineno=171, end_col_offset=38),
        lineno=171, col_offset=16, end_lineno=171, end_col_offset=38), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=172, col_offset=16, end_lineno=172, end_col_offset=20),
        attr=''llm'', ctx=Store(), lineno=172, col_offset=16, end_lineno=172, end_col_offset=24)],
        value=Constant(value=None, lineno=172, col_offset=27, end_lineno=172, end_col_offset=31),
        lineno=172, col_offset=16, end_lineno=172, end_col_offset=31)], lineno=168,
        col_offset=12, end_lineno=172, end_col_offset=31)], orelse=[], finalbody=[],
        lineno=165, col_offset=12, end_lineno=172, end_col_offset=31)], orelse=[Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=174, col_offset=12, end_lineno=174, end_col_offset=16),
        attr=''llm'', ctx=Store(), lineno=174, col_offset=12, end_lineno=174, end_col_offset=20)],
        value=Constant(value=None, lineno=174, col_offset=23, end_lineno=174, end_col_offset=27),
        lineno=174, col_offset=12, end_lineno=174, end_col_offset=27)], lineno=164,
        col_offset=8, end_lineno=174, end_col_offset=27), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=175, col_offset=8, end_lineno=175, end_col_offset=12),
        attr=''use_summary'', ctx=Store(), lineno=175, col_offset=8, end_lineno=175,
        end_col_offset=24)], value=Name(id=''use_summary'', ctx=Load(), lineno=175,
        col_offset=27, end_lineno=175, end_col_offset=38), lineno=175, col_offset=8,
        end_lineno=175, end_col_offset=38)], decorator_list=[], lineno=149, col_offset=4,
        end_lineno=175, end_col_offset=38)'
      method_docstring: null
      method_inputs:
      - self
      - file_path
      - file_details
      - base_name
      - questions
      - use_llm
      - use_summary
      - config
      method_defaults: []
      method_returns: []
      method_calls:
      - get_model
      - logger.error
      method_variables: []
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.llm
      - self.instruct_list
      - self.use_summary
      - self.questions
      - self.file_details
      - self.base_name
      - self.config
      - self.question_mapping
      - self.use_llm
      - self.qa_list
      - self.file_path
      - self.llm_config
    class_method_clean_and_get_unique_elements:
      method_name: clean_and_get_unique_elements
      method_code: "@staticmethod\ndef clean_and_get_unique_elements(input_str: str)\
        \ -> str:\n    cleaned_elements = set((re.sub('[^\\\\w\\\\-_>\\\\s:/.]', '',\
        \ element.strip()) for element in re.sub('\\\\s+', ' ', input_str).split(',')))\n\
        \    return ', '.join(cleaned_elements)"
      method_ast: FunctionDef(name='clean_and_get_unique_elements', args=arguments(posonlyargs=[],
        args=[arg(arg='input_str', annotation=Name(id='str', ctx=Load(), lineno=178,
        col_offset=49, end_lineno=178, end_col_offset=52), lineno=178, col_offset=38,
        end_lineno=178, end_col_offset=52)], kwonlyargs=[], kw_defaults=[], defaults=[]),
        body=[Assign(targets=[Name(id='cleaned_elements', ctx=Store(), lineno=179,
        col_offset=8, end_lineno=179, end_col_offset=24)], value=Call(func=Name(id='set',
        ctx=Load(), lineno=179, col_offset=27, end_lineno=179, end_col_offset=30),
        args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='re', ctx=Load(),
        lineno=179, col_offset=31, end_lineno=179, end_col_offset=33), attr='sub',
        ctx=Load(), lineno=179, col_offset=31, end_lineno=179, end_col_offset=37),
        args=[Constant(value='[^\\w\\-_>\\s:/.]', lineno=179, col_offset=38, end_lineno=179,
        end_col_offset=55), Constant(value='', lineno=179, col_offset=57, end_lineno=179,
        end_col_offset=59), Call(func=Attribute(value=Name(id='element', ctx=Load(),
        lineno=179, col_offset=61, end_lineno=179, end_col_offset=68), attr='strip',
        ctx=Load(), lineno=179, col_offset=61, end_lineno=179, end_col_offset=74),
        args=[], keywords=[], lineno=179, col_offset=61, end_lineno=179, end_col_offset=76)],
        keywords=[], lineno=179, col_offset=31, end_lineno=179, end_col_offset=77),
        generators=[comprehension(target=Name(id='element', ctx=Store(), lineno=180,
        col_offset=35, end_lineno=180, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re',
        ctx=Load(), lineno=180, col_offset=46, end_lineno=180, end_col_offset=48),
        attr='sub', ctx=Load(), lineno=180, col_offset=46, end_lineno=180, end_col_offset=52),
        args=[Constant(value='\\s+', lineno=180, col_offset=53, end_lineno=180, end_col_offset=59),
        Constant(value=' ', lineno=180, col_offset=61, end_lineno=180, end_col_offset=64),
        Name(id='input_str', ctx=Load(), lineno=180, col_offset=66, end_lineno=180,
        end_col_offset=75)], keywords=[], lineno=180, col_offset=46, end_lineno=180,
        end_col_offset=76), attr='split', ctx=Load(), lineno=180, col_offset=46, end_lineno=180,
        end_col_offset=82), args=[Constant(value=',', lineno=180, col_offset=83, end_lineno=180,
        end_col_offset=86)], keywords=[], lineno=180, col_offset=46, end_lineno=180,
        end_col_offset=87), ifs=[], is_async=0)], lineno=179, col_offset=30, end_lineno=180,
        end_col_offset=88)], keywords=[], lineno=179, col_offset=27, end_lineno=180,
        end_col_offset=88), lineno=179, col_offset=8, end_lineno=180, end_col_offset=88),
        Return(value=Call(func=Attribute(value=Constant(value=', ', lineno=181, col_offset=15,
        end_lineno=181, end_col_offset=19), attr='join', ctx=Load(), lineno=181, col_offset=15,
        end_lineno=181, end_col_offset=24), args=[Name(id='cleaned_elements', ctx=Load(),
        lineno=181, col_offset=25, end_lineno=181, end_col_offset=41)], keywords=[],
        lineno=181, col_offset=15, end_lineno=181, end_col_offset=42), lineno=181,
        col_offset=8, end_lineno=181, end_col_offset=42)], decorator_list=[Name(id='staticmethod',
        ctx=Load(), lineno=177, col_offset=5, end_lineno=177, end_col_offset=17)],
        returns=Name(id='str', ctx=Load(), lineno=178, col_offset=57, end_lineno=178,
        end_col_offset=60), lineno=178, col_offset=4, end_lineno=181, end_col_offset=42)
      method_docstring: null
      method_inputs:
      - input_str
      method_defaults: []
      method_returns:
      - ''', ''.join(cleaned_elements)'
      method_calls:
      - re.sub('\\s+', ' ', input_str).split
      - element.strip
      - re.sub
      - ''', ''.join'
      - set
      method_variables:
      - cleaned_elements
      method_decorators:
      - staticmethod
      method_annotations: []
      method_properties: []
    class_method_add_to_list:
      method_name: add_to_list
      method_code: "@staticmethod\ndef add_to_list(list_to_update: List[Dict], query:\
        \ str, response: str, additional_field=None) -> List[Dict]:\n    if response\
        \ and response.strip() and (response != 'None'):\n        list_to_update.append({'instruction':\
        \ query, 'input': additional_field, 'output': response} if additional_field\
        \ else {'question': query, 'answer': response})\n    return list_to_update"
      method_ast: FunctionDef(name='add_to_list', args=arguments(posonlyargs=[], args=[arg(arg='list_to_update',
        annotation=Subscript(value=Name(id='List', ctx=Load(), lineno=184, col_offset=36,
        end_lineno=184, end_col_offset=40), slice=Name(id='Dict', ctx=Load(), lineno=184,
        col_offset=41, end_lineno=184, end_col_offset=45), ctx=Load(), lineno=184,
        col_offset=36, end_lineno=184, end_col_offset=46), lineno=184, col_offset=20,
        end_lineno=184, end_col_offset=46), arg(arg='query', annotation=Name(id='str',
        ctx=Load(), lineno=184, col_offset=55, end_lineno=184, end_col_offset=58),
        lineno=184, col_offset=48, end_lineno=184, end_col_offset=58), arg(arg='response',
        annotation=Name(id='str', ctx=Load(), lineno=184, col_offset=70, end_lineno=184,
        end_col_offset=73), lineno=184, col_offset=60, end_lineno=184, end_col_offset=73),
        arg(arg='additional_field', lineno=184, col_offset=75, end_lineno=184, end_col_offset=91)],
        kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None, lineno=184,
        col_offset=92, end_lineno=184, end_col_offset=96)]), body=[If(test=BoolOp(op=And(),
        values=[Name(id='response', ctx=Load(), lineno=185, col_offset=11, end_lineno=185,
        end_col_offset=19), Call(func=Attribute(value=Name(id='response', ctx=Load(),
        lineno=185, col_offset=24, end_lineno=185, end_col_offset=32), attr='strip',
        ctx=Load(), lineno=185, col_offset=24, end_lineno=185, end_col_offset=38),
        args=[], keywords=[], lineno=185, col_offset=24, end_lineno=185, end_col_offset=40),
        Compare(left=Name(id='response', ctx=Load(), lineno=185, col_offset=45, end_lineno=185,
        end_col_offset=53), ops=[NotEq()], comparators=[Constant(value='None', lineno=185,
        col_offset=57, end_lineno=185, end_col_offset=63)], lineno=185, col_offset=45,
        end_lineno=185, end_col_offset=63)], lineno=185, col_offset=11, end_lineno=185,
        end_col_offset=63), body=[Expr(value=Call(func=Attribute(value=Name(id='list_to_update',
        ctx=Load(), lineno=186, col_offset=12, end_lineno=186, end_col_offset=26),
        attr='append', ctx=Load(), lineno=186, col_offset=12, end_lineno=186, end_col_offset=33),
        args=[IfExp(test=Name(id='additional_field', ctx=Load(), lineno=188, col_offset=19,
        end_lineno=188, end_col_offset=35), body=Dict(keys=[Constant(value='instruction',
        lineno=187, col_offset=17, end_lineno=187, end_col_offset=30), Constant(value='input',
        lineno=187, col_offset=39, end_lineno=187, end_col_offset=46), Constant(value='output',
        lineno=187, col_offset=67, end_lineno=187, end_col_offset=75)], values=[Name(id='query',
        ctx=Load(), lineno=187, col_offset=32, end_lineno=187, end_col_offset=37),
        Name(id='additional_field', ctx=Load(), lineno=187, col_offset=49, end_lineno=187,
        end_col_offset=65), Name(id='response', ctx=Load(), lineno=187, col_offset=77,
        end_lineno=187, end_col_offset=85)], lineno=187, col_offset=16, end_lineno=187,
        end_col_offset=86), orelse=Dict(keys=[Constant(value='question', lineno=189,
        col_offset=17, end_lineno=189, end_col_offset=27), Constant(value='answer',
        lineno=189, col_offset=36, end_lineno=189, end_col_offset=44)], values=[Name(id='query',
        ctx=Load(), lineno=189, col_offset=29, end_lineno=189, end_col_offset=34),
        Name(id='response', ctx=Load(), lineno=189, col_offset=46, end_lineno=189,
        end_col_offset=54)], lineno=189, col_offset=16, end_lineno=189, end_col_offset=55),
        lineno=187, col_offset=16, end_lineno=189, end_col_offset=55)], keywords=[],
        lineno=186, col_offset=12, end_lineno=190, end_col_offset=13), lineno=186,
        col_offset=12, end_lineno=190, end_col_offset=13)], orelse=[], lineno=185,
        col_offset=8, end_lineno=190, end_col_offset=13), Return(value=Name(id='list_to_update',
        ctx=Load(), lineno=191, col_offset=15, end_lineno=191, end_col_offset=29),
        lineno=191, col_offset=8, end_lineno=191, end_col_offset=29)], decorator_list=[Name(id='staticmethod',
        ctx=Load(), lineno=183, col_offset=5, end_lineno=183, end_col_offset=17)],
        returns=Subscript(value=Name(id='List', ctx=Load(), lineno=184, col_offset=101,
        end_lineno=184, end_col_offset=105), slice=Name(id='Dict', ctx=Load(), lineno=184,
        col_offset=106, end_lineno=184, end_col_offset=110), ctx=Load(), lineno=184,
        col_offset=101, end_lineno=184, end_col_offset=111), lineno=184, col_offset=4,
        end_lineno=191, end_col_offset=29)
      method_docstring: null
      method_inputs:
      - list_to_update
      - query
      - response
      - additional_field
      method_defaults:
      - None
      method_returns:
      - list_to_update
      method_calls:
      - response.strip
      - list_to_update.append
      method_variables: []
      method_decorators:
      - staticmethod
      method_annotations: []
      method_properties: []
    class_method_get_response_from_llm:
      method_name: get_response_from_llm
      method_code: "def get_response_from_llm(self, query: str, context: str) -> str:\n\
        \    if not self.llm:\n        logger.error('AI model not available.')\n \
        \       return ''\n    prompt = self.config['prompt_template'].format(context=context,\
        \ query=query)\n    logging.info(f'Query: {query}')\n    response = self.llm(prompt)\n\
        \    logging.info(f'Response: {response}')\n    return response"
      method_ast: 'FunctionDef(name=''get_response_from_llm'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=193, col_offset=30, end_lineno=193, end_col_offset=34),
        arg(arg=''query'', annotation=Name(id=''str'', ctx=Load(), lineno=193, col_offset=43,
        end_lineno=193, end_col_offset=46), lineno=193, col_offset=36, end_lineno=193,
        end_col_offset=46), arg(arg=''context'', annotation=Name(id=''str'', ctx=Load(),
        lineno=193, col_offset=57, end_lineno=193, end_col_offset=60), lineno=193,
        col_offset=48, end_lineno=193, end_col_offset=60)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=194, col_offset=15, end_lineno=194, end_col_offset=19),
        attr=''llm'', ctx=Load(), lineno=194, col_offset=15, end_lineno=194, end_col_offset=23),
        lineno=194, col_offset=11, end_lineno=194, end_col_offset=23), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
        ctx=Load(), lineno=195, col_offset=12, end_lineno=195, end_col_offset=18),
        attr=''error'', ctx=Load(), lineno=195, col_offset=12, end_lineno=195, end_col_offset=24),
        args=[Constant(value=''AI model not available.'', lineno=195, col_offset=25,
        end_lineno=195, end_col_offset=50)], keywords=[], lineno=195, col_offset=12,
        end_lineno=195, end_col_offset=51), lineno=195, col_offset=12, end_lineno=195,
        end_col_offset=51), Return(value=Constant(value='''', lineno=196, col_offset=19,
        end_lineno=196, end_col_offset=21), lineno=196, col_offset=12, end_lineno=196,
        end_col_offset=21)], orelse=[], lineno=194, col_offset=8, end_lineno=196,
        end_col_offset=21), Assign(targets=[Name(id=''prompt'', ctx=Store(), lineno=197,
        col_offset=8, end_lineno=197, end_col_offset=14)], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=197, col_offset=17, end_lineno=197, end_col_offset=21),
        attr=''config'', ctx=Load(), lineno=197, col_offset=17, end_lineno=197, end_col_offset=28),
        slice=Constant(value=''prompt_template'', lineno=197, col_offset=29, end_lineno=197,
        end_col_offset=46), ctx=Load(), lineno=197, col_offset=17, end_lineno=197,
        end_col_offset=47), attr=''format'', ctx=Load(), lineno=197, col_offset=17,
        end_lineno=197, end_col_offset=54), args=[], keywords=[keyword(arg=''context'',
        value=Name(id=''context'', ctx=Load(), lineno=197, col_offset=63, end_lineno=197,
        end_col_offset=70), lineno=197, col_offset=55, end_lineno=197, end_col_offset=70),
        keyword(arg=''query'', value=Name(id=''query'', ctx=Load(), lineno=197, col_offset=78,
        end_lineno=197, end_col_offset=83), lineno=197, col_offset=72, end_lineno=197,
        end_col_offset=83)], lineno=197, col_offset=17, end_lineno=197, end_col_offset=84),
        lineno=197, col_offset=8, end_lineno=197, end_col_offset=84), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
        ctx=Load(), lineno=198, col_offset=8, end_lineno=198, end_col_offset=15),
        attr=''info'', ctx=Load(), lineno=198, col_offset=8, end_lineno=198, end_col_offset=20),
        args=[JoinedStr(values=[Constant(value=''Query: '', lineno=198, col_offset=21,
        end_lineno=198, end_col_offset=38), FormattedValue(value=Name(id=''query'',
        ctx=Load(), lineno=198, col_offset=31, end_lineno=198, end_col_offset=36),
        conversion=-1, lineno=198, col_offset=21, end_lineno=198, end_col_offset=38)],
        lineno=198, col_offset=21, end_lineno=198, end_col_offset=38)], keywords=[],
        lineno=198, col_offset=8, end_lineno=198, end_col_offset=39), lineno=198,
        col_offset=8, end_lineno=198, end_col_offset=39), Assign(targets=[Name(id=''response'',
        ctx=Store(), lineno=199, col_offset=8, end_lineno=199, end_col_offset=16)],
        value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=199,
        col_offset=19, end_lineno=199, end_col_offset=23), attr=''llm'', ctx=Load(),
        lineno=199, col_offset=19, end_lineno=199, end_col_offset=27), args=[Name(id=''prompt'',
        ctx=Load(), lineno=199, col_offset=28, end_lineno=199, end_col_offset=34)],
        keywords=[], lineno=199, col_offset=19, end_lineno=199, end_col_offset=35),
        lineno=199, col_offset=8, end_lineno=199, end_col_offset=35), Expr(value=Call(func=Attribute(value=Name(id=''logging'',
        ctx=Load(), lineno=200, col_offset=8, end_lineno=200, end_col_offset=15),
        attr=''info'', ctx=Load(), lineno=200, col_offset=8, end_lineno=200, end_col_offset=20),
        args=[JoinedStr(values=[Constant(value=''Response: '', lineno=200, col_offset=21,
        end_lineno=200, end_col_offset=44), FormattedValue(value=Name(id=''response'',
        ctx=Load(), lineno=200, col_offset=34, end_lineno=200, end_col_offset=42),
        conversion=-1, lineno=200, col_offset=21, end_lineno=200, end_col_offset=44)],
        lineno=200, col_offset=21, end_lineno=200, end_col_offset=44)], keywords=[],
        lineno=200, col_offset=8, end_lineno=200, end_col_offset=45), lineno=200,
        col_offset=8, end_lineno=200, end_col_offset=45), Return(value=Name(id=''response'',
        ctx=Load(), lineno=201, col_offset=15, end_lineno=201, end_col_offset=23),
        lineno=201, col_offset=8, end_lineno=201, end_col_offset=23)], decorator_list=[],
        returns=Name(id=''str'', ctx=Load(), lineno=193, col_offset=65, end_lineno=193,
        end_col_offset=68), lineno=193, col_offset=4, end_lineno=201, end_col_offset=23)'
      method_docstring: null
      method_inputs:
      - self
      - query
      - context
      method_defaults: []
      method_returns:
      - response
      - ''''''
      method_calls:
      - logger.error
      - self.llm
      - logging.info
      - self.config['prompt_template'].format
      method_variables:
      - prompt
      - response
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_items:
      method_name: process_items
      method_code: "def process_items(self, question_type: str, question_id: str,\
        \ question_text: str, base_name: str, name: str, info: Dict, context: str,\
        \ item_type: str) -> None:\n    if info[item_type]:\n        items = [item.strip()\
        \ for item in self.clean_and_get_unique_elements(str(info[item_type])).split(',')\
        \ if item]\n        for item in items:\n            query = question_text.format(filename=base_name,\
        \ **{f\"{item_type.split('_')[0]}_name\": name, f\"{item_type.split('_')[0]}_variable\"\
        : item})\n            self.process_question(question_type, question_id, query,\
        \ context, info)"
      method_ast: FunctionDef(name='process_items', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=203, col_offset=22, end_lineno=203, end_col_offset=26),
        arg(arg='question_type', annotation=Name(id='str', ctx=Load(), lineno=203,
        col_offset=43, end_lineno=203, end_col_offset=46), lineno=203, col_offset=28,
        end_lineno=203, end_col_offset=46), arg(arg='question_id', annotation=Name(id='str',
        ctx=Load(), lineno=203, col_offset=61, end_lineno=203, end_col_offset=64),
        lineno=203, col_offset=48, end_lineno=203, end_col_offset=64), arg(arg='question_text',
        annotation=Name(id='str', ctx=Load(), lineno=203, col_offset=81, end_lineno=203,
        end_col_offset=84), lineno=203, col_offset=66, end_lineno=203, end_col_offset=84),
        arg(arg='base_name', annotation=Name(id='str', ctx=Load(), lineno=203, col_offset=97,
        end_lineno=203, end_col_offset=100), lineno=203, col_offset=86, end_lineno=203,
        end_col_offset=100), arg(arg='name', annotation=Name(id='str', ctx=Load(),
        lineno=203, col_offset=108, end_lineno=203, end_col_offset=111), lineno=203,
        col_offset=102, end_lineno=203, end_col_offset=111), arg(arg='info', annotation=Name(id='Dict',
        ctx=Load(), lineno=203, col_offset=119, end_lineno=203, end_col_offset=123),
        lineno=203, col_offset=113, end_lineno=203, end_col_offset=123), arg(arg='context',
        annotation=Name(id='str', ctx=Load(), lineno=203, col_offset=134, end_lineno=203,
        end_col_offset=137), lineno=203, col_offset=125, end_lineno=203, end_col_offset=137),
        arg(arg='item_type', annotation=Name(id='str', ctx=Load(), lineno=203, col_offset=150,
        end_lineno=203, end_col_offset=153), lineno=203, col_offset=139, end_lineno=203,
        end_col_offset=153)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Name(id='info',
        ctx=Load(), lineno=204, col_offset=11, end_lineno=204, end_col_offset=15),
        slice=Name(id='item_type', ctx=Load(), lineno=204, col_offset=16, end_lineno=204,
        end_col_offset=25), ctx=Load(), lineno=204, col_offset=11, end_lineno=204,
        end_col_offset=26), body=[Assign(targets=[Name(id='items', ctx=Store(), lineno=205,
        col_offset=12, end_lineno=205, end_col_offset=17)], value=ListComp(elt=Call(func=Attribute(value=Name(id='item',
        ctx=Load(), lineno=205, col_offset=21, end_lineno=205, end_col_offset=25),
        attr='strip', ctx=Load(), lineno=205, col_offset=21, end_lineno=205, end_col_offset=31),
        args=[], keywords=[], lineno=205, col_offset=21, end_lineno=205, end_col_offset=33),
        generators=[comprehension(target=Name(id='item', ctx=Store(), lineno=205,
        col_offset=38, end_lineno=205, end_col_offset=42), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=205, col_offset=46, end_lineno=205, end_col_offset=50),
        attr='clean_and_get_unique_elements', ctx=Load(), lineno=205, col_offset=46,
        end_lineno=205, end_col_offset=80), args=[Call(func=Name(id='str', ctx=Load(),
        lineno=205, col_offset=81, end_lineno=205, end_col_offset=84), args=[Subscript(value=Name(id='info',
        ctx=Load(), lineno=205, col_offset=85, end_lineno=205, end_col_offset=89),
        slice=Name(id='item_type', ctx=Load(), lineno=205, col_offset=90, end_lineno=205,
        end_col_offset=99), ctx=Load(), lineno=205, col_offset=85, end_lineno=205,
        end_col_offset=100)], keywords=[], lineno=205, col_offset=81, end_lineno=205,
        end_col_offset=101)], keywords=[], lineno=205, col_offset=46, end_lineno=205,
        end_col_offset=102), attr='split', ctx=Load(), lineno=205, col_offset=46,
        end_lineno=205, end_col_offset=108), args=[Constant(value=',', lineno=205,
        col_offset=109, end_lineno=205, end_col_offset=112)], keywords=[], lineno=205,
        col_offset=46, end_lineno=205, end_col_offset=113), ifs=[Name(id='item', ctx=Load(),
        lineno=205, col_offset=117, end_lineno=205, end_col_offset=121)], is_async=0)],
        lineno=205, col_offset=20, end_lineno=205, end_col_offset=122), lineno=205,
        col_offset=12, end_lineno=205, end_col_offset=122), For(target=Name(id='item',
        ctx=Store(), lineno=206, col_offset=16, end_lineno=206, end_col_offset=20),
        iter=Name(id='items', ctx=Load(), lineno=206, col_offset=24, end_lineno=206,
        end_col_offset=29), body=[Assign(targets=[Name(id='query', ctx=Store(), lineno=207,
        col_offset=16, end_lineno=207, end_col_offset=21)], value=Call(func=Attribute(value=Name(id='question_text',
        ctx=Load(), lineno=207, col_offset=24, end_lineno=207, end_col_offset=37),
        attr='format', ctx=Load(), lineno=207, col_offset=24, end_lineno=207, end_col_offset=44),
        args=[], keywords=[keyword(arg='filename', value=Name(id='base_name', ctx=Load(),
        lineno=207, col_offset=54, end_lineno=207, end_col_offset=63), lineno=207,
        col_offset=45, end_lineno=207, end_col_offset=63), keyword(value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id='item_type',
        ctx=Load(), lineno=207, col_offset=71, end_lineno=207, end_col_offset=80),
        attr='split', ctx=Load(), lineno=207, col_offset=71, end_lineno=207, end_col_offset=86),
        args=[Constant(value='_', lineno=207, col_offset=87, end_lineno=207, end_col_offset=90)],
        keywords=[], lineno=207, col_offset=71, end_lineno=207, end_col_offset=91),
        slice=Constant(value=0, lineno=207, col_offset=92, end_lineno=207, end_col_offset=93),
        ctx=Load(), lineno=207, col_offset=71, end_lineno=207, end_col_offset=94),
        conversion=-1, lineno=207, col_offset=68, end_lineno=207, end_col_offset=101),
        Constant(value='_name', lineno=207, col_offset=68, end_lineno=207, end_col_offset=101)],
        lineno=207, col_offset=68, end_lineno=207, end_col_offset=101), JoinedStr(values=[FormattedValue(value=Subscript(value=Call(func=Attribute(value=Name(id='item_type',
        ctx=Load(), lineno=207, col_offset=112, end_lineno=207, end_col_offset=121),
        attr='split', ctx=Load(), lineno=207, col_offset=112, end_lineno=207, end_col_offset=127),
        args=[Constant(value='_', lineno=207, col_offset=128, end_lineno=207, end_col_offset=131)],
        keywords=[], lineno=207, col_offset=112, end_lineno=207, end_col_offset=132),
        slice=Constant(value=0, lineno=207, col_offset=133, end_lineno=207, end_col_offset=134),
        ctx=Load(), lineno=207, col_offset=112, end_lineno=207, end_col_offset=135),
        conversion=-1, lineno=207, col_offset=109, end_lineno=207, end_col_offset=146),
        Constant(value='_variable', lineno=207, col_offset=109, end_lineno=207, end_col_offset=146)],
        lineno=207, col_offset=109, end_lineno=207, end_col_offset=146)], values=[Name(id='name',
        ctx=Load(), lineno=207, col_offset=103, end_lineno=207, end_col_offset=107),
        Name(id='item', ctx=Load(), lineno=207, col_offset=148, end_lineno=207, end_col_offset=152)],
        lineno=207, col_offset=67, end_lineno=207, end_col_offset=153), lineno=207,
        col_offset=65, end_lineno=207, end_col_offset=153)], lineno=207, col_offset=24,
        end_lineno=207, end_col_offset=154), lineno=207, col_offset=16, end_lineno=207,
        end_col_offset=154), Expr(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=208, col_offset=16, end_lineno=208, end_col_offset=20),
        attr='process_question', ctx=Load(), lineno=208, col_offset=16, end_lineno=208,
        end_col_offset=37), args=[Name(id='question_type', ctx=Load(), lineno=208,
        col_offset=38, end_lineno=208, end_col_offset=51), Name(id='question_id',
        ctx=Load(), lineno=208, col_offset=53, end_lineno=208, end_col_offset=64),
        Name(id='query', ctx=Load(), lineno=208, col_offset=66, end_lineno=208, end_col_offset=71),
        Name(id='context', ctx=Load(), lineno=208, col_offset=73, end_lineno=208,
        end_col_offset=80), Name(id='info', ctx=Load(), lineno=208, col_offset=82,
        end_lineno=208, end_col_offset=86)], keywords=[], lineno=208, col_offset=16,
        end_lineno=208, end_col_offset=87), lineno=208, col_offset=16, end_lineno=208,
        end_col_offset=87)], orelse=[], lineno=206, col_offset=12, end_lineno=208,
        end_col_offset=87)], orelse=[], lineno=204, col_offset=8, end_lineno=208,
        end_col_offset=87)], decorator_list=[], returns=Constant(value=None, lineno=203,
        col_offset=158, end_lineno=203, end_col_offset=162), lineno=203, col_offset=4,
        end_lineno=208, end_col_offset=87)
      method_docstring: null
      method_inputs:
      - self
      - question_type
      - question_id
      - question_text
      - base_name
      - name
      - info
      - context
      - item_type
      method_defaults: []
      method_returns: []
      method_calls:
      - item_type.split
      - self.clean_and_get_unique_elements(str(info[item_type])).split
      - str
      - question_text.format
      - item.strip
      - self.process_question
      - self.clean_and_get_unique_elements
      method_variables:
      - items
      - query
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_question:
      method_name: process_question
      method_code: "def process_question(self, question_type: str, question_id: str,\
        \ query: str, context: str, info: Dict) -> None:\n    if question_id.endswith('code_graph'):\n\
        \        response = info.get(question_id, {})\n    else:\n        response\
        \ = self.get_response_from_llm(query, context) if self.use_llm and question_id.endswith('purpose')\
        \ else self.clean_and_get_unique_elements(str(info.get(question_id, '')))\n\
        \    if response and response != 'None':\n        response_str = str(response)\n\
        \        response_str = response_str.strip()\n        if response_str:\n \
        \           self.qa_list.append({'question': query, 'answer': response_str})\n\
        \            if question_type == 'file' and self.use_summary:\n          \
        \      context = info['file_summary']\n            self.instruct_list.append({'instruction':\
        \ query, 'input': context, 'output': response_str})"
      method_ast: FunctionDef(name='process_question', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=210, col_offset=25, end_lineno=210, end_col_offset=29),
        arg(arg='question_type', annotation=Name(id='str', ctx=Load(), lineno=210,
        col_offset=46, end_lineno=210, end_col_offset=49), lineno=210, col_offset=31,
        end_lineno=210, end_col_offset=49), arg(arg='question_id', annotation=Name(id='str',
        ctx=Load(), lineno=210, col_offset=64, end_lineno=210, end_col_offset=67),
        lineno=210, col_offset=51, end_lineno=210, end_col_offset=67), arg(arg='query',
        annotation=Name(id='str', ctx=Load(), lineno=210, col_offset=76, end_lineno=210,
        end_col_offset=79), lineno=210, col_offset=69, end_lineno=210, end_col_offset=79),
        arg(arg='context', annotation=Name(id='str', ctx=Load(), lineno=210, col_offset=90,
        end_lineno=210, end_col_offset=93), lineno=210, col_offset=81, end_lineno=210,
        end_col_offset=93), arg(arg='info', annotation=Name(id='Dict', ctx=Load(),
        lineno=210, col_offset=101, end_lineno=210, end_col_offset=105), lineno=210,
        col_offset=95, end_lineno=210, end_col_offset=105)], kwonlyargs=[], kw_defaults=[],
        defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='question_id',
        ctx=Load(), lineno=211, col_offset=11, end_lineno=211, end_col_offset=22),
        attr='endswith', ctx=Load(), lineno=211, col_offset=11, end_lineno=211, end_col_offset=31),
        args=[Constant(value='code_graph', lineno=211, col_offset=32, end_lineno=211,
        end_col_offset=44)], keywords=[], lineno=211, col_offset=11, end_lineno=211,
        end_col_offset=45), body=[Assign(targets=[Name(id='response', ctx=Store(),
        lineno=212, col_offset=12, end_lineno=212, end_col_offset=20)], value=Call(func=Attribute(value=Name(id='info',
        ctx=Load(), lineno=212, col_offset=23, end_lineno=212, end_col_offset=27),
        attr='get', ctx=Load(), lineno=212, col_offset=23, end_lineno=212, end_col_offset=31),
        args=[Name(id='question_id', ctx=Load(), lineno=212, col_offset=32, end_lineno=212,
        end_col_offset=43), Dict(keys=[], values=[], lineno=212, col_offset=45, end_lineno=212,
        end_col_offset=47)], keywords=[], lineno=212, col_offset=23, end_lineno=212,
        end_col_offset=48), lineno=212, col_offset=12, end_lineno=212, end_col_offset=48)],
        orelse=[Assign(targets=[Name(id='response', ctx=Store(), lineno=214, col_offset=12,
        end_lineno=214, end_col_offset=20)], value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=214, col_offset=69, end_lineno=214, end_col_offset=73),
        attr='use_llm', ctx=Load(), lineno=214, col_offset=69, end_lineno=214, end_col_offset=81),
        Call(func=Attribute(value=Name(id='question_id', ctx=Load(), lineno=214, col_offset=86,
        end_lineno=214, end_col_offset=97), attr='endswith', ctx=Load(), lineno=214,
        col_offset=86, end_lineno=214, end_col_offset=106), args=[Constant(value='purpose',
        lineno=214, col_offset=107, end_lineno=214, end_col_offset=116)], keywords=[],
        lineno=214, col_offset=86, end_lineno=214, end_col_offset=117)], lineno=214,
        col_offset=69, end_lineno=214, end_col_offset=117), body=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=214, col_offset=23, end_lineno=214, end_col_offset=27),
        attr='get_response_from_llm', ctx=Load(), lineno=214, col_offset=23, end_lineno=214,
        end_col_offset=49), args=[Name(id='query', ctx=Load(), lineno=214, col_offset=50,
        end_lineno=214, end_col_offset=55), Name(id='context', ctx=Load(), lineno=214,
        col_offset=57, end_lineno=214, end_col_offset=64)], keywords=[], lineno=214,
        col_offset=23, end_lineno=214, end_col_offset=65), orelse=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=214, col_offset=123, end_lineno=214, end_col_offset=127),
        attr='clean_and_get_unique_elements', ctx=Load(), lineno=214, col_offset=123,
        end_lineno=214, end_col_offset=157), args=[Call(func=Name(id='str', ctx=Load(),
        lineno=214, col_offset=158, end_lineno=214, end_col_offset=161), args=[Call(func=Attribute(value=Name(id='info',
        ctx=Load(), lineno=214, col_offset=162, end_lineno=214, end_col_offset=166),
        attr='get', ctx=Load(), lineno=214, col_offset=162, end_lineno=214, end_col_offset=170),
        args=[Name(id='question_id', ctx=Load(), lineno=214, col_offset=171, end_lineno=214,
        end_col_offset=182), Constant(value='', lineno=214, col_offset=184, end_lineno=214,
        end_col_offset=186)], keywords=[], lineno=214, col_offset=162, end_lineno=214,
        end_col_offset=187)], keywords=[], lineno=214, col_offset=158, end_lineno=214,
        end_col_offset=188)], keywords=[], lineno=214, col_offset=123, end_lineno=214,
        end_col_offset=189), lineno=214, col_offset=23, end_lineno=214, end_col_offset=189),
        lineno=214, col_offset=12, end_lineno=214, end_col_offset=189)], lineno=211,
        col_offset=8, end_lineno=214, end_col_offset=189), If(test=BoolOp(op=And(),
        values=[Name(id='response', ctx=Load(), lineno=215, col_offset=11, end_lineno=215,
        end_col_offset=19), Compare(left=Name(id='response', ctx=Load(), lineno=215,
        col_offset=24, end_lineno=215, end_col_offset=32), ops=[NotEq()], comparators=[Constant(value='None',
        lineno=215, col_offset=36, end_lineno=215, end_col_offset=42)], lineno=215,
        col_offset=24, end_lineno=215, end_col_offset=42)], lineno=215, col_offset=11,
        end_lineno=215, end_col_offset=42), body=[Assign(targets=[Name(id='response_str',
        ctx=Store(), lineno=216, col_offset=12, end_lineno=216, end_col_offset=24)],
        value=Call(func=Name(id='str', ctx=Load(), lineno=216, col_offset=27, end_lineno=216,
        end_col_offset=30), args=[Name(id='response', ctx=Load(), lineno=216, col_offset=31,
        end_lineno=216, end_col_offset=39)], keywords=[], lineno=216, col_offset=27,
        end_lineno=216, end_col_offset=40), lineno=216, col_offset=12, end_lineno=216,
        end_col_offset=40), Assign(targets=[Name(id='response_str', ctx=Store(), lineno=217,
        col_offset=12, end_lineno=217, end_col_offset=24)], value=Call(func=Attribute(value=Name(id='response_str',
        ctx=Load(), lineno=217, col_offset=27, end_lineno=217, end_col_offset=39),
        attr='strip', ctx=Load(), lineno=217, col_offset=27, end_lineno=217, end_col_offset=45),
        args=[], keywords=[], lineno=217, col_offset=27, end_lineno=217, end_col_offset=47),
        lineno=217, col_offset=12, end_lineno=217, end_col_offset=47), If(test=Name(id='response_str',
        ctx=Load(), lineno=218, col_offset=15, end_lineno=218, end_col_offset=27),
        body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=219, col_offset=16, end_lineno=219, end_col_offset=20),
        attr='qa_list', ctx=Load(), lineno=219, col_offset=16, end_lineno=219, end_col_offset=28),
        attr='append', ctx=Load(), lineno=219, col_offset=16, end_lineno=219, end_col_offset=35),
        args=[Dict(keys=[Constant(value='question', lineno=219, col_offset=37, end_lineno=219,
        end_col_offset=47), Constant(value='answer', lineno=219, col_offset=56, end_lineno=219,
        end_col_offset=64)], values=[Name(id='query', ctx=Load(), lineno=219, col_offset=49,
        end_lineno=219, end_col_offset=54), Name(id='response_str', ctx=Load(), lineno=219,
        col_offset=66, end_lineno=219, end_col_offset=78)], lineno=219, col_offset=36,
        end_lineno=219, end_col_offset=79)], keywords=[], lineno=219, col_offset=16,
        end_lineno=219, end_col_offset=80), lineno=219, col_offset=16, end_lineno=219,
        end_col_offset=80), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='question_type',
        ctx=Load(), lineno=220, col_offset=19, end_lineno=220, end_col_offset=32),
        ops=[Eq()], comparators=[Constant(value='file', lineno=220, col_offset=36,
        end_lineno=220, end_col_offset=42)], lineno=220, col_offset=19, end_lineno=220,
        end_col_offset=42), Attribute(value=Name(id='self', ctx=Load(), lineno=220,
        col_offset=47, end_lineno=220, end_col_offset=51), attr='use_summary', ctx=Load(),
        lineno=220, col_offset=47, end_lineno=220, end_col_offset=63)], lineno=220,
        col_offset=19, end_lineno=220, end_col_offset=63), body=[Assign(targets=[Name(id='context',
        ctx=Store(), lineno=221, col_offset=20, end_lineno=221, end_col_offset=27)],
        value=Subscript(value=Name(id='info', ctx=Load(), lineno=221, col_offset=30,
        end_lineno=221, end_col_offset=34), slice=Constant(value='file_summary', lineno=221,
        col_offset=35, end_lineno=221, end_col_offset=49), ctx=Load(), lineno=221,
        col_offset=30, end_lineno=221, end_col_offset=50), lineno=221, col_offset=20,
        end_lineno=221, end_col_offset=50)], orelse=[], lineno=220, col_offset=16,
        end_lineno=221, end_col_offset=50), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=222, col_offset=16, end_lineno=222, end_col_offset=20),
        attr='instruct_list', ctx=Load(), lineno=222, col_offset=16, end_lineno=222,
        end_col_offset=34), attr='append', ctx=Load(), lineno=222, col_offset=16,
        end_lineno=222, end_col_offset=41), args=[Dict(keys=[Constant(value='instruction',
        lineno=222, col_offset=43, end_lineno=222, end_col_offset=56), Constant(value='input',
        lineno=222, col_offset=65, end_lineno=222, end_col_offset=72), Constant(value='output',
        lineno=222, col_offset=83, end_lineno=222, end_col_offset=91)], values=[Name(id='query',
        ctx=Load(), lineno=222, col_offset=58, end_lineno=222, end_col_offset=63),
        Name(id='context', ctx=Load(), lineno=222, col_offset=74, end_lineno=222,
        end_col_offset=81), Name(id='response_str', ctx=Load(), lineno=222, col_offset=93,
        end_lineno=222, end_col_offset=105)], lineno=222, col_offset=42, end_lineno=222,
        end_col_offset=106)], keywords=[], lineno=222, col_offset=16, end_lineno=222,
        end_col_offset=107), lineno=222, col_offset=16, end_lineno=222, end_col_offset=107)],
        orelse=[], lineno=218, col_offset=12, end_lineno=222, end_col_offset=107)],
        orelse=[], lineno=215, col_offset=8, end_lineno=222, end_col_offset=107)],
        decorator_list=[], returns=Constant(value=None, lineno=210, col_offset=110,
        end_lineno=210, end_col_offset=114), lineno=210, col_offset=4, end_lineno=222,
        end_col_offset=107)
      method_docstring: null
      method_inputs:
      - self
      - question_type
      - question_id
      - query
      - context
      - info
      method_defaults: []
      method_returns: []
      method_calls:
      - question_id.endswith
      - info.get
      - str
      - self.instruct_list.append
      - self.qa_list.append
      - self.get_response_from_llm
      - response_str.strip
      - self.clean_and_get_unique_elements
      method_variables:
      - response_str
      - response
      - context
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_file_question:
      method_name: process_file_question
      method_code: "def process_file_question(self, question_type: str, question_id:\
        \ str, question_text: str) -> None:\n    query = question_text.format(filename=self.base_name)\n\
        \    context = self.file_details['file_info']['file_code']\n    info = self.file_details['file_info']\n\
        \    self.process_question(question_type, question_id, query, context, info)"
      method_ast: FunctionDef(name='process_file_question', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=224, col_offset=30, end_lineno=224, end_col_offset=34),
        arg(arg='question_type', annotation=Name(id='str', ctx=Load(), lineno=224,
        col_offset=51, end_lineno=224, end_col_offset=54), lineno=224, col_offset=36,
        end_lineno=224, end_col_offset=54), arg(arg='question_id', annotation=Name(id='str',
        ctx=Load(), lineno=224, col_offset=69, end_lineno=224, end_col_offset=72),
        lineno=224, col_offset=56, end_lineno=224, end_col_offset=72), arg(arg='question_text',
        annotation=Name(id='str', ctx=Load(), lineno=224, col_offset=89, end_lineno=224,
        end_col_offset=92), lineno=224, col_offset=74, end_lineno=224, end_col_offset=92)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='query',
        ctx=Store(), lineno=225, col_offset=8, end_lineno=225, end_col_offset=13)],
        value=Call(func=Attribute(value=Name(id='question_text', ctx=Load(), lineno=225,
        col_offset=16, end_lineno=225, end_col_offset=29), attr='format', ctx=Load(),
        lineno=225, col_offset=16, end_lineno=225, end_col_offset=36), args=[], keywords=[keyword(arg='filename',
        value=Attribute(value=Name(id='self', ctx=Load(), lineno=225, col_offset=46,
        end_lineno=225, end_col_offset=50), attr='base_name', ctx=Load(), lineno=225,
        col_offset=46, end_lineno=225, end_col_offset=60), lineno=225, col_offset=37,
        end_lineno=225, end_col_offset=60)], lineno=225, col_offset=16, end_lineno=225,
        end_col_offset=61), lineno=225, col_offset=8, end_lineno=225, end_col_offset=61),
        Assign(targets=[Name(id='context', ctx=Store(), lineno=226, col_offset=8,
        end_lineno=226, end_col_offset=15)], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=226, col_offset=18, end_lineno=226, end_col_offset=22),
        attr='file_details', ctx=Load(), lineno=226, col_offset=18, end_lineno=226,
        end_col_offset=35), slice=Constant(value='file_info', lineno=226, col_offset=36,
        end_lineno=226, end_col_offset=47), ctx=Load(), lineno=226, col_offset=18,
        end_lineno=226, end_col_offset=48), slice=Constant(value='file_code', lineno=226,
        col_offset=49, end_lineno=226, end_col_offset=60), ctx=Load(), lineno=226,
        col_offset=18, end_lineno=226, end_col_offset=61), lineno=226, col_offset=8,
        end_lineno=226, end_col_offset=61), Assign(targets=[Name(id='info', ctx=Store(),
        lineno=227, col_offset=8, end_lineno=227, end_col_offset=12)], value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=227, col_offset=15, end_lineno=227, end_col_offset=19),
        attr='file_details', ctx=Load(), lineno=227, col_offset=15, end_lineno=227,
        end_col_offset=32), slice=Constant(value='file_info', lineno=227, col_offset=33,
        end_lineno=227, end_col_offset=44), ctx=Load(), lineno=227, col_offset=15,
        end_lineno=227, end_col_offset=45), lineno=227, col_offset=8, end_lineno=227,
        end_col_offset=45), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=228, col_offset=8, end_lineno=228, end_col_offset=12), attr='process_question',
        ctx=Load(), lineno=228, col_offset=8, end_lineno=228, end_col_offset=29),
        args=[Name(id='question_type', ctx=Load(), lineno=228, col_offset=30, end_lineno=228,
        end_col_offset=43), Name(id='question_id', ctx=Load(), lineno=228, col_offset=45,
        end_lineno=228, end_col_offset=56), Name(id='query', ctx=Load(), lineno=228,
        col_offset=58, end_lineno=228, end_col_offset=63), Name(id='context', ctx=Load(),
        lineno=228, col_offset=65, end_lineno=228, end_col_offset=72), Name(id='info',
        ctx=Load(), lineno=228, col_offset=74, end_lineno=228, end_col_offset=78)],
        keywords=[], lineno=228, col_offset=8, end_lineno=228, end_col_offset=79),
        lineno=228, col_offset=8, end_lineno=228, end_col_offset=79)], decorator_list=[],
        returns=Constant(value=None, lineno=224, col_offset=97, end_lineno=224, end_col_offset=101),
        lineno=224, col_offset=4, end_lineno=228, end_col_offset=79)
      method_docstring: null
      method_inputs:
      - self
      - question_type
      - question_id
      - question_text
      method_defaults: []
      method_returns: []
      method_calls:
      - question_text.format
      - self.process_question
      method_variables:
      - query
      - context
      - info
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_process_func_class_question:
      method_name: process_func_class_question
      method_code: "def process_func_class_question(self, question_type: str, question_id:\
        \ str, question_text: str) -> None:\n    if question_type == 'method':\n \
        \       for class_name, class_info in self.file_details['classes'].items():\n\
        \            for key, method_info in class_info.items():\n               \
        \ if key.startswith('class_method_'):\n                    method_name = key[len('class_method_'):]\n\
        \                    context = method_info['method_code']\n              \
        \      mapping = {'class_name': class_name, 'method_name': method_name}\n\
        \                    query = question_text.format(filename=self.base_name,\
        \ **mapping)\n                    self.process_question(question_type, question_id,\
        \ query, context, method_info)\n    else:\n        for name, info in self.file_details[self.question_mapping[question_type]].items():\n\
        \            context = info[f'{question_type}_code']\n            mapping\
        \ = {f'{question_type}_name': name}\n            if question_id == f'{question_type}_variable_purpose'\
        \ and self.use_llm:\n                self.process_items(question_type, question_id,\
        \ question_text, self.base_name, name, info, context, f'{question_type}_variables')\n\
        \            elif question_id != f'{question_type}_variable_purpose':\n  \
        \              query = question_text.format(filename=self.base_name, **mapping)\n\
        \                self.process_question(question_type, question_id, query,\
        \ context, info)"
      method_ast: FunctionDef(name='process_func_class_question', args=arguments(posonlyargs=[],
        args=[arg(arg='self', lineno=230, col_offset=36, end_lineno=230, end_col_offset=40),
        arg(arg='question_type', annotation=Name(id='str', ctx=Load(), lineno=230,
        col_offset=57, end_lineno=230, end_col_offset=60), lineno=230, col_offset=42,
        end_lineno=230, end_col_offset=60), arg(arg='question_id', annotation=Name(id='str',
        ctx=Load(), lineno=230, col_offset=75, end_lineno=230, end_col_offset=78),
        lineno=230, col_offset=62, end_lineno=230, end_col_offset=78), arg(arg='question_text',
        annotation=Name(id='str', ctx=Load(), lineno=230, col_offset=95, end_lineno=230,
        end_col_offset=98), lineno=230, col_offset=80, end_lineno=230, end_col_offset=98)],
        kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='question_type',
        ctx=Load(), lineno=231, col_offset=11, end_lineno=231, end_col_offset=24),
        ops=[Eq()], comparators=[Constant(value='method', lineno=231, col_offset=28,
        end_lineno=231, end_col_offset=36)], lineno=231, col_offset=11, end_lineno=231,
        end_col_offset=36), body=[For(target=Tuple(elts=[Name(id='class_name', ctx=Store(),
        lineno=232, col_offset=16, end_lineno=232, end_col_offset=26), Name(id='class_info',
        ctx=Store(), lineno=232, col_offset=28, end_lineno=232, end_col_offset=38)],
        ctx=Store(), lineno=232, col_offset=16, end_lineno=232, end_col_offset=38),
        iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=232, col_offset=42, end_lineno=232, end_col_offset=46),
        attr='file_details', ctx=Load(), lineno=232, col_offset=42, end_lineno=232,
        end_col_offset=59), slice=Constant(value='classes', lineno=232, col_offset=60,
        end_lineno=232, end_col_offset=69), ctx=Load(), lineno=232, col_offset=42,
        end_lineno=232, end_col_offset=70), attr='items', ctx=Load(), lineno=232,
        col_offset=42, end_lineno=232, end_col_offset=76), args=[], keywords=[], lineno=232,
        col_offset=42, end_lineno=232, end_col_offset=78), body=[For(target=Tuple(elts=[Name(id='key',
        ctx=Store(), lineno=233, col_offset=20, end_lineno=233, end_col_offset=23),
        Name(id='method_info', ctx=Store(), lineno=233, col_offset=25, end_lineno=233,
        end_col_offset=36)], ctx=Store(), lineno=233, col_offset=20, end_lineno=233,
        end_col_offset=36), iter=Call(func=Attribute(value=Name(id='class_info', ctx=Load(),
        lineno=233, col_offset=40, end_lineno=233, end_col_offset=50), attr='items',
        ctx=Load(), lineno=233, col_offset=40, end_lineno=233, end_col_offset=56),
        args=[], keywords=[], lineno=233, col_offset=40, end_lineno=233, end_col_offset=58),
        body=[If(test=Call(func=Attribute(value=Name(id='key', ctx=Load(), lineno=234,
        col_offset=23, end_lineno=234, end_col_offset=26), attr='startswith', ctx=Load(),
        lineno=234, col_offset=23, end_lineno=234, end_col_offset=37), args=[Constant(value='class_method_',
        lineno=234, col_offset=38, end_lineno=234, end_col_offset=53)], keywords=[],
        lineno=234, col_offset=23, end_lineno=234, end_col_offset=54), body=[Assign(targets=[Name(id='method_name',
        ctx=Store(), lineno=235, col_offset=24, end_lineno=235, end_col_offset=35)],
        value=Subscript(value=Name(id='key', ctx=Load(), lineno=235, col_offset=38,
        end_lineno=235, end_col_offset=41), slice=Slice(lower=Call(func=Name(id='len',
        ctx=Load(), lineno=235, col_offset=42, end_lineno=235, end_col_offset=45),
        args=[Constant(value='class_method_', lineno=235, col_offset=46, end_lineno=235,
        end_col_offset=61)], keywords=[], lineno=235, col_offset=42, end_lineno=235,
        end_col_offset=62), lineno=235, col_offset=42, end_lineno=235, end_col_offset=63),
        ctx=Load(), lineno=235, col_offset=38, end_lineno=235, end_col_offset=64),
        lineno=235, col_offset=24, end_lineno=235, end_col_offset=64), Assign(targets=[Name(id='context',
        ctx=Store(), lineno=236, col_offset=24, end_lineno=236, end_col_offset=31)],
        value=Subscript(value=Name(id='method_info', ctx=Load(), lineno=236, col_offset=34,
        end_lineno=236, end_col_offset=45), slice=Constant(value='method_code', lineno=236,
        col_offset=46, end_lineno=236, end_col_offset=59), ctx=Load(), lineno=236,
        col_offset=34, end_lineno=236, end_col_offset=60), lineno=236, col_offset=24,
        end_lineno=236, end_col_offset=60), Assign(targets=[Name(id='mapping', ctx=Store(),
        lineno=237, col_offset=24, end_lineno=237, end_col_offset=31)], value=Dict(keys=[Constant(value='class_name',
        lineno=237, col_offset=35, end_lineno=237, end_col_offset=47), Constant(value='method_name',
        lineno=237, col_offset=61, end_lineno=237, end_col_offset=74)], values=[Name(id='class_name',
        ctx=Load(), lineno=237, col_offset=49, end_lineno=237, end_col_offset=59),
        Name(id='method_name', ctx=Load(), lineno=237, col_offset=76, end_lineno=237,
        end_col_offset=87)], lineno=237, col_offset=34, end_lineno=237, end_col_offset=88),
        lineno=237, col_offset=24, end_lineno=237, end_col_offset=88), Assign(targets=[Name(id='query',
        ctx=Store(), lineno=238, col_offset=24, end_lineno=238, end_col_offset=29)],
        value=Call(func=Attribute(value=Name(id='question_text', ctx=Load(), lineno=238,
        col_offset=32, end_lineno=238, end_col_offset=45), attr='format', ctx=Load(),
        lineno=238, col_offset=32, end_lineno=238, end_col_offset=52), args=[], keywords=[keyword(arg='filename',
        value=Attribute(value=Name(id='self', ctx=Load(), lineno=238, col_offset=62,
        end_lineno=238, end_col_offset=66), attr='base_name', ctx=Load(), lineno=238,
        col_offset=62, end_lineno=238, end_col_offset=76), lineno=238, col_offset=53,
        end_lineno=238, end_col_offset=76), keyword(value=Name(id='mapping', ctx=Load(),
        lineno=238, col_offset=80, end_lineno=238, end_col_offset=87), lineno=238,
        col_offset=78, end_lineno=238, end_col_offset=87)], lineno=238, col_offset=32,
        end_lineno=238, end_col_offset=88), lineno=238, col_offset=24, end_lineno=238,
        end_col_offset=88), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=239, col_offset=24, end_lineno=239, end_col_offset=28), attr='process_question',
        ctx=Load(), lineno=239, col_offset=24, end_lineno=239, end_col_offset=45),
        args=[Name(id='question_type', ctx=Load(), lineno=239, col_offset=46, end_lineno=239,
        end_col_offset=59), Name(id='question_id', ctx=Load(), lineno=239, col_offset=61,
        end_lineno=239, end_col_offset=72), Name(id='query', ctx=Load(), lineno=239,
        col_offset=74, end_lineno=239, end_col_offset=79), Name(id='context', ctx=Load(),
        lineno=239, col_offset=81, end_lineno=239, end_col_offset=88), Name(id='method_info',
        ctx=Load(), lineno=239, col_offset=90, end_lineno=239, end_col_offset=101)],
        keywords=[], lineno=239, col_offset=24, end_lineno=239, end_col_offset=102),
        lineno=239, col_offset=24, end_lineno=239, end_col_offset=102)], orelse=[],
        lineno=234, col_offset=20, end_lineno=239, end_col_offset=102)], orelse=[],
        lineno=233, col_offset=16, end_lineno=239, end_col_offset=102)], orelse=[],
        lineno=232, col_offset=12, end_lineno=239, end_col_offset=102)], orelse=[For(target=Tuple(elts=[Name(id='name',
        ctx=Store(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=20),
        Name(id='info', ctx=Store(), lineno=241, col_offset=22, end_lineno=241, end_col_offset=26)],
        ctx=Store(), lineno=241, col_offset=16, end_lineno=241, end_col_offset=26),
        iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=241, col_offset=30, end_lineno=241, end_col_offset=34),
        attr='file_details', ctx=Load(), lineno=241, col_offset=30, end_lineno=241,
        end_col_offset=47), slice=Subscript(value=Attribute(value=Name(id='self',
        ctx=Load(), lineno=241, col_offset=48, end_lineno=241, end_col_offset=52),
        attr='question_mapping', ctx=Load(), lineno=241, col_offset=48, end_lineno=241,
        end_col_offset=69), slice=Name(id='question_type', ctx=Load(), lineno=241,
        col_offset=70, end_lineno=241, end_col_offset=83), ctx=Load(), lineno=241,
        col_offset=48, end_lineno=241, end_col_offset=84), ctx=Load(), lineno=241,
        col_offset=30, end_lineno=241, end_col_offset=85), attr='items', ctx=Load(),
        lineno=241, col_offset=30, end_lineno=241, end_col_offset=91), args=[], keywords=[],
        lineno=241, col_offset=30, end_lineno=241, end_col_offset=93), body=[Assign(targets=[Name(id='context',
        ctx=Store(), lineno=242, col_offset=16, end_lineno=242, end_col_offset=23)],
        value=Subscript(value=Name(id='info', ctx=Load(), lineno=242, col_offset=26,
        end_lineno=242, end_col_offset=30), slice=JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=242, col_offset=34, end_lineno=242, end_col_offset=47),
        conversion=-1, lineno=242, col_offset=31, end_lineno=242, end_col_offset=54),
        Constant(value='_code', lineno=242, col_offset=31, end_lineno=242, end_col_offset=54)],
        lineno=242, col_offset=31, end_lineno=242, end_col_offset=54), ctx=Load(),
        lineno=242, col_offset=26, end_lineno=242, end_col_offset=55), lineno=242,
        col_offset=16, end_lineno=242, end_col_offset=55), Assign(targets=[Name(id='mapping',
        ctx=Store(), lineno=243, col_offset=16, end_lineno=243, end_col_offset=23)],
        value=Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=243, col_offset=30, end_lineno=243, end_col_offset=43),
        conversion=-1, lineno=243, col_offset=27, end_lineno=243, end_col_offset=50),
        Constant(value='_name', lineno=243, col_offset=27, end_lineno=243, end_col_offset=50)],
        lineno=243, col_offset=27, end_lineno=243, end_col_offset=50)], values=[Name(id='name',
        ctx=Load(), lineno=243, col_offset=52, end_lineno=243, end_col_offset=56)],
        lineno=243, col_offset=26, end_lineno=243, end_col_offset=57), lineno=243,
        col_offset=16, end_lineno=243, end_col_offset=57), If(test=BoolOp(op=And(),
        values=[Compare(left=Name(id='question_id', ctx=Load(), lineno=244, col_offset=19,
        end_lineno=244, end_col_offset=30), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=244, col_offset=37, end_lineno=244, end_col_offset=50),
        conversion=-1, lineno=244, col_offset=34, end_lineno=244, end_col_offset=69),
        Constant(value='_variable_purpose', lineno=244, col_offset=34, end_lineno=244,
        end_col_offset=69)], lineno=244, col_offset=34, end_lineno=244, end_col_offset=69)],
        lineno=244, col_offset=19, end_lineno=244, end_col_offset=69), Attribute(value=Name(id='self',
        ctx=Load(), lineno=244, col_offset=74, end_lineno=244, end_col_offset=78),
        attr='use_llm', ctx=Load(), lineno=244, col_offset=74, end_lineno=244, end_col_offset=86)],
        lineno=244, col_offset=19, end_lineno=244, end_col_offset=86), body=[Expr(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=245, col_offset=20, end_lineno=245, end_col_offset=24),
        attr='process_items', ctx=Load(), lineno=245, col_offset=20, end_lineno=245,
        end_col_offset=38), args=[Name(id='question_type', ctx=Load(), lineno=245,
        col_offset=39, end_lineno=245, end_col_offset=52), Name(id='question_id',
        ctx=Load(), lineno=245, col_offset=54, end_lineno=245, end_col_offset=65),
        Name(id='question_text', ctx=Load(), lineno=245, col_offset=67, end_lineno=245,
        end_col_offset=80), Attribute(value=Name(id='self', ctx=Load(), lineno=245,
        col_offset=82, end_lineno=245, end_col_offset=86), attr='base_name', ctx=Load(),
        lineno=245, col_offset=82, end_lineno=245, end_col_offset=96), Name(id='name',
        ctx=Load(), lineno=245, col_offset=98, end_lineno=245, end_col_offset=102),
        Name(id='info', ctx=Load(), lineno=245, col_offset=104, end_lineno=245, end_col_offset=108),
        Name(id='context', ctx=Load(), lineno=245, col_offset=110, end_lineno=245,
        end_col_offset=117), JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=245, col_offset=122, end_lineno=245, end_col_offset=135),
        conversion=-1, lineno=245, col_offset=119, end_lineno=245, end_col_offset=147),
        Constant(value='_variables', lineno=245, col_offset=119, end_lineno=245, end_col_offset=147)],
        lineno=245, col_offset=119, end_lineno=245, end_col_offset=147)], keywords=[],
        lineno=245, col_offset=20, end_lineno=245, end_col_offset=148), lineno=245,
        col_offset=20, end_lineno=245, end_col_offset=148)], orelse=[If(test=Compare(left=Name(id='question_id',
        ctx=Load(), lineno=246, col_offset=21, end_lineno=246, end_col_offset=32),
        ops=[NotEq()], comparators=[JoinedStr(values=[FormattedValue(value=Name(id='question_type',
        ctx=Load(), lineno=246, col_offset=39, end_lineno=246, end_col_offset=52),
        conversion=-1, lineno=246, col_offset=36, end_lineno=246, end_col_offset=71),
        Constant(value='_variable_purpose', lineno=246, col_offset=36, end_lineno=246,
        end_col_offset=71)], lineno=246, col_offset=36, end_lineno=246, end_col_offset=71)],
        lineno=246, col_offset=21, end_lineno=246, end_col_offset=71), body=[Assign(targets=[Name(id='query',
        ctx=Store(), lineno=247, col_offset=20, end_lineno=247, end_col_offset=25)],
        value=Call(func=Attribute(value=Name(id='question_text', ctx=Load(), lineno=247,
        col_offset=28, end_lineno=247, end_col_offset=41), attr='format', ctx=Load(),
        lineno=247, col_offset=28, end_lineno=247, end_col_offset=48), args=[], keywords=[keyword(arg='filename',
        value=Attribute(value=Name(id='self', ctx=Load(), lineno=247, col_offset=58,
        end_lineno=247, end_col_offset=62), attr='base_name', ctx=Load(), lineno=247,
        col_offset=58, end_lineno=247, end_col_offset=72), lineno=247, col_offset=49,
        end_lineno=247, end_col_offset=72), keyword(value=Name(id='mapping', ctx=Load(),
        lineno=247, col_offset=76, end_lineno=247, end_col_offset=83), lineno=247,
        col_offset=74, end_lineno=247, end_col_offset=83)], lineno=247, col_offset=28,
        end_lineno=247, end_col_offset=84), lineno=247, col_offset=20, end_lineno=247,
        end_col_offset=84), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load(),
        lineno=248, col_offset=20, end_lineno=248, end_col_offset=24), attr='process_question',
        ctx=Load(), lineno=248, col_offset=20, end_lineno=248, end_col_offset=41),
        args=[Name(id='question_type', ctx=Load(), lineno=248, col_offset=42, end_lineno=248,
        end_col_offset=55), Name(id='question_id', ctx=Load(), lineno=248, col_offset=57,
        end_lineno=248, end_col_offset=68), Name(id='query', ctx=Load(), lineno=248,
        col_offset=70, end_lineno=248, end_col_offset=75), Name(id='context', ctx=Load(),
        lineno=248, col_offset=77, end_lineno=248, end_col_offset=84), Name(id='info',
        ctx=Load(), lineno=248, col_offset=86, end_lineno=248, end_col_offset=90)],
        keywords=[], lineno=248, col_offset=20, end_lineno=248, end_col_offset=91),
        lineno=248, col_offset=20, end_lineno=248, end_col_offset=91)], orelse=[],
        lineno=246, col_offset=16, end_lineno=248, end_col_offset=91)], lineno=244,
        col_offset=16, end_lineno=248, end_col_offset=91)], orelse=[], lineno=241,
        col_offset=12, end_lineno=248, end_col_offset=91)], lineno=231, col_offset=8,
        end_lineno=248, end_col_offset=91)], decorator_list=[], returns=Constant(value=None,
        lineno=230, col_offset=103, end_lineno=230, end_col_offset=107), lineno=230,
        col_offset=4, end_lineno=248, end_col_offset=91)
      method_docstring: null
      method_inputs:
      - self
      - question_type
      - question_id
      - question_text
      method_defaults: []
      method_returns: []
      method_calls:
      - self.file_details['classes'].items
      - class_info.items
      - key.startswith
      - question_text.format
      - len
      - self.file_details[self.question_mapping[question_type]].items
      - self.process_items
      - self.process_question
      method_variables:
      - method_name
      - mapping
      - query
      - context
      method_decorators: []
      method_annotations: []
      method_properties: []
    class_method_generate:
      method_name: generate
      method_code: "def generate(self) -> tuple[List[Dict], List[Dict]]:\n    for\
        \ question in self.questions:\n        question_id = question['id']\n    \
        \    question_text = question['text']\n        question_type = question['type']\n\
        \        if question_type == 'file':\n            self.process_file_question(question_type,\
        \ question_id, question_text)\n        elif question_type in ['function',\
        \ 'class', 'method']:\n            self.process_func_class_question(question_type,\
        \ question_id, question_text)\n    return (self.qa_list, self.instruct_list)"
      method_ast: FunctionDef(name='generate', args=arguments(posonlyargs=[], args=[arg(arg='self',
        lineno=250, col_offset=17, end_lineno=250, end_col_offset=21)], kwonlyargs=[],
        kw_defaults=[], defaults=[]), body=[For(target=Name(id='question', ctx=Store(),
        lineno=251, col_offset=12, end_lineno=251, end_col_offset=20), iter=Attribute(value=Name(id='self',
        ctx=Load(), lineno=251, col_offset=24, end_lineno=251, end_col_offset=28),
        attr='questions', ctx=Load(), lineno=251, col_offset=24, end_lineno=251, end_col_offset=38),
        body=[Assign(targets=[Name(id='question_id', ctx=Store(), lineno=252, col_offset=12,
        end_lineno=252, end_col_offset=23)], value=Subscript(value=Name(id='question',
        ctx=Load(), lineno=252, col_offset=26, end_lineno=252, end_col_offset=34),
        slice=Constant(value='id', lineno=252, col_offset=35, end_lineno=252, end_col_offset=39),
        ctx=Load(), lineno=252, col_offset=26, end_lineno=252, end_col_offset=40),
        lineno=252, col_offset=12, end_lineno=252, end_col_offset=40), Assign(targets=[Name(id='question_text',
        ctx=Store(), lineno=253, col_offset=12, end_lineno=253, end_col_offset=25)],
        value=Subscript(value=Name(id='question', ctx=Load(), lineno=253, col_offset=28,
        end_lineno=253, end_col_offset=36), slice=Constant(value='text', lineno=253,
        col_offset=37, end_lineno=253, end_col_offset=43), ctx=Load(), lineno=253,
        col_offset=28, end_lineno=253, end_col_offset=44), lineno=253, col_offset=12,
        end_lineno=253, end_col_offset=44), Assign(targets=[Name(id='question_type',
        ctx=Store(), lineno=254, col_offset=12, end_lineno=254, end_col_offset=25)],
        value=Subscript(value=Name(id='question', ctx=Load(), lineno=254, col_offset=28,
        end_lineno=254, end_col_offset=36), slice=Constant(value='type', lineno=254,
        col_offset=37, end_lineno=254, end_col_offset=43), ctx=Load(), lineno=254,
        col_offset=28, end_lineno=254, end_col_offset=44), lineno=254, col_offset=12,
        end_lineno=254, end_col_offset=44), If(test=Compare(left=Name(id='question_type',
        ctx=Load(), lineno=255, col_offset=15, end_lineno=255, end_col_offset=28),
        ops=[Eq()], comparators=[Constant(value='file', lineno=255, col_offset=32,
        end_lineno=255, end_col_offset=38)], lineno=255, col_offset=15, end_lineno=255,
        end_col_offset=38), body=[Expr(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=256, col_offset=16, end_lineno=256, end_col_offset=20),
        attr='process_file_question', ctx=Load(), lineno=256, col_offset=16, end_lineno=256,
        end_col_offset=42), args=[Name(id='question_type', ctx=Load(), lineno=256,
        col_offset=43, end_lineno=256, end_col_offset=56), Name(id='question_id',
        ctx=Load(), lineno=256, col_offset=58, end_lineno=256, end_col_offset=69),
        Name(id='question_text', ctx=Load(), lineno=256, col_offset=71, end_lineno=256,
        end_col_offset=84)], keywords=[], lineno=256, col_offset=16, end_lineno=256,
        end_col_offset=85), lineno=256, col_offset=16, end_lineno=256, end_col_offset=85)],
        orelse=[If(test=Compare(left=Name(id='question_type', ctx=Load(), lineno=257,
        col_offset=17, end_lineno=257, end_col_offset=30), ops=[In()], comparators=[List(elts=[Constant(value='function',
        lineno=257, col_offset=35, end_lineno=257, end_col_offset=45), Constant(value='class',
        lineno=257, col_offset=47, end_lineno=257, end_col_offset=54), Constant(value='method',
        lineno=257, col_offset=56, end_lineno=257, end_col_offset=64)], ctx=Load(),
        lineno=257, col_offset=34, end_lineno=257, end_col_offset=65)], lineno=257,
        col_offset=17, end_lineno=257, end_col_offset=65), body=[Expr(value=Call(func=Attribute(value=Name(id='self',
        ctx=Load(), lineno=258, col_offset=16, end_lineno=258, end_col_offset=20),
        attr='process_func_class_question', ctx=Load(), lineno=258, col_offset=16,
        end_lineno=258, end_col_offset=48), args=[Name(id='question_type', ctx=Load(),
        lineno=258, col_offset=49, end_lineno=258, end_col_offset=62), Name(id='question_id',
        ctx=Load(), lineno=258, col_offset=64, end_lineno=258, end_col_offset=75),
        Name(id='question_text', ctx=Load(), lineno=258, col_offset=77, end_lineno=258,
        end_col_offset=90)], keywords=[], lineno=258, col_offset=16, end_lineno=258,
        end_col_offset=91), lineno=258, col_offset=16, end_lineno=258, end_col_offset=91)],
        orelse=[], lineno=257, col_offset=12, end_lineno=258, end_col_offset=91)],
        lineno=255, col_offset=12, end_lineno=258, end_col_offset=91)], orelse=[],
        lineno=251, col_offset=8, end_lineno=258, end_col_offset=91), Return(value=Tuple(elts=[Attribute(value=Name(id='self',
        ctx=Load(), lineno=259, col_offset=15, end_lineno=259, end_col_offset=19),
        attr='qa_list', ctx=Load(), lineno=259, col_offset=15, end_lineno=259, end_col_offset=27),
        Attribute(value=Name(id='self', ctx=Load(), lineno=259, col_offset=29, end_lineno=259,
        end_col_offset=33), attr='instruct_list', ctx=Load(), lineno=259, col_offset=29,
        end_lineno=259, end_col_offset=47)], ctx=Load(), lineno=259, col_offset=15,
        end_lineno=259, end_col_offset=47), lineno=259, col_offset=8, end_lineno=259,
        end_col_offset=47)], decorator_list=[], returns=Subscript(value=Name(id='tuple',
        ctx=Load(), lineno=250, col_offset=26, end_lineno=250, end_col_offset=31),
        slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load(), lineno=250,
        col_offset=32, end_lineno=250, end_col_offset=36), slice=Name(id='Dict', ctx=Load(),
        lineno=250, col_offset=37, end_lineno=250, end_col_offset=41), ctx=Load(),
        lineno=250, col_offset=32, end_lineno=250, end_col_offset=42), Subscript(value=Name(id='List',
        ctx=Load(), lineno=250, col_offset=44, end_lineno=250, end_col_offset=48),
        slice=Name(id='Dict', ctx=Load(), lineno=250, col_offset=49, end_lineno=250,
        end_col_offset=53), ctx=Load(), lineno=250, col_offset=44, end_lineno=250,
        end_col_offset=54)], ctx=Load(), lineno=250, col_offset=32, end_lineno=250,
        end_col_offset=54), ctx=Load(), lineno=250, col_offset=26, end_lineno=250,
        end_col_offset=55), lineno=250, col_offset=4, end_lineno=259, end_col_offset=47)
      method_docstring: null
      method_inputs:
      - self
      method_defaults: []
      method_returns:
      - (self.qa_list, self.instruct_list)
      method_calls:
      - self.process_file_question
      - self.process_func_class_question
      method_variables:
      - question_id
      - question_type
      - question_text
      method_decorators: []
      method_annotations: []
      method_properties: []
