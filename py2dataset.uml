@startuml
'Used to create py2dataset.png from https://www.plantuml.com/plantuml/uml'
: python py2dataset.py 

def main():
    command-line entry point for processing Python files and generating datasets.
    optional command-line arguments:
    --start (str, optional): starting directory for Python files or GitHub repository Python files, default: cwd
    --output_dir (str, optional): directory to write the output files, default: ./dataset/.
    --questions_pathname (str, optional): path and filename of the questions file, default: ./py2dataset_questions.json
    --model_config_pathname (str, optional): path and filename of the model configuration file, default: ./py2dataset_model_config.yaml
    --use_llm (bool, optional): use llm to answer code purpose question, default: FALSE
    --quiet (bool, optional): limit logging output, default: FALSE
    --single_process (bool, optional): Use a single process to process Python files. Default: False
    --detailed (bool, optional): include detailed analysis, default: FALSE
    --html (bool, optional): generate HTML output, default: FALSE
    --I (str, optional): enable interactive mode, default: FALSE
    --skip_regen (str, optional): skip regeneration of existing instruct.json files, default: FALSE
    --help: Display main() docstring.;

:py2dataset.py:
- parse command line arguments
- read questions
- obtain Python File listing within <starting directory>;

Repeat :for each Python file;

:get_python_file_details.py:
- extract code details from AST
- generate code relationship graphs;
:get_python_dataset.py: 
- answer questions and format answers;

Repeat :For each question;
:use the AST obtained data to answer question;
if (--use_llm and purpose question?) then (yes)
  :Use the llm to describe the code's purpose;
  if (--detailed?) then (yes)
    :use an llm to describe purpose and signifiance of each code object;
  else (no)
  endif
else (no)
endif
     
:construct instruct.json data
- instruction = current question
- input = code element
- output = answer to current question;

Repeat while (more questions?) is (yes)
->no;

:save_output.py:
save datasets and code file details
- <filename>.instruct.json
- <filename>.details.yaml';

:save code graph
- <filename>.external.png;

Repeat while (more Python files?) is (yes)
->no;

:combine all qa and instruct JSON files and create other datasets
- `instruct.json` - instruction/input/output dataset
- `instruct.html` - html formated file, if --html
- `train.json` - instruction/output dataset, if --use_llm
- `train.html` - html formated file, if --html;

:end;

@enduml