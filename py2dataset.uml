@startuml
'Used to create py2dataset.png from https://www.plantuml.com/plantuml/uml'
: python py2dataset.py directory 

**Positional arguments:**
- `directory`: The directory containing the Python files to analyze.

**Optional arguments:**
- `--use_llm`: Use large language model for answering 'purpose' questions.
- `--quiet`: Suppress all info logging messages.
- `--output_dir OUTPUT_DIR`: Output directory to save generated files; default='./datasets'
- `--graph`: Generate code relationship graphs.
- `--model_config_path MODEL_CONFIG_PATH`: Path and filename for the model configuration file; defualt='./py2dataset_model_config.yaml'
- `--questions_path QUESTIONS_PATH`: Path and filename for the questions to create the dataset; defualt='./py2dataset_questions.json';
:In py2dataset.py
- Parse command line arguments
- Read questions.json
- Obtain Python File listing within provided <directory>;
:For each Python file;
note right
Repeat the following for each Python file
end note
fork
    :In get_python_file_details.py
    - Extract code details from AST
    - Generate internal and external code relationship graphs;
    fork
        :In get_python_json.py 
        - Answer questions and format answers;
        note right
        Repeat the following for each question in questions.json
        end note
        if (use_llm and purpose question) then (yes)
            :Use the language model to answer question;
        else (no)
            :Parse the AST obtained data to answer question;
        endif
        :Construct qa.json data
        - question = current question
        - answer = answer to current question
        
        Construct instruct.json data
        - instruction = current question
        - input = code element
        - output = answer to current question;
     endfork
:In py2dataset.py save datasets and code file details
- <filename>.qa.json
- <filename>.instruct.json
- <filename>.details.yaml';
if (graph is True) then (yes)
   :Save code graphs
   - <filename>.internal.png
   - <filename>.external.png;
endif
endfork
:After looping through each python file combine all JSON files
- qa.json
- instruct.json
- instruct_cleaned.json (replaces duplicated code elements with an empty string);
:End;
@enduml