file_info:
  file_code: "\"\"\"\nThis module processes Python code and generated questions and\
    \ instructions to create vector embeddings. \nIt uses a pretrained model to generate\
    \ the embeddings.\nRequirements:\n    [req001] The get_vector_embeddings function\
    \ shall accept a dictionary representing file details, a list of QA pairs, and\
    \ a list of instructions.\n    [req002] The get_vector_embeddings function shall\
    \ use a pretrained embedding model to generate vector embeddings for the provided\
    \ inputs.\n    [req003] The get_vector_embeddings function shall return three\
    \ lists of vector embeddings, one for each input.\n    [req004] The get_vector_embeddings\
    \ function shall process each Python file detail in chunks to generate embeddings,\
    \ if an AST is provided.\n    [req005] The EmbeddingGenerator class shall be initialized\
    \ with a tokenizer and model from a pretrained embedding model.\n    [req006]\
    \ The EmbeddingGenerator class shall generate vector embeddings for a given piece\
    \ of text using its get_embeddings method.\n    [req007] The get_embeddings method\
    \ of the EmbeddingGenerator class shall accept a piece of text.\n    [req008]\
    \ The get_embeddings method of the EmbeddingGenerator class shall use the tokenizer\
    \ and model of the EmbeddingGenerator to generate a vector embedding for the provided\
    \ text.\n    [req009] The get_embeddings method of the EmbeddingGenerator class\
    \ shall return the generated vector embedding.\n    [req010] The get_ast_embeddings\
    \ function shall accept an AST and an EmbeddingGenerator.\n    [req011] The get_ast_embeddings\
    \ function shall generate embeddings for the provided AST using the EmbeddingGenerator.\n\
    \    [req012] The get_ast_embeddings function shall recursively generate embeddings\
    \ for child nodes in the AST.\n    [req013] The get_ast_embeddings function shall\
    \ return a list of the generated embeddings.\n\"\"\"\nimport json\nimport logging\n\
    import importlib\nimport numpy as np\nfrom typing import List, Dict, Tuple, Any\n\
    \n# Set up logging\nlogging.basicConfig(format='%(asctime)s - %(levelname)s -\
    \ %(message)s', level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\
    class EmbeddingGenerator:\n    \"\"\"\n    A class used to generate vector embeddings\
    \ for Python code and generated questions and instructions.\n    Attributes:\n\
    \        tokenizer (AutoTokenizer): The tokenizer of the pretrained model used\
    \ to tokenize the text.\n        model (AutoModel): The pretrained model used\
    \ to generate the embeddings.\n    Methods:\n        get_embeddings(text: str)\
    \ -> List[float]: Generates a vector embedding for a given piece of text.\n  \
    \  \"\"\"\n    def __init__(self) -> None:\n        try:\n             # read\
    \ in the embedding model details\n            with open('config.json') as config_file:\
    \  # corrected file name\n                self.config = json.load(config_file)[0]['embedding_model']\n\
    \            \n            # define the tokenizer and the model\n            tokenizer_module_name,\
    \ tokenizer_class_name = self.config['tokenizer_import_path'].rsplit('.', 1)\n\
    \            model_module_name, model_class_name = self.config['model_import_path'].rsplit('.',\
    \ 1)\n            tokenizer_module = importlib.import_module(tokenizer_module_name)\n\
    \            model_module = importlib.import_module(model_module_name)\n     \
    \       TokenizerClass = getattr(tokenizer_module, tokenizer_class_name)\n   \
    \         ModelClass = getattr(model_module, model_class_name)\n\n           \
    \ self.tokenizer = TokenizerClass.from_pretrained(self.config[\"tokenizer\"])\n\
    \            self.model = ModelClass.from_pretrained(self.config[\"model_path\"\
    ])\n\n        except (FileNotFoundError, json.JSONDecodeError, ImportError, AttributeError)\
    \ as e:\n            logger.error(f'Failed to load configuration file: {e}')\n\
    \            self.tokenizer = None\n            self.model = None\n\n    def get_embeddings(self,\
    \ text: str) -> List[List[float]]:\n        \"\"\"\n        Generates a vector\
    \ embedding for a given piece of text.\n        Args:\n            text (str):\
    \ The text to generate an embedding for.\n        Returns:\n            List[List[float]]:\
    \ The generated vector embeddings.\n        \"\"\"\n        if not self.tokenizer\
    \ or not self.model:\n            logger.error('Embedding model not available.')\n\
    \            return []\n\n        # Tokenize the text into individual tokens\n\
    \        tokens = self.tokenizer.tokenize(text)\n\n        # Break the tokens\
    \ into chunks if the total number of tokens exceeds max_length\n        chunks\
    \ = [tokens[i:i+self.config[\"max_seq_length\"]] for i in range(0, len(tokens),\
    \ self.config[\"max_seq_length\"])]\n\n        # Generate embeddings for each\
    \ chunk\n        embeddings = []\n        for chunk in chunks:\n            #\
    \ Convert tokens back to text for this chunk\n            chunk_text = self.tokenizer.convert_tokens_to_string(chunk)\n\
    \            inputs = self.tokenizer(chunk_text, return_tensors='pt', truncation=True,\
    \ padding=True, max_length=self.config[\"max_seq_length\"])\n            outputs\
    \ = self.model(**inputs)\n            chunk_embeddings = outputs.last_hidden_state.mean(dim=1).detach().numpy().tolist()\n\
    \            embeddings.append(chunk_embeddings)\n\n        return embeddings\n\
    \n\ndef get_ast_embeddings(ast: Dict[str, Any], generator: EmbeddingGenerator)\
    \ -> List[List[float]]:\n    \"\"\"\n    Generates embeddings for an abstract\
    \ syntax tree (AST).\n    Args:\n        ast (Dict): The AST to generate embeddings\
    \ for.\n        generator (EmbeddingGenerator): The generator used to create the\
    \ embeddings.\n    Returns:\n        List[List[float]]: The embeddings for the\
    \ AST.\n    \"\"\"\n    # Embed the node type\n    embeddings = [generator.get_embeddings(ast['node_type'])]\n\
    \n    # If the node has a name, embed the name\n    if 'name' in ast:\n      \
    \  embeddings.append(generator.get_embeddings(ast['name']))\n\n    # If the node\
    \ has children, recursively generate embeddings for the children\n    if 'children'\
    \ in ast:\n        for child in ast['children']:\n            embeddings.extend(get_ast_embeddings(child,\
    \ generator))\n\n    return embeddings\n\n\ndef simplify_ast(node):\n    node_type\
    \ = type(node).__name__\n    \n    if isinstance(node, ast.AST):\n        fields\
    \ = []\n        for field in node._fields:\n            value = getattr(node,\
    \ field)\n            if isinstance(value, list):\n                for item in\
    \ value:\n                    if isinstance(item, ast.AST):\n                \
    \        fields.append(simplify_ast(item))\n            elif isinstance(value,\
    \ ast.AST):\n                fields.append(simplify_ast(value))\n        \n  \
    \      return (node_type, fields)\n    \n    else:\n        return node_type\n\
    \ndef get_vector_embeddings(base_name: str, file_details: Dict[str, Any], qa_list:\
    \ List[Dict[str, Any]], instruct_list: List[Dict[str, Any]]) -> Tuple[List[List[float]],\
    \ List[List[float]], List[List[float]]]:\n    \"\"\"\n    Converts file details,\
    \ QA pairs, and instructions into vector embeddings.\n    Args:\n        base_name\
    \ (str): The base name of the file.\n        file_details (Dict): A dictionary\
    \ containing details of the Python file.\n        qa_list (List[Dict]): A list\
    \ of question-answer pairs.\n        instruct_list (List[Dict]): A list of instructions.\n\
    \    Returns:\n        Tuple[List[List[float]], List[List[float]], List[List[float]]]:\
    \ Three lists of vector embeddings, one for each input.\n    \"\"\"\n    generator\
    \ = EmbeddingGenerator()\n    file_detail_embeddings = [generator.get_embeddings(base_name)]\n\
    \    ast_heirarchy_embeddings = get_ast_embeddings(simplify_ast(file_details['file_info']['file_ast']),\
    \ generator)\n    file_detail_embeddings.append(ast_heirarchy_embeddings)\n  \
    \  ast_embeddings = get_ast_embeddings(file_details['file_info']['file_ast'],\
    \ generator)\n    file_detail_embeddings.append(ast_embeddings)\n\n    qa_list_embeddings\
    \ = [generator.get_embeddings(base_name+'.qa.json')]\n    qa_embeddings = [generator.get_embeddings(json.dumps(qa))\
    \ for qa in qa_list]\n    qa_list_embeddings.append(qa_embeddings)\n\n    instruct_list_embeddings\
    \ = [generator.get_embeddings(base_name+'.instruct.json')]\n    instruct_embeddings\
    \ = [generator.get_embeddings(json.dumps(instruct)) for instruct in instruct_list]\n\
    \    instruct_list_embeddings.append(instruct_embeddings)\n    \n    return file_detail_embeddings,\
    \ qa_list_embeddings, instruct_list_embeddings\n"
  file_ast: 'Module(body=[Expr(value=Constant(value=''\nThis module processes Python
    code and generated questions and instructions to create vector embeddings. \nIt
    uses a pretrained model to generate the embeddings.\nRequirements:\n    [req001]
    The get_vector_embeddings function shall accept a dictionary representing file
    details, a list of QA pairs, and a list of instructions.\n    [req002] The get_vector_embeddings
    function shall use a pretrained embedding model to generate vector embeddings
    for the provided inputs.\n    [req003] The get_vector_embeddings function shall
    return three lists of vector embeddings, one for each input.\n    [req004] The
    get_vector_embeddings function shall process each Python file detail in chunks
    to generate embeddings, if an AST is provided.\n    [req005] The EmbeddingGenerator
    class shall be initialized with a tokenizer and model from a pretrained embedding
    model.\n    [req006] The EmbeddingGenerator class shall generate vector embeddings
    for a given piece of text using its get_embeddings method.\n    [req007] The get_embeddings
    method of the EmbeddingGenerator class shall accept a piece of text.\n    [req008]
    The get_embeddings method of the EmbeddingGenerator class shall use the tokenizer
    and model of the EmbeddingGenerator to generate a vector embedding for the provided
    text.\n    [req009] The get_embeddings method of the EmbeddingGenerator class
    shall return the generated vector embedding.\n    [req010] The get_ast_embeddings
    function shall accept an AST and an EmbeddingGenerator.\n    [req011] The get_ast_embeddings
    function shall generate embeddings for the provided AST using the EmbeddingGenerator.\n    [req012]
    The get_ast_embeddings function shall recursively generate embeddings for child
    nodes in the AST.\n    [req013] The get_ast_embeddings function shall return a
    list of the generated embeddings.\n'')), Import(names=[alias(name=''json'')]),
    Import(names=[alias(name=''logging'')]), Import(names=[alias(name=''importlib'')]),
    Import(names=[alias(name=''numpy'', asname=''np'')]), ImportFrom(module=''typing'',
    names=[alias(name=''List''), alias(name=''Dict''), alias(name=''Tuple''), alias(name=''Any'')],
    level=0), Expr(value=Call(func=Attribute(value=Name(id=''logging'', ctx=Load()),
    attr=''basicConfig'', ctx=Load()), args=[], keywords=[keyword(arg=''format'',
    value=Constant(value=''%(asctime)s - %(levelname)s - %(message)s'')), keyword(arg=''level'',
    value=Attribute(value=Name(id=''logging'', ctx=Load()), attr=''INFO'', ctx=Load()))])),
    Assign(targets=[Name(id=''logger'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''logging'',
    ctx=Load()), attr=''getLogger'', ctx=Load()), args=[Name(id=''__name__'', ctx=Load())],
    keywords=[])), ClassDef(name=''EmbeddingGenerator'', bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    A
    class used to generate vector embeddings for Python code and generated questions
    and instructions.\n    Attributes:\n        tokenizer (AutoTokenizer): The tokenizer
    of the pretrained model used to tokenize the text.\n        model (AutoModel):
    The pretrained model used to generate the embeddings.\n    Methods:\n        get_embeddings(text:
    str) -> List[float]: Generates a vector embedding for a given piece of text.\n    '')),
    FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'')],
    kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
    ctx=Load()), args=[Constant(value=''config.json'')], keywords=[]), optional_vars=Name(id=''config_file'',
    ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''config'', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''load'', ctx=Load()), args=[Name(id=''config_file'', ctx=Load())],
    keywords=[]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=''embedding_model''),
    ctx=Load()))]), Assign(targets=[Tuple(elts=[Name(id=''tokenizer_module_name'',
    ctx=Store()), Name(id=''tokenizer_class_name'', ctx=Store())], ctx=Store())],
    value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''config'', ctx=Load()), slice=Constant(value=''tokenizer_import_path''),
    ctx=Load()), attr=''rsplit'', ctx=Load()), args=[Constant(value=''.''), Constant(value=1)],
    keywords=[])), Assign(targets=[Tuple(elts=[Name(id=''model_module_name'', ctx=Store()),
    Name(id=''model_class_name'', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''config'', ctx=Load()), slice=Constant(value=''model_import_path''),
    ctx=Load()), attr=''rsplit'', ctx=Load()), args=[Constant(value=''.''), Constant(value=1)],
    keywords=[])), Assign(targets=[Name(id=''tokenizer_module'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''importlib'',
    ctx=Load()), attr=''import_module'', ctx=Load()), args=[Name(id=''tokenizer_module_name'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''model_module'', ctx=Store())],
    value=Call(func=Attribute(value=Name(id=''importlib'', ctx=Load()), attr=''import_module'',
    ctx=Load()), args=[Name(id=''model_module_name'', ctx=Load())], keywords=[])),
    Assign(targets=[Name(id=''TokenizerClass'', ctx=Store())], value=Call(func=Name(id=''getattr'',
    ctx=Load()), args=[Name(id=''tokenizer_module'', ctx=Load()), Name(id=''tokenizer_class_name'',
    ctx=Load())], keywords=[])), Assign(targets=[Name(id=''ModelClass'', ctx=Store())],
    value=Call(func=Name(id=''getattr'', ctx=Load()), args=[Name(id=''model_module'',
    ctx=Load()), Name(id=''model_class_name'', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''tokenizer'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''TokenizerClass'',
    ctx=Load()), attr=''from_pretrained'', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''config'', ctx=Load()), slice=Constant(value=''tokenizer''),
    ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''model'', ctx=Store())], value=Call(func=Attribute(value=Name(id=''ModelClass'',
    ctx=Load()), attr=''from_pretrained'', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''config'', ctx=Load()), slice=Constant(value=''model_path''),
    ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id=''FileNotFoundError'',
    ctx=Load()), Attribute(value=Name(id=''json'', ctx=Load()), attr=''JSONDecodeError'',
    ctx=Load()), Name(id=''ImportError'', ctx=Load()), Name(id=''AttributeError'',
    ctx=Load())], ctx=Load()), name=''e'', body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
    ctx=Load()), attr=''error'', ctx=Load()), args=[JoinedStr(values=[Constant(value=''Failed
    to load configuration file: ''), FormattedValue(value=Name(id=''e'', ctx=Load()),
    conversion=-1)])], keywords=[])), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''tokenizer'', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''model'', ctx=Store())], value=Constant(value=None))])], orelse=[],
    finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name=''get_embeddings'',
    args=arguments(posonlyargs=[], args=[arg(arg=''self''), arg(arg=''text'', annotation=Name(id=''str'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Generates
    a vector embedding for a given piece of text.\n        Args:\n            text
    (str): The text to generate an embedding for.\n        Returns:\n            List[List[float]]:
    The generated vector embeddings.\n        '')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(),
    operand=Attribute(value=Name(id=''self'', ctx=Load()), attr=''tokenizer'', ctx=Load())),
    UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'', ctx=Load()), attr=''model'',
    ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
    ctx=Load()), attr=''error'', ctx=Load()), args=[Constant(value=''Embedding model
    not available.'')], keywords=[])), Return(value=List(elts=[], ctx=Load()))], orelse=[]),
    Assign(targets=[Name(id=''tokens'', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''tokenizer'', ctx=Load()), attr=''tokenize'', ctx=Load()),
    args=[Name(id=''text'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''chunks'',
    ctx=Store())], value=ListComp(elt=Subscript(value=Name(id=''tokens'', ctx=Load()),
    slice=Slice(lower=Name(id=''i'', ctx=Load()), upper=BinOp(left=Name(id=''i'',
    ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''config'', ctx=Load()), slice=Constant(value=''max_seq_length''),
    ctx=Load()))), ctx=Load()), generators=[comprehension(target=Name(id=''i'', ctx=Store()),
    iter=Call(func=Name(id=''range'', ctx=Load()), args=[Constant(value=0), Call(func=Name(id=''len'',
    ctx=Load()), args=[Name(id=''tokens'', ctx=Load())], keywords=[]), Subscript(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''config'', ctx=Load()), slice=Constant(value=''max_seq_length''),
    ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id=''embeddings'',
    ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id=''chunk'',
    ctx=Store()), iter=Name(id=''chunks'', ctx=Load()), body=[Assign(targets=[Name(id=''chunk_text'',
    ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
    ctx=Load()), attr=''tokenizer'', ctx=Load()), attr=''convert_tokens_to_string'',
    ctx=Load()), args=[Name(id=''chunk'', ctx=Load())], keywords=[])), Assign(targets=[Name(id=''inputs'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''tokenizer'', ctx=Load()), args=[Name(id=''chunk_text'', ctx=Load())], keywords=[keyword(arg=''return_tensors'',
    value=Constant(value=''pt'')), keyword(arg=''truncation'', value=Constant(value=True)),
    keyword(arg=''padding'', value=Constant(value=True)), keyword(arg=''max_length'',
    value=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load()), attr=''config'',
    ctx=Load()), slice=Constant(value=''max_seq_length''), ctx=Load()))])), Assign(targets=[Name(id=''outputs'',
    ctx=Store())], value=Call(func=Attribute(value=Name(id=''self'', ctx=Load()),
    attr=''model'', ctx=Load()), args=[], keywords=[keyword(value=Name(id=''inputs'',
    ctx=Load()))])), Assign(targets=[Name(id=''chunk_embeddings'', ctx=Store())],
    value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id=''outputs'',
    ctx=Load()), attr=''last_hidden_state'', ctx=Load()), attr=''mean'', ctx=Load()),
    args=[], keywords=[keyword(arg=''dim'', value=Constant(value=1))]), attr=''detach'',
    ctx=Load()), args=[], keywords=[]), attr=''numpy'', ctx=Load()), args=[], keywords=[]),
    attr=''tolist'', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''embeddings'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[Name(id=''chunk_embeddings'',
    ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id=''embeddings'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''float'',
    ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name=''get_ast_embeddings'',
    args=arguments(posonlyargs=[], args=[arg(arg=''ast'', annotation=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Name(id=''Any'',
    ctx=Load())], ctx=Load()), ctx=Load())), arg(arg=''generator'', annotation=Name(id=''EmbeddingGenerator'',
    ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Generates
    embeddings for an abstract syntax tree (AST).\n    Args:\n        ast (Dict):
    The AST to generate embeddings for.\n        generator (EmbeddingGenerator): The
    generator used to create the embeddings.\n    Returns:\n        List[List[float]]:
    The embeddings for the AST.\n    '')), Assign(targets=[Name(id=''embeddings'',
    ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id=''generator'',
    ctx=Load()), attr=''get_embeddings'', ctx=Load()), args=[Subscript(value=Name(id=''ast'',
    ctx=Load()), slice=Constant(value=''node_type''), ctx=Load())], keywords=[])],
    ctx=Load())), If(test=Compare(left=Constant(value=''name''), ops=[In()], comparators=[Name(id=''ast'',
    ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id=''embeddings'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''generator'',
    ctx=Load()), attr=''get_embeddings'', ctx=Load()), args=[Subscript(value=Name(id=''ast'',
    ctx=Load()), slice=Constant(value=''name''), ctx=Load())], keywords=[])], keywords=[]))],
    orelse=[]), If(test=Compare(left=Constant(value=''children''), ops=[In()], comparators=[Name(id=''ast'',
    ctx=Load())]), body=[For(target=Name(id=''child'', ctx=Store()), iter=Subscript(value=Name(id=''ast'',
    ctx=Load()), slice=Constant(value=''children''), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id=''embeddings'',
    ctx=Load()), attr=''extend'', ctx=Load()), args=[Call(func=Name(id=''get_ast_embeddings'',
    ctx=Load()), args=[Name(id=''child'', ctx=Load()), Name(id=''generator'', ctx=Load())],
    keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id=''embeddings'',
    ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''float'',
    ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name=''simplify_ast'', args=arguments(posonlyargs=[],
    args=[arg(arg=''node'')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id=''node_type'',
    ctx=Store())], value=Attribute(value=Call(func=Name(id=''type'', ctx=Load()),
    args=[Name(id=''node'', ctx=Load())], keywords=[]), attr=''__name__'', ctx=Load())),
    If(test=Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''node'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''AST'', ctx=Load())],
    keywords=[]), body=[Assign(targets=[Name(id=''fields'', ctx=Store())], value=List(elts=[],
    ctx=Load())), For(target=Name(id=''field'', ctx=Store()), iter=Attribute(value=Name(id=''node'',
    ctx=Load()), attr=''_fields'', ctx=Load()), body=[Assign(targets=[Name(id=''value'',
    ctx=Store())], value=Call(func=Name(id=''getattr'', ctx=Load()), args=[Name(id=''node'',
    ctx=Load()), Name(id=''field'', ctx=Load())], keywords=[])), If(test=Call(func=Name(id=''isinstance'',
    ctx=Load()), args=[Name(id=''value'', ctx=Load()), Name(id=''list'', ctx=Load())],
    keywords=[]), body=[For(target=Name(id=''item'', ctx=Store()), iter=Name(id=''value'',
    ctx=Load()), body=[If(test=Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''item'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''AST'', ctx=Load())],
    keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''fields'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[Call(func=Name(id=''simplify_ast'', ctx=Load()),
    args=[Name(id=''item'', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])],
    orelse=[])], orelse=[If(test=Call(func=Name(id=''isinstance'', ctx=Load()), args=[Name(id=''value'',
    ctx=Load()), Attribute(value=Name(id=''ast'', ctx=Load()), attr=''AST'', ctx=Load())],
    keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id=''fields'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[Call(func=Name(id=''simplify_ast'', ctx=Load()),
    args=[Name(id=''value'', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])],
    orelse=[]), Return(value=Tuple(elts=[Name(id=''node_type'', ctx=Load()), Name(id=''fields'',
    ctx=Load())], ctx=Load()))], orelse=[Return(value=Name(id=''node_type'', ctx=Load()))])],
    decorator_list=[]), FunctionDef(name=''get_vector_embeddings'', args=arguments(posonlyargs=[],
    args=[arg(arg=''base_name'', annotation=Name(id=''str'', ctx=Load())), arg(arg=''file_details'',
    annotation=Subscript(value=Name(id=''Dict'', ctx=Load()), slice=Tuple(elts=[Name(id=''str'',
    ctx=Load()), Name(id=''Any'', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg=''qa_list'',
    annotation=Subscript(value=Name(id=''List'', ctx=Load()), slice=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Name(id=''Any'',
    ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg=''instruct_list'',
    annotation=Subscript(value=Name(id=''List'', ctx=Load()), slice=Subscript(value=Name(id=''Dict'',
    ctx=Load()), slice=Tuple(elts=[Name(id=''str'', ctx=Load()), Name(id=''Any'',
    ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[],
    defaults=[]), body=[Expr(value=Constant(value=''\n    Converts file details, QA
    pairs, and instructions into vector embeddings.\n    Args:\n        base_name
    (str): The base name of the file.\n        file_details (Dict): A dictionary containing
    details of the Python file.\n        qa_list (List[Dict]): A list of question-answer
    pairs.\n        instruct_list (List[Dict]): A list of instructions.\n    Returns:\n        Tuple[List[List[float]],
    List[List[float]], List[List[float]]]: Three lists of vector embeddings, one for
    each input.\n    '')), Assign(targets=[Name(id=''generator'', ctx=Store())], value=Call(func=Name(id=''EmbeddingGenerator'',
    ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id=''file_detail_embeddings'',
    ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id=''generator'',
    ctx=Load()), attr=''get_embeddings'', ctx=Load()), args=[Name(id=''base_name'',
    ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id=''ast_heirarchy_embeddings'',
    ctx=Store())], value=Call(func=Name(id=''get_ast_embeddings'', ctx=Load()), args=[Call(func=Name(id=''simplify_ast'',
    ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''file_details'', ctx=Load()),
    slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_ast''),
    ctx=Load())], keywords=[]), Name(id=''generator'', ctx=Load())], keywords=[])),
    Expr(value=Call(func=Attribute(value=Name(id=''file_detail_embeddings'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[Name(id=''ast_heirarchy_embeddings'', ctx=Load())],
    keywords=[])), Assign(targets=[Name(id=''ast_embeddings'', ctx=Store())], value=Call(func=Name(id=''get_ast_embeddings'',
    ctx=Load()), args=[Subscript(value=Subscript(value=Name(id=''file_details'', ctx=Load()),
    slice=Constant(value=''file_info''), ctx=Load()), slice=Constant(value=''file_ast''),
    ctx=Load()), Name(id=''generator'', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id=''file_detail_embeddings'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[Name(id=''ast_embeddings'', ctx=Load())],
    keywords=[])), Assign(targets=[Name(id=''qa_list_embeddings'', ctx=Store())],
    value=List(elts=[Call(func=Attribute(value=Name(id=''generator'', ctx=Load()),
    attr=''get_embeddings'', ctx=Load()), args=[BinOp(left=Name(id=''base_name'',
    ctx=Load()), op=Add(), right=Constant(value=''.qa.json''))], keywords=[])], ctx=Load())),
    Assign(targets=[Name(id=''qa_embeddings'', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id=''generator'',
    ctx=Load()), attr=''get_embeddings'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dumps'', ctx=Load()), args=[Name(id=''qa'', ctx=Load())],
    keywords=[])], keywords=[]), generators=[comprehension(target=Name(id=''qa'',
    ctx=Store()), iter=Name(id=''qa_list'', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id=''qa_list_embeddings'',
    ctx=Load()), attr=''append'', ctx=Load()), args=[Name(id=''qa_embeddings'', ctx=Load())],
    keywords=[])), Assign(targets=[Name(id=''instruct_list_embeddings'', ctx=Store())],
    value=List(elts=[Call(func=Attribute(value=Name(id=''generator'', ctx=Load()),
    attr=''get_embeddings'', ctx=Load()), args=[BinOp(left=Name(id=''base_name'',
    ctx=Load()), op=Add(), right=Constant(value=''.instruct.json''))], keywords=[])],
    ctx=Load())), Assign(targets=[Name(id=''instruct_embeddings'', ctx=Store())],
    value=ListComp(elt=Call(func=Attribute(value=Name(id=''generator'', ctx=Load()),
    attr=''get_embeddings'', ctx=Load()), args=[Call(func=Attribute(value=Name(id=''json'',
    ctx=Load()), attr=''dumps'', ctx=Load()), args=[Name(id=''instruct'', ctx=Load())],
    keywords=[])], keywords=[]), generators=[comprehension(target=Name(id=''instruct'',
    ctx=Store()), iter=Name(id=''instruct_list'', ctx=Load()), ifs=[], is_async=0)])),
    Expr(value=Call(func=Attribute(value=Name(id=''instruct_list_embeddings'', ctx=Load()),
    attr=''append'', ctx=Load()), args=[Name(id=''instruct_embeddings'', ctx=Load())],
    keywords=[])), Return(value=Tuple(elts=[Name(id=''file_detail_embeddings'', ctx=Load()),
    Name(id=''qa_list_embeddings'', ctx=Load()), Name(id=''instruct_list_embeddings'',
    ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id=''Tuple'',
    ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''float'',
    ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''float'',
    ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id=''List'', ctx=Load()),
    slice=Subscript(value=Name(id=''List'', ctx=Load()), slice=Name(id=''float'',
    ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])'
  file_dependencies:
  - typing
  - importlib
  - json
  - logging
  - numpy
  file_functions:
  - get_ast_embeddings
  - simplify_ast
  - get_vector_embeddings
  file_classes:
  - EmbeddingGenerator
  file_control_flow: module -> class -> def __init__ -> try -> with -> except -> def
    get_embeddings -> if -> for -> def get_ast_embeddings -> if -> if -> for -> def
    simplify_ast -> if -> for -> if -> for -> if -> if -> def get_vector_embeddings
  internal_code_graph:
    nodes:
    - get_ast_embeddings
    - simplify_ast
    - get_vector_embeddings
    - EmbeddingGenerator
    - EmbeddingGenerator.__init__
    - EmbeddingGenerator.get_embeddings
    edges:
    - source: get_ast_embeddings
      target: get_ast_embeddings
      target_input:
      - ast
      - generator
      target_returns:
      - embeddings
    - source: simplify_ast
      target: simplify_ast
      target_input:
      - node
      target_returns:
      - (node_type, fields)
      - node_type
    - source: get_vector_embeddings
      target: EmbeddingGenerator
    - source: get_vector_embeddings
      target: get_ast_embeddings
      target_input:
      - ast
      - generator
      target_returns:
      - embeddings
    - source: get_vector_embeddings
      target: simplify_ast
      target_input:
      - node
      target_returns:
      - (node_type, fields)
      - node_type
    - source: EmbeddingGenerator
      target: EmbeddingGenerator.__init__
    - source: EmbeddingGenerator
      target: EmbeddingGenerator.get_embeddings
  entire_code_graph:
    nodes:
    - get_ast_embeddings
    - simplify_ast
    - get_vector_embeddings
    - EmbeddingGenerator
    - EmbeddingGenerator.__init__
    - EmbeddingGenerator.get_embeddings
    - embeddings.append
    - generator.get_embeddings
    - embeddings.extend
    - isinstance
    - fields.append
    - getattr
    - type
    - qa_list_embeddings.append
    - instruct_list_embeddings.append
    - file_detail_embeddings.append
    - json.dumps
    - self.config['tokenizer_import_path'].rsplit
    - self.config['model_import_path'].rsplit
    - json.load
    - ModelClass.from_pretrained
    - logger.error
    - open
    - TokenizerClass.from_pretrained
    - importlib.import_module
    - self.tokenizer.convert_tokens_to_string
    - self.tokenizer
    - outputs.last_hidden_state.mean(dim=1).detach().numpy
    - range
    - outputs.last_hidden_state.mean(dim=1).detach
    - outputs.last_hidden_state.mean(dim=1).detach().numpy().tolist
    - self.model
    - self.tokenizer.tokenize
    - outputs.last_hidden_state.mean
    - len
    edges:
    - source: get_ast_embeddings
      target: embeddings.append
    - source: get_ast_embeddings
      target: get_ast_embeddings
      target_input:
      - ast
      - generator
      target_returns:
      - embeddings
    - source: get_ast_embeddings
      target: generator.get_embeddings
    - source: get_ast_embeddings
      target: embeddings.extend
    - source: simplify_ast
      target: isinstance
    - source: simplify_ast
      target: fields.append
    - source: simplify_ast
      target: getattr
    - source: simplify_ast
      target: type
    - source: simplify_ast
      target: simplify_ast
      target_input:
      - node
      target_returns:
      - (node_type, fields)
      - node_type
    - source: get_vector_embeddings
      target: EmbeddingGenerator
    - source: get_vector_embeddings
      target: qa_list_embeddings.append
    - source: get_vector_embeddings
      target: instruct_list_embeddings.append
    - source: get_vector_embeddings
      target: get_ast_embeddings
      target_input:
      - ast
      - generator
      target_returns:
      - embeddings
    - source: get_vector_embeddings
      target: file_detail_embeddings.append
    - source: get_vector_embeddings
      target: json.dumps
    - source: get_vector_embeddings
      target: simplify_ast
      target_input:
      - node
      target_returns:
      - (node_type, fields)
      - node_type
    - source: get_vector_embeddings
      target: generator.get_embeddings
    - source: EmbeddingGenerator
      target: EmbeddingGenerator.__init__
    - source: EmbeddingGenerator
      target: EmbeddingGenerator.get_embeddings
    - source: EmbeddingGenerator.__init__
      target: self.config['tokenizer_import_path'].rsplit
    - source: EmbeddingGenerator.__init__
      target: self.config['model_import_path'].rsplit
    - source: EmbeddingGenerator.__init__
      target: json.load
    - source: EmbeddingGenerator.__init__
      target: ModelClass.from_pretrained
    - source: EmbeddingGenerator.__init__
      target: logger.error
    - source: EmbeddingGenerator.__init__
      target: getattr
    - source: EmbeddingGenerator.__init__
      target: open
    - source: EmbeddingGenerator.__init__
      target: TokenizerClass.from_pretrained
    - source: EmbeddingGenerator.__init__
      target: importlib.import_module
    - source: EmbeddingGenerator.get_embeddings
      target: self.tokenizer.convert_tokens_to_string
    - source: EmbeddingGenerator.get_embeddings
      target: self.tokenizer
    - source: EmbeddingGenerator.get_embeddings
      target: outputs.last_hidden_state.mean(dim=1).detach().numpy
    - source: EmbeddingGenerator.get_embeddings
      target: range
    - source: EmbeddingGenerator.get_embeddings
      target: logger.error
    - source: EmbeddingGenerator.get_embeddings
      target: outputs.last_hidden_state.mean(dim=1).detach
    - source: EmbeddingGenerator.get_embeddings
      target: outputs.last_hidden_state.mean(dim=1).detach().numpy().tolist
    - source: EmbeddingGenerator.get_embeddings
      target: embeddings.append
    - source: EmbeddingGenerator.get_embeddings
      target: self.model
    - source: EmbeddingGenerator.get_embeddings
      target: self.tokenizer.tokenize
    - source: EmbeddingGenerator.get_embeddings
      target: outputs.last_hidden_state.mean
    - source: EmbeddingGenerator.get_embeddings
      target: len
functions:
  get_ast_embeddings:
    function_name: get_ast_embeddings
    function_code: "def get_ast_embeddings(ast: Dict[str, Any], generator: EmbeddingGenerator)\
      \ -> List[List[float]]:\n    \"\"\"\n    Generates embeddings for an abstract\
      \ syntax tree (AST).\n    Args:\n        ast (Dict): The AST to generate embeddings\
      \ for.\n        generator (EmbeddingGenerator): The generator used to create\
      \ the embeddings.\n    Returns:\n        List[List[float]]: The embeddings for\
      \ the AST.\n    \"\"\"\n    embeddings = [generator.get_embeddings(ast['node_type'])]\n\
      \    if 'name' in ast:\n        embeddings.append(generator.get_embeddings(ast['name']))\n\
      \    if 'children' in ast:\n        for child in ast['children']:\n        \
      \    embeddings.extend(get_ast_embeddings(child, generator))\n    return embeddings"
    function_ast: 'FunctionDef(name=''get_ast_embeddings'', args=arguments(posonlyargs=[],
      args=[arg(arg=''ast'', annotation=Subscript(value=Name(id=''Dict'', ctx=Load(),
      lineno=91, col_offset=28, end_lineno=91, end_col_offset=32), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=91, col_offset=33, end_lineno=91, end_col_offset=36), Name(id=''Any'',
      ctx=Load(), lineno=91, col_offset=38, end_lineno=91, end_col_offset=41)], ctx=Load(),
      lineno=91, col_offset=33, end_lineno=91, end_col_offset=41), ctx=Load(), lineno=91,
      col_offset=28, end_lineno=91, end_col_offset=42), lineno=91, col_offset=23,
      end_lineno=91, end_col_offset=42), arg(arg=''generator'', annotation=Name(id=''EmbeddingGenerator'',
      ctx=Load(), lineno=91, col_offset=55, end_lineno=91, end_col_offset=73), lineno=91,
      col_offset=44, end_lineno=91, end_col_offset=73)], kwonlyargs=[], kw_defaults=[],
      defaults=[]), body=[Expr(value=Constant(value=''\n    Generates embeddings for
      an abstract syntax tree (AST).\n    Args:\n        ast (Dict): The AST to generate
      embeddings for.\n        generator (EmbeddingGenerator): The generator used
      to create the embeddings.\n    Returns:\n        List[List[float]]: The embeddings
      for the AST.\n    '', lineno=92, col_offset=4, end_lineno=99, end_col_offset=7),
      lineno=92, col_offset=4, end_lineno=99, end_col_offset=7), Assign(targets=[Name(id=''embeddings'',
      ctx=Store(), lineno=101, col_offset=4, end_lineno=101, end_col_offset=14)],
      value=List(elts=[Call(func=Attribute(value=Name(id=''generator'', ctx=Load(),
      lineno=101, col_offset=18, end_lineno=101, end_col_offset=27), attr=''get_embeddings'',
      ctx=Load(), lineno=101, col_offset=18, end_lineno=101, end_col_offset=42), args=[Subscript(value=Name(id=''ast'',
      ctx=Load(), lineno=101, col_offset=43, end_lineno=101, end_col_offset=46), slice=Constant(value=''node_type'',
      lineno=101, col_offset=47, end_lineno=101, end_col_offset=58), ctx=Load(), lineno=101,
      col_offset=43, end_lineno=101, end_col_offset=59)], keywords=[], lineno=101,
      col_offset=18, end_lineno=101, end_col_offset=60)], ctx=Load(), lineno=101,
      col_offset=17, end_lineno=101, end_col_offset=61), lineno=101, col_offset=4,
      end_lineno=101, end_col_offset=61), If(test=Compare(left=Constant(value=''name'',
      lineno=104, col_offset=7, end_lineno=104, end_col_offset=13), ops=[In()], comparators=[Name(id=''ast'',
      ctx=Load(), lineno=104, col_offset=17, end_lineno=104, end_col_offset=20)],
      lineno=104, col_offset=7, end_lineno=104, end_col_offset=20), body=[Expr(value=Call(func=Attribute(value=Name(id=''embeddings'',
      ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=18), attr=''append'',
      ctx=Load(), lineno=105, col_offset=8, end_lineno=105, end_col_offset=25), args=[Call(func=Attribute(value=Name(id=''generator'',
      ctx=Load(), lineno=105, col_offset=26, end_lineno=105, end_col_offset=35), attr=''get_embeddings'',
      ctx=Load(), lineno=105, col_offset=26, end_lineno=105, end_col_offset=50), args=[Subscript(value=Name(id=''ast'',
      ctx=Load(), lineno=105, col_offset=51, end_lineno=105, end_col_offset=54), slice=Constant(value=''name'',
      lineno=105, col_offset=55, end_lineno=105, end_col_offset=61), ctx=Load(), lineno=105,
      col_offset=51, end_lineno=105, end_col_offset=62)], keywords=[], lineno=105,
      col_offset=26, end_lineno=105, end_col_offset=63)], keywords=[], lineno=105,
      col_offset=8, end_lineno=105, end_col_offset=64), lineno=105, col_offset=8,
      end_lineno=105, end_col_offset=64)], orelse=[], lineno=104, col_offset=4, end_lineno=105,
      end_col_offset=64), If(test=Compare(left=Constant(value=''children'', lineno=108,
      col_offset=7, end_lineno=108, end_col_offset=17), ops=[In()], comparators=[Name(id=''ast'',
      ctx=Load(), lineno=108, col_offset=21, end_lineno=108, end_col_offset=24)],
      lineno=108, col_offset=7, end_lineno=108, end_col_offset=24), body=[For(target=Name(id=''child'',
      ctx=Store(), lineno=109, col_offset=12, end_lineno=109, end_col_offset=17),
      iter=Subscript(value=Name(id=''ast'', ctx=Load(), lineno=109, col_offset=21,
      end_lineno=109, end_col_offset=24), slice=Constant(value=''children'', lineno=109,
      col_offset=25, end_lineno=109, end_col_offset=35), ctx=Load(), lineno=109, col_offset=21,
      end_lineno=109, end_col_offset=36), body=[Expr(value=Call(func=Attribute(value=Name(id=''embeddings'',
      ctx=Load(), lineno=110, col_offset=12, end_lineno=110, end_col_offset=22), attr=''extend'',
      ctx=Load(), lineno=110, col_offset=12, end_lineno=110, end_col_offset=29), args=[Call(func=Name(id=''get_ast_embeddings'',
      ctx=Load(), lineno=110, col_offset=30, end_lineno=110, end_col_offset=48), args=[Name(id=''child'',
      ctx=Load(), lineno=110, col_offset=49, end_lineno=110, end_col_offset=54), Name(id=''generator'',
      ctx=Load(), lineno=110, col_offset=56, end_lineno=110, end_col_offset=65)],
      keywords=[], lineno=110, col_offset=30, end_lineno=110, end_col_offset=66)],
      keywords=[], lineno=110, col_offset=12, end_lineno=110, end_col_offset=67),
      lineno=110, col_offset=12, end_lineno=110, end_col_offset=67)], orelse=[], lineno=109,
      col_offset=8, end_lineno=110, end_col_offset=67)], orelse=[], lineno=108, col_offset=4,
      end_lineno=110, end_col_offset=67), Return(value=Name(id=''embeddings'', ctx=Load(),
      lineno=112, col_offset=11, end_lineno=112, end_col_offset=21), lineno=112, col_offset=4,
      end_lineno=112, end_col_offset=21)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=91, col_offset=78, end_lineno=91, end_col_offset=82), slice=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=91, col_offset=83, end_lineno=91, end_col_offset=87), slice=Name(id=''float'',
      ctx=Load(), lineno=91, col_offset=88, end_lineno=91, end_col_offset=93), ctx=Load(),
      lineno=91, col_offset=83, end_lineno=91, end_col_offset=94), ctx=Load(), lineno=91,
      col_offset=78, end_lineno=91, end_col_offset=95), lineno=91, col_offset=0, end_lineno=112,
      end_col_offset=21)'
    function_docstring: "Generates embeddings for an abstract syntax tree (AST).\n\
      Args:\n    ast (Dict): The AST to generate embeddings for.\n    generator (EmbeddingGenerator):\
      \ The generator used to create the embeddings.\nReturns:\n    List[List[float]]:\
      \ The embeddings for the AST."
    function_inputs:
    - ast
    - generator
    function_defaults: []
    function_returns:
    - embeddings
    function_calls:
    - embeddings.append
    - get_ast_embeddings
    - generator.get_embeddings
    - embeddings.extend
    function_variables:
    - embeddings
    function_decorators: []
    function_annotations: []
    function_properties: []
  simplify_ast:
    function_name: simplify_ast
    function_code: "def simplify_ast(node):\n    node_type = type(node).__name__\n\
      \    if isinstance(node, ast.AST):\n        fields = []\n        for field in\
      \ node._fields:\n            value = getattr(node, field)\n            if isinstance(value,\
      \ list):\n                for item in value:\n                    if isinstance(item,\
      \ ast.AST):\n                        fields.append(simplify_ast(item))\n   \
      \         elif isinstance(value, ast.AST):\n                fields.append(simplify_ast(value))\n\
      \        return (node_type, fields)\n    else:\n        return node_type"
    function_ast: FunctionDef(name='simplify_ast', args=arguments(posonlyargs=[],
      args=[arg(arg='node', lineno=115, col_offset=17, end_lineno=115, end_col_offset=21)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='node_type',
      ctx=Store(), lineno=116, col_offset=4, end_lineno=116, end_col_offset=13)],
      value=Attribute(value=Call(func=Name(id='type', ctx=Load(), lineno=116, col_offset=16,
      end_lineno=116, end_col_offset=20), args=[Name(id='node', ctx=Load(), lineno=116,
      col_offset=21, end_lineno=116, end_col_offset=25)], keywords=[], lineno=116,
      col_offset=16, end_lineno=116, end_col_offset=26), attr='__name__', ctx=Load(),
      lineno=116, col_offset=16, end_lineno=116, end_col_offset=35), lineno=116, col_offset=4,
      end_lineno=116, end_col_offset=35), If(test=Call(func=Name(id='isinstance',
      ctx=Load(), lineno=118, col_offset=7, end_lineno=118, end_col_offset=17), args=[Name(id='node',
      ctx=Load(), lineno=118, col_offset=18, end_lineno=118, end_col_offset=22), Attribute(value=Name(id='ast',
      ctx=Load(), lineno=118, col_offset=24, end_lineno=118, end_col_offset=27), attr='AST',
      ctx=Load(), lineno=118, col_offset=24, end_lineno=118, end_col_offset=31)],
      keywords=[], lineno=118, col_offset=7, end_lineno=118, end_col_offset=32), body=[Assign(targets=[Name(id='fields',
      ctx=Store(), lineno=119, col_offset=8, end_lineno=119, end_col_offset=14)],
      value=List(elts=[], ctx=Load(), lineno=119, col_offset=17, end_lineno=119, end_col_offset=19),
      lineno=119, col_offset=8, end_lineno=119, end_col_offset=19), For(target=Name(id='field',
      ctx=Store(), lineno=120, col_offset=12, end_lineno=120, end_col_offset=17),
      iter=Attribute(value=Name(id='node', ctx=Load(), lineno=120, col_offset=21,
      end_lineno=120, end_col_offset=25), attr='_fields', ctx=Load(), lineno=120,
      col_offset=21, end_lineno=120, end_col_offset=33), body=[Assign(targets=[Name(id='value',
      ctx=Store(), lineno=121, col_offset=12, end_lineno=121, end_col_offset=17)],
      value=Call(func=Name(id='getattr', ctx=Load(), lineno=121, col_offset=20, end_lineno=121,
      end_col_offset=27), args=[Name(id='node', ctx=Load(), lineno=121, col_offset=28,
      end_lineno=121, end_col_offset=32), Name(id='field', ctx=Load(), lineno=121,
      col_offset=34, end_lineno=121, end_col_offset=39)], keywords=[], lineno=121,
      col_offset=20, end_lineno=121, end_col_offset=40), lineno=121, col_offset=12,
      end_lineno=121, end_col_offset=40), If(test=Call(func=Name(id='isinstance',
      ctx=Load(), lineno=122, col_offset=15, end_lineno=122, end_col_offset=25), args=[Name(id='value',
      ctx=Load(), lineno=122, col_offset=26, end_lineno=122, end_col_offset=31), Name(id='list',
      ctx=Load(), lineno=122, col_offset=33, end_lineno=122, end_col_offset=37)],
      keywords=[], lineno=122, col_offset=15, end_lineno=122, end_col_offset=38),
      body=[For(target=Name(id='item', ctx=Store(), lineno=123, col_offset=20, end_lineno=123,
      end_col_offset=24), iter=Name(id='value', ctx=Load(), lineno=123, col_offset=28,
      end_lineno=123, end_col_offset=33), body=[If(test=Call(func=Name(id='isinstance',
      ctx=Load(), lineno=124, col_offset=23, end_lineno=124, end_col_offset=33), args=[Name(id='item',
      ctx=Load(), lineno=124, col_offset=34, end_lineno=124, end_col_offset=38), Attribute(value=Name(id='ast',
      ctx=Load(), lineno=124, col_offset=40, end_lineno=124, end_col_offset=43), attr='AST',
      ctx=Load(), lineno=124, col_offset=40, end_lineno=124, end_col_offset=47)],
      keywords=[], lineno=124, col_offset=23, end_lineno=124, end_col_offset=48),
      body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load(), lineno=125,
      col_offset=24, end_lineno=125, end_col_offset=30), attr='append', ctx=Load(),
      lineno=125, col_offset=24, end_lineno=125, end_col_offset=37), args=[Call(func=Name(id='simplify_ast',
      ctx=Load(), lineno=125, col_offset=38, end_lineno=125, end_col_offset=50), args=[Name(id='item',
      ctx=Load(), lineno=125, col_offset=51, end_lineno=125, end_col_offset=55)],
      keywords=[], lineno=125, col_offset=38, end_lineno=125, end_col_offset=56)],
      keywords=[], lineno=125, col_offset=24, end_lineno=125, end_col_offset=57),
      lineno=125, col_offset=24, end_lineno=125, end_col_offset=57)], orelse=[], lineno=124,
      col_offset=20, end_lineno=125, end_col_offset=57)], orelse=[], lineno=123, col_offset=16,
      end_lineno=125, end_col_offset=57)], orelse=[If(test=Call(func=Name(id='isinstance',
      ctx=Load(), lineno=126, col_offset=17, end_lineno=126, end_col_offset=27), args=[Name(id='value',
      ctx=Load(), lineno=126, col_offset=28, end_lineno=126, end_col_offset=33), Attribute(value=Name(id='ast',
      ctx=Load(), lineno=126, col_offset=35, end_lineno=126, end_col_offset=38), attr='AST',
      ctx=Load(), lineno=126, col_offset=35, end_lineno=126, end_col_offset=42)],
      keywords=[], lineno=126, col_offset=17, end_lineno=126, end_col_offset=43),
      body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load(), lineno=127,
      col_offset=16, end_lineno=127, end_col_offset=22), attr='append', ctx=Load(),
      lineno=127, col_offset=16, end_lineno=127, end_col_offset=29), args=[Call(func=Name(id='simplify_ast',
      ctx=Load(), lineno=127, col_offset=30, end_lineno=127, end_col_offset=42), args=[Name(id='value',
      ctx=Load(), lineno=127, col_offset=43, end_lineno=127, end_col_offset=48)],
      keywords=[], lineno=127, col_offset=30, end_lineno=127, end_col_offset=49)],
      keywords=[], lineno=127, col_offset=16, end_lineno=127, end_col_offset=50),
      lineno=127, col_offset=16, end_lineno=127, end_col_offset=50)], orelse=[], lineno=126,
      col_offset=12, end_lineno=127, end_col_offset=50)], lineno=122, col_offset=12,
      end_lineno=127, end_col_offset=50)], orelse=[], lineno=120, col_offset=8, end_lineno=127,
      end_col_offset=50), Return(value=Tuple(elts=[Name(id='node_type', ctx=Load(),
      lineno=129, col_offset=16, end_lineno=129, end_col_offset=25), Name(id='fields',
      ctx=Load(), lineno=129, col_offset=27, end_lineno=129, end_col_offset=33)],
      ctx=Load(), lineno=129, col_offset=15, end_lineno=129, end_col_offset=34), lineno=129,
      col_offset=8, end_lineno=129, end_col_offset=34)], orelse=[Return(value=Name(id='node_type',
      ctx=Load(), lineno=132, col_offset=15, end_lineno=132, end_col_offset=24), lineno=132,
      col_offset=8, end_lineno=132, end_col_offset=24)], lineno=118, col_offset=4,
      end_lineno=132, end_col_offset=24)], decorator_list=[], lineno=115, col_offset=0,
      end_lineno=132, end_col_offset=24)
    function_docstring: null
    function_inputs:
    - node
    function_defaults: []
    function_returns:
    - (node_type, fields)
    - node_type
    function_calls:
    - isinstance
    - fields.append
    - getattr
    - type
    - simplify_ast
    function_variables:
    - node_type
    - value
    - fields
    function_decorators: []
    function_annotations: []
    function_properties: []
  get_vector_embeddings:
    function_name: get_vector_embeddings
    function_code: "def get_vector_embeddings(base_name: str, file_details: Dict[str,\
      \ Any], qa_list: List[Dict[str, Any]], instruct_list: List[Dict[str, Any]])\
      \ -> Tuple[List[List[float]], List[List[float]], List[List[float]]]:\n    \"\
      \"\"\n    Converts file details, QA pairs, and instructions into vector embeddings.\n\
      \    Args:\n        base_name (str): The base name of the file.\n        file_details\
      \ (Dict): A dictionary containing details of the Python file.\n        qa_list\
      \ (List[Dict]): A list of question-answer pairs.\n        instruct_list (List[Dict]):\
      \ A list of instructions.\n    Returns:\n        Tuple[List[List[float]], List[List[float]],\
      \ List[List[float]]]: Three lists of vector embeddings, one for each input.\n\
      \    \"\"\"\n    generator = EmbeddingGenerator()\n    file_detail_embeddings\
      \ = [generator.get_embeddings(base_name)]\n    ast_heirarchy_embeddings = get_ast_embeddings(simplify_ast(file_details['file_info']['file_ast']),\
      \ generator)\n    file_detail_embeddings.append(ast_heirarchy_embeddings)\n\
      \    ast_embeddings = get_ast_embeddings(file_details['file_info']['file_ast'],\
      \ generator)\n    file_detail_embeddings.append(ast_embeddings)\n    qa_list_embeddings\
      \ = [generator.get_embeddings(base_name + '.qa.json')]\n    qa_embeddings =\
      \ [generator.get_embeddings(json.dumps(qa)) for qa in qa_list]\n    qa_list_embeddings.append(qa_embeddings)\n\
      \    instruct_list_embeddings = [generator.get_embeddings(base_name + '.instruct.json')]\n\
      \    instruct_embeddings = [generator.get_embeddings(json.dumps(instruct)) for\
      \ instruct in instruct_list]\n    instruct_list_embeddings.append(instruct_embeddings)\n\
      \    return (file_detail_embeddings, qa_list_embeddings, instruct_list_embeddings)"
    function_ast: 'FunctionDef(name=''get_vector_embeddings'', args=arguments(posonlyargs=[],
      args=[arg(arg=''base_name'', annotation=Name(id=''str'', ctx=Load(), lineno=134,
      col_offset=37, end_lineno=134, end_col_offset=40), lineno=134, col_offset=26,
      end_lineno=134, end_col_offset=40), arg(arg=''file_details'', annotation=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=134, col_offset=56, end_lineno=134, end_col_offset=60), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=134, col_offset=61, end_lineno=134, end_col_offset=64), Name(id=''Any'',
      ctx=Load(), lineno=134, col_offset=66, end_lineno=134, end_col_offset=69)],
      ctx=Load(), lineno=134, col_offset=61, end_lineno=134, end_col_offset=69), ctx=Load(),
      lineno=134, col_offset=56, end_lineno=134, end_col_offset=70), lineno=134, col_offset=42,
      end_lineno=134, end_col_offset=70), arg(arg=''qa_list'', annotation=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=134, col_offset=81, end_lineno=134, end_col_offset=85), slice=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=134, col_offset=86, end_lineno=134, end_col_offset=90), slice=Tuple(elts=[Name(id=''str'',
      ctx=Load(), lineno=134, col_offset=91, end_lineno=134, end_col_offset=94), Name(id=''Any'',
      ctx=Load(), lineno=134, col_offset=96, end_lineno=134, end_col_offset=99)],
      ctx=Load(), lineno=134, col_offset=91, end_lineno=134, end_col_offset=99), ctx=Load(),
      lineno=134, col_offset=86, end_lineno=134, end_col_offset=100), ctx=Load(),
      lineno=134, col_offset=81, end_lineno=134, end_col_offset=101), lineno=134,
      col_offset=72, end_lineno=134, end_col_offset=101), arg(arg=''instruct_list'',
      annotation=Subscript(value=Name(id=''List'', ctx=Load(), lineno=134, col_offset=118,
      end_lineno=134, end_col_offset=122), slice=Subscript(value=Name(id=''Dict'',
      ctx=Load(), lineno=134, col_offset=123, end_lineno=134, end_col_offset=127),
      slice=Tuple(elts=[Name(id=''str'', ctx=Load(), lineno=134, col_offset=128, end_lineno=134,
      end_col_offset=131), Name(id=''Any'', ctx=Load(), lineno=134, col_offset=133,
      end_lineno=134, end_col_offset=136)], ctx=Load(), lineno=134, col_offset=128,
      end_lineno=134, end_col_offset=136), ctx=Load(), lineno=134, col_offset=123,
      end_lineno=134, end_col_offset=137), ctx=Load(), lineno=134, col_offset=118,
      end_lineno=134, end_col_offset=138), lineno=134, col_offset=103, end_lineno=134,
      end_col_offset=138)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n    Converts
      file details, QA pairs, and instructions into vector embeddings.\n    Args:\n        base_name
      (str): The base name of the file.\n        file_details (Dict): A dictionary
      containing details of the Python file.\n        qa_list (List[Dict]): A list
      of question-answer pairs.\n        instruct_list (List[Dict]): A list of instructions.\n    Returns:\n        Tuple[List[List[float]],
      List[List[float]], List[List[float]]]: Three lists of vector embeddings, one
      for each input.\n    '', lineno=135, col_offset=4, end_lineno=144, end_col_offset=7),
      lineno=135, col_offset=4, end_lineno=144, end_col_offset=7), Assign(targets=[Name(id=''generator'',
      ctx=Store(), lineno=145, col_offset=4, end_lineno=145, end_col_offset=13)],
      value=Call(func=Name(id=''EmbeddingGenerator'', ctx=Load(), lineno=145, col_offset=16,
      end_lineno=145, end_col_offset=34), args=[], keywords=[], lineno=145, col_offset=16,
      end_lineno=145, end_col_offset=36), lineno=145, col_offset=4, end_lineno=145,
      end_col_offset=36), Assign(targets=[Name(id=''file_detail_embeddings'', ctx=Store(),
      lineno=146, col_offset=4, end_lineno=146, end_col_offset=26)], value=List(elts=[Call(func=Attribute(value=Name(id=''generator'',
      ctx=Load(), lineno=146, col_offset=30, end_lineno=146, end_col_offset=39), attr=''get_embeddings'',
      ctx=Load(), lineno=146, col_offset=30, end_lineno=146, end_col_offset=54), args=[Name(id=''base_name'',
      ctx=Load(), lineno=146, col_offset=55, end_lineno=146, end_col_offset=64)],
      keywords=[], lineno=146, col_offset=30, end_lineno=146, end_col_offset=65)],
      ctx=Load(), lineno=146, col_offset=29, end_lineno=146, end_col_offset=66), lineno=146,
      col_offset=4, end_lineno=146, end_col_offset=66), Assign(targets=[Name(id=''ast_heirarchy_embeddings'',
      ctx=Store(), lineno=147, col_offset=4, end_lineno=147, end_col_offset=28)],
      value=Call(func=Name(id=''get_ast_embeddings'', ctx=Load(), lineno=147, col_offset=31,
      end_lineno=147, end_col_offset=49), args=[Call(func=Name(id=''simplify_ast'',
      ctx=Load(), lineno=147, col_offset=50, end_lineno=147, end_col_offset=62), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=147, col_offset=63, end_lineno=147, end_col_offset=75), slice=Constant(value=''file_info'',
      lineno=147, col_offset=76, end_lineno=147, end_col_offset=87), ctx=Load(), lineno=147,
      col_offset=63, end_lineno=147, end_col_offset=88), slice=Constant(value=''file_ast'',
      lineno=147, col_offset=89, end_lineno=147, end_col_offset=99), ctx=Load(), lineno=147,
      col_offset=63, end_lineno=147, end_col_offset=100)], keywords=[], lineno=147,
      col_offset=50, end_lineno=147, end_col_offset=101), Name(id=''generator'', ctx=Load(),
      lineno=147, col_offset=103, end_lineno=147, end_col_offset=112)], keywords=[],
      lineno=147, col_offset=31, end_lineno=147, end_col_offset=113), lineno=147,
      col_offset=4, end_lineno=147, end_col_offset=113), Expr(value=Call(func=Attribute(value=Name(id=''file_detail_embeddings'',
      ctx=Load(), lineno=148, col_offset=4, end_lineno=148, end_col_offset=26), attr=''append'',
      ctx=Load(), lineno=148, col_offset=4, end_lineno=148, end_col_offset=33), args=[Name(id=''ast_heirarchy_embeddings'',
      ctx=Load(), lineno=148, col_offset=34, end_lineno=148, end_col_offset=58)],
      keywords=[], lineno=148, col_offset=4, end_lineno=148, end_col_offset=59), lineno=148,
      col_offset=4, end_lineno=148, end_col_offset=59), Assign(targets=[Name(id=''ast_embeddings'',
      ctx=Store(), lineno=149, col_offset=4, end_lineno=149, end_col_offset=18)],
      value=Call(func=Name(id=''get_ast_embeddings'', ctx=Load(), lineno=149, col_offset=21,
      end_lineno=149, end_col_offset=39), args=[Subscript(value=Subscript(value=Name(id=''file_details'',
      ctx=Load(), lineno=149, col_offset=40, end_lineno=149, end_col_offset=52), slice=Constant(value=''file_info'',
      lineno=149, col_offset=53, end_lineno=149, end_col_offset=64), ctx=Load(), lineno=149,
      col_offset=40, end_lineno=149, end_col_offset=65), slice=Constant(value=''file_ast'',
      lineno=149, col_offset=66, end_lineno=149, end_col_offset=76), ctx=Load(), lineno=149,
      col_offset=40, end_lineno=149, end_col_offset=77), Name(id=''generator'', ctx=Load(),
      lineno=149, col_offset=79, end_lineno=149, end_col_offset=88)], keywords=[],
      lineno=149, col_offset=21, end_lineno=149, end_col_offset=89), lineno=149, col_offset=4,
      end_lineno=149, end_col_offset=89), Expr(value=Call(func=Attribute(value=Name(id=''file_detail_embeddings'',
      ctx=Load(), lineno=150, col_offset=4, end_lineno=150, end_col_offset=26), attr=''append'',
      ctx=Load(), lineno=150, col_offset=4, end_lineno=150, end_col_offset=33), args=[Name(id=''ast_embeddings'',
      ctx=Load(), lineno=150, col_offset=34, end_lineno=150, end_col_offset=48)],
      keywords=[], lineno=150, col_offset=4, end_lineno=150, end_col_offset=49), lineno=150,
      col_offset=4, end_lineno=150, end_col_offset=49), Assign(targets=[Name(id=''qa_list_embeddings'',
      ctx=Store(), lineno=152, col_offset=4, end_lineno=152, end_col_offset=22)],
      value=List(elts=[Call(func=Attribute(value=Name(id=''generator'', ctx=Load(),
      lineno=152, col_offset=26, end_lineno=152, end_col_offset=35), attr=''get_embeddings'',
      ctx=Load(), lineno=152, col_offset=26, end_lineno=152, end_col_offset=50), args=[BinOp(left=Name(id=''base_name'',
      ctx=Load(), lineno=152, col_offset=51, end_lineno=152, end_col_offset=60), op=Add(),
      right=Constant(value=''.qa.json'', lineno=152, col_offset=61, end_lineno=152,
      end_col_offset=71), lineno=152, col_offset=51, end_lineno=152, end_col_offset=71)],
      keywords=[], lineno=152, col_offset=26, end_lineno=152, end_col_offset=72)],
      ctx=Load(), lineno=152, col_offset=25, end_lineno=152, end_col_offset=73), lineno=152,
      col_offset=4, end_lineno=152, end_col_offset=73), Assign(targets=[Name(id=''qa_embeddings'',
      ctx=Store(), lineno=153, col_offset=4, end_lineno=153, end_col_offset=17)],
      value=ListComp(elt=Call(func=Attribute(value=Name(id=''generator'', ctx=Load(),
      lineno=153, col_offset=21, end_lineno=153, end_col_offset=30), attr=''get_embeddings'',
      ctx=Load(), lineno=153, col_offset=21, end_lineno=153, end_col_offset=45), args=[Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=153, col_offset=46, end_lineno=153, end_col_offset=50), attr=''dumps'',
      ctx=Load(), lineno=153, col_offset=46, end_lineno=153, end_col_offset=56), args=[Name(id=''qa'',
      ctx=Load(), lineno=153, col_offset=57, end_lineno=153, end_col_offset=59)],
      keywords=[], lineno=153, col_offset=46, end_lineno=153, end_col_offset=60)],
      keywords=[], lineno=153, col_offset=21, end_lineno=153, end_col_offset=61),
      generators=[comprehension(target=Name(id=''qa'', ctx=Store(), lineno=153, col_offset=66,
      end_lineno=153, end_col_offset=68), iter=Name(id=''qa_list'', ctx=Load(), lineno=153,
      col_offset=72, end_lineno=153, end_col_offset=79), ifs=[], is_async=0)], lineno=153,
      col_offset=20, end_lineno=153, end_col_offset=80), lineno=153, col_offset=4,
      end_lineno=153, end_col_offset=80), Expr(value=Call(func=Attribute(value=Name(id=''qa_list_embeddings'',
      ctx=Load(), lineno=154, col_offset=4, end_lineno=154, end_col_offset=22), attr=''append'',
      ctx=Load(), lineno=154, col_offset=4, end_lineno=154, end_col_offset=29), args=[Name(id=''qa_embeddings'',
      ctx=Load(), lineno=154, col_offset=30, end_lineno=154, end_col_offset=43)],
      keywords=[], lineno=154, col_offset=4, end_lineno=154, end_col_offset=44), lineno=154,
      col_offset=4, end_lineno=154, end_col_offset=44), Assign(targets=[Name(id=''instruct_list_embeddings'',
      ctx=Store(), lineno=156, col_offset=4, end_lineno=156, end_col_offset=28)],
      value=List(elts=[Call(func=Attribute(value=Name(id=''generator'', ctx=Load(),
      lineno=156, col_offset=32, end_lineno=156, end_col_offset=41), attr=''get_embeddings'',
      ctx=Load(), lineno=156, col_offset=32, end_lineno=156, end_col_offset=56), args=[BinOp(left=Name(id=''base_name'',
      ctx=Load(), lineno=156, col_offset=57, end_lineno=156, end_col_offset=66), op=Add(),
      right=Constant(value=''.instruct.json'', lineno=156, col_offset=67, end_lineno=156,
      end_col_offset=83), lineno=156, col_offset=57, end_lineno=156, end_col_offset=83)],
      keywords=[], lineno=156, col_offset=32, end_lineno=156, end_col_offset=84)],
      ctx=Load(), lineno=156, col_offset=31, end_lineno=156, end_col_offset=85), lineno=156,
      col_offset=4, end_lineno=156, end_col_offset=85), Assign(targets=[Name(id=''instruct_embeddings'',
      ctx=Store(), lineno=157, col_offset=4, end_lineno=157, end_col_offset=23)],
      value=ListComp(elt=Call(func=Attribute(value=Name(id=''generator'', ctx=Load(),
      lineno=157, col_offset=27, end_lineno=157, end_col_offset=36), attr=''get_embeddings'',
      ctx=Load(), lineno=157, col_offset=27, end_lineno=157, end_col_offset=51), args=[Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=157, col_offset=52, end_lineno=157, end_col_offset=56), attr=''dumps'',
      ctx=Load(), lineno=157, col_offset=52, end_lineno=157, end_col_offset=62), args=[Name(id=''instruct'',
      ctx=Load(), lineno=157, col_offset=63, end_lineno=157, end_col_offset=71)],
      keywords=[], lineno=157, col_offset=52, end_lineno=157, end_col_offset=72)],
      keywords=[], lineno=157, col_offset=27, end_lineno=157, end_col_offset=73),
      generators=[comprehension(target=Name(id=''instruct'', ctx=Store(), lineno=157,
      col_offset=78, end_lineno=157, end_col_offset=86), iter=Name(id=''instruct_list'',
      ctx=Load(), lineno=157, col_offset=90, end_lineno=157, end_col_offset=103),
      ifs=[], is_async=0)], lineno=157, col_offset=26, end_lineno=157, end_col_offset=104),
      lineno=157, col_offset=4, end_lineno=157, end_col_offset=104), Expr(value=Call(func=Attribute(value=Name(id=''instruct_list_embeddings'',
      ctx=Load(), lineno=158, col_offset=4, end_lineno=158, end_col_offset=28), attr=''append'',
      ctx=Load(), lineno=158, col_offset=4, end_lineno=158, end_col_offset=35), args=[Name(id=''instruct_embeddings'',
      ctx=Load(), lineno=158, col_offset=36, end_lineno=158, end_col_offset=55)],
      keywords=[], lineno=158, col_offset=4, end_lineno=158, end_col_offset=56), lineno=158,
      col_offset=4, end_lineno=158, end_col_offset=56), Return(value=Tuple(elts=[Name(id=''file_detail_embeddings'',
      ctx=Load(), lineno=160, col_offset=11, end_lineno=160, end_col_offset=33), Name(id=''qa_list_embeddings'',
      ctx=Load(), lineno=160, col_offset=35, end_lineno=160, end_col_offset=53), Name(id=''instruct_list_embeddings'',
      ctx=Load(), lineno=160, col_offset=55, end_lineno=160, end_col_offset=79)],
      ctx=Load(), lineno=160, col_offset=11, end_lineno=160, end_col_offset=79), lineno=160,
      col_offset=4, end_lineno=160, end_col_offset=79)], decorator_list=[], returns=Subscript(value=Name(id=''Tuple'',
      ctx=Load(), lineno=134, col_offset=143, end_lineno=134, end_col_offset=148),
      slice=Tuple(elts=[Subscript(value=Name(id=''List'', ctx=Load(), lineno=134,
      col_offset=149, end_lineno=134, end_col_offset=153), slice=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=134, col_offset=154, end_lineno=134, end_col_offset=158),
      slice=Name(id=''float'', ctx=Load(), lineno=134, col_offset=159, end_lineno=134,
      end_col_offset=164), ctx=Load(), lineno=134, col_offset=154, end_lineno=134,
      end_col_offset=165), ctx=Load(), lineno=134, col_offset=149, end_lineno=134,
      end_col_offset=166), Subscript(value=Name(id=''List'', ctx=Load(), lineno=134,
      col_offset=168, end_lineno=134, end_col_offset=172), slice=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=134, col_offset=173, end_lineno=134, end_col_offset=177),
      slice=Name(id=''float'', ctx=Load(), lineno=134, col_offset=178, end_lineno=134,
      end_col_offset=183), ctx=Load(), lineno=134, col_offset=173, end_lineno=134,
      end_col_offset=184), ctx=Load(), lineno=134, col_offset=168, end_lineno=134,
      end_col_offset=185), Subscript(value=Name(id=''List'', ctx=Load(), lineno=134,
      col_offset=187, end_lineno=134, end_col_offset=191), slice=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=134, col_offset=192, end_lineno=134, end_col_offset=196),
      slice=Name(id=''float'', ctx=Load(), lineno=134, col_offset=197, end_lineno=134,
      end_col_offset=202), ctx=Load(), lineno=134, col_offset=192, end_lineno=134,
      end_col_offset=203), ctx=Load(), lineno=134, col_offset=187, end_lineno=134,
      end_col_offset=204)], ctx=Load(), lineno=134, col_offset=149, end_lineno=134,
      end_col_offset=204), ctx=Load(), lineno=134, col_offset=143, end_lineno=134,
      end_col_offset=205), lineno=134, col_offset=0, end_lineno=160, end_col_offset=79)'
    function_docstring: "Converts file details, QA pairs, and instructions into vector\
      \ embeddings.\nArgs:\n    base_name (str): The base name of the file.\n    file_details\
      \ (Dict): A dictionary containing details of the Python file.\n    qa_list (List[Dict]):\
      \ A list of question-answer pairs.\n    instruct_list (List[Dict]): A list of\
      \ instructions.\nReturns:\n    Tuple[List[List[float]], List[List[float]], List[List[float]]]:\
      \ Three lists of vector embeddings, one for each input."
    function_inputs:
    - base_name
    - file_details
    - qa_list
    - instruct_list
    function_defaults: []
    function_returns:
    - (file_detail_embeddings, qa_list_embeddings, instruct_list_embeddings)
    function_calls:
    - EmbeddingGenerator
    - qa_list_embeddings.append
    - instruct_list_embeddings.append
    - get_ast_embeddings
    - file_detail_embeddings.append
    - json.dumps
    - simplify_ast
    - generator.get_embeddings
    function_variables:
    - instruct_list_embeddings
    - qa_embeddings
    - generator
    - ast_heirarchy_embeddings
    - instruct_embeddings
    - ast_embeddings
    - qa_list_embeddings
    - file_detail_embeddings
    function_decorators: []
    function_annotations: []
    function_properties: []
classes:
  EmbeddingGenerator:
    class_name: EmbeddingGenerator
    class_code: "class EmbeddingGenerator:\n    \"\"\"\n    A class used to generate\
      \ vector embeddings for Python code and generated questions and instructions.\n\
      \    Attributes:\n        tokenizer (AutoTokenizer): The tokenizer of the pretrained\
      \ model used to tokenize the text.\n        model (AutoModel): The pretrained\
      \ model used to generate the embeddings.\n    Methods:\n        get_embeddings(text:\
      \ str) -> List[float]: Generates a vector embedding for a given piece of text.\n\
      \    \"\"\"\n\n    def __init__(self) -> None:\n        try:\n            with\
      \ open('config.json') as config_file:\n                self.config = json.load(config_file)[0]['embedding_model']\n\
      \            tokenizer_module_name, tokenizer_class_name = self.config['tokenizer_import_path'].rsplit('.',\
      \ 1)\n            model_module_name, model_class_name = self.config['model_import_path'].rsplit('.',\
      \ 1)\n            tokenizer_module = importlib.import_module(tokenizer_module_name)\n\
      \            model_module = importlib.import_module(model_module_name)\n   \
      \         TokenizerClass = getattr(tokenizer_module, tokenizer_class_name)\n\
      \            ModelClass = getattr(model_module, model_class_name)\n        \
      \    self.tokenizer = TokenizerClass.from_pretrained(self.config['tokenizer'])\n\
      \            self.model = ModelClass.from_pretrained(self.config['model_path'])\n\
      \        except (FileNotFoundError, json.JSONDecodeError, ImportError, AttributeError)\
      \ as e:\n            logger.error(f'Failed to load configuration file: {e}')\n\
      \            self.tokenizer = None\n            self.model = None\n\n    def\
      \ get_embeddings(self, text: str) -> List[List[float]]:\n        \"\"\"\n  \
      \      Generates a vector embedding for a given piece of text.\n        Args:\n\
      \            text (str): The text to generate an embedding for.\n        Returns:\n\
      \            List[List[float]]: The generated vector embeddings.\n        \"\
      \"\"\n        if not self.tokenizer or not self.model:\n            logger.error('Embedding\
      \ model not available.')\n            return []\n        tokens = self.tokenizer.tokenize(text)\n\
      \        chunks = [tokens[i:i + self.config['max_seq_length']] for i in range(0,\
      \ len(tokens), self.config['max_seq_length'])]\n        embeddings = []\n  \
      \      for chunk in chunks:\n            chunk_text = self.tokenizer.convert_tokens_to_string(chunk)\n\
      \            inputs = self.tokenizer(chunk_text, return_tensors='pt', truncation=True,\
      \ padding=True, max_length=self.config['max_seq_length'])\n            outputs\
      \ = self.model(**inputs)\n            chunk_embeddings = outputs.last_hidden_state.mean(dim=1).detach().numpy().tolist()\n\
      \            embeddings.append(chunk_embeddings)\n        return embeddings"
    class_ast: 'ClassDef(name=''EmbeddingGenerator'', bases=[], keywords=[], body=[Expr(value=Constant(value=''\n    A
      class used to generate vector embeddings for Python code and generated questions
      and instructions.\n    Attributes:\n        tokenizer (AutoTokenizer): The tokenizer
      of the pretrained model used to tokenize the text.\n        model (AutoModel):
      The pretrained model used to generate the embeddings.\n    Methods:\n        get_embeddings(text:
      str) -> List[float]: Generates a vector embedding for a given piece of text.\n    '',
      lineno=30, col_offset=4, end_lineno=37, end_col_offset=7), lineno=30, col_offset=4,
      end_lineno=37, end_col_offset=7), FunctionDef(name=''__init__'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=38, col_offset=17, end_lineno=38, end_col_offset=21)],
      kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
      ctx=Load(), lineno=41, col_offset=17, end_lineno=41, end_col_offset=21), args=[Constant(value=''config.json'',
      lineno=41, col_offset=22, end_lineno=41, end_col_offset=35)], keywords=[], lineno=41,
      col_offset=17, end_lineno=41, end_col_offset=36), optional_vars=Name(id=''config_file'',
      ctx=Store(), lineno=41, col_offset=40, end_lineno=41, end_col_offset=51))],
      body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=42,
      col_offset=16, end_lineno=42, end_col_offset=20), attr=''config'', ctx=Store(),
      lineno=42, col_offset=16, end_lineno=42, end_col_offset=27)], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=42, col_offset=30, end_lineno=42, end_col_offset=34), attr=''load'',
      ctx=Load(), lineno=42, col_offset=30, end_lineno=42, end_col_offset=39), args=[Name(id=''config_file'',
      ctx=Load(), lineno=42, col_offset=40, end_lineno=42, end_col_offset=51)], keywords=[],
      lineno=42, col_offset=30, end_lineno=42, end_col_offset=52), slice=Constant(value=0,
      lineno=42, col_offset=53, end_lineno=42, end_col_offset=54), ctx=Load(), lineno=42,
      col_offset=30, end_lineno=42, end_col_offset=55), slice=Constant(value=''embedding_model'',
      lineno=42, col_offset=56, end_lineno=42, end_col_offset=73), ctx=Load(), lineno=42,
      col_offset=30, end_lineno=42, end_col_offset=74), lineno=42, col_offset=16,
      end_lineno=42, end_col_offset=74)], lineno=41, col_offset=12, end_lineno=42,
      end_col_offset=74), Assign(targets=[Tuple(elts=[Name(id=''tokenizer_module_name'',
      ctx=Store(), lineno=45, col_offset=12, end_lineno=45, end_col_offset=33), Name(id=''tokenizer_class_name'',
      ctx=Store(), lineno=45, col_offset=35, end_lineno=45, end_col_offset=55)], ctx=Store(),
      lineno=45, col_offset=12, end_lineno=45, end_col_offset=55)], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=45, col_offset=58, end_lineno=45, end_col_offset=62), attr=''config'',
      ctx=Load(), lineno=45, col_offset=58, end_lineno=45, end_col_offset=69), slice=Constant(value=''tokenizer_import_path'',
      lineno=45, col_offset=70, end_lineno=45, end_col_offset=93), ctx=Load(), lineno=45,
      col_offset=58, end_lineno=45, end_col_offset=94), attr=''rsplit'', ctx=Load(),
      lineno=45, col_offset=58, end_lineno=45, end_col_offset=101), args=[Constant(value=''.'',
      lineno=45, col_offset=102, end_lineno=45, end_col_offset=105), Constant(value=1,
      lineno=45, col_offset=107, end_lineno=45, end_col_offset=108)], keywords=[],
      lineno=45, col_offset=58, end_lineno=45, end_col_offset=109), lineno=45, col_offset=12,
      end_lineno=45, end_col_offset=109), Assign(targets=[Tuple(elts=[Name(id=''model_module_name'',
      ctx=Store(), lineno=46, col_offset=12, end_lineno=46, end_col_offset=29), Name(id=''model_class_name'',
      ctx=Store(), lineno=46, col_offset=31, end_lineno=46, end_col_offset=47)], ctx=Store(),
      lineno=46, col_offset=12, end_lineno=46, end_col_offset=47)], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=46, col_offset=50, end_lineno=46, end_col_offset=54), attr=''config'',
      ctx=Load(), lineno=46, col_offset=50, end_lineno=46, end_col_offset=61), slice=Constant(value=''model_import_path'',
      lineno=46, col_offset=62, end_lineno=46, end_col_offset=81), ctx=Load(), lineno=46,
      col_offset=50, end_lineno=46, end_col_offset=82), attr=''rsplit'', ctx=Load(),
      lineno=46, col_offset=50, end_lineno=46, end_col_offset=89), args=[Constant(value=''.'',
      lineno=46, col_offset=90, end_lineno=46, end_col_offset=93), Constant(value=1,
      lineno=46, col_offset=95, end_lineno=46, end_col_offset=96)], keywords=[], lineno=46,
      col_offset=50, end_lineno=46, end_col_offset=97), lineno=46, col_offset=12,
      end_lineno=46, end_col_offset=97), Assign(targets=[Name(id=''tokenizer_module'',
      ctx=Store(), lineno=47, col_offset=12, end_lineno=47, end_col_offset=28)], value=Call(func=Attribute(value=Name(id=''importlib'',
      ctx=Load(), lineno=47, col_offset=31, end_lineno=47, end_col_offset=40), attr=''import_module'',
      ctx=Load(), lineno=47, col_offset=31, end_lineno=47, end_col_offset=54), args=[Name(id=''tokenizer_module_name'',
      ctx=Load(), lineno=47, col_offset=55, end_lineno=47, end_col_offset=76)], keywords=[],
      lineno=47, col_offset=31, end_lineno=47, end_col_offset=77), lineno=47, col_offset=12,
      end_lineno=47, end_col_offset=77), Assign(targets=[Name(id=''model_module'',
      ctx=Store(), lineno=48, col_offset=12, end_lineno=48, end_col_offset=24)], value=Call(func=Attribute(value=Name(id=''importlib'',
      ctx=Load(), lineno=48, col_offset=27, end_lineno=48, end_col_offset=36), attr=''import_module'',
      ctx=Load(), lineno=48, col_offset=27, end_lineno=48, end_col_offset=50), args=[Name(id=''model_module_name'',
      ctx=Load(), lineno=48, col_offset=51, end_lineno=48, end_col_offset=68)], keywords=[],
      lineno=48, col_offset=27, end_lineno=48, end_col_offset=69), lineno=48, col_offset=12,
      end_lineno=48, end_col_offset=69), Assign(targets=[Name(id=''TokenizerClass'',
      ctx=Store(), lineno=49, col_offset=12, end_lineno=49, end_col_offset=26)], value=Call(func=Name(id=''getattr'',
      ctx=Load(), lineno=49, col_offset=29, end_lineno=49, end_col_offset=36), args=[Name(id=''tokenizer_module'',
      ctx=Load(), lineno=49, col_offset=37, end_lineno=49, end_col_offset=53), Name(id=''tokenizer_class_name'',
      ctx=Load(), lineno=49, col_offset=55, end_lineno=49, end_col_offset=75)], keywords=[],
      lineno=49, col_offset=29, end_lineno=49, end_col_offset=76), lineno=49, col_offset=12,
      end_lineno=49, end_col_offset=76), Assign(targets=[Name(id=''ModelClass'', ctx=Store(),
      lineno=50, col_offset=12, end_lineno=50, end_col_offset=22)], value=Call(func=Name(id=''getattr'',
      ctx=Load(), lineno=50, col_offset=25, end_lineno=50, end_col_offset=32), args=[Name(id=''model_module'',
      ctx=Load(), lineno=50, col_offset=33, end_lineno=50, end_col_offset=45), Name(id=''model_class_name'',
      ctx=Load(), lineno=50, col_offset=47, end_lineno=50, end_col_offset=63)], keywords=[],
      lineno=50, col_offset=25, end_lineno=50, end_col_offset=64), lineno=50, col_offset=12,
      end_lineno=50, end_col_offset=64), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=52, col_offset=12, end_lineno=52, end_col_offset=16), attr=''tokenizer'',
      ctx=Store(), lineno=52, col_offset=12, end_lineno=52, end_col_offset=26)], value=Call(func=Attribute(value=Name(id=''TokenizerClass'',
      ctx=Load(), lineno=52, col_offset=29, end_lineno=52, end_col_offset=43), attr=''from_pretrained'',
      ctx=Load(), lineno=52, col_offset=29, end_lineno=52, end_col_offset=59), args=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=52, col_offset=60, end_lineno=52, end_col_offset=64), attr=''config'',
      ctx=Load(), lineno=52, col_offset=60, end_lineno=52, end_col_offset=71), slice=Constant(value=''tokenizer'',
      lineno=52, col_offset=72, end_lineno=52, end_col_offset=83), ctx=Load(), lineno=52,
      col_offset=60, end_lineno=52, end_col_offset=84)], keywords=[], lineno=52, col_offset=29,
      end_lineno=52, end_col_offset=85), lineno=52, col_offset=12, end_lineno=52,
      end_col_offset=85), Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(),
      lineno=53, col_offset=12, end_lineno=53, end_col_offset=16), attr=''model'',
      ctx=Store(), lineno=53, col_offset=12, end_lineno=53, end_col_offset=22)], value=Call(func=Attribute(value=Name(id=''ModelClass'',
      ctx=Load(), lineno=53, col_offset=25, end_lineno=53, end_col_offset=35), attr=''from_pretrained'',
      ctx=Load(), lineno=53, col_offset=25, end_lineno=53, end_col_offset=51), args=[Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=53, col_offset=52, end_lineno=53, end_col_offset=56), attr=''config'',
      ctx=Load(), lineno=53, col_offset=52, end_lineno=53, end_col_offset=63), slice=Constant(value=''model_path'',
      lineno=53, col_offset=64, end_lineno=53, end_col_offset=76), ctx=Load(), lineno=53,
      col_offset=52, end_lineno=53, end_col_offset=77)], keywords=[], lineno=53, col_offset=25,
      end_lineno=53, end_col_offset=78), lineno=53, col_offset=12, end_lineno=53,
      end_col_offset=78)], handlers=[ExceptHandler(type=Tuple(elts=[Name(id=''FileNotFoundError'',
      ctx=Load(), lineno=55, col_offset=16, end_lineno=55, end_col_offset=33), Attribute(value=Name(id=''json'',
      ctx=Load(), lineno=55, col_offset=35, end_lineno=55, end_col_offset=39), attr=''JSONDecodeError'',
      ctx=Load(), lineno=55, col_offset=35, end_lineno=55, end_col_offset=55), Name(id=''ImportError'',
      ctx=Load(), lineno=55, col_offset=57, end_lineno=55, end_col_offset=68), Name(id=''AttributeError'',
      ctx=Load(), lineno=55, col_offset=70, end_lineno=55, end_col_offset=84)], ctx=Load(),
      lineno=55, col_offset=15, end_lineno=55, end_col_offset=85), name=''e'', body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
      ctx=Load(), lineno=56, col_offset=12, end_lineno=56, end_col_offset=18), attr=''error'',
      ctx=Load(), lineno=56, col_offset=12, end_lineno=56, end_col_offset=24), args=[JoinedStr(values=[Constant(value=''Failed
      to load configuration file: '', lineno=56, col_offset=25, end_lineno=56, end_col_offset=66),
      FormattedValue(value=Name(id=''e'', ctx=Load(), lineno=56, col_offset=63, end_lineno=56,
      end_col_offset=64), conversion=-1, lineno=56, col_offset=25, end_lineno=56,
      end_col_offset=66)], lineno=56, col_offset=25, end_lineno=56, end_col_offset=66)],
      keywords=[], lineno=56, col_offset=12, end_lineno=56, end_col_offset=67), lineno=56,
      col_offset=12, end_lineno=56, end_col_offset=67), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=57, col_offset=12, end_lineno=57, end_col_offset=16), attr=''tokenizer'',
      ctx=Store(), lineno=57, col_offset=12, end_lineno=57, end_col_offset=26)], value=Constant(value=None,
      lineno=57, col_offset=29, end_lineno=57, end_col_offset=33), lineno=57, col_offset=12,
      end_lineno=57, end_col_offset=33), Assign(targets=[Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=58, col_offset=12, end_lineno=58, end_col_offset=16), attr=''model'',
      ctx=Store(), lineno=58, col_offset=12, end_lineno=58, end_col_offset=22)], value=Constant(value=None,
      lineno=58, col_offset=25, end_lineno=58, end_col_offset=29), lineno=58, col_offset=12,
      end_lineno=58, end_col_offset=29)], lineno=55, col_offset=8, end_lineno=58,
      end_col_offset=29)], orelse=[], finalbody=[], lineno=39, col_offset=8, end_lineno=58,
      end_col_offset=29)], decorator_list=[], returns=Constant(value=None, lineno=38,
      col_offset=26, end_lineno=38, end_col_offset=30), lineno=38, col_offset=4, end_lineno=58,
      end_col_offset=29), FunctionDef(name=''get_embeddings'', args=arguments(posonlyargs=[],
      args=[arg(arg=''self'', lineno=60, col_offset=23, end_lineno=60, end_col_offset=27),
      arg(arg=''text'', annotation=Name(id=''str'', ctx=Load(), lineno=60, col_offset=35,
      end_lineno=60, end_col_offset=38), lineno=60, col_offset=29, end_lineno=60,
      end_col_offset=38)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Generates
      a vector embedding for a given piece of text.\n        Args:\n            text
      (str): The text to generate an embedding for.\n        Returns:\n            List[List[float]]:
      The generated vector embeddings.\n        '', lineno=61, col_offset=8, end_lineno=67,
      end_col_offset=11), lineno=61, col_offset=8, end_lineno=67, end_col_offset=11),
      If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=68, col_offset=15, end_lineno=68, end_col_offset=19), attr=''tokenizer'',
      ctx=Load(), lineno=68, col_offset=15, end_lineno=68, end_col_offset=29), lineno=68,
      col_offset=11, end_lineno=68, end_col_offset=29), UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=68, col_offset=37, end_lineno=68, end_col_offset=41), attr=''model'',
      ctx=Load(), lineno=68, col_offset=37, end_lineno=68, end_col_offset=47), lineno=68,
      col_offset=33, end_lineno=68, end_col_offset=47)], lineno=68, col_offset=11,
      end_lineno=68, end_col_offset=47), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
      ctx=Load(), lineno=69, col_offset=12, end_lineno=69, end_col_offset=18), attr=''error'',
      ctx=Load(), lineno=69, col_offset=12, end_lineno=69, end_col_offset=24), args=[Constant(value=''Embedding
      model not available.'', lineno=69, col_offset=25, end_lineno=69, end_col_offset=57)],
      keywords=[], lineno=69, col_offset=12, end_lineno=69, end_col_offset=58), lineno=69,
      col_offset=12, end_lineno=69, end_col_offset=58), Return(value=List(elts=[],
      ctx=Load(), lineno=70, col_offset=19, end_lineno=70, end_col_offset=21), lineno=70,
      col_offset=12, end_lineno=70, end_col_offset=21)], orelse=[], lineno=68, col_offset=8,
      end_lineno=70, end_col_offset=21), Assign(targets=[Name(id=''tokens'', ctx=Store(),
      lineno=73, col_offset=8, end_lineno=73, end_col_offset=14)], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=73, col_offset=17, end_lineno=73, end_col_offset=21), attr=''tokenizer'',
      ctx=Load(), lineno=73, col_offset=17, end_lineno=73, end_col_offset=31), attr=''tokenize'',
      ctx=Load(), lineno=73, col_offset=17, end_lineno=73, end_col_offset=40), args=[Name(id=''text'',
      ctx=Load(), lineno=73, col_offset=41, end_lineno=73, end_col_offset=45)], keywords=[],
      lineno=73, col_offset=17, end_lineno=73, end_col_offset=46), lineno=73, col_offset=8,
      end_lineno=73, end_col_offset=46), Assign(targets=[Name(id=''chunks'', ctx=Store(),
      lineno=76, col_offset=8, end_lineno=76, end_col_offset=14)], value=ListComp(elt=Subscript(value=Name(id=''tokens'',
      ctx=Load(), lineno=76, col_offset=18, end_lineno=76, end_col_offset=24), slice=Slice(lower=Name(id=''i'',
      ctx=Load(), lineno=76, col_offset=25, end_lineno=76, end_col_offset=26), upper=BinOp(left=Name(id=''i'',
      ctx=Load(), lineno=76, col_offset=27, end_lineno=76, end_col_offset=28), op=Add(),
      right=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=76,
      col_offset=29, end_lineno=76, end_col_offset=33), attr=''config'', ctx=Load(),
      lineno=76, col_offset=29, end_lineno=76, end_col_offset=40), slice=Constant(value=''max_seq_length'',
      lineno=76, col_offset=41, end_lineno=76, end_col_offset=57), ctx=Load(), lineno=76,
      col_offset=29, end_lineno=76, end_col_offset=58), lineno=76, col_offset=27,
      end_lineno=76, end_col_offset=58), lineno=76, col_offset=25, end_lineno=76,
      end_col_offset=58), ctx=Load(), lineno=76, col_offset=18, end_lineno=76, end_col_offset=59),
      generators=[comprehension(target=Name(id=''i'', ctx=Store(), lineno=76, col_offset=64,
      end_lineno=76, end_col_offset=65), iter=Call(func=Name(id=''range'', ctx=Load(),
      lineno=76, col_offset=69, end_lineno=76, end_col_offset=74), args=[Constant(value=0,
      lineno=76, col_offset=75, end_lineno=76, end_col_offset=76), Call(func=Name(id=''len'',
      ctx=Load(), lineno=76, col_offset=78, end_lineno=76, end_col_offset=81), args=[Name(id=''tokens'',
      ctx=Load(), lineno=76, col_offset=82, end_lineno=76, end_col_offset=88)], keywords=[],
      lineno=76, col_offset=78, end_lineno=76, end_col_offset=89), Subscript(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=76, col_offset=91, end_lineno=76, end_col_offset=95), attr=''config'',
      ctx=Load(), lineno=76, col_offset=91, end_lineno=76, end_col_offset=102), slice=Constant(value=''max_seq_length'',
      lineno=76, col_offset=103, end_lineno=76, end_col_offset=119), ctx=Load(), lineno=76,
      col_offset=91, end_lineno=76, end_col_offset=120)], keywords=[], lineno=76,
      col_offset=69, end_lineno=76, end_col_offset=121), ifs=[], is_async=0)], lineno=76,
      col_offset=17, end_lineno=76, end_col_offset=122), lineno=76, col_offset=8,
      end_lineno=76, end_col_offset=122), Assign(targets=[Name(id=''embeddings'',
      ctx=Store(), lineno=79, col_offset=8, end_lineno=79, end_col_offset=18)], value=List(elts=[],
      ctx=Load(), lineno=79, col_offset=21, end_lineno=79, end_col_offset=23), lineno=79,
      col_offset=8, end_lineno=79, end_col_offset=23), For(target=Name(id=''chunk'',
      ctx=Store(), lineno=80, col_offset=12, end_lineno=80, end_col_offset=17), iter=Name(id=''chunks'',
      ctx=Load(), lineno=80, col_offset=21, end_lineno=80, end_col_offset=27), body=[Assign(targets=[Name(id=''chunk_text'',
      ctx=Store(), lineno=82, col_offset=12, end_lineno=82, end_col_offset=22)], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=82, col_offset=25, end_lineno=82, end_col_offset=29), attr=''tokenizer'',
      ctx=Load(), lineno=82, col_offset=25, end_lineno=82, end_col_offset=39), attr=''convert_tokens_to_string'',
      ctx=Load(), lineno=82, col_offset=25, end_lineno=82, end_col_offset=64), args=[Name(id=''chunk'',
      ctx=Load(), lineno=82, col_offset=65, end_lineno=82, end_col_offset=70)], keywords=[],
      lineno=82, col_offset=25, end_lineno=82, end_col_offset=71), lineno=82, col_offset=12,
      end_lineno=82, end_col_offset=71), Assign(targets=[Name(id=''inputs'', ctx=Store(),
      lineno=83, col_offset=12, end_lineno=83, end_col_offset=18)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=83, col_offset=21, end_lineno=83, end_col_offset=25), attr=''tokenizer'',
      ctx=Load(), lineno=83, col_offset=21, end_lineno=83, end_col_offset=35), args=[Name(id=''chunk_text'',
      ctx=Load(), lineno=83, col_offset=36, end_lineno=83, end_col_offset=46)], keywords=[keyword(arg=''return_tensors'',
      value=Constant(value=''pt'', lineno=83, col_offset=63, end_lineno=83, end_col_offset=67),
      lineno=83, col_offset=48, end_lineno=83, end_col_offset=67), keyword(arg=''truncation'',
      value=Constant(value=True, lineno=83, col_offset=80, end_lineno=83, end_col_offset=84),
      lineno=83, col_offset=69, end_lineno=83, end_col_offset=84), keyword(arg=''padding'',
      value=Constant(value=True, lineno=83, col_offset=94, end_lineno=83, end_col_offset=98),
      lineno=83, col_offset=86, end_lineno=83, end_col_offset=98), keyword(arg=''max_length'',
      value=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=83,
      col_offset=111, end_lineno=83, end_col_offset=115), attr=''config'', ctx=Load(),
      lineno=83, col_offset=111, end_lineno=83, end_col_offset=122), slice=Constant(value=''max_seq_length'',
      lineno=83, col_offset=123, end_lineno=83, end_col_offset=139), ctx=Load(), lineno=83,
      col_offset=111, end_lineno=83, end_col_offset=140), lineno=83, col_offset=100,
      end_lineno=83, end_col_offset=140)], lineno=83, col_offset=21, end_lineno=83,
      end_col_offset=141), lineno=83, col_offset=12, end_lineno=83, end_col_offset=141),
      Assign(targets=[Name(id=''outputs'', ctx=Store(), lineno=84, col_offset=12,
      end_lineno=84, end_col_offset=19)], value=Call(func=Attribute(value=Name(id=''self'',
      ctx=Load(), lineno=84, col_offset=22, end_lineno=84, end_col_offset=26), attr=''model'',
      ctx=Load(), lineno=84, col_offset=22, end_lineno=84, end_col_offset=32), args=[],
      keywords=[keyword(value=Name(id=''inputs'', ctx=Load(), lineno=84, col_offset=35,
      end_lineno=84, end_col_offset=41), lineno=84, col_offset=33, end_lineno=84,
      end_col_offset=41)], lineno=84, col_offset=22, end_lineno=84, end_col_offset=42),
      lineno=84, col_offset=12, end_lineno=84, end_col_offset=42), Assign(targets=[Name(id=''chunk_embeddings'',
      ctx=Store(), lineno=85, col_offset=12, end_lineno=85, end_col_offset=28)], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id=''outputs'',
      ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=38), attr=''last_hidden_state'',
      ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=56), attr=''mean'',
      ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=61), args=[],
      keywords=[keyword(arg=''dim'', value=Constant(value=1, lineno=85, col_offset=66,
      end_lineno=85, end_col_offset=67), lineno=85, col_offset=62, end_lineno=85,
      end_col_offset=67)], lineno=85, col_offset=31, end_lineno=85, end_col_offset=68),
      attr=''detach'', ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=75),
      args=[], keywords=[], lineno=85, col_offset=31, end_lineno=85, end_col_offset=77),
      attr=''numpy'', ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=83),
      args=[], keywords=[], lineno=85, col_offset=31, end_lineno=85, end_col_offset=85),
      attr=''tolist'', ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=92),
      args=[], keywords=[], lineno=85, col_offset=31, end_lineno=85, end_col_offset=94),
      lineno=85, col_offset=12, end_lineno=85, end_col_offset=94), Expr(value=Call(func=Attribute(value=Name(id=''embeddings'',
      ctx=Load(), lineno=86, col_offset=12, end_lineno=86, end_col_offset=22), attr=''append'',
      ctx=Load(), lineno=86, col_offset=12, end_lineno=86, end_col_offset=29), args=[Name(id=''chunk_embeddings'',
      ctx=Load(), lineno=86, col_offset=30, end_lineno=86, end_col_offset=46)], keywords=[],
      lineno=86, col_offset=12, end_lineno=86, end_col_offset=47), lineno=86, col_offset=12,
      end_lineno=86, end_col_offset=47)], orelse=[], lineno=80, col_offset=8, end_lineno=86,
      end_col_offset=47), Return(value=Name(id=''embeddings'', ctx=Load(), lineno=88,
      col_offset=15, end_lineno=88, end_col_offset=25), lineno=88, col_offset=8, end_lineno=88,
      end_col_offset=25)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=60, col_offset=43, end_lineno=60, end_col_offset=47), slice=Subscript(value=Name(id=''List'',
      ctx=Load(), lineno=60, col_offset=48, end_lineno=60, end_col_offset=52), slice=Name(id=''float'',
      ctx=Load(), lineno=60, col_offset=53, end_lineno=60, end_col_offset=58), ctx=Load(),
      lineno=60, col_offset=48, end_lineno=60, end_col_offset=59), ctx=Load(), lineno=60,
      col_offset=43, end_lineno=60, end_col_offset=60), lineno=60, col_offset=4, end_lineno=88,
      end_col_offset=25)], decorator_list=[], lineno=29, col_offset=0, end_lineno=88,
      end_col_offset=25)'
    class_docstring: "A class used to generate vector embeddings for Python code and\
      \ generated questions and instructions.\nAttributes:\n    tokenizer (AutoTokenizer):\
      \ The tokenizer of the pretrained model used to tokenize the text.\n    model\
      \ (AutoModel): The pretrained model used to generate the embeddings.\nMethods:\n\
      \    get_embeddings(text: str) -> List[float]: Generates a vector embedding\
      \ for a given piece of text."
    class_inputs: null
    class_defaults: null
    class_returns:
    - embeddings
    - '[]'
    class_calls:
    - self.tokenizer
    - outputs.last_hidden_state.mean(dim=1).detach().numpy
    - range
    - logger.error
    - open
    - outputs.last_hidden_state.mean(dim=1).detach
    - self.tokenizer.tokenize
    - self.tokenizer.convert_tokens_to_string
    - self.config['model_import_path'].rsplit
    - TokenizerClass.from_pretrained
    - len
    - self.config['tokenizer_import_path'].rsplit
    - json.load
    - ModelClass.from_pretrained
    - outputs.last_hidden_state.mean
    - getattr
    - outputs.last_hidden_state.mean(dim=1).detach().numpy().tolist
    - embeddings.append
    - self.model
    - importlib.import_module
    class_variables:
    - tokenizer_module
    - chunk_text
    - TokenizerClass
    - outputs
    - chunk_embeddings
    - chunks
    - tokens
    - inputs
    - model_module
    - ModelClass
    - embeddings
    class_decorators: []
    class_annotations: []
    class_properties:
    - self.tokenizer
    - self.model
    - self.config
    class_attributes:
    - tokenizer
    - model
    - config
    - tokenizer
    - model
    class_methods:
    - get_embeddings
    class_inheritance: []
    class_static_methods: []
    class_method___init__:
      method_name: __init__
      method_code: "def __init__(self) -> None:\n    try:\n        with open('config.json')\
        \ as config_file:\n            self.config = json.load(config_file)[0]['embedding_model']\n\
        \        tokenizer_module_name, tokenizer_class_name = self.config['tokenizer_import_path'].rsplit('.',\
        \ 1)\n        model_module_name, model_class_name = self.config['model_import_path'].rsplit('.',\
        \ 1)\n        tokenizer_module = importlib.import_module(tokenizer_module_name)\n\
        \        model_module = importlib.import_module(model_module_name)\n     \
        \   TokenizerClass = getattr(tokenizer_module, tokenizer_class_name)\n   \
        \     ModelClass = getattr(model_module, model_class_name)\n        self.tokenizer\
        \ = TokenizerClass.from_pretrained(self.config['tokenizer'])\n        self.model\
        \ = ModelClass.from_pretrained(self.config['model_path'])\n    except (FileNotFoundError,\
        \ json.JSONDecodeError, ImportError, AttributeError) as e:\n        logger.error(f'Failed\
        \ to load configuration file: {e}')\n        self.tokenizer = None\n     \
        \   self.model = None"
      method_ast: 'FunctionDef(name=''__init__'', args=arguments(posonlyargs=[], args=[arg(arg=''self'',
        lineno=38, col_offset=17, end_lineno=38, end_col_offset=21)], kwonlyargs=[],
        kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id=''open'',
        ctx=Load(), lineno=41, col_offset=17, end_lineno=41, end_col_offset=21), args=[Constant(value=''config.json'',
        lineno=41, col_offset=22, end_lineno=41, end_col_offset=35)], keywords=[],
        lineno=41, col_offset=17, end_lineno=41, end_col_offset=36), optional_vars=Name(id=''config_file'',
        ctx=Store(), lineno=41, col_offset=40, end_lineno=41, end_col_offset=51))],
        body=[Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=42,
        col_offset=16, end_lineno=42, end_col_offset=20), attr=''config'', ctx=Store(),
        lineno=42, col_offset=16, end_lineno=42, end_col_offset=27)], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id=''json'',
        ctx=Load(), lineno=42, col_offset=30, end_lineno=42, end_col_offset=34), attr=''load'',
        ctx=Load(), lineno=42, col_offset=30, end_lineno=42, end_col_offset=39), args=[Name(id=''config_file'',
        ctx=Load(), lineno=42, col_offset=40, end_lineno=42, end_col_offset=51)],
        keywords=[], lineno=42, col_offset=30, end_lineno=42, end_col_offset=52),
        slice=Constant(value=0, lineno=42, col_offset=53, end_lineno=42, end_col_offset=54),
        ctx=Load(), lineno=42, col_offset=30, end_lineno=42, end_col_offset=55), slice=Constant(value=''embedding_model'',
        lineno=42, col_offset=56, end_lineno=42, end_col_offset=73), ctx=Load(), lineno=42,
        col_offset=30, end_lineno=42, end_col_offset=74), lineno=42, col_offset=16,
        end_lineno=42, end_col_offset=74)], lineno=41, col_offset=12, end_lineno=42,
        end_col_offset=74), Assign(targets=[Tuple(elts=[Name(id=''tokenizer_module_name'',
        ctx=Store(), lineno=45, col_offset=12, end_lineno=45, end_col_offset=33),
        Name(id=''tokenizer_class_name'', ctx=Store(), lineno=45, col_offset=35, end_lineno=45,
        end_col_offset=55)], ctx=Store(), lineno=45, col_offset=12, end_lineno=45,
        end_col_offset=55)], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=45, col_offset=58, end_lineno=45, end_col_offset=62), attr=''config'',
        ctx=Load(), lineno=45, col_offset=58, end_lineno=45, end_col_offset=69), slice=Constant(value=''tokenizer_import_path'',
        lineno=45, col_offset=70, end_lineno=45, end_col_offset=93), ctx=Load(), lineno=45,
        col_offset=58, end_lineno=45, end_col_offset=94), attr=''rsplit'', ctx=Load(),
        lineno=45, col_offset=58, end_lineno=45, end_col_offset=101), args=[Constant(value=''.'',
        lineno=45, col_offset=102, end_lineno=45, end_col_offset=105), Constant(value=1,
        lineno=45, col_offset=107, end_lineno=45, end_col_offset=108)], keywords=[],
        lineno=45, col_offset=58, end_lineno=45, end_col_offset=109), lineno=45, col_offset=12,
        end_lineno=45, end_col_offset=109), Assign(targets=[Tuple(elts=[Name(id=''model_module_name'',
        ctx=Store(), lineno=46, col_offset=12, end_lineno=46, end_col_offset=29),
        Name(id=''model_class_name'', ctx=Store(), lineno=46, col_offset=31, end_lineno=46,
        end_col_offset=47)], ctx=Store(), lineno=46, col_offset=12, end_lineno=46,
        end_col_offset=47)], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=46, col_offset=50, end_lineno=46, end_col_offset=54), attr=''config'',
        ctx=Load(), lineno=46, col_offset=50, end_lineno=46, end_col_offset=61), slice=Constant(value=''model_import_path'',
        lineno=46, col_offset=62, end_lineno=46, end_col_offset=81), ctx=Load(), lineno=46,
        col_offset=50, end_lineno=46, end_col_offset=82), attr=''rsplit'', ctx=Load(),
        lineno=46, col_offset=50, end_lineno=46, end_col_offset=89), args=[Constant(value=''.'',
        lineno=46, col_offset=90, end_lineno=46, end_col_offset=93), Constant(value=1,
        lineno=46, col_offset=95, end_lineno=46, end_col_offset=96)], keywords=[],
        lineno=46, col_offset=50, end_lineno=46, end_col_offset=97), lineno=46, col_offset=12,
        end_lineno=46, end_col_offset=97), Assign(targets=[Name(id=''tokenizer_module'',
        ctx=Store(), lineno=47, col_offset=12, end_lineno=47, end_col_offset=28)],
        value=Call(func=Attribute(value=Name(id=''importlib'', ctx=Load(), lineno=47,
        col_offset=31, end_lineno=47, end_col_offset=40), attr=''import_module'',
        ctx=Load(), lineno=47, col_offset=31, end_lineno=47, end_col_offset=54), args=[Name(id=''tokenizer_module_name'',
        ctx=Load(), lineno=47, col_offset=55, end_lineno=47, end_col_offset=76)],
        keywords=[], lineno=47, col_offset=31, end_lineno=47, end_col_offset=77),
        lineno=47, col_offset=12, end_lineno=47, end_col_offset=77), Assign(targets=[Name(id=''model_module'',
        ctx=Store(), lineno=48, col_offset=12, end_lineno=48, end_col_offset=24)],
        value=Call(func=Attribute(value=Name(id=''importlib'', ctx=Load(), lineno=48,
        col_offset=27, end_lineno=48, end_col_offset=36), attr=''import_module'',
        ctx=Load(), lineno=48, col_offset=27, end_lineno=48, end_col_offset=50), args=[Name(id=''model_module_name'',
        ctx=Load(), lineno=48, col_offset=51, end_lineno=48, end_col_offset=68)],
        keywords=[], lineno=48, col_offset=27, end_lineno=48, end_col_offset=69),
        lineno=48, col_offset=12, end_lineno=48, end_col_offset=69), Assign(targets=[Name(id=''TokenizerClass'',
        ctx=Store(), lineno=49, col_offset=12, end_lineno=49, end_col_offset=26)],
        value=Call(func=Name(id=''getattr'', ctx=Load(), lineno=49, col_offset=29,
        end_lineno=49, end_col_offset=36), args=[Name(id=''tokenizer_module'', ctx=Load(),
        lineno=49, col_offset=37, end_lineno=49, end_col_offset=53), Name(id=''tokenizer_class_name'',
        ctx=Load(), lineno=49, col_offset=55, end_lineno=49, end_col_offset=75)],
        keywords=[], lineno=49, col_offset=29, end_lineno=49, end_col_offset=76),
        lineno=49, col_offset=12, end_lineno=49, end_col_offset=76), Assign(targets=[Name(id=''ModelClass'',
        ctx=Store(), lineno=50, col_offset=12, end_lineno=50, end_col_offset=22)],
        value=Call(func=Name(id=''getattr'', ctx=Load(), lineno=50, col_offset=25,
        end_lineno=50, end_col_offset=32), args=[Name(id=''model_module'', ctx=Load(),
        lineno=50, col_offset=33, end_lineno=50, end_col_offset=45), Name(id=''model_class_name'',
        ctx=Load(), lineno=50, col_offset=47, end_lineno=50, end_col_offset=63)],
        keywords=[], lineno=50, col_offset=25, end_lineno=50, end_col_offset=64),
        lineno=50, col_offset=12, end_lineno=50, end_col_offset=64), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=52, col_offset=12, end_lineno=52, end_col_offset=16), attr=''tokenizer'',
        ctx=Store(), lineno=52, col_offset=12, end_lineno=52, end_col_offset=26)],
        value=Call(func=Attribute(value=Name(id=''TokenizerClass'', ctx=Load(), lineno=52,
        col_offset=29, end_lineno=52, end_col_offset=43), attr=''from_pretrained'',
        ctx=Load(), lineno=52, col_offset=29, end_lineno=52, end_col_offset=59), args=[Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=52, col_offset=60, end_lineno=52, end_col_offset=64), attr=''config'',
        ctx=Load(), lineno=52, col_offset=60, end_lineno=52, end_col_offset=71), slice=Constant(value=''tokenizer'',
        lineno=52, col_offset=72, end_lineno=52, end_col_offset=83), ctx=Load(), lineno=52,
        col_offset=60, end_lineno=52, end_col_offset=84)], keywords=[], lineno=52,
        col_offset=29, end_lineno=52, end_col_offset=85), lineno=52, col_offset=12,
        end_lineno=52, end_col_offset=85), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=53, col_offset=12, end_lineno=53, end_col_offset=16), attr=''model'',
        ctx=Store(), lineno=53, col_offset=12, end_lineno=53, end_col_offset=22)],
        value=Call(func=Attribute(value=Name(id=''ModelClass'', ctx=Load(), lineno=53,
        col_offset=25, end_lineno=53, end_col_offset=35), attr=''from_pretrained'',
        ctx=Load(), lineno=53, col_offset=25, end_lineno=53, end_col_offset=51), args=[Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=53, col_offset=52, end_lineno=53, end_col_offset=56), attr=''config'',
        ctx=Load(), lineno=53, col_offset=52, end_lineno=53, end_col_offset=63), slice=Constant(value=''model_path'',
        lineno=53, col_offset=64, end_lineno=53, end_col_offset=76), ctx=Load(), lineno=53,
        col_offset=52, end_lineno=53, end_col_offset=77)], keywords=[], lineno=53,
        col_offset=25, end_lineno=53, end_col_offset=78), lineno=53, col_offset=12,
        end_lineno=53, end_col_offset=78)], handlers=[ExceptHandler(type=Tuple(elts=[Name(id=''FileNotFoundError'',
        ctx=Load(), lineno=55, col_offset=16, end_lineno=55, end_col_offset=33), Attribute(value=Name(id=''json'',
        ctx=Load(), lineno=55, col_offset=35, end_lineno=55, end_col_offset=39), attr=''JSONDecodeError'',
        ctx=Load(), lineno=55, col_offset=35, end_lineno=55, end_col_offset=55), Name(id=''ImportError'',
        ctx=Load(), lineno=55, col_offset=57, end_lineno=55, end_col_offset=68), Name(id=''AttributeError'',
        ctx=Load(), lineno=55, col_offset=70, end_lineno=55, end_col_offset=84)],
        ctx=Load(), lineno=55, col_offset=15, end_lineno=55, end_col_offset=85), name=''e'',
        body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'', ctx=Load(),
        lineno=56, col_offset=12, end_lineno=56, end_col_offset=18), attr=''error'',
        ctx=Load(), lineno=56, col_offset=12, end_lineno=56, end_col_offset=24), args=[JoinedStr(values=[Constant(value=''Failed
        to load configuration file: '', lineno=56, col_offset=25, end_lineno=56, end_col_offset=66),
        FormattedValue(value=Name(id=''e'', ctx=Load(), lineno=56, col_offset=63,
        end_lineno=56, end_col_offset=64), conversion=-1, lineno=56, col_offset=25,
        end_lineno=56, end_col_offset=66)], lineno=56, col_offset=25, end_lineno=56,
        end_col_offset=66)], keywords=[], lineno=56, col_offset=12, end_lineno=56,
        end_col_offset=67), lineno=56, col_offset=12, end_lineno=56, end_col_offset=67),
        Assign(targets=[Attribute(value=Name(id=''self'', ctx=Load(), lineno=57, col_offset=12,
        end_lineno=57, end_col_offset=16), attr=''tokenizer'', ctx=Store(), lineno=57,
        col_offset=12, end_lineno=57, end_col_offset=26)], value=Constant(value=None,
        lineno=57, col_offset=29, end_lineno=57, end_col_offset=33), lineno=57, col_offset=12,
        end_lineno=57, end_col_offset=33), Assign(targets=[Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=58, col_offset=12, end_lineno=58, end_col_offset=16), attr=''model'',
        ctx=Store(), lineno=58, col_offset=12, end_lineno=58, end_col_offset=22)],
        value=Constant(value=None, lineno=58, col_offset=25, end_lineno=58, end_col_offset=29),
        lineno=58, col_offset=12, end_lineno=58, end_col_offset=29)], lineno=55, col_offset=8,
        end_lineno=58, end_col_offset=29)], orelse=[], finalbody=[], lineno=39, col_offset=8,
        end_lineno=58, end_col_offset=29)], decorator_list=[], returns=Constant(value=None,
        lineno=38, col_offset=26, end_lineno=38, end_col_offset=30), lineno=38, col_offset=4,
        end_lineno=58, end_col_offset=29)'
      method_docstring: null
      method_inputs:
      - self
      method_defaults: []
      method_returns: []
      method_calls:
      - self.config['tokenizer_import_path'].rsplit
      - self.config['model_import_path'].rsplit
      - json.load
      - ModelClass.from_pretrained
      - logger.error
      - getattr
      - open
      - TokenizerClass.from_pretrained
      - importlib.import_module
      method_variables:
      - tokenizer_module
      - TokenizerClass
      - ModelClass
      - model_module
      method_decorators: []
      method_annotations: []
      method_properties:
      - self.tokenizer
      - self.model
      - self.config
    class_method_get_embeddings:
      method_name: get_embeddings
      method_code: "def get_embeddings(self, text: str) -> List[List[float]]:\n  \
        \  \"\"\"\n        Generates a vector embedding for a given piece of text.\n\
        \        Args:\n            text (str): The text to generate an embedding\
        \ for.\n        Returns:\n            List[List[float]]: The generated vector\
        \ embeddings.\n        \"\"\"\n    if not self.tokenizer or not self.model:\n\
        \        logger.error('Embedding model not available.')\n        return []\n\
        \    tokens = self.tokenizer.tokenize(text)\n    chunks = [tokens[i:i + self.config['max_seq_length']]\
        \ for i in range(0, len(tokens), self.config['max_seq_length'])]\n    embeddings\
        \ = []\n    for chunk in chunks:\n        chunk_text = self.tokenizer.convert_tokens_to_string(chunk)\n\
        \        inputs = self.tokenizer(chunk_text, return_tensors='pt', truncation=True,\
        \ padding=True, max_length=self.config['max_seq_length'])\n        outputs\
        \ = self.model(**inputs)\n        chunk_embeddings = outputs.last_hidden_state.mean(dim=1).detach().numpy().tolist()\n\
        \        embeddings.append(chunk_embeddings)\n    return embeddings"
      method_ast: 'FunctionDef(name=''get_embeddings'', args=arguments(posonlyargs=[],
        args=[arg(arg=''self'', lineno=60, col_offset=23, end_lineno=60, end_col_offset=27),
        arg(arg=''text'', annotation=Name(id=''str'', ctx=Load(), lineno=60, col_offset=35,
        end_lineno=60, end_col_offset=38), lineno=60, col_offset=29, end_lineno=60,
        end_col_offset=38)], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=''\n        Generates
        a vector embedding for a given piece of text.\n        Args:\n            text
        (str): The text to generate an embedding for.\n        Returns:\n            List[List[float]]:
        The generated vector embeddings.\n        '', lineno=61, col_offset=8, end_lineno=67,
        end_col_offset=11), lineno=61, col_offset=8, end_lineno=67, end_col_offset=11),
        If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=68, col_offset=15, end_lineno=68, end_col_offset=19), attr=''tokenizer'',
        ctx=Load(), lineno=68, col_offset=15, end_lineno=68, end_col_offset=29), lineno=68,
        col_offset=11, end_lineno=68, end_col_offset=29), UnaryOp(op=Not(), operand=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=68, col_offset=37, end_lineno=68, end_col_offset=41), attr=''model'',
        ctx=Load(), lineno=68, col_offset=37, end_lineno=68, end_col_offset=47), lineno=68,
        col_offset=33, end_lineno=68, end_col_offset=47)], lineno=68, col_offset=11,
        end_lineno=68, end_col_offset=47), body=[Expr(value=Call(func=Attribute(value=Name(id=''logger'',
        ctx=Load(), lineno=69, col_offset=12, end_lineno=69, end_col_offset=18), attr=''error'',
        ctx=Load(), lineno=69, col_offset=12, end_lineno=69, end_col_offset=24), args=[Constant(value=''Embedding
        model not available.'', lineno=69, col_offset=25, end_lineno=69, end_col_offset=57)],
        keywords=[], lineno=69, col_offset=12, end_lineno=69, end_col_offset=58),
        lineno=69, col_offset=12, end_lineno=69, end_col_offset=58), Return(value=List(elts=[],
        ctx=Load(), lineno=70, col_offset=19, end_lineno=70, end_col_offset=21), lineno=70,
        col_offset=12, end_lineno=70, end_col_offset=21)], orelse=[], lineno=68, col_offset=8,
        end_lineno=70, end_col_offset=21), Assign(targets=[Name(id=''tokens'', ctx=Store(),
        lineno=73, col_offset=8, end_lineno=73, end_col_offset=14)], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=73, col_offset=17, end_lineno=73, end_col_offset=21), attr=''tokenizer'',
        ctx=Load(), lineno=73, col_offset=17, end_lineno=73, end_col_offset=31), attr=''tokenize'',
        ctx=Load(), lineno=73, col_offset=17, end_lineno=73, end_col_offset=40), args=[Name(id=''text'',
        ctx=Load(), lineno=73, col_offset=41, end_lineno=73, end_col_offset=45)],
        keywords=[], lineno=73, col_offset=17, end_lineno=73, end_col_offset=46),
        lineno=73, col_offset=8, end_lineno=73, end_col_offset=46), Assign(targets=[Name(id=''chunks'',
        ctx=Store(), lineno=76, col_offset=8, end_lineno=76, end_col_offset=14)],
        value=ListComp(elt=Subscript(value=Name(id=''tokens'', ctx=Load(), lineno=76,
        col_offset=18, end_lineno=76, end_col_offset=24), slice=Slice(lower=Name(id=''i'',
        ctx=Load(), lineno=76, col_offset=25, end_lineno=76, end_col_offset=26), upper=BinOp(left=Name(id=''i'',
        ctx=Load(), lineno=76, col_offset=27, end_lineno=76, end_col_offset=28), op=Add(),
        right=Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=76,
        col_offset=29, end_lineno=76, end_col_offset=33), attr=''config'', ctx=Load(),
        lineno=76, col_offset=29, end_lineno=76, end_col_offset=40), slice=Constant(value=''max_seq_length'',
        lineno=76, col_offset=41, end_lineno=76, end_col_offset=57), ctx=Load(), lineno=76,
        col_offset=29, end_lineno=76, end_col_offset=58), lineno=76, col_offset=27,
        end_lineno=76, end_col_offset=58), lineno=76, col_offset=25, end_lineno=76,
        end_col_offset=58), ctx=Load(), lineno=76, col_offset=18, end_lineno=76, end_col_offset=59),
        generators=[comprehension(target=Name(id=''i'', ctx=Store(), lineno=76, col_offset=64,
        end_lineno=76, end_col_offset=65), iter=Call(func=Name(id=''range'', ctx=Load(),
        lineno=76, col_offset=69, end_lineno=76, end_col_offset=74), args=[Constant(value=0,
        lineno=76, col_offset=75, end_lineno=76, end_col_offset=76), Call(func=Name(id=''len'',
        ctx=Load(), lineno=76, col_offset=78, end_lineno=76, end_col_offset=81), args=[Name(id=''tokens'',
        ctx=Load(), lineno=76, col_offset=82, end_lineno=76, end_col_offset=88)],
        keywords=[], lineno=76, col_offset=78, end_lineno=76, end_col_offset=89),
        Subscript(value=Attribute(value=Name(id=''self'', ctx=Load(), lineno=76, col_offset=91,
        end_lineno=76, end_col_offset=95), attr=''config'', ctx=Load(), lineno=76,
        col_offset=91, end_lineno=76, end_col_offset=102), slice=Constant(value=''max_seq_length'',
        lineno=76, col_offset=103, end_lineno=76, end_col_offset=119), ctx=Load(),
        lineno=76, col_offset=91, end_lineno=76, end_col_offset=120)], keywords=[],
        lineno=76, col_offset=69, end_lineno=76, end_col_offset=121), ifs=[], is_async=0)],
        lineno=76, col_offset=17, end_lineno=76, end_col_offset=122), lineno=76, col_offset=8,
        end_lineno=76, end_col_offset=122), Assign(targets=[Name(id=''embeddings'',
        ctx=Store(), lineno=79, col_offset=8, end_lineno=79, end_col_offset=18)],
        value=List(elts=[], ctx=Load(), lineno=79, col_offset=21, end_lineno=79, end_col_offset=23),
        lineno=79, col_offset=8, end_lineno=79, end_col_offset=23), For(target=Name(id=''chunk'',
        ctx=Store(), lineno=80, col_offset=12, end_lineno=80, end_col_offset=17),
        iter=Name(id=''chunks'', ctx=Load(), lineno=80, col_offset=21, end_lineno=80,
        end_col_offset=27), body=[Assign(targets=[Name(id=''chunk_text'', ctx=Store(),
        lineno=82, col_offset=12, end_lineno=82, end_col_offset=22)], value=Call(func=Attribute(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=82, col_offset=25, end_lineno=82, end_col_offset=29), attr=''tokenizer'',
        ctx=Load(), lineno=82, col_offset=25, end_lineno=82, end_col_offset=39), attr=''convert_tokens_to_string'',
        ctx=Load(), lineno=82, col_offset=25, end_lineno=82, end_col_offset=64), args=[Name(id=''chunk'',
        ctx=Load(), lineno=82, col_offset=65, end_lineno=82, end_col_offset=70)],
        keywords=[], lineno=82, col_offset=25, end_lineno=82, end_col_offset=71),
        lineno=82, col_offset=12, end_lineno=82, end_col_offset=71), Assign(targets=[Name(id=''inputs'',
        ctx=Store(), lineno=83, col_offset=12, end_lineno=83, end_col_offset=18)],
        value=Call(func=Attribute(value=Name(id=''self'', ctx=Load(), lineno=83, col_offset=21,
        end_lineno=83, end_col_offset=25), attr=''tokenizer'', ctx=Load(), lineno=83,
        col_offset=21, end_lineno=83, end_col_offset=35), args=[Name(id=''chunk_text'',
        ctx=Load(), lineno=83, col_offset=36, end_lineno=83, end_col_offset=46)],
        keywords=[keyword(arg=''return_tensors'', value=Constant(value=''pt'', lineno=83,
        col_offset=63, end_lineno=83, end_col_offset=67), lineno=83, col_offset=48,
        end_lineno=83, end_col_offset=67), keyword(arg=''truncation'', value=Constant(value=True,
        lineno=83, col_offset=80, end_lineno=83, end_col_offset=84), lineno=83, col_offset=69,
        end_lineno=83, end_col_offset=84), keyword(arg=''padding'', value=Constant(value=True,
        lineno=83, col_offset=94, end_lineno=83, end_col_offset=98), lineno=83, col_offset=86,
        end_lineno=83, end_col_offset=98), keyword(arg=''max_length'', value=Subscript(value=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=83, col_offset=111, end_lineno=83, end_col_offset=115),
        attr=''config'', ctx=Load(), lineno=83, col_offset=111, end_lineno=83, end_col_offset=122),
        slice=Constant(value=''max_seq_length'', lineno=83, col_offset=123, end_lineno=83,
        end_col_offset=139), ctx=Load(), lineno=83, col_offset=111, end_lineno=83,
        end_col_offset=140), lineno=83, col_offset=100, end_lineno=83, end_col_offset=140)],
        lineno=83, col_offset=21, end_lineno=83, end_col_offset=141), lineno=83, col_offset=12,
        end_lineno=83, end_col_offset=141), Assign(targets=[Name(id=''outputs'', ctx=Store(),
        lineno=84, col_offset=12, end_lineno=84, end_col_offset=19)], value=Call(func=Attribute(value=Name(id=''self'',
        ctx=Load(), lineno=84, col_offset=22, end_lineno=84, end_col_offset=26), attr=''model'',
        ctx=Load(), lineno=84, col_offset=22, end_lineno=84, end_col_offset=32), args=[],
        keywords=[keyword(value=Name(id=''inputs'', ctx=Load(), lineno=84, col_offset=35,
        end_lineno=84, end_col_offset=41), lineno=84, col_offset=33, end_lineno=84,
        end_col_offset=41)], lineno=84, col_offset=22, end_lineno=84, end_col_offset=42),
        lineno=84, col_offset=12, end_lineno=84, end_col_offset=42), Assign(targets=[Name(id=''chunk_embeddings'',
        ctx=Store(), lineno=85, col_offset=12, end_lineno=85, end_col_offset=28)],
        value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id=''outputs'',
        ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=38), attr=''last_hidden_state'',
        ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=56), attr=''mean'',
        ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=61), args=[],
        keywords=[keyword(arg=''dim'', value=Constant(value=1, lineno=85, col_offset=66,
        end_lineno=85, end_col_offset=67), lineno=85, col_offset=62, end_lineno=85,
        end_col_offset=67)], lineno=85, col_offset=31, end_lineno=85, end_col_offset=68),
        attr=''detach'', ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=75),
        args=[], keywords=[], lineno=85, col_offset=31, end_lineno=85, end_col_offset=77),
        attr=''numpy'', ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=83),
        args=[], keywords=[], lineno=85, col_offset=31, end_lineno=85, end_col_offset=85),
        attr=''tolist'', ctx=Load(), lineno=85, col_offset=31, end_lineno=85, end_col_offset=92),
        args=[], keywords=[], lineno=85, col_offset=31, end_lineno=85, end_col_offset=94),
        lineno=85, col_offset=12, end_lineno=85, end_col_offset=94), Expr(value=Call(func=Attribute(value=Name(id=''embeddings'',
        ctx=Load(), lineno=86, col_offset=12, end_lineno=86, end_col_offset=22), attr=''append'',
        ctx=Load(), lineno=86, col_offset=12, end_lineno=86, end_col_offset=29), args=[Name(id=''chunk_embeddings'',
        ctx=Load(), lineno=86, col_offset=30, end_lineno=86, end_col_offset=46)],
        keywords=[], lineno=86, col_offset=12, end_lineno=86, end_col_offset=47),
        lineno=86, col_offset=12, end_lineno=86, end_col_offset=47)], orelse=[], lineno=80,
        col_offset=8, end_lineno=86, end_col_offset=47), Return(value=Name(id=''embeddings'',
        ctx=Load(), lineno=88, col_offset=15, end_lineno=88, end_col_offset=25), lineno=88,
        col_offset=8, end_lineno=88, end_col_offset=25)], decorator_list=[], returns=Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=60, col_offset=43, end_lineno=60, end_col_offset=47), slice=Subscript(value=Name(id=''List'',
        ctx=Load(), lineno=60, col_offset=48, end_lineno=60, end_col_offset=52), slice=Name(id=''float'',
        ctx=Load(), lineno=60, col_offset=53, end_lineno=60, end_col_offset=58), ctx=Load(),
        lineno=60, col_offset=48, end_lineno=60, end_col_offset=59), ctx=Load(), lineno=60,
        col_offset=43, end_lineno=60, end_col_offset=60), lineno=60, col_offset=4,
        end_lineno=88, end_col_offset=25)'
      method_docstring: "Generates a vector embedding for a given piece of text.\n\
        Args:\n    text (str): The text to generate an embedding for.\nReturns:\n\
        \    List[List[float]]: The generated vector embeddings."
      method_inputs:
      - self
      - text
      method_defaults: []
      method_returns:
      - embeddings
      - '[]'
      method_calls:
      - self.tokenizer.convert_tokens_to_string
      - self.tokenizer
      - outputs.last_hidden_state.mean(dim=1).detach().numpy
      - range
      - logger.error
      - outputs.last_hidden_state.mean(dim=1).detach
      - outputs.last_hidden_state.mean(dim=1).detach().numpy().tolist
      - embeddings.append
      - self.model
      - self.tokenizer.tokenize
      - outputs.last_hidden_state.mean
      - len
      method_variables:
      - outputs
      - chunk_text
      - chunk_embeddings
      - chunks
      - tokens
      - inputs
      - embeddings
      method_decorators: []
      method_annotations: []
      method_properties: []
