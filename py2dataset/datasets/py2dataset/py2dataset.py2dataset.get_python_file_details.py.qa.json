[
    {
        "question": "Dependencies of file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "typing, ast, networkx, re, logging"
    },
    {
        "question": "Structural graph of the relationships between the functions and classes defined in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "{'nodes': ['get_all_calls', 'get_control_flow', 'code_graph', 'get_python_file_details', 'ControlFlowVisitor', 'ControlFlowVisitor.__init__', 'ControlFlowVisitor.generic_visit', 'ControlFlowVisitor.get_control_flow', 'CodeVisitor', 'CodeVisitor.__init__', 'CodeVisitor.visit_FunctionDef', 'CodeVisitor.visit_ClassDef', 'CodeVisitor.extract_details', 'CodeVisitor.analyze'], 'edges': [{'source': 'get_all_calls', 'target': 'get_all_calls', 'target_input': ['node'], 'target_returns': ['calls']}, {'source': 'get_control_flow', 'target': 'ControlFlowVisitor'}, {'source': 'get_python_file_details', 'target': 'CodeVisitor'}, {'source': 'get_python_file_details', 'target': 'code_graph', 'target_input': ['file_details', 'internal_only'], 'target_returns': [\"{'nodes': nodes, 'edges': edges}\"]}, {'source': 'ControlFlowVisitor', 'target': 'ControlFlowVisitor.__init__'}, {'source': 'ControlFlowVisitor', 'target': 'ControlFlowVisitor.generic_visit'}, {'source': 'ControlFlowVisitor', 'target': 'ControlFlowVisitor.get_control_flow'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.__init__'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_FunctionDef'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_ClassDef'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.extract_details'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.analyze'}, {'source': 'CodeVisitor.extract_details', 'target': 'get_all_calls', 'target_input': ['node'], 'target_returns': ['calls']}, {'source': 'CodeVisitor.analyze', 'target': 'get_control_flow', 'target_input': ['code'], 'target_returns': ['visitor.get_control_flow()']}]}"
    },
    {
        "question": "Structural graph of the relationships between the functions and classes defined and used in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "{'nodes': ['get_all_calls', 'get_control_flow', 'code_graph', 'get_python_file_details', 'ControlFlowVisitor', 'ControlFlowVisitor.__init__', 'ControlFlowVisitor.generic_visit', 'ControlFlowVisitor.get_control_flow', 'ast.NodeVisitor', 'CodeVisitor', 'CodeVisitor.__init__', 'CodeVisitor.visit_FunctionDef', 'CodeVisitor.visit_ClassDef', 'CodeVisitor.extract_details', 'CodeVisitor.analyze', 'ast.iter_child_nodes', 'isinstance', 'calls.append', 'calls.extend', 'visitor.visit', 'visitor.get_control_flow', 'ast.parse', 'called_func.rsplit', \"file_details['classes'].get(called_class_name, {}).get\", 'str', \"file_details['classes'].get(called_class_name, {}).get(f'class_method_{called_method_name}', {}).get\", 'list', 'nx.DiGraph', \"file_details['classes'].get\", 'base_class.strip', 'class_details.items', 'G.add_node', \"file_details['functions'].get(called_func, {}).get\", 'G.add_edge', 'len', \"file_details['classes'].items\", 'called_func.strip', 'class_details.keys', 'G.edges.data', 'method_name.startswith', \"file_details['functions'].get\", \"file_details['functions'].keys\", \"file_details['functions'].items\", 'logging.warning', 'f.read', 'open', 'visitor.analyze', 'super', 'super().generic_visit', 'type', 'self.node_type_to_keyword.get', 'self.control_flow.append', \"' -> '.join\", 'self.generic_visit', 'self.extract_details', 'ast.dump', 'details.update', 'ast.unparse', 'set', \"self.classes[self.current_class]['class_attributes'].extend\", 'ast.get_docstring', 'ast.walk', 'any', 'self.visit', 'self.classes.keys', 'self.functions.keys'], 'edges': [{'source': 'get_all_calls', 'target': 'ast.iter_child_nodes'}, {'source': 'get_all_calls', 'target': 'isinstance'}, {'source': 'get_all_calls', 'target': 'calls.append'}, {'source': 'get_all_calls', 'target': 'get_all_calls', 'target_input': ['node'], 'target_returns': ['calls']}, {'source': 'get_all_calls', 'target': 'calls.extend'}, {'source': 'get_control_flow', 'target': 'visitor.visit'}, {'source': 'get_control_flow', 'target': 'visitor.get_control_flow'}, {'source': 'get_control_flow', 'target': 'ControlFlowVisitor'}, {'source': 'get_control_flow', 'target': 'ast.parse'}, {'source': 'code_graph', 'target': 'called_func.rsplit'}, {'source': 'code_graph', 'target': \"file_details['classes'].get(called_class_name, {}).get\"}, {'source': 'code_graph', 'target': 'str'}, {'source': 'code_graph', 'target': \"file_details['classes'].get(called_class_name, {}).get(f'class_method_{called_method_name}', {}).get\"}, {'source': 'code_graph', 'target': 'list'}, {'source': 'code_graph', 'target': 'nx.DiGraph'}, {'source': 'code_graph', 'target': \"file_details['classes'].get\"}, {'source': 'code_graph', 'target': 'base_class.strip'}, {'source': 'code_graph', 'target': 'class_details.items'}, {'source': 'code_graph', 'target': 'G.add_node'}, {'source': 'code_graph', 'target': \"file_details['functions'].get(called_func, {}).get\"}, {'source': 'code_graph', 'target': 'G.add_edge'}, {'source': 'code_graph', 'target': 'len'}, {'source': 'code_graph', 'target': \"file_details['classes'].items\"}, {'source': 'code_graph', 'target': 'called_func.strip'}, {'source': 'code_graph', 'target': 'class_details.keys'}, {'source': 'code_graph', 'target': 'G.edges.data'}, {'source': 'code_graph', 'target': 'method_name.startswith'}, {'source': 'code_graph', 'target': \"file_details['functions'].get\"}, {'source': 'code_graph', 'target': \"file_details['functions'].keys\"}, {'source': 'code_graph', 'target': \"file_details['functions'].items\"}, {'source': 'get_python_file_details', 'target': 'logging.warning'}, {'source': 'get_python_file_details', 'target': 'f.read'}, {'source': 'get_python_file_details', 'target': 'ast.parse'}, {'source': 'get_python_file_details', 'target': 'open'}, {'source': 'get_python_file_details', 'target': 'CodeVisitor'}, {'source': 'get_python_file_details', 'target': 'code_graph', 'target_input': ['file_details', 'internal_only'], 'target_returns': [\"{'nodes': nodes, 'edges': edges}\"]}, {'source': 'get_python_file_details', 'target': 'visitor.analyze'}, {'source': 'ControlFlowVisitor', 'target': 'ControlFlowVisitor.__init__'}, {'source': 'ControlFlowVisitor', 'target': 'ControlFlowVisitor.generic_visit'}, {'source': 'ControlFlowVisitor', 'target': 'ControlFlowVisitor.get_control_flow'}, {'source': 'ControlFlowVisitor', 'target': 'ast.NodeVisitor'}, {'source': 'ControlFlowVisitor.generic_visit', 'target': 'super'}, {'source': 'ControlFlowVisitor.generic_visit', 'target': 'super().generic_visit'}, {'source': 'ControlFlowVisitor.generic_visit', 'target': 'isinstance'}, {'source': 'ControlFlowVisitor.generic_visit', 'target': 'type'}, {'source': 'ControlFlowVisitor.generic_visit', 'target': 'self.node_type_to_keyword.get'}, {'source': 'ControlFlowVisitor.generic_visit', 'target': 'self.control_flow.append'}, {'source': 'ControlFlowVisitor.get_control_flow', 'target': \"' -> '.join\"}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.__init__'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_FunctionDef'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_ClassDef'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.extract_details'}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.analyze'}, {'source': 'CodeVisitor', 'target': 'ast.NodeVisitor'}, {'source': 'CodeVisitor.visit_FunctionDef', 'target': 'self.generic_visit'}, {'source': 'CodeVisitor.visit_FunctionDef', 'target': 'self.extract_details'}, {'source': 'CodeVisitor.visit_ClassDef', 'target': 'self.generic_visit'}, {'source': 'CodeVisitor.visit_ClassDef', 'target': 'self.extract_details'}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.dump'}, {'source': 'CodeVisitor.extract_details', 'target': 'details.update'}, {'source': 'CodeVisitor.extract_details', 'target': 'isinstance'}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.unparse'}, {'source': 'CodeVisitor.extract_details', 'target': 'set'}, {'source': 'CodeVisitor.extract_details', 'target': \"self.classes[self.current_class]['class_attributes'].extend\"}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.get_docstring'}, {'source': 'CodeVisitor.extract_details', 'target': 'list'}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.walk'}, {'source': 'CodeVisitor.extract_details', 'target': 'any'}, {'source': 'CodeVisitor.extract_details', 'target': 'get_all_calls', 'target_input': ['node'], 'target_returns': ['calls']}, {'source': 'CodeVisitor.analyze', 'target': 'ast.dump'}, {'source': 'CodeVisitor.analyze', 'target': 'self.visit'}, {'source': 'CodeVisitor.analyze', 'target': 'isinstance'}, {'source': 'CodeVisitor.analyze', 'target': 'get_control_flow', 'target_input': ['code'], 'target_returns': ['visitor.get_control_flow()']}, {'source': 'CodeVisitor.analyze', 'target': 'list'}, {'source': 'CodeVisitor.analyze', 'target': 'ast.walk'}, {'source': 'CodeVisitor.analyze', 'target': 'self.classes.keys'}, {'source': 'CodeVisitor.analyze', 'target': 'self.functions.keys'}]}"
    },
    {
        "question": "Funtions in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "get_all_calls, get_python_file_details, code_graph, get_control_flow"
    },
    {
        "question": "Classes in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "CodeVisitor, ControlFlowVisitor"
    },
    {
        "question": "Control Flow in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "module -> class -> def __init__ -> def generic_visit -> if -> if -> def get_control_flow -> def get_all_calls -> for -> if -> class -> def __init__ -> def visit_FunctionDef -> if -> def visit_ClassDef -> def extract_details -> if -> if -> if -> if -> if -> def analyze -> def get_control_flow -> def code_graph -> for -> for -> for -> if -> if -> for -> if -> for -> for -> if -> if -> if -> for -> for -> if -> for -> if -> if -> if -> if -> def get_python_file_details -> try -> with -> except -> try -> except"
    },
    {
        "question": "Inputs to function: (get_all_calls) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "node"
    },
    {
        "question": "Inputs to function: (get_control_flow) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "code"
    },
    {
        "question": "Inputs to function: (code_graph) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "file_details, internal_only"
    },
    {
        "question": "Inputs to function: (get_python_file_details) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "file_path"
    },
    {
        "question": "Docstring of function: (get_all_calls) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "Recursively find all function calls in the subtree rooted at node."
    },
    {
        "question": "Docstring of function: (get_control_flow) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "Extract control flow keywords from source code. Args: code: str: The source code to extract from. Returns: str: The control flow keywords in the code."
    },
    {
        "question": "Docstring of function: (code_graph) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "only include function calls where both the caller and called function are within the file. Returns: dict: A dictionary with nodes and edges representing the relationships in the code., UnionDict, str: The details extracted from the file. internal_only: bool: If True, Create a dictionary representation of file details. Args: file_details: Dictstr"
    },
    {
        "question": "Docstring of function: (get_python_file_details) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "str: The details extracted from the file., Extract details from a Python file. Args: file_path: str: The path to the Python file. Returns: Dictstr, UnionDict"
    },
    {
        "question": "Calls in function: (get_all_calls) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "ast.iter_child_nodes, isinstance, calls.append, get_all_calls, calls.extend"
    },
    {
        "question": "Calls in function: (get_control_flow) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "visitor.visit, visitor.get_control_flow, ControlFlowVisitor, ast.parse"
    },
    {
        "question": "Calls in function: (code_graph) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "called_func.rsplit, file_detailsfunctions.get, str, list, nx.DiGraph, file_detailsfunctions.getcalled_func, base_class.strip, class_details.items, file_detailsfunctions.keys, G.add_node, .get, file_detailsfunctions.items, len, G.add_edge, called_func.strip, class_details.keys, G.edges.data, method_name.startswith, .getfclass_method_called_method_name, file_detailsclasses.getcalled_class_name, file_detailsclasses.get, file_detailsclasses.items"
    },
    {
        "question": "Calls in function: (get_python_file_details) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "logging.warning, f.read, ast.parse, open, CodeVisitor, code_graph, visitor.analyze"
    },
    {
        "question": "Variables in function: (get_all_calls) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "calls"
    },
    {
        "question": "Variables in function: (get_control_flow) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "visitor, tree"
    },
    {
        "question": "Variables in function: (code_graph) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "G, edge_data, target_input, qualified_method_name, target_returns, edges, actual_method_name, nodes"
    },
    {
        "question": "Variables in function: (get_python_file_details) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "file_details, visitor, code, tree"
    },
    {
        "question": "Returns from function: (get_all_calls) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "calls"
    },
    {
        "question": "Returns from function: (get_control_flow) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "visitor.get_control_flow"
    },
    {
        "question": "Returns from function: (code_graph) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "edges: edges, nodes: nodes"
    },
    {
        "question": "Returns from function: (get_python_file_details) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "file_details, None"
    },
    {
        "question": "Methods in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "generic_visit, get_control_flow"
    },
    {
        "question": "Methods in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "analyze, visit_FunctionDef, visit_ClassDef, extract_details"
    },
    {
        "question": "Docstring of class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "it is added to the control_flow list. The method then calls the inherited generic_visit to continue visiting other nodes. get_control_flow: Returns a string representing the control flow of the program. The control flow keywords are joined in the order they were encountered during the AST visit., This class inherits from ast.NodeVisitor and is used to visit nodes in the AST Abstract Syntax Tree.It extracts control flow keywords to give a high-level understanding of the program flow. Attributes: node_type_to_keyword dict: A dictionary mapping AST node types to corresponding control flow keywords. control_flow list: A list storing the sequence of control flow keywords encountered in the AST. Methods: __init__: Initializes a new instance of the class, setting up the control flow list. generic_visitnode: Method to visit a node. If the node type corresponds to a control flow keyword"
    },
    {
        "question": "Docstring of class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "Visitor class for traversing an AST Abstract Syntax Tree and extracting details about the code. Attributes: code str: The source code. functionsDict: details about functions in the code. classes Dict: details about classes in the code. file_info Dict: details about the file. Methods: visit_FunctionDefnode: ast.FunctionDef -> None: Extract details about a function. visit_ClassDefnode: ast.ClassDef -> None: Extract details about a class. extract_detailsnode: ast.AST, node_type: str -> Dictstr, Unionstr, Liststr: Extract details about a node. analyzenode: ast.AST -> None: Populate file_info with details about the file."
    },
    {
        "question": "Attributes of class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "control_flow"
    },
    {
        "question": "Attributes of class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "file_info, current_class"
    },
    {
        "question": "Variables in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "keyword, node_type_to_keyword"
    },
    {
        "question": "Variables in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "attributes, node_walk, details"
    },
    {
        "question": "Inheritance of class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "ast.NodeVisitor"
    },
    {
        "question": "Inheritance of class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "ast.NodeVisitor"
    },
    {
        "question": "Inputs to method: (__init__) in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "self"
    },
    {
        "question": "Inputs to method: (generic_visit) in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "node, self"
    },
    {
        "question": "Inputs to method: (get_control_flow) in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "self"
    },
    {
        "question": "Inputs to method: (__init__) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "code, self"
    },
    {
        "question": "Inputs to method: (visit_FunctionDef) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "node, self"
    },
    {
        "question": "Inputs to method: (visit_ClassDef) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "node, self"
    },
    {
        "question": "Inputs to method: (extract_details) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "node, self, node_type"
    },
    {
        "question": "Inputs to method: (analyze) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "node, self"
    },
    {
        "question": "Calls in method: (generic_visit) in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "super, isinstance, super.generic_visit, type, self.node_type_to_keyword.get, self.control_flow.append"
    },
    {
        "question": "Calls in method: (get_control_flow) in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "-> .join"
    },
    {
        "question": "Calls in method: (visit_FunctionDef) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "self.extract_details, self.generic_visit"
    },
    {
        "question": "Calls in method: (visit_ClassDef) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "self.extract_details, self.generic_visit"
    },
    {
        "question": "Calls in method: (extract_details) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "ast.dump, details.update, isinstance, get_all_calls, ast.unparse, set, ast.get_docstring, list, ast.walk, any, self.classesself.current_classclass_attributes.extend"
    },
    {
        "question": "Calls in method: (analyze) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "ast.dump, self.visit, isinstance, get_control_flow, list, ast.walk, self.classes.keys, self.functions.keys"
    },
    {
        "question": "Returns from method: (get_control_flow) in class: (ControlFlowVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "-> .joinself.control_flow"
    },
    {
        "question": "Returns from method: (extract_details) in class: (CodeVisitor) in file: (py2dataset.py2dataset.get_python_file_details.py)?",
        "answer": "details"
    }
]